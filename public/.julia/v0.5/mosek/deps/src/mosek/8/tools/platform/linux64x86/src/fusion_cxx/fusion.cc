#include "monty.h"
#include "fusion_p.h"
std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val){switch (val){case StatusKey::Unknown: os << "StatusKey::Unknown"; break;case StatusKey::Basic: os << "StatusKey::Basic"; break;case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;case StatusKey::OnBound: os << "StatusKey::OnBound"; break;case StatusKey::Infinity: os << "StatusKey::Infinity"; break;default: os << "StatusKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val){switch (val){case SolutionType::Default: os << "SolutionType::Default"; break;case SolutionType::Basic: os << "SolutionType::Basic"; break;case SolutionType::Interior: os << "SolutionType::Interior"; break;case SolutionType::Integer: os << "SolutionType::Integer"; break;default: os << "SolutionType.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val){switch (val){case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;default: os << "ProblemStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val){switch (val){case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;case AccSolutionStatus::NearOptimal: os << "AccSolutionStatus::NearOptimal"; break;case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;default: os << "AccSolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val){switch (val){case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;case SolutionStatus::NearOptimal: os << "SolutionStatus::NearOptimal"; break;case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;case SolutionStatus::NearFeasible: os << "SolutionStatus::NearFeasible"; break;case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;case SolutionStatus::NearCertificate: os << "SolutionStatus::NearCertificate"; break;case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;default: os << "SolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val){switch (val){case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;default: os << "ObjectiveSense.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val){switch (val){case QConeKey::InQCone: os << "QConeKey::InQCone"; break;case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;default: os << "QConeKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val){switch (val){case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;default: os << "PSDKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val){switch (val){case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;case RelationKey::LessThan: os << "RelationKey::LessThan"; break;case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;case RelationKey::IsFree: os << "RelationKey::IsFree"; break;case RelationKey::InRange: os << "RelationKey::InRange"; break;default: os << "RelationKey.<invalid>"; break;}return os;}mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }mosek::fusion::p_Sort::p_Sort  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Sort::argTransposeSort  ( std::shared_ptr< monty::ndarray< long long,1 > > _142,    std::shared_ptr< monty::ndarray< long long,1 > > _143,    int _144,    int _145,    int _146,    std::shared_ptr< monty::ndarray< long long,1 > > _147) { mosek::fusion::p_Sort::argTransposeSort(_142,_143,_144,_145,_146,_147); }void mosek::fusion::p_Sort::argTransposeSort( std::shared_ptr< monty::ndarray< long long,1 > > _142,std::shared_ptr< monty::ndarray< long long,1 > > _143,int _144,int _145,int _146,std::shared_ptr< monty::ndarray< long long,1 > > _147){ int _7376 = (int)0; int _7377 = ((_144 * _146) + (int)1); for (int _148 = _7376;_148<_7377;++_148){ (((*_143)(_148)) = (int)0); }int _7378 = (int)0; int _7379 = (int)((_147)->size(0)); for (int _149 = _7378;_149<_7379;++_149){ ( ++ ((*_143)(((((((*_147)(((*_142)(_149)))) / (_145 * _146)) * _146) + (((*_147)(((*_142)(_149)))) % _146)) + (int)1))) ); }int _7380 = (int)0; int _7381 = (_144 * _146); for (int _150 = _7380;_150<_7381;++_150){ (((*_143)((_150 + (int)1))) = (((*_143)((_150 + (int)1))) + ((*_143)(_150)))); }std::shared_ptr< monty::ndarray< long long,1 > > _151 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7382; for (int _152=(int)0, _7383=(int)((_142)->size(0)); _152 < _7383;++_152)_7382.push_back(((*_142)(_152))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7382.size()),_7382.begin(),_7382.end())); })(); long long _7384 = (long long)0; long long _7385 = (long long)((_147)->size(0)); for (long long _153 = _7384;_153<_7385;++_153){ long long _154 = (((((*_147)(((*_151)(_153)))) / (_145 * _146)) * _146) + (((*_147)(((*_151)(_153)))) % _146)); (((*_142)(((*_143)(_154)))) = _153); ( ++ ((*_143)(_154)) ); }}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _155,    std::shared_ptr< monty::ndarray< long long,1 > > _156) { mosek::fusion::p_Sort::argsort(_155,_156); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _155,std::shared_ptr< monty::ndarray< long long,1 > > _156){ ::mosek::fusion::p_Sort::argsort(_155,_156,(long long)((int)0),(long long)((int)((_155)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _157,    std::shared_ptr< monty::ndarray< int,1 > > _158) { mosek::fusion::p_Sort::argsort(_157,_158); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _157,std::shared_ptr< monty::ndarray< int,1 > > _158){ ::mosek::fusion::p_Sort::argsort(_157,_158,(long long)((int)0),(long long)((int)((_157)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _159,    std::shared_ptr< monty::ndarray< long long,1 > > _160,    std::shared_ptr< monty::ndarray< long long,1 > > _161) { mosek::fusion::p_Sort::argsort(_159,_160,_161); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _159,std::shared_ptr< monty::ndarray< long long,1 > > _160,std::shared_ptr< monty::ndarray< long long,1 > > _161){ ::mosek::fusion::p_Sort::argsort(_159,_160,_161,(long long)((int)0),(long long)((int)((_159)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _162,    std::shared_ptr< monty::ndarray< int,1 > > _163,    std::shared_ptr< monty::ndarray< int,1 > > _164) { mosek::fusion::p_Sort::argsort(_162,_163,_164); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _162,std::shared_ptr< monty::ndarray< int,1 > > _163,std::shared_ptr< monty::ndarray< int,1 > > _164){ ::mosek::fusion::p_Sort::argsort(_162,_163,_164,(long long)((int)0),(long long)((int)((_162)->size(0))),false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _165,    std::shared_ptr< monty::ndarray< long long,1 > > _166,    long long _167,    long long _168) { mosek::fusion::p_Sort::argsort(_165,_166,_167,_168); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _165,std::shared_ptr< monty::ndarray< long long,1 > > _166,long long _167,long long _168){ ::mosek::fusion::p_Sort::argsort(_165,_166,_167,_168,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _169,    std::shared_ptr< monty::ndarray< int,1 > > _170,    long long _171,    long long _172) { mosek::fusion::p_Sort::argsort(_169,_170,_171,_172); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _169,std::shared_ptr< monty::ndarray< int,1 > > _170,long long _171,long long _172){ ::mosek::fusion::p_Sort::argsort(_169,_170,_171,_172,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _173,    std::shared_ptr< monty::ndarray< long long,1 > > _174,    std::shared_ptr< monty::ndarray< long long,1 > > _175,    long long _176,    long long _177) { mosek::fusion::p_Sort::argsort(_173,_174,_175,_176,_177); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _173,std::shared_ptr< monty::ndarray< long long,1 > > _174,std::shared_ptr< monty::ndarray< long long,1 > > _175,long long _176,long long _177){ ::mosek::fusion::p_Sort::argsort(_173,_174,_175,_176,_177,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _178,    std::shared_ptr< monty::ndarray< int,1 > > _179,    std::shared_ptr< monty::ndarray< int,1 > > _180,    long long _181,    long long _182) { mosek::fusion::p_Sort::argsort(_178,_179,_180,_181,_182); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _178,std::shared_ptr< monty::ndarray< int,1 > > _179,std::shared_ptr< monty::ndarray< int,1 > > _180,long long _181,long long _182){ ::mosek::fusion::p_Sort::argsort(_178,_179,_180,_181,_182,false); }void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _183,    std::shared_ptr< monty::ndarray< long long,1 > > _184,    long long _185,    long long _186,    bool _187) { mosek::fusion::p_Sort::argsort(_183,_184,_185,_186,_187); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _183,std::shared_ptr< monty::ndarray< long long,1 > > _184,long long _185,long long _186,bool _187){ if (((! _187) || ((_186 - _185) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_183,_184,_185,_186); }else if ((! ::mosek::fusion::p_Sort::issorted(_183,_184,_185,_186,_187))){ std::shared_ptr< monty::ndarray< long long,1 > > _188 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4))); int _189 = (int)2; ::mosek::fusion::p_Sort::getminmax(_183,_184,nullptr,_185,_186,_188); if (((((*_188)((int)1)) - ((*_188)((int)0))) < (_189 * (_186 - _185)))){ ::mosek::fusion::p_Sort::argbucketsort(_183,_184,_185,_186,((*_188)((int)0)),((*_188)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_183,_184,_185,_186); }}else {}}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _190,    std::shared_ptr< monty::ndarray< int,1 > > _191,    long long _192,    long long _193,    bool _194) { mosek::fusion::p_Sort::argsort(_190,_191,_192,_193,_194); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _190,std::shared_ptr< monty::ndarray< int,1 > > _191,long long _192,long long _193,bool _194){ if (((! _194) || ((_193 - _192) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_190,_191,_192,_193); }else if ((! ::mosek::fusion::p_Sort::issorted(_190,_191,_192,_193,_194))){ std::shared_ptr< monty::ndarray< int,1 > > _195 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4))); int _196 = (int)2; ::mosek::fusion::p_Sort::getminmax(_190,_191,nullptr,_192,_193,_195); if (((((*_195)((int)1)) - ((*_195)((int)0))) < (_196 * (_193 - _192)))){ ::mosek::fusion::p_Sort::argbucketsort(_190,_191,_192,_193,((*_195)((int)0)),((*_195)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_190,_191,_192,_193); }}else {}}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _197,    std::shared_ptr< monty::ndarray< long long,1 > > _198,    std::shared_ptr< monty::ndarray< long long,1 > > _199,    long long _200,    long long _201,    bool _202) { mosek::fusion::p_Sort::argsort(_197,_198,_199,_200,_201,_202); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _197,std::shared_ptr< monty::ndarray< long long,1 > > _198,std::shared_ptr< monty::ndarray< long long,1 > > _199,long long _200,long long _201,bool _202){ if (((! _202) || ((_201 - _200) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_197,_198,_199,_200,_201); }else if ((! ::mosek::fusion::p_Sort::issorted(_197,_198,_199,_200,_201,_202))){ std::shared_ptr< monty::ndarray< long long,1 > > _203 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4))); int _204 = (int)2; ::mosek::fusion::p_Sort::getminmax(_197,_198,_199,_200,_201,_203); if ((((((*_203)((int)1)) - ((*_203)((int)0))) < (_204 * (_201 - _200))) && ((((*_203)((int)3)) - ((*_203)((int)2))) < (_204 * (_201 - _200))))){ ::mosek::fusion::p_Sort::argbucketsort(_197,_199,_200,_201,((*_203)((int)2)),((*_203)((int)3))); ::mosek::fusion::p_Sort::argbucketsort(_197,_198,_200,_201,((*_203)((int)0)),((*_203)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_197,_198,_199,_200,_201); }}else {}}void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _205,    std::shared_ptr< monty::ndarray< int,1 > > _206,    std::shared_ptr< monty::ndarray< int,1 > > _207,    long long _208,    long long _209,    bool _210) { mosek::fusion::p_Sort::argsort(_205,_206,_207,_208,_209,_210); }void mosek::fusion::p_Sort::argsort( std::shared_ptr< monty::ndarray< long long,1 > > _205,std::shared_ptr< monty::ndarray< int,1 > > _206,std::shared_ptr< monty::ndarray< int,1 > > _207,long long _208,long long _209,bool _210){ if (((! _210) || ((_209 - _208) < (int)16))){ ::mosek::fusion::Utils::Tools::argsort(_205,_206,_207,_208,_209); }else if ((! ::mosek::fusion::p_Sort::issorted(_205,_206,_207,_208,_209,_210))){ std::shared_ptr< monty::ndarray< int,1 > > _211 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4))); int _212 = (int)2; ::mosek::fusion::p_Sort::getminmax(_205,_206,_207,_208,_209,_211); if ((((((*_211)((int)1)) - ((*_211)((int)0))) < (_212 * (_209 - _208))) && ((((*_211)((int)3)) - ((*_211)((int)2))) < (_212 * (_209 - _208))))){ ::mosek::fusion::p_Sort::argbucketsort(_205,_207,_208,_209,((*_211)((int)2)),((*_211)((int)3))); ::mosek::fusion::p_Sort::argbucketsort(_205,_206,_208,_209,((*_211)((int)0)),((*_211)((int)1))); }else { ::mosek::fusion::Utils::Tools::argsort(_205,_206,_207,_208,_209); }}else {}}void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _213,    std::shared_ptr< monty::ndarray< long long,1 > > _214,    long long _215,    long long _216,    long long _217,    long long _218) { mosek::fusion::p_Sort::argbucketsort(_213,_214,_215,_216,_217,_218); }void mosek::fusion::p_Sort::argbucketsort( std::shared_ptr< monty::ndarray< long long,1 > > _213,std::shared_ptr< monty::ndarray< long long,1 > > _214,long long _215,long long _216,long long _217,long long _218){ ::mosek::fusion::Utils::Tools::bucketsort(_213,_215,_216,_214,_217,_218); }void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _219,    std::shared_ptr< monty::ndarray< int,1 > > _220,    long long _221,    long long _222,    int _223,    int _224) { mosek::fusion::p_Sort::argbucketsort(_219,_220,_221,_222,_223,_224); }void mosek::fusion::p_Sort::argbucketsort( std::shared_ptr< monty::ndarray< long long,1 > > _219,std::shared_ptr< monty::ndarray< int,1 > > _220,long long _221,long long _222,int _223,int _224){ ::mosek::fusion::Utils::Tools::bucketsort(_219,_221,_222,_220,_223,_224); }void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _225,    std::shared_ptr< monty::ndarray< long long,1 > > _226,    std::shared_ptr< monty::ndarray< long long,1 > > _227,    long long _228,    long long _229,    std::shared_ptr< monty::ndarray< long long,1 > > _230) { mosek::fusion::p_Sort::getminmax(_225,_226,_227,_228,_229,_230); }void mosek::fusion::p_Sort::getminmax( std::shared_ptr< monty::ndarray< long long,1 > > _225,std::shared_ptr< monty::ndarray< long long,1 > > _226,std::shared_ptr< monty::ndarray< long long,1 > > _227,long long _228,long long _229,std::shared_ptr< monty::ndarray< long long,1 > > _230){ (((*_230)((int)0)) = ((*_226)(((*_225)(_228))))); (((*_230)((int)1)) = ((*_226)(((*_225)(_228))))); long long _7386 = (_228 + (int)1); long long _7387 = _229; for (long long _231 = _7386;_231<_7387;++_231){ if ((((*_230)((int)0)) > ((*_226)(((*_225)(_231)))))){ (((*_230)((int)0)) = ((*_226)(((*_225)(_231))))); }else {}if ((((*_230)((int)1)) < ((*_226)(((*_225)(_231)))))){ (((*_230)((int)1)) = ((*_226)(((*_225)(_231))))); }else {}}if (_227){ (((*_230)((int)2)) = ((*_227)(((*_225)(_228))))); (((*_230)((int)3)) = ((*_227)(((*_225)(_228))))); long long _7388 = (_228 + (int)1); long long _7389 = _229; for (long long _232 = _7388;_232<_7389;++_232){ if ((((*_230)((int)2)) > ((*_227)(((*_225)(_232)))))){ (((*_230)((int)2)) = ((*_227)(((*_225)(_232))))); }else {}if ((((*_230)((int)3)) < ((*_227)(((*_225)(_232)))))){ (((*_230)((int)3)) = ((*_227)(((*_225)(_232))))); }else {}}}else {}}void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _233,    std::shared_ptr< monty::ndarray< int,1 > > _234,    std::shared_ptr< monty::ndarray< int,1 > > _235,    long long _236,    long long _237,    std::shared_ptr< monty::ndarray< int,1 > > _238) { mosek::fusion::p_Sort::getminmax(_233,_234,_235,_236,_237,_238); }void mosek::fusion::p_Sort::getminmax( std::shared_ptr< monty::ndarray< long long,1 > > _233,std::shared_ptr< monty::ndarray< int,1 > > _234,std::shared_ptr< monty::ndarray< int,1 > > _235,long long _236,long long _237,std::shared_ptr< monty::ndarray< int,1 > > _238){ (((*_238)((int)0)) = ((*_234)(((*_233)(_236))))); (((*_238)((int)1)) = ((*_234)(((*_233)(_236))))); long long _7390 = (_236 + (int)1); long long _7391 = _237; for (long long _239 = _7390;_239<_7391;++_239){ if ((((*_238)((int)0)) > ((*_234)(((*_233)(_239)))))){ (((*_238)((int)0)) = ((*_234)(((*_233)(_239))))); }else {}if ((((*_238)((int)1)) < ((*_234)(((*_233)(_239)))))){ (((*_238)((int)1)) = ((*_234)(((*_233)(_239))))); }else {}}if (_235){ (((*_238)((int)2)) = ((*_235)(((*_233)(_236))))); (((*_238)((int)3)) = ((*_235)(((*_233)(_236))))); long long _7392 = (_236 + (int)1); long long _7393 = _237; for (long long _240 = _7392;_240<_7393;++_240){ if ((((*_238)((int)2)) > ((*_235)(((*_233)(_240)))))){ (((*_238)((int)2)) = ((*_235)(((*_233)(_240))))); }else {}if ((((*_238)((int)3)) < ((*_235)(((*_233)(_240)))))){ (((*_238)((int)3)) = ((*_235)(((*_233)(_240))))); }else {}}}else {}}bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _241,    std::shared_ptr< monty::ndarray< long long,1 > > _242,    long long _243,    long long _244,    bool _245) { return mosek::fusion::p_Sort::issorted(_241,_242,_243,_244,_245); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _241,std::shared_ptr< monty::ndarray< long long,1 > > _242,long long _243,long long _244,bool _245){ long long _7394 = _243; long long _7395 = (_244 - (int)1); for (long long _246 = _7394;_246<_7395;++_246){ if ((((*_242)(((*_241)(_246)))) > ((*_242)(((*_241)((_246 + (int)1))))))){ return false; }else {}}return true; }bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _247,    std::shared_ptr< monty::ndarray< int,1 > > _248,    long long _249,    long long _250,    bool _251) { return mosek::fusion::p_Sort::issorted(_247,_248,_249,_250,_251); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _247,std::shared_ptr< monty::ndarray< int,1 > > _248,long long _249,long long _250,bool _251){ long long _7396 = _249; long long _7397 = (_250 - (int)1); for (long long _252 = _7396;_252<_7397;++_252){ if ((((*_248)(((*_247)(_252)))) > ((*_248)(((*_247)((_252 + (int)1))))))){ return false; }else {}}return true; }bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _253,    std::shared_ptr< monty::ndarray< long long,1 > > _254,    std::shared_ptr< monty::ndarray< long long,1 > > _255,    long long _256,    long long _257,    bool _258) { return mosek::fusion::p_Sort::issorted(_253,_254,_255,_256,_257,_258); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _253,std::shared_ptr< monty::ndarray< long long,1 > > _254,std::shared_ptr< monty::ndarray< long long,1 > > _255,long long _256,long long _257,bool _258){ long long _7398 = _256; long long _7399 = (_257 - (int)1); for (long long _259 = _7398;_259<_7399;++_259){ if (((((*_254)(((*_253)(_259)))) > ((*_254)(((*_253)((_259 + (int)1)))))) || ((((*_254)(((*_253)((_259 + (int)1))))) == ((*_254)(((*_253)(_259))))) && (((*_255)(((*_253)(_259)))) > ((*_255)(((*_253)((_259 + (int)1))))))))){ return false; }else {}}return true; }bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _260,    std::shared_ptr< monty::ndarray< int,1 > > _261,    std::shared_ptr< monty::ndarray< int,1 > > _262,    long long _263,    long long _264,    bool _265) { return mosek::fusion::p_Sort::issorted(_260,_261,_262,_263,_264,_265); }bool mosek::fusion::p_Sort::issorted( std::shared_ptr< monty::ndarray< long long,1 > > _260,std::shared_ptr< monty::ndarray< int,1 > > _261,std::shared_ptr< monty::ndarray< int,1 > > _262,long long _263,long long _264,bool _265){ long long _7400 = _263; long long _7401 = (_264 - (int)1); for (long long _266 = _7400;_266<_7401;++_266){ if (((((*_261)(((*_260)(_266)))) > ((*_261)(((*_260)((_266 + (int)1)))))) || ((((*_261)(((*_260)(_266)))) == ((*_261)(((*_260)((_266 + (int)1)))))) && (((*_262)(((*_260)(_266)))) > ((*_262)(((*_260)((_266 + (int)1))))))))){ return false; }else {}}return true; }void mosek::fusion::p_Sort::destroy(){}void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }mosek::fusion::p_IndexCounter::p_IndexCounter  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (monty::rc_ptr< ::mosek::fusion::Set > _267){ return new mosek::fusion::IndexCounter(_267); }mosek::fusion::IndexCounter::IndexCounter  (monty::rc_ptr< ::mosek::fusion::Set > _267) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_267); }void mosek::fusion::p_IndexCounter::_initialize  (monty::rc_ptr< ::mosek::fusion::Set > _267){monty::rc_reserve __reserve_this(_pubthis); { { (n = mosek::fusion::p_Set::_get_impl(_267)->nd); (ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); (start = (long long)0); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7402 = (int)0; int _7403 = n; for (int _268 = _7402;_268<_7403;++_268){ (((*strides)(_268)) = _267->stride(_268)); }(dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); int _7404 = (int)0; int _7405 = n; for (int _269 = _7404;_269<_7405;++_269){ (((*dims)(_269)) = _267->dim(_269)); }}}}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _270,    std::shared_ptr< monty::ndarray< int,1 > > _271,    monty::rc_ptr< ::mosek::fusion::Set > _272){ return new mosek::fusion::IndexCounter(_270,_271,_272); }mosek::fusion::IndexCounter::IndexCounter  (long long _270,    std::shared_ptr< monty::ndarray< int,1 > > _271,    monty::rc_ptr< ::mosek::fusion::Set > _272) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_270,_271,_272); }void mosek::fusion::p_IndexCounter::_initialize  (long long _270,    std::shared_ptr< monty::ndarray< int,1 > > _271,    monty::rc_ptr< ::mosek::fusion::Set > _272){monty::rc_reserve __reserve_this(_pubthis); { { (n = (int)((_271)->size(0))); (ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7406 = (int)0; int _7407 = n; for (int _273 = _7406;_273<_7407;++_273){ (((*st)(_273)) = _270); }(strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7408 = (int)0; int _7409 = n; for (int _274 = _7408;_274<_7409;++_274){ (((*strides)(_274)) = _272->stride(_274)); }(dims = _271); (start = _270); }}}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _275,    std::shared_ptr< monty::ndarray< int,1 > > _276,    std::shared_ptr< monty::ndarray< long long,1 > > _277){ return new mosek::fusion::IndexCounter(_275,_276,_277); }mosek::fusion::IndexCounter::IndexCounter  (long long _275,    std::shared_ptr< monty::ndarray< int,1 > > _276,    std::shared_ptr< monty::ndarray< long long,1 > > _277) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_275,_276,_277); }void mosek::fusion::p_IndexCounter::_initialize  (long long _275,    std::shared_ptr< monty::ndarray< int,1 > > _276,    std::shared_ptr< monty::ndarray< long long,1 > > _277){monty::rc_reserve __reserve_this(_pubthis); { { (n = (int)((_276)->size(0))); (ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)))); (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7410 = (int)0; int _7411 = n; for (int _278 = _7410;_278<_7411;++_278){ (((*st)(_278)) = _275); }(strides = _277); (dims = _276); (start = _275); }}}bool mosek::fusion::IndexCounter::atEnd  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }bool mosek::fusion::p_IndexCounter::atEnd( ){ return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1)))); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::IndexCounter::getIndex  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_IndexCounter::getIndex( ){ return ii; }long long mosek::fusion::IndexCounter::next  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }long long mosek::fusion::p_IndexCounter::next( ){ long long _279 = _pubthis->get(); _pubthis->inc(); return _279; }long long mosek::fusion::IndexCounter::get  ( ) { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }long long mosek::fusion::p_IndexCounter::get( ){ return ((*st)((int)0)); }void mosek::fusion::IndexCounter::inc  ( ) { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }void mosek::fusion::p_IndexCounter::inc( ){ ( ++ ((*ii)((int)0)) ); (((*st)((int)0)) = (((*st)((int)0)) + ((*strides)((n - (int)1))))); int _280; { (_280 = (int)0); for (;((_280 < (n - (int)1)) && (((*ii)(_280)) == ((*dims)(((n - _280) - (int)1)))));( ++ _280 )){ (((*ii)(_280)) = (int)0); ( ++ ((*ii)((_280 + (int)1))) ); (((*st)((_280 + (int)1))) = (((*st)((_280 + (int)1))) + ((*strides)(((n - _280) - (int)2))))); }}int _7412 = (int)0; int _7413 = _280; for (int _281 = _7412;_281<_7413;++_281){ (((*st)(_281)) = ((*st)(_280))); }}void mosek::fusion::IndexCounter::reset  ( ) { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }void mosek::fusion::p_IndexCounter::reset( ){ (st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)))); int _7414 = (int)0; int _7415 = n; for (int _282 = _7414;_282<_7415;++_282){ (((*st)(_282)) = start); }}void mosek::fusion::p_IndexCounter::destroy(){dims.reset();strides.reset();st.reset();ii.reset();}void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }mosek::fusion::p_CommonTools::p_CommonTools  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::CommonTools::ndIncr  ( std::shared_ptr< monty::ndarray< int,1 > > _283,    std::shared_ptr< monty::ndarray< int,1 > > _284,    std::shared_ptr< monty::ndarray< int,1 > > _285) { mosek::fusion::p_CommonTools::ndIncr(_283,_284,_285); }void mosek::fusion::p_CommonTools::ndIncr( std::shared_ptr< monty::ndarray< int,1 > > _283,std::shared_ptr< monty::ndarray< int,1 > > _284,std::shared_ptr< monty::ndarray< int,1 > > _285){ int _286 = ((int)((_283)->size(0)) - (int)1); ( ++ ((*_283)(_286)) ); while (((_286 > (int)0) && (((*_283)(_286)) >= ((*_285)(_286))))) { (((*_283)(_286)) = ((*_284)(_286))); ( ++ ((*_283)((_286 - (int)1))) ); }}void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _287,    std::shared_ptr< monty::ndarray< int,1 > > _288,    std::shared_ptr< monty::ndarray< double,1 > > _289,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _290,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _291,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _292,    long long _293,    int _294,    int _295) { mosek::fusion::p_CommonTools::transposeTriplets(_287,_288,_289,_290,_291,_292,_293,_294,_295); }void mosek::fusion::p_CommonTools::transposeTriplets( std::shared_ptr< monty::ndarray< int,1 > > _287,std::shared_ptr< monty::ndarray< int,1 > > _288,std::shared_ptr< monty::ndarray< double,1 > > _289,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _290,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _291,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _292,long long _293,int _294,int _295){ std::shared_ptr< monty::ndarray< long long,1 > > _296 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_294 + (int)2)))); std::shared_ptr< monty::ndarray< long long,1 > > _297 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_295 + (int)2)))); { long long _298 = (long long)0; for (;(_298 < _293);( ++ _298 )){ (((*_297)((((*_288)(_298)) + (int)2))) = (((*_297)((((*_288)(_298)) + (int)2))) + (int)1)); (((*_296)((((*_287)(_298)) + (int)2))) = (((*_296)((((*_287)(_298)) + (int)2))) + (int)1)); }}{ int _299 = (int)1; for (;(_299 < _294);( ++ _299 )){ (((*_296)((_299 + (int)1))) = (((*_296)((_299 + (int)1))) + ((*_296)(_299)))); }}{ int _300 = (int)1; for (;(_300 < _295);( ++ _300 )){ (((*_297)((_300 + (int)1))) = (((*_297)((_300 + (int)1))) + ((*_297)(_300)))); }}std::shared_ptr< monty::ndarray< long long,1 > > _301 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_293))); std::shared_ptr< monty::ndarray< long long,1 > > _302 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_293))); std::shared_ptr< monty::ndarray< double,1 > > _303 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_293))); int _7416 = (int)0; int _7417 = _294; for (int _304 = _7416;_304<_7417;++_304){ { long long _305 = ((*_296)(_304)); for (;(_305 < ((*_296)((_304 + (int)1))));( ++ _305 )){ int _306 = ((*_288)(_305)); long long _307 = ((*_297)(_306)); (((*_301)(_307)) = _304); (((*_302)(_307)) = _306); (((*_303)(_307)) = ((*_289)(_305))); (((*_297)(_306)) = (_307 + (int)1)); }}}(((*_290)((int)0)) = _302); (((*_291)((int)0)) = _301); (((*_292)((int)0)) = _303); }void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _308,    std::shared_ptr< monty::ndarray< int,1 > > _309,    std::shared_ptr< monty::ndarray< double,1 > > _310,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _311,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _312,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _313,    long long _314,    int _315,    int _316) { mosek::fusion::p_CommonTools::transposeTriplets(_308,_309,_310,_311,_312,_313,_314,_315,_316); }void mosek::fusion::p_CommonTools::transposeTriplets( std::shared_ptr< monty::ndarray< int,1 > > _308,std::shared_ptr< monty::ndarray< int,1 > > _309,std::shared_ptr< monty::ndarray< double,1 > > _310,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _311,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _312,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _313,long long _314,int _315,int _316){ std::shared_ptr< monty::ndarray< long long,1 > > _317 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_315 + (int)2)))); std::shared_ptr< monty::ndarray< long long,1 > > _318 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_316 + (int)2)))); { long long _319 = (long long)0; for (;(_319 < _314);( ++ _319 )){ (((*_318)((((*_309)(_319)) + (int)2))) = (((*_318)((((*_309)(_319)) + (int)2))) + (int)1)); (((*_317)((((*_308)(_319)) + (int)2))) = (((*_317)((((*_308)(_319)) + (int)2))) + (int)1)); }}{ int _320 = (int)1; for (;(_320 < _315);( ++ _320 )){ (((*_317)((_320 + (int)1))) = (((*_317)((_320 + (int)1))) + ((*_317)(_320)))); }}{ int _321 = (int)1; for (;(_321 < _316);( ++ _321 )){ (((*_318)((_321 + (int)1))) = (((*_318)((_321 + (int)1))) + ((*_318)(_321)))); }}std::shared_ptr< monty::ndarray< int,1 > > _322 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_314))); std::shared_ptr< monty::ndarray< int,1 > > _323 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_314))); std::shared_ptr< monty::ndarray< double,1 > > _324 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_314))); { int _325 = (int)0; for (;(_325 < _315);( ++ _325 )){ long long _7418 = ((*_317)(_325)); long long _7419 = ((*_317)((_325 + (int)1))); for (long long _326 = _7418;_326<_7419;++_326){ int _327 = ((*_309)(_326)); long long _328 = ((*_318)(_327)); (((*_322)(_328)) = _325); (((*_323)(_328)) = _327); (((*_324)(_328)) = ((*_310)(_326))); (((*_318)(_327)) = (_328 + (int)1)); }}}(((*_311)((int)0)) = _323); (((*_312)((int)0)) = _322); (((*_313)((int)0)) = _324); }void mosek::fusion::CommonTools::tripletSort  ( std::shared_ptr< monty::ndarray< int,1 > > _329,    std::shared_ptr< monty::ndarray< int,1 > > _330,    std::shared_ptr< monty::ndarray< double,1 > > _331,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _332,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _333,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _334,    long long _335,    int _336,    int _337) { mosek::fusion::p_CommonTools::tripletSort(_329,_330,_331,_332,_333,_334,_335,_336,_337); }void mosek::fusion::p_CommonTools::tripletSort( std::shared_ptr< monty::ndarray< int,1 > > _329,std::shared_ptr< monty::ndarray< int,1 > > _330,std::shared_ptr< monty::ndarray< double,1 > > _331,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _332,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _333,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _334,long long _335,int _336,int _337){ std::shared_ptr< monty::ndarray< int,1 > > _338 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_335))); std::shared_ptr< monty::ndarray< long long,1 > > _339 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_337 + (int)2)))); long long _7420 = (long long)0; long long _7421 = _335; for (long long _340 = _7420;_340<_7421;++_340){ (((*_339)((((*_330)(_340)) + (int)2))) = (((*_339)((((*_330)(_340)) + (int)2))) + (int)1)); }int _7422 = (int)1; int _7423 = _337; for (int _341 = _7422;_341<_7423;++_341){ (((*_339)((_341 + (int)1))) = (((*_339)((_341 + (int)1))) + ((*_339)(_341)))); }int _7424 = (int)0; int _7425 = (int)_335; for (int _342 = _7424;_342<_7425;++_342){ int _343 = ((*_330)(_342)); (((*_338)(((*_339)((_343 + (int)1))))) = _342); (((*_339)((_343 + (int)1))) = (((*_339)((_343 + (int)1))) + (int)1)); }std::shared_ptr< monty::ndarray< long long,1 > > _344 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_336 + (int)2)))); std::shared_ptr< monty::ndarray< int,1 > > _345 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_335))); { int _346 = (int)0; for (;(_346 < _335);( ++ _346 )){ (((*_344)((((*_329)(_346)) + (int)2))) = (((*_344)((((*_329)(_346)) + (int)2))) + (int)1)); }}{ int _347 = (int)1; for (;(_347 < _336);( ++ _347 )){ (((*_344)((_347 + (int)1))) = (((*_344)((_347 + (int)1))) + ((*_344)(_347)))); }}{ int _348 = (int)0; for (;(_348 < _337);( ++ _348 )){ { long long _349 = ((*_339)(_348)); for (;(_349 < ((*_339)((_348 + (int)1))));( ++ _349 )){ int _350 = ((*_329)(((*_338)(_349)))); (((*_345)(((*_344)((_350 + (int)1))))) = ((*_338)(_349))); (((*_344)((_350 + (int)1))) = (((*_344)((_350 + (int)1))) + (int)1)); }}}}int _351 = (int)1; { int _352 = ((*_329)(((*_345)((int)0)))); int _353 = ((*_330)(((*_345)((int)0)))); { int _354 = (int)1; for (;(_354 < _335);( ++ _354 )){ int _355 = ((*_345)(_354)); if (((_352 != ((*_329)(_355))) || (_353 != ((*_330)(_355))))){ (_352 = ((*_329)(_355))); (_353 = ((*_330)(_355))); ( ++ _351 ); }else {}}}}std::shared_ptr< monty::ndarray< int,1 > > _356 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_351))); std::shared_ptr< monty::ndarray< int,1 > > _357 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_351))); std::shared_ptr< monty::ndarray< double,1 > > _358 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_351))); { int _359 = ((*_345)((int)0)); (((*_356)((int)0)) = ((*_329)(_359))); (((*_357)((int)0)) = ((*_330)(_359))); (((*_358)((int)0)) = ((*_331)(_359))); }int _360 = (int)1; int _7426 = (int)1; long long _7427 = _335; for (long long _361 = _7426;_361<_7427;++_361){ int _362 = ((*_345)(_361)); if (((((*_356)((_360 - (int)1))) == ((*_329)(_362))) && (((*_357)((_360 - (int)1))) == ((*_330)(_362))))){ (((*_358)((_360 - (int)1))) = (((*_358)((_360 - (int)1))) + ((*_331)(_362)))); }else { (((*_356)(_360)) = ((*_329)(_362))); (((*_357)(_360)) = ((*_330)(_362))); (((*_358)(_360)) = ((*_331)(_362))); ( ++ _360 ); }}(((*_332)((int)0)) = _356); (((*_333)((int)0)) = _357); (((*_334)((int)0)) = _358); }void mosek::fusion::CommonTools::argMSort  ( std::shared_ptr< monty::ndarray< int,1 > > _363,    std::shared_ptr< monty::ndarray< int,1 > > _364) { mosek::fusion::p_CommonTools::argMSort(_363,_364); }void mosek::fusion::p_CommonTools::argMSort( std::shared_ptr< monty::ndarray< int,1 > > _363,std::shared_ptr< monty::ndarray< int,1 > > _364){ std::shared_ptr< monty::ndarray< int,1 > > _365 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_363)->size(0))))); bool _366 = false; { int _367 = (int)1; for (;(_367 < (int)((_363)->size(0)));(_367 *= (int)2)){ (_366 = (! _366)); int _7428 = (int)0; int _7429 = (int)((_363)->size(0)); int _7430 = (_367 * (int)2); for (int _368 = _7428;_368<_7429;_368 += _7430){ if (_366){ ::mosek::fusion::p_CommonTools::mergeInto(_363,_365,_364,_368,(_368 + _367),(_368 + ((int)2 * _367))); }else { ::mosek::fusion::p_CommonTools::mergeInto(_365,_363,_364,_368,(_368 + _367),(_368 + ((int)2 * _367))); }}}}if (_366){ ::mosek::fusion::Utils::Tools::arraycopy(_365,(int)0,_363,(int)0,(int)((_363)->size(0))); }else {}}void mosek::fusion::p_CommonTools::mergeInto( std::shared_ptr< monty::ndarray< int,1 > > _369,std::shared_ptr< monty::ndarray< int,1 > > _370,std::shared_ptr< monty::ndarray< int,1 > > _371,int _372,int _373,int _374){ int _375 = ([&]() -> int { if ( (_374 > (int)((_369)->size(0)))) return ((int)((_369)->size(0))); else return (_374); })(); int _376 = ([&]() -> int { if ( (_373 > _375)) return (_375); else return (_373); })(); if ((_376 == _375)){ ::mosek::fusion::Utils::Tools::arraycopy(_369,_372,_370,_372,(_376 - _372)); }else { int _377 = _372; int _378 = _376; int _379; { (_379 = _372); for (;((_377 < _376) && (_378 < _375));( ++ _379 )){ if ((((*_371)(((*_369)(_377)))) < ((*_371)(((*_369)(_378)))))){ (((*_370)(_379)) = ((*_369)(_377))); ( ++ _377 ); }else { (((*_370)(_379)) = ((*_369)(_378))); ( ++ _378 ); }}}while ((_377 < _376)) { (((*_370)(_379)) = ((*_369)(_377))); ( ++ _377 ); ( ++ _379 ); }while ((_378 < _375)) { (((*_370)(_379)) = ((*_369)(_378))); ( ++ _378 ); ( ++ _379 ); }}}void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _380,    std::shared_ptr< monty::ndarray< long long,1 > > _381,    std::shared_ptr< monty::ndarray< long long,1 > > _382,    long long _383,    long long _384) { mosek::fusion::p_CommonTools::argQsort(_380,_381,_382,_383,_384); }void mosek::fusion::p_CommonTools::argQsort( std::shared_ptr< monty::ndarray< long long,1 > > _380,std::shared_ptr< monty::ndarray< long long,1 > > _381,std::shared_ptr< monty::ndarray< long long,1 > > _382,long long _383,long long _384){ if (! _382){ ::mosek::fusion::Utils::Tools::argsort(_380,_381,_383,_384); }else { ::mosek::fusion::Utils::Tools::argsort(_380,_381,_382,_383,_384); }}void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _385,    std::shared_ptr< monty::ndarray< int,1 > > _386,    std::shared_ptr< monty::ndarray< int,1 > > _387,    long long _388,    long long _389) { mosek::fusion::p_CommonTools::argQsort(_385,_386,_387,_388,_389); }void mosek::fusion::p_CommonTools::argQsort( std::shared_ptr< monty::ndarray< long long,1 > > _385,std::shared_ptr< monty::ndarray< int,1 > > _386,std::shared_ptr< monty::ndarray< int,1 > > _387,long long _388,long long _389){ if (! _387){ ::mosek::fusion::Utils::Tools::argsort(_385,_386,_388,_389); }else { ::mosek::fusion::Utils::Tools::argsort(_385,_386,_387,_388,_389); }}void mosek::fusion::p_CommonTools::destroy(){}void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_SolutionStruct::p_SolutionStruct  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (int _390,    int _391,    int _392,    int _393){ return new mosek::fusion::SolutionStruct(_390,_391,_392,_393); }mosek::fusion::SolutionStruct::SolutionStruct  (int _390,    int _391,    int _392,    int _393) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_390,_391,_392,_393); }void mosek::fusion::p_SolutionStruct::_initialize  (int _390,    int _391,    int _392,    int _393){monty::rc_reserve __reserve_this(_pubthis); { { (pobj = 0.0); (dobj = 0.0); (pstatus = ::mosek::fusion::SolutionStatus::Unknown); (dstatus = ::mosek::fusion::SolutionStatus::Unknown); (probstatus = ::mosek::fusion::ProblemStatus::Unknown); (sol_numvar = _390); (sol_numcon = _391); (sol_numcone = _392); (sol_numbarvar = _393); (slx = nullptr); (sux = nullptr); (xx = nullptr); (slc = nullptr); (suc = nullptr); (y = nullptr); (xc = nullptr); (snx = nullptr); (barx = nullptr); (bars = nullptr); if ((_390 > (int)0)){ (slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_390)))); (sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_390)))); (xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_390)))); }else {}if ((_393 > (int)0)){ (barx = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_393)))); (bars = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_393)))); }else {}if ((_391 > (int)0)){ (slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); (suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); (y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); (xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_391)))); }else {}if ((_392 > (int)0)){ (snx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_390)))); }else {}}}}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _394){ return new mosek::fusion::SolutionStruct(_394); }mosek::fusion::SolutionStruct::SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _394) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_394); }void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _394){monty::rc_reserve __reserve_this(_pubthis); { { (sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_394)->sol_numcon); (sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_394)->sol_numvar); (sol_numcone = mosek::fusion::p_SolutionStruct::_get_impl(_394)->sol_numcone); (sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_394)->sol_numbarvar); (pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_394)->pstatus); (dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_394)->dstatus); (probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_394)->probstatus); (pobj = mosek::fusion::p_SolutionStruct::_get_impl(_394)->pobj); (dobj = mosek::fusion::p_SolutionStruct::_get_impl(_394)->dobj); (xc = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_394)->xc) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_394)->xc)); else return (nullptr); })()); (xx = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_394)->xx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_394)->xx)); else return (nullptr); })()); (slc = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_394)->slc) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_394)->slx)); else return (nullptr); })()); (suc = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_394)->suc) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_394)->sux)); else return (nullptr); })()); (y = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_394)->y) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_394)->y)); else return (nullptr); })()); if (mosek::fusion::p_SolutionStruct::_get_impl(_394)->barx){ (barx = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< double,1 > > > _7431; for (int _395=(int)0, _7432=(int)((mosek::fusion::p_SolutionStruct::_get_impl(_394)->barx)->size(0)); _395 < _7432;++_395)_7431.push_back(::mosek::fusion::Utils::Tools::arraycopy(((*mosek::fusion::p_SolutionStruct::_get_impl(_394)->barx)(_395)))); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_7431.size()),_7431.begin(),_7431.end())); })()); }else { (barx = nullptr); }if (mosek::fusion::p_SolutionStruct::_get_impl(_394)->bars){ (bars = ([=]()->std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { std::vector< std::shared_ptr< monty::ndarray< double,1 > > > _7433; for (int _396=(int)0, _7434=(int)((mosek::fusion::p_SolutionStruct::_get_impl(_394)->bars)->size(0)); _396 < _7434;++_396)_7433.push_back(::mosek::fusion::Utils::Tools::arraycopy(((*mosek::fusion::p_SolutionStruct::_get_impl(_394)->bars)(_396)))); return std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_7433.size()),_7433.begin(),_7433.end())); })()); }else { (bars = nullptr); }(slx = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_394)->slx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_394)->slx)); else return (nullptr); })()); (sux = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_394)->sux) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_394)->sux)); else return (nullptr); })()); (snx = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_SolutionStruct::_get_impl(_394)->snx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_394)->snx)); else return (nullptr); })()); }}}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone  ( ) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->clone(); }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::clone( ){ return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(_pubthis); }void mosek::fusion::SolutionStruct::resize  ( int _397,    int _398,    int _399,    int _400) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_397,_398,_399,_400); }void mosek::fusion::p_SolutionStruct::resize( int _397,int _398,int _399,int _400){ if ((_400 < (int)0)){ }else if ((_400 <= sol_numbarvar)){ (sol_numbarvar = _400); }else if ((_397 <= (int)((barx)->size(0)))){ int _7435 = sol_numvar; int _7436 = _397; for (int _401 = _7435;_401<_7436;++_401){ (((*barx)(_401)) = nullptr); (((*bars)(_401)) = nullptr); }}else { int _402; if (((sol_numbarvar * (int)2) > (_400 + (int)100))){ (_402 = (sol_numbarvar * (int)2)); }else { (_402 = (_400 + (int)100)); }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _403 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_402))); int _7437 = (int)0; int _7438 = (int)((barx)->size(0)); for (int _404 = _7437;_404<_7438;++_404){ (((*_403)(_404)) = ((*barx)(_404))); }(barx = _403); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _405 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape(_402))); int _7439 = (int)0; int _7440 = (int)((bars)->size(0)); for (int _406 = _7439;_406<_7440;++_406){ (((*_405)(_406)) = ((*bars)(_406))); }(bars = _405); (sol_numbarvar = _400); }if ((_397 < (int)0)){ }else if ((_397 <= sol_numvar)){ (sol_numvar = _397); }else if ((_397 <= (int)((xx)->size(0)))){ int _7441 = sol_numvar; int _7442 = _397; for (int _407 = _7441;_407<_7442;++_407){ (((*slx)(_407)) = 0.0); (((*sux)(_407)) = 0.0); (((*xx)(_407)) = 0.0); }(sol_numvar = _397); }else { int _408; if (((sol_numvar * (int)2) > (_397 + (int)100))){ (_408 = (sol_numvar * (int)2)); }else { (_408 = (_397 + (int)100)); }std::shared_ptr< monty::ndarray< double,1 > > _409 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_408))); ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_409,(int)0,(int)((slx)->size(0))); (slx = _409); std::shared_ptr< monty::ndarray< double,1 > > _410 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_408))); ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_410,(int)0,(int)((sux)->size(0))); (sux = _410); std::shared_ptr< monty::ndarray< double,1 > > _411 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_408))); ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_411,(int)0,(int)((xx)->size(0))); (xx = _411); { int _412 = sol_numvar; for (;(_412 < _397);( ++ _412 )){ (((*slx)(_412)) = 0.0); (((*sux)(_412)) = 0.0); (((*xx)(_412)) = 0.0); }}(sol_numvar = _397); }if ((_398 < (int)0)){ }else if ((_398 <= sol_numcon)){ (sol_numcon = _398); }else if ((_398 <= (int)((xx)->size(0)))){ int _7443 = sol_numcon; int _7444 = _398; for (int _413 = _7443;_413<_7444;++_413){ (((*slc)(_413)) = 0.0); (((*suc)(_413)) = 0.0); (((*xc)(_413)) = 0.0); (((*y)(_413)) = 0.0); }(sol_numcon = _398); }else { int _414; if (((sol_numcon * (int)2) > (_398 + (int)100))){ (_414 = (sol_numcon * (int)2)); }else { (_414 = (_398 + (int)100)); }std::shared_ptr< monty::ndarray< double,1 > > _415 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_414))); ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_415,(int)0,(int)((slc)->size(0))); (slc = _415); std::shared_ptr< monty::ndarray< double,1 > > _416 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_414))); ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_416,(int)0,(int)((suc)->size(0))); (suc = _416); std::shared_ptr< monty::ndarray< double,1 > > _417 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_414))); ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_417,(int)0,(int)((xc)->size(0))); (xc = _417); std::shared_ptr< monty::ndarray< double,1 > > _418 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_414))); ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_418,(int)0,(int)((y)->size(0))); (y = _418); int _7445 = sol_numcon; int _7446 = _398; for (int _419 = _7445;_419<_7446;++_419){ (((*slc)(_419)) = 0.0); (((*suc)(_419)) = 0.0); (((*xc)(_419)) = 0.0); (((*y)(_419)) = 0.0); }(sol_numcon = _398); }if ((_399 < (int)0)){ }else if ((_399 <= sol_numcone)){ (sol_numcone = _399); }else if ((_399 <= (int)((xx)->size(0)))){ int _7447 = sol_numcone; int _7448 = _399; for (int _420 = _7447;_420<_7448;++_420){ (((*snx)(_420)) = 0.0); }(sol_numcone = _399); }else { int _421; if (((sol_numcone * (int)2) > (_399 + (int)100))){ (_421 = (sol_numcone * (int)2)); }else { (_421 = (_399 + (int)100)); }std::shared_ptr< monty::ndarray< double,1 > > _422 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_421))); ::mosek::fusion::Utils::Tools::arraycopy(snx,(int)0,_422,(int)0,(int)((snx)->size(0))); (snx = _422); { int _423 = sol_numcone; for (;(_423 < _399);( ++ _423 )){ (((*snx)(_423)) = 0.0); }}(sol_numcone = _399); }}bool mosek::fusion::SolutionStruct::isDualAcceptable  ( mosek::fusion::AccSolutionStatus _424) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_424); }bool mosek::fusion::p_SolutionStruct::isDualAcceptable( mosek::fusion::AccSolutionStatus _424){ return isAcceptable(dstatus,_424); }bool mosek::fusion::SolutionStruct::isPrimalAcceptable  ( mosek::fusion::AccSolutionStatus _425) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_425); }bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable( mosek::fusion::AccSolutionStatus _425){ return isAcceptable(pstatus,_425); }bool mosek::fusion::p_SolutionStruct::isAcceptable( mosek::fusion::SolutionStatus _426,mosek::fusion::AccSolutionStatus _427){ if ((_427 == ::mosek::fusion::AccSolutionStatus::Anything)){ return true; }else if ((_427 == ::mosek::fusion::AccSolutionStatus::Optimal)){ return (_426 == ::mosek::fusion::SolutionStatus::Optimal); }else if ((_427 == ::mosek::fusion::AccSolutionStatus::NearOptimal)){ return ((_426 == ::mosek::fusion::SolutionStatus::Optimal) || (_426 == ::mosek::fusion::SolutionStatus::NearOptimal)); }else if ((_427 == ::mosek::fusion::AccSolutionStatus::Feasible)){ return ((_426 == ::mosek::fusion::SolutionStatus::Optimal) || ((_426 == ::mosek::fusion::SolutionStatus::NearOptimal) || (_426 == ::mosek::fusion::SolutionStatus::Feasible))); }else if ((_427 == ::mosek::fusion::AccSolutionStatus::Certificate)){ return (_426 == ::mosek::fusion::SolutionStatus::Certificate); }else {}return false; }void mosek::fusion::p_SolutionStruct::destroy(){snx.reset();sux.reset();slx.reset();bars.reset();barx.reset();y.reset();suc.reset();slc.reset();xx.reset();xc.reset();}void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }mosek::fusion::ConNZStruct::ConNZStruct(mosek::fusion::p_ConNZStruct *_impl) : _impl(_impl) { /*std::cout << "ConNZStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConNZStruct::~ConNZStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConNZStruct::p_ConNZStruct  (::mosek::fusion::ConNZStruct * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConNZStruct::t mosek::fusion::p_ConNZStruct::_new_ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _428,    std::shared_ptr< monty::ndarray< int,1 > > _429,    std::shared_ptr< monty::ndarray< double,1 > > _430,    std::shared_ptr< monty::ndarray< double,1 > > _431,    std::shared_ptr< monty::ndarray< int,1 > > _432,    std::shared_ptr< monty::ndarray< int,1 > > _433,    std::shared_ptr< monty::ndarray< int,1 > > _434){ return new mosek::fusion::ConNZStruct(_428,_429,_430,_431,_432,_433,_434); }mosek::fusion::ConNZStruct::ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _428,    std::shared_ptr< monty::ndarray< int,1 > > _429,    std::shared_ptr< monty::ndarray< double,1 > > _430,    std::shared_ptr< monty::ndarray< double,1 > > _431,    std::shared_ptr< monty::ndarray< int,1 > > _432,    std::shared_ptr< monty::ndarray< int,1 > > _433,    std::shared_ptr< monty::ndarray< int,1 > > _434) :    ConNZStruct(new mosek::fusion::p_ConNZStruct(this)){ mosek::fusion::p_ConNZStruct::_get_impl(this)->_initialize(_428,_429,_430,_431,_432,_433,_434); }void mosek::fusion::p_ConNZStruct::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _428,    std::shared_ptr< monty::ndarray< int,1 > > _429,    std::shared_ptr< monty::ndarray< double,1 > > _430,    std::shared_ptr< monty::ndarray< double,1 > > _431,    std::shared_ptr< monty::ndarray< int,1 > > _432,    std::shared_ptr< monty::ndarray< int,1 > > _433,    std::shared_ptr< monty::ndarray< int,1 > > _434){monty::rc_reserve __reserve_this(_pubthis); { { (ptrb = _428); (subj = _429); (cof = _430); (bfix = _431); (barsubi = _432); (barsubj = _433); (barmidx = _434); }}}void mosek::fusion::p_ConNZStruct::destroy(){barmidx.reset();barsubj.reset();barsubi.reset();bfix.reset();cof.reset();subj.reset();ptrb.reset();}void mosek::fusion::ConNZStruct::destroy() { mosek::fusion::p_ConNZStruct::_get_impl(this)->destroy(); }mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }mosek::fusion::p_Model::p_Model  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (monty::rc_ptr< ::mosek::fusion::Model > _435){ return new mosek::fusion::Model(_435); }mosek::fusion::Model::Model  (monty::rc_ptr< ::mosek::fusion::Model > _435) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_435); }void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _435){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseModel::_initialize(_435);(model_name = mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(mosek::fusion::p_Model::_get_impl(_435)->model_name).get())->a(std::string ("(clone)")).get())->toString()); (acceptable_sol = mosek::fusion::p_Model::_get_impl(_435)->acceptable_sol); (solutionptr = mosek::fusion::p_Model::_get_impl(_435)->solutionptr); monty::rc_ptr< ::mosek::fusion::Model > _436 = _pubthis; (vars = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::ModelVariable > > _7449; for (int _437=(int)0, _7450=mosek::fusion::p_Model::_get_impl(_435)->vars_used; _437 < _7450;++_437)_7449.push_back(mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_435)->vars)(_437)).get())->clone(_436)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_7449.size()),_7449.begin(),_7449.end())); })()); (vars_used = mosek::fusion::p_Model::_get_impl(_435)->vars_used); (var_map = mosek::fusion::Utils::p_StringIntMap::_get_impl(mosek::fusion::p_Model::_get_impl(_435)->var_map.get())->clone()); (task_vars_allocated = mosek::fusion::p_Model::_get_impl(_435)->task_vars_allocated); (task_vars_used = mosek::fusion::p_Model::_get_impl(_435)->task_vars_used); (cons = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::ModelConstraint > > _7451; for (int _438=(int)0, _7452=mosek::fusion::p_Model::_get_impl(_435)->cons_used; _438 < _7452;++_438)_7451.push_back(mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_435)->cons)(_438)).get())->clone(_436)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_7451.size()),_7451.begin(),_7451.end())); })()); (cons_used = mosek::fusion::p_Model::_get_impl(_435)->cons_used); (con_map = mosek::fusion::Utils::p_StringIntMap::_get_impl(mosek::fusion::p_Model::_get_impl(_435)->con_map.get())->clone()); (natvarmap_Var = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7453; for (int _439=(int)0, _7454=mosek::fusion::p_Model::_get_impl(_435)->natvarmap_num; _439 < _7454;++_439)_7453.push_back(((*mosek::fusion::p_Model::_get_impl(_435)->natvarmap_Var)(_439))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7453.size()),_7453.begin(),_7453.end())); })()); (natvarmap_idx = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7455; for (int _440=(int)0, _7456=mosek::fusion::p_Model::_get_impl(_435)->natvarmap_num; _440 < _7456;++_440)_7455.push_back(((*mosek::fusion::p_Model::_get_impl(_435)->natvarmap_idx)(_440))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7455.size()),_7455.begin(),_7455.end())); })()); (natvarmap_num = mosek::fusion::p_Model::_get_impl(_435)->natvarmap_num); (natbarvarmap_Var = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7457; for (int _441=(int)0, _7458=mosek::fusion::p_Model::_get_impl(_435)->natvarmap_num; _441 < _7458;++_441)_7457.push_back(((*mosek::fusion::p_Model::_get_impl(_435)->natvarmap_Var)(_441))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7457.size()),_7457.begin(),_7457.end())); })()); (natbarvarmap_num = mosek::fusion::p_Model::_get_impl(_435)->natbarvarmap_num); (initsol_xx = nullptr); (initsol_xx_flag = nullptr); }}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (){ return new mosek::fusion::Model(); }mosek::fusion::Model::Model  () :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }void mosek::fusion::p_Model::_initialize  (){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseModel::_initialize(std::string (""),std::string (""));(model_name = std::string ("")); (acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal); (solutionptr = ::mosek::fusion::SolutionType::Default); (natvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)))); (natvarmap_idx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)))); (natvarmap_num = (int)0); (natbarvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (natbarvarmap_num = (int)0); (task_vars_allocated = (int)0); (task_vars_used = (int)0); (initsol_xx = nullptr); (initsol_xx_flag = nullptr); (vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)1024)))); (vars_used = (int)0); (var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); (cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape((int)1024)))); (cons_used = (int)0); (con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); }}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (const std::string &  _442){ return new mosek::fusion::Model(_442); }mosek::fusion::Model::Model  (const std::string &  _442) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_442); }void mosek::fusion::p_Model::_initialize  (const std::string &  _442){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseModel::_initialize(_442,std::string (""));(model_name = _442); (acceptable_sol = ::mosek::fusion::AccSolutionStatus::NearOptimal); (solutionptr = ::mosek::fusion::SolutionType::Default); (natvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)))); (natvarmap_idx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)))); (natvarmap_num = (int)0); (natbarvarmap_Var = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (natbarvarmap_num = (int)0); (initsol_xx = nullptr); (initsol_xx_flag = nullptr); (vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)1024)))); (vars_used = (int)0); (var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); (task_vars_allocated = (int)0); (task_vars_used = (int)0); (cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape((int)1024)))); (cons_used = (int)0); (con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap()); }}void mosek::fusion::Model::putlicensewait  ( bool _443) { mosek::fusion::p_Model::putlicensewait(_443); }void mosek::fusion::p_Model::putlicensewait( bool _443){ ::mosek::fusion::p_BaseModel::env_putlicensewait(_443); }void mosek::fusion::Model::putlicensepath  ( const std::string & _444) { mosek::fusion::p_Model::putlicensepath(_444); }void mosek::fusion::p_Model::putlicensepath( const std::string & _444){ ::mosek::fusion::p_BaseModel::env_putlicensepath(_444); }void mosek::fusion::Model::putlicensecode  ( std::shared_ptr< monty::ndarray< int,1 > > _445) { mosek::fusion::p_Model::putlicensecode(_445); }void mosek::fusion::p_Model::putlicensecode( std::shared_ptr< monty::ndarray< int,1 > > _445){ ::mosek::fusion::p_BaseModel::env_putlicensecode(_445); }void mosek::fusion::p_Model::inst( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _446,int _447,int _448,std::shared_ptr< monty::ndarray< long long,1 > > _449,int _450,std::shared_ptr< monty::ndarray< int,1 > > _451,std::shared_ptr< monty::ndarray< int,1 > > _452,std::shared_ptr< monty::ndarray< int,1 > > _453){ std::shared_ptr< monty::ndarray< long long,1 > > _454 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_446)->size(0)) + (int)1)))); int _7459 = (int)0; int _7460 = (int)((_446)->size(0)); for (int _455 = _7459;_455<_7460;++_455){ (((*_454)((_455 + (int)1))) = (((*_454)(_455)) + ((*_446)(_455))->size())); }if (((int)((_446)->size(0)) == (int)1)){ ((*_446)((int)0))->inst(_449,_447,_448,(long long)((int)0),(long long)(_450),_451,_452,_453); }else if (((int)((_446)->size(0)) == (int)2)){ int _7461 = _447; int _7462 = _448; for (int _456 = _7461;_456<_7462;++_456){ if ((((*_449)(_456)) < ((*_454)((int)1)))){ ((*_446)((int)0))->inst(((*_449)(_456)),(long long)(((_450 + _456) - _447)),_451,_452,_453); }else { ((*_446)((int)1))->inst((((*_449)(_456)) - ((*_454)((int)1))),(long long)(((_450 + _456) - _447)),_451,_452,_453); }}}else if (((int)((_446)->size(0)) == (int)3)){ int _7463 = _447; int _7464 = _448; for (int _457 = _7463;_457<_7464;++_457){ if ((((*_449)(_457)) < ((*_454)((int)1)))){ ((*_446)((int)0))->inst(((*_449)(_457)),(long long)(((_450 + _457) - _447)),_451,_452,_453); }else if ((((*_449)(_457)) < ((*_454)((int)2)))){ ((*_446)((int)1))->inst((((*_449)(_457)) - ((*_454)((int)1))),(long long)(((_450 + _457) - _447)),_451,_452,_453); }else { ((*_446)((int)2))->inst((((*_449)(_457)) - ((*_454)((int)2))),(long long)(((_450 + _457) - _447)),_451,_452,_453); }}}else { int _7465 = _447; int _7466 = _448; for (int _458 = _7465;_458<_7466;++_458){ int _459 = ((int)((_454)->size(0)) / (int)2); { int _460 = (int)0; int _461 = ((int)((_454)->size(0)) - (int)1); int _462 = (int)0; while ((_460 < _461)) { (_462 = ((_460 + _461) / (int)2)); if ((((*_449)(_458)) < ((*_454)(_462)))){ (_461 = _462); }else if ((((*_449)(_458)) >= ((*_454)((_462 + (int)1))))){ (_460 = _462); }else { (_460 = _462); (_461 = _462); }}(_459 = _462); }((*_446)(_459))->inst((((*_449)(_458)) - ((*_454)(_459))),(long long)(((_450 + _458) - _447)),_451,_452,_453); }}}void mosek::fusion::p_Model::inst( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _463,std::shared_ptr< monty::ndarray< long long,1 > > _464,std::shared_ptr< monty::ndarray< int,1 > > _465,std::shared_ptr< monty::ndarray< int,1 > > _466,std::shared_ptr< monty::ndarray< int,1 > > _467){ ::mosek::fusion::p_Model::inst(_463,(int)0,(int)((_464)->size(0)),_464,(int)0,_465,_466,_467); }void mosek::fusion::Model::dispose  ( ) { mosek::fusion::p_Model::_get_impl(this)->dispose(); }void mosek::fusion::p_Model::dispose( ){ int _7467 = (int)0; int _7468 = vars_used; for (int _468 = _7467;_468<_7468;++_468){ (((*vars)(_468)) = nullptr); }(vars_used = (int)0); int _7469 = (int)0; int _7470 = cons_used; for (int _469 = _7469;_469<_7470;++_469){ (((*cons)(_469)) = nullptr); }(cons_used = (int)0); ::mosek::fusion::p_BaseModel::dispose(); }void mosek::fusion::p_Model::varname( int _470,const std::string & _471){ task_var_name(_470,_471); }void mosek::fusion::p_Model::nativeVarToStr( int _472,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _473){ if (((_472 < (int)0) || (_472 >= natvarmap_num))){ throw ::mosek::fusion::IndexError(std::string ("Native variable index out of bounds"));}else {}((*vars)(((*natvarmap_Var)(_472))))->elementName(((*natvarmap_idx)(_472)),_473); }int mosek::fusion::p_Model::append_linearvar( monty::rc_ptr< ::mosek::fusion::ModelVariable > _474,long long _475,mosek::fusion::RelationKey _476,double _477){ int _478 = alloc_linearvar(std::string (""),_476,_477); natvarmap_ensure((int)1); (((*natvarmap_idx)(_478)) = _475); (((*natvarmap_Var)(_478)) = vars_used); (natvarmap_num = (natvarmap_num + (int)1)); return _478; }int mosek::fusion::p_Model::append_rangedvar( monty::rc_ptr< ::mosek::fusion::ModelVariable > _479,long long _480,double _481,double _482){ int _483 = alloc_rangedvar(std::string (""),_481,_482); natvarmap_ensure((int)1); (((*natvarmap_idx)(_483)) = _480); (((*natvarmap_Var)(_483)) = vars_used); (natvarmap_num = (natvarmap_num + (int)1)); return _483; }MSKtask_t mosek::fusion::Model::getTask  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getTask(); }MSKtask_t mosek::fusion::p_Model::getTask( ){ return task_get(); }void mosek::fusion::Model::flushNames  ( ) { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }void mosek::fusion::p_Model::flushNames( ){ int _7471 = (int)0; int _7472 = vars_used; for (int _484 = _7471;_484<_7472;++_484){ mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_484)).get())->flushNames(); }int _7473 = (int)0; int _7474 = cons_used; for (int _485 = _7473;_485<_7474;++_485){ mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_485)).get())->flushNames(); }}void mosek::fusion::Model::writeTask  ( const std::string & _486) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_486); }void mosek::fusion::p_Model::writeTask( const std::string & _486){ _pubthis->flushNames(); task_setnumvar(task_vars_used); (task_vars_allocated = task_vars_used); task_write(_486); }long long mosek::fusion::Model::getSolverLIntInfo  ( const std::string & _487) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_487); }long long mosek::fusion::p_Model::getSolverLIntInfo( const std::string & _487){ return task_get_liinf(_487); }int mosek::fusion::Model::getSolverIntInfo  ( const std::string & _488) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_488); }int mosek::fusion::p_Model::getSolverIntInfo( const std::string & _488){ return task_get_iinf(_488); }double mosek::fusion::Model::getSolverDoubleInfo  ( const std::string & _489) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_489); }double mosek::fusion::p_Model::getSolverDoubleInfo( const std::string & _489){ return task_get_dinf(_489); }void mosek::fusion::Model::setCallbackHandler  ( mosek::datacbhandler_t _490) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_490); }void mosek::fusion::p_Model::setCallbackHandler( mosek::datacbhandler_t _490){ task_setCallbackHandler(_490); }void mosek::fusion::Model::setLogHandler  ( mosek::msghandler_t _491) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_491); }void mosek::fusion::p_Model::setLogHandler( mosek::msghandler_t _491){ task_setLogHandler(_491); }void mosek::fusion::Model::setSolverParam  ( const std::string & _492,    double _493) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_492,_493); }void mosek::fusion::p_Model::setSolverParam( const std::string & _492,double _493){ ::mosek::fusion::p_Parameters::setParameter(_pubthis,_492,_493); }void mosek::fusion::Model::setSolverParam  ( const std::string & _494,    int _495) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_494,_495); }void mosek::fusion::p_Model::setSolverParam( const std::string & _494,int _495){ ::mosek::fusion::p_Parameters::setParameter(_pubthis,_494,_495); }void mosek::fusion::Model::setSolverParam  ( const std::string & _496,    const std::string & _497) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_496,_497); }void mosek::fusion::p_Model::setSolverParam( const std::string & _496,const std::string & _497){ ::mosek::fusion::p_Parameters::setParameter(_pubthis,_496,_497); }void mosek::fusion::Model::breakSolver  ( ) { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }void mosek::fusion::p_Model::breakSolver( ){ task_break_solve(); }void mosek::fusion::Model::solve  ( ) { mosek::fusion::p_Model::_get_impl(this)->solve(); }void mosek::fusion::p_Model::solve( ){ flush_initsol(::mosek::fusion::SolutionType::Interior); flush_initsol(::mosek::fusion::SolutionType::Integer); flush_initsol(::mosek::fusion::SolutionType::Basic); task_solve(); }void mosek::fusion::Model::flushSolutions  ( ) { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }void mosek::fusion::p_Model::flushSolutions( ){ flush_initsol(::mosek::fusion::SolutionType::Interior); flush_initsol(::mosek::fusion::SolutionType::Integer); flush_initsol(::mosek::fusion::SolutionType::Basic); }void mosek::fusion::p_Model::flush_initsol( mosek::fusion::SolutionType _498){ if (initsol_xx){ try { monty::rc_ptr< ::mosek::fusion::SolutionStruct > _500 = get_sol_cache(_498,true); if (mosek::fusion::p_SolutionStruct::_get_impl(_500)->xx){ int _7475 = (int)0; int _7476 = (int)((initsol_xx)->size(0)); for (int _501 = _7475;_501<_7476;++_501){ if ((! ((*initsol_xx_flag)(_501)))){ (((*initsol_xx)(_501)) = ((*mosek::fusion::p_SolutionStruct::_get_impl(_500)->xx)(_501))); }else {}}}else { int _7477 = (int)0; int _7478 = (int)((initsol_xx)->size(0)); for (int _502 = _7477;_502<_7478;++_502){ if ((! ((*initsol_xx_flag)(_502)))){ (((*initsol_xx)(_502)) = 0.0); }else {}}}}catch (mosek::fusion::SolutionError _499){ int _7479 = (int)0; int _7480 = (int)((initsol_xx)->size(0)); for (int _503 = _7479;_503<_7480;++_503){ if ((! ((*initsol_xx_flag)(_503)))){ (((*initsol_xx)(_503)) = 0.0); }else {}}}task_putxx_slice(_498,(int)0,(int)((initsol_xx)->size(0)),initsol_xx); }else {}}mosek::fusion::SolutionStatus mosek::fusion::Model::getDualSolutionStatus  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus( ){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _504 = nullptr; if ((solutionptr == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_504 = sol_itg); }else if (sol_bas){ (_504 = sol_bas); }else { (_504 = sol_itr); }}else if ((solutionptr == ::mosek::fusion::SolutionType::Interior)){ (_504 = sol_itr); }else if ((solutionptr == ::mosek::fusion::SolutionType::Basic)){ (_504 = sol_bas); }else if ((solutionptr == ::mosek::fusion::SolutionType::Integer)){ (_504 = sol_itg); }else {}if (! _504){ return ::mosek::fusion::SolutionStatus::Undefined; }else if ((! synched)){ return ::mosek::fusion::SolutionStatus::Unknown; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_504)->dstatus; }}mosek::fusion::SolutionStatus mosek::fusion::Model::getPrimalSolutionStatus  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus( ){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _505 = nullptr; if ((solutionptr == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_505 = sol_itg); }else if (sol_bas){ (_505 = sol_bas); }else { (_505 = sol_itr); }}else if ((solutionptr == ::mosek::fusion::SolutionType::Basic)){ (_505 = sol_bas); }else if ((solutionptr == ::mosek::fusion::SolutionType::Integer)){ (_505 = sol_itg); }else { (_505 = sol_itr); }if (! _505){ return ::mosek::fusion::SolutionStatus::Undefined; }else if ((! synched)){ return ::mosek::fusion::SolutionStatus::Unknown; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_505)->pstatus; }}double mosek::fusion::Model::dualObjValue  ( ) { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }double mosek::fusion::p_Model::dualObjValue( ){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj; }double mosek::fusion::Model::primalObjValue  ( ) { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }double mosek::fusion::p_Model::primalObjValue( ){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj; }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::get_sol_cache( mosek::fusion::SolutionType _506,bool _507){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _508 = nullptr; mosek::fusion::SolutionType _509 = _506; if ((_509 == ::mosek::fusion::SolutionType::Default)){ (_509 = solutionptr); }else {}if ((_509 == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_508 = sol_itg); }else if (sol_bas){ (_508 = sol_bas); }else { (_508 = sol_itr); }}else if ((_509 == ::mosek::fusion::SolutionType::Interior)){ (_508 = sol_itr); }else if ((_509 == ::mosek::fusion::SolutionType::Basic)){ (_508 = sol_bas); }else if ((_509 == ::mosek::fusion::SolutionType::Integer)){ (_508 = sol_itg); }else {}if (! _508){ throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));}else { if (((_507 && _508->isPrimalAcceptable(acceptable_sol)) || ((! _507) && _508->isDualAcceptable(acceptable_sol)))){ return _508; }else { monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _510 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::SolutionStatus _511 = mosek::fusion::p_SolutionStruct::_get_impl(_508)->pstatus; if ((! _507)){ (_511 = mosek::fusion::p_SolutionStruct::_get_impl(_508)->dstatus); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("Solution status is ")); if ((_511 == ::mosek::fusion::SolutionStatus::Undefined)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("Undefined")); }else if ((_511 == ::mosek::fusion::SolutionStatus::Unknown)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("Unknown")); }else if ((_511 == ::mosek::fusion::SolutionStatus::Optimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("Optimal")); }else if ((_511 == ::mosek::fusion::SolutionStatus::NearOptimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("NearOptimal")); }else if ((_511 == ::mosek::fusion::SolutionStatus::Feasible)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("Feasible")); }else if ((_511 == ::mosek::fusion::SolutionStatus::NearFeasible)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("NearFeasible")); }else if ((_511 == ::mosek::fusion::SolutionStatus::Certificate)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("Certificate")); }else if ((_511 == ::mosek::fusion::SolutionStatus::NearCertificate)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("NearCertificate")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string (" but at least ")); if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("Anything")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("Optimal")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::NearOptimal)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("NearOptimal")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("Feasible")); }else if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string ("Certificate")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->a(std::string (" is expected")); throw ::mosek::fusion::SolutionError(mosek::fusion::Utils::p_StringBuffer::_get_impl(_510.get())->toString());}}}void mosek::fusion::p_Model::setSolution_xx( std::shared_ptr< monty::ndarray< int,1 > > _512,std::shared_ptr< monty::ndarray< double,1 > > _513){ ensure_initsol_xx(); int _7481 = (int)0; int _7482 = (int)((_512)->size(0)); for (int _514 = _7481;_514<_7482;++_514){ (((*initsol_xx)(((*_512)(_514)))) = ((*_513)(_514))); (((*initsol_xx_flag)(((*_512)(_514)))) = true); }}void mosek::fusion::p_Model::ensure_initsol_xx( ){ if (! initsol_xx){ (initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(natvarmap_num)))); (initsol_xx_flag = ([=]()->std::shared_ptr< monty::ndarray< bool,1 > > { std::vector< bool > _7483; for (int _515=(int)0, _7484=natvarmap_num; _515 < _7484;++_515)_7483.push_back(false); return std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_7483.size()),_7483.begin(),_7483.end())); })()); }else if (((int)((initsol_xx)->size(0)) < natvarmap_num)){ std::shared_ptr< monty::ndarray< double,1 > > _516 = initsol_xx; std::shared_ptr< monty::ndarray< bool,1 > > _517 = initsol_xx_flag; (initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(natvarmap_num)))); (initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(natvarmap_num)))); ::mosek::fusion::Utils::Tools::arraycopy(_516,(int)0,initsol_xx,(int)0,natvarmap_num); int _7485 = (int)0; int _7486 = natvarmap_num; for (int _518 = _7485;_518<_7486;++_518){ (((*initsol_xx_flag)(_518)) = ((*_517)(_518))); }}else {}}std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > mosek::fusion::p_Model::getSolution_bars( mosek::fusion::SolutionType _519){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_519,false))->bars; }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > mosek::fusion::p_Model::getSolution_barx( mosek::fusion::SolutionType _520){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_520,false))->barx; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y( mosek::fusion::SolutionType _521){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_521,false))->y; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc( mosek::fusion::SolutionType _522){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_522,true))->xc; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_snx( mosek::fusion::SolutionType _523){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_523,false))->snx; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc( mosek::fusion::SolutionType _524){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_524,false))->suc; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc( mosek::fusion::SolutionType _525){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_525,false))->slc; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux( mosek::fusion::SolutionType _526){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_526,false))->sux; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx( mosek::fusion::SolutionType _527){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_527,false))->slx; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx( mosek::fusion::SolutionType _528){ return mosek::fusion::p_SolutionStruct::_get_impl(get_sol_cache(_528,true))->xx; }void mosek::fusion::Model::selectedSolution  ( mosek::fusion::SolutionType _529) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_529); }void mosek::fusion::p_Model::selectedSolution( mosek::fusion::SolutionType _529){ (solutionptr = _529); }mosek::fusion::AccSolutionStatus mosek::fusion::Model::getAcceptedSolutionStatus  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus( ){ return acceptable_sol; }void mosek::fusion::Model::acceptedSolutionStatus  ( mosek::fusion::AccSolutionStatus _530) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_530); }void mosek::fusion::p_Model::acceptedSolutionStatus( mosek::fusion::AccSolutionStatus _530){ (acceptable_sol = _530); }mosek::fusion::ProblemStatus mosek::fusion::Model::getProblemStatus  ( mosek::fusion::SolutionType _531) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_531); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus( mosek::fusion::SolutionType _531){ monty::rc_ptr< ::mosek::fusion::SolutionStruct > _532 = nullptr; if ((_531 == ::mosek::fusion::SolutionType::Default)){ if (sol_itg){ (_532 = sol_itg); }else if (sol_bas){ (_532 = sol_bas); }else { (_532 = sol_itr); }}else if ((_531 == ::mosek::fusion::SolutionType::Interior)){ (_532 = sol_itr); }else if ((_531 == ::mosek::fusion::SolutionType::Basic)){ (_532 = sol_bas); }else if ((_531 == ::mosek::fusion::SolutionType::Integer)){ (_532 = sol_itg); }else {}if (! _532){ return ::mosek::fusion::ProblemStatus::Unknown; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_532)->probstatus; }}mosek::fusion::SolutionStatus mosek::fusion::Model::getDualSolutionStatus  ( mosek::fusion::SolutionType _533) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_533); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus( mosek::fusion::SolutionType _533){ return getSolutionStatus(_533,false); }mosek::fusion::SolutionStatus mosek::fusion::Model::getPrimalSolutionStatus  ( mosek::fusion::SolutionType _534) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_534); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus( mosek::fusion::SolutionType _534){ return getSolutionStatus(_534,true); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus( mosek::fusion::SolutionType _535,bool _536){ try { monty::rc_ptr< ::mosek::fusion::SolutionStruct > _538 = get_sol_cache(_535,_536); if (_536){ return mosek::fusion::p_SolutionStruct::_get_impl(_538)->pstatus; }else { return mosek::fusion::p_SolutionStruct::_get_impl(_538)->dstatus; }}catch (mosek::fusion::SolutionError _537){ return ::mosek::fusion::SolutionStatus::Undefined; }}void mosek::fusion::p_Model::objective_( const std::string & _539,mosek::fusion::ObjectiveSense _540,monty::rc_ptr< ::mosek::fusion::Expression > _541){ task_putobjectivename(_539); if ((mosek::fusion::p_Set::_get_impl(_541->getShape())->size != (long long)1)){ throw ::mosek::fusion::LengthError(std::string ("Objective expression must be of size 1."));}else {}if (((_540 != ::mosek::fusion::ObjectiveSense::Minimize) && (_540 != ::mosek::fusion::ObjectiveSense::Maximize))){ throw ::mosek::fusion::LengthError(std::string ("Objective sense required."));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _542 = _541->eval(); { int _7487 = (int)0; int _7488 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_542)->x)->size(0)); for (int _543 = _7487;_543<_7488;++_543){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_542)->x)(_543))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_542)->x)(_543))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}std::shared_ptr< monty::ndarray< int,1 > > _544 = nullptr; std::shared_ptr< monty::ndarray< double,1 > > _545 = nullptr; int _546 = (int)0; int _547 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _548 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _549 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _550 = nullptr; { int _551 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_542)->subj)->size(0)); (_548 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_551)))); (_549 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_551)))); (_550 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_551)))); ::mosek::fusion::p_Model::inst(mosek::fusion::p_FlatExpr::_get_impl(_542)->x,mosek::fusion::p_FlatExpr::_get_impl(_542)->subj,_548,_549,_550); (_547 = (int)0); { int _552 = (int)0; for (;(_552 < _551);( ++ _552 )){ if ((((*_548)(_552)) >= (int)0)){ ( ++ _547 ); }else {}}}(_546 = (_551 - _547)); if ((_547 > (int)0)){ (_544 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_547)))); }else {}if ((_546 == (int)0)){ (_544 = _548); (_545 = mosek::fusion::p_FlatExpr::_get_impl(_542)->cof); }else { int _553 = (int)0; (_545 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_547)))); (_544 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_547)))); { long long _554 = ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->ptrb)((int)0)); for (;(_554 < ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->ptrb)((int)1)));( ++ _554 )){ if ((((*_548)(_554)) >= (int)0)){ (((*_544)(_553)) = ((*_548)(_554))); (((*_545)(_553)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->cof)(_554))); ( ++ _553 ); }else {}}}}}double _555 = 0.0; if (mosek::fusion::p_FlatExpr::_get_impl(_542)->bfix){ (_555 = ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->bfix)((int)0))); }else {}task_putobjective((_540 == ::mosek::fusion::ObjectiveSense::Maximize),_544,_545,_555); if ((_546 > (int)0)){ long long _556 = (long long)0; { long long _557 = ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->ptrb)((int)0)); for (;(_557 < ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->ptrb)((int)1)));( ++ _557 )){ if ((((*_548)(_557)) < (int)0)){ ( ++ _556 ); }else {}}}if ((_556 > (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _558 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_556))); { int _559 = (int)0; { long long _560 = ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->ptrb)((int)0)); for (;(_560 < ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->ptrb)((int)1)));( ++ _560 )){ if ((((*_548)(_560)) < (int)0)){ (((*_558)(_559)) = (long long)_560); ( ++ _559 ); }else {}}}}::mosek::fusion::p_Sort::argsort(_558,_548,(long long)0,_556); { int _561 = (int)0; while ((_561 < _556)) { int _562 = _561; ( ++ _561 ); while (((_561 < _556) && (((*_548)(((*_558)(_561)))) == ((*_548)(((*_558)((_561 - (int)1)))))))) { ( ++ _561 ); }int _563 = (_561 - _562); ::mosek::fusion::p_Sort::argsort(_558,_549,_550,(long long)_562,(long long)_561); int _564 = (int)1; int _7489 = (_562 + (int)1); int _7490 = _561; for (int _565 = _7489;_565<_7490;++_565){ long long _566 = ((*_558)(_565)); long long _567 = ((*_558)((_565 - (int)1))); if (((((*_549)(_566)) != ((*_549)(_567))) || (((*_550)(_566)) != ((*_550)(_567))))){ ( ++ _564 ); }else {}}int _568 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _569 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_564))); std::shared_ptr< monty::ndarray< int,1 > > _570 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_564))); std::shared_ptr< monty::ndarray< double,1 > > _571 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_564))); (((*_569)((int)0)) = ((*_549)(((*_558)(_562))))); (((*_570)((int)0)) = ((*_550)(((*_558)(_562))))); if ((((*_569)((int)0)) == ((*_570)((int)0)))){ (((*_571)((int)0)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->cof)(((*_558)(_562))))); }else { (((*_571)((int)0)) = (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->cof)(((*_558)(_562)))))); }int _7491 = (_562 + (int)1); int _7492 = _561; for (int _572 = _7491;_572<_7492;++_572){ long long _573 = ((*_558)(_572)); long long _574 = ((*_558)((_572 - (int)1))); if (((((*_549)(_573)) != ((*_549)(_574))) || (((*_550)(_573)) != ((*_550)(_574))))){ ( ++ _568 ); (((*_569)(_568)) = ((*_549)(_573))); (((*_570)(_568)) = ((*_550)(_573))); }else {}if ((((*_569)(_568)) == ((*_570)(_568)))){ (((*_571)(_568)) = (((*_571)(_568)) + ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->cof)(_573)))); }else { (((*_571)(_568)) = (((*_571)(_568)) + (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_542)->cof)(_573))))); }}int _575 = (- (((*_548)(((*_558)(_562)))) + (int)1)); int _576 = task_barvardim(_575); int _577 = task_append_barmatrix(_576,_569,_570,_571); task_putbarcj(_575,_577); }}}else {}}else {}}void mosek::fusion::Model::objective  ( double _578) { mosek::fusion::p_Model::_get_impl(this)->objective(_578); }void mosek::fusion::p_Model::objective( double _578){ objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_578)); }void mosek::fusion::Model::objective  ( mosek::fusion::ObjectiveSense _579,    double _580) { mosek::fusion::p_Model::_get_impl(this)->objective(_579,_580); }void mosek::fusion::p_Model::objective( mosek::fusion::ObjectiveSense _579,double _580){ objective_(std::string (""),_579,::mosek::fusion::p_Expr::constTerm(_580)); }void mosek::fusion::Model::objective  ( mosek::fusion::ObjectiveSense _581,    monty::rc_ptr< ::mosek::fusion::Variable > _582) { mosek::fusion::p_Model::_get_impl(this)->objective(_581,_582); }void mosek::fusion::p_Model::objective( mosek::fusion::ObjectiveSense _581,monty::rc_ptr< ::mosek::fusion::Variable > _582){ objective_(std::string (""),_581,_582->asExpr()); }void mosek::fusion::Model::objective  ( mosek::fusion::ObjectiveSense _583,    monty::rc_ptr< ::mosek::fusion::Expression > _584) { mosek::fusion::p_Model::_get_impl(this)->objective(_583,_584); }void mosek::fusion::p_Model::objective( mosek::fusion::ObjectiveSense _583,monty::rc_ptr< ::mosek::fusion::Expression > _584){ objective_(std::string (""),_583,_584); }void mosek::fusion::Model::objective  ( const std::string & _585,    double _586) { mosek::fusion::p_Model::_get_impl(this)->objective(_585,_586); }void mosek::fusion::p_Model::objective( const std::string & _585,double _586){ objective_(_585,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_586)); }void mosek::fusion::Model::objective  ( const std::string & _587,    mosek::fusion::ObjectiveSense _588,    double _589) { mosek::fusion::p_Model::_get_impl(this)->objective(_587,_588,_589); }void mosek::fusion::p_Model::objective( const std::string & _587,mosek::fusion::ObjectiveSense _588,double _589){ objective_(_587,_588,::mosek::fusion::p_Expr::constTerm(_589)); }void mosek::fusion::Model::objective  ( const std::string & _590,    mosek::fusion::ObjectiveSense _591,    monty::rc_ptr< ::mosek::fusion::Variable > _592) { mosek::fusion::p_Model::_get_impl(this)->objective(_590,_591,_592); }void mosek::fusion::p_Model::objective( const std::string & _590,mosek::fusion::ObjectiveSense _591,monty::rc_ptr< ::mosek::fusion::Variable > _592){ objective_(_590,_591,_592->asExpr()); }void mosek::fusion::Model::objective  ( const std::string & _593,    mosek::fusion::ObjectiveSense _594,    monty::rc_ptr< ::mosek::fusion::Expression > _595) { mosek::fusion::p_Model::_get_impl(this)->objective(_593,_594,_595); }void mosek::fusion::p_Model::objective( const std::string & _593,mosek::fusion::ObjectiveSense _594,monty::rc_ptr< ::mosek::fusion::Expression > _595){ objective_(_593,_594,_595); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _596,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _597) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_596,_597); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _596,monty::rc_ptr< ::mosek::fusion::QConeDomain > _597){ return constraint_(std::string (""),nullptr,_596->asExpr(),_597); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _598,    monty::rc_ptr< ::mosek::fusion::Variable > _599,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _600) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_598,_599,_600); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _598,monty::rc_ptr< ::mosek::fusion::Variable > _599,monty::rc_ptr< ::mosek::fusion::QConeDomain > _600){ return constraint_(_598,nullptr,_599->asExpr(),_600); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _601,    monty::rc_ptr< ::mosek::fusion::Variable > _602,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _603) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_601,_602,_603); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _601,monty::rc_ptr< ::mosek::fusion::Variable > _602,monty::rc_ptr< ::mosek::fusion::QConeDomain > _603){ return constraint_(std::string (""),_601,_602->asExpr(),_603); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _604,    monty::rc_ptr< ::mosek::fusion::Set > _605,    monty::rc_ptr< ::mosek::fusion::Variable > _606,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _607) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_604,_605,_606,_607); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _604,monty::rc_ptr< ::mosek::fusion::Set > _605,monty::rc_ptr< ::mosek::fusion::Variable > _606,monty::rc_ptr< ::mosek::fusion::QConeDomain > _607){ return constraint_(_604,_605,_606->asExpr(),_607); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _608,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _609) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_608,_609); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _608,monty::rc_ptr< ::mosek::fusion::RangeDomain > _609){ return constraint_(std::string (""),nullptr,_608->asExpr(),_609); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _610,    monty::rc_ptr< ::mosek::fusion::Variable > _611,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _612) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_610,_611,_612); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _610,monty::rc_ptr< ::mosek::fusion::Variable > _611,monty::rc_ptr< ::mosek::fusion::RangeDomain > _612){ return constraint_(_610,nullptr,_611->asExpr(),_612); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _613,    monty::rc_ptr< ::mosek::fusion::Variable > _614,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _615) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_613,_614,_615); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _613,monty::rc_ptr< ::mosek::fusion::Variable > _614,monty::rc_ptr< ::mosek::fusion::RangeDomain > _615){ return constraint_(std::string (""),_613,_614->asExpr(),_615); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _616,    monty::rc_ptr< ::mosek::fusion::Set > _617,    monty::rc_ptr< ::mosek::fusion::Variable > _618,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _619) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_616,_617,_618,_619); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _616,monty::rc_ptr< ::mosek::fusion::Set > _617,monty::rc_ptr< ::mosek::fusion::Variable > _618,monty::rc_ptr< ::mosek::fusion::RangeDomain > _619){ return constraint_(_616,_617,_618->asExpr(),_619); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _620,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _621) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_620,_621); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _620,monty::rc_ptr< ::mosek::fusion::LinearDomain > _621){ return constraint_(std::string (""),nullptr,_620->asExpr(),_621); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _622,    monty::rc_ptr< ::mosek::fusion::Variable > _623,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _624) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_622,_623,_624); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _622,monty::rc_ptr< ::mosek::fusion::Variable > _623,monty::rc_ptr< ::mosek::fusion::LinearDomain > _624){ return constraint_(_622,nullptr,_623->asExpr(),_624); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _625,    monty::rc_ptr< ::mosek::fusion::Variable > _626,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _627) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_625,_626,_627); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _625,monty::rc_ptr< ::mosek::fusion::Variable > _626,monty::rc_ptr< ::mosek::fusion::LinearDomain > _627){ return constraint_(std::string (""),_625,_626->asExpr(),_627); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _628,    monty::rc_ptr< ::mosek::fusion::Set > _629,    monty::rc_ptr< ::mosek::fusion::Variable > _630,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _631) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_628,_629,_630,_631); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _628,monty::rc_ptr< ::mosek::fusion::Set > _629,monty::rc_ptr< ::mosek::fusion::Variable > _630,monty::rc_ptr< ::mosek::fusion::LinearDomain > _631){ return constraint_(_628,_629,_630->asExpr(),_631); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _632,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _633) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_632,_633); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _632,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _633){ return constraint_(std::string (""),_632->asExpr(),_633); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _634,    monty::rc_ptr< ::mosek::fusion::Variable > _635,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _636) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_634,_635,_636); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _634,monty::rc_ptr< ::mosek::fusion::Variable > _635,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _636){ return constraint_(_634,_635->asExpr(),_636); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Variable > _637,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _638) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_637,_638); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Variable > _637,monty::rc_ptr< ::mosek::fusion::PSDDomain > _638){ return constraint_(std::string (""),_637->asExpr(),_638); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _639,    monty::rc_ptr< ::mosek::fusion::Variable > _640,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _641) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_639,_640,_641); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _639,monty::rc_ptr< ::mosek::fusion::Variable > _640,monty::rc_ptr< ::mosek::fusion::PSDDomain > _641){ return constraint_(_639,_640->asExpr(),_641); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _642,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _643) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_642,_643); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _642,monty::rc_ptr< ::mosek::fusion::QConeDomain > _643){ return constraint_(std::string (""),nullptr,_642,_643); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _644,    monty::rc_ptr< ::mosek::fusion::Expression > _645,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _646) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_644,_645,_646); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _644,monty::rc_ptr< ::mosek::fusion::Expression > _645,monty::rc_ptr< ::mosek::fusion::QConeDomain > _646){ return constraint_(_644,nullptr,_645,_646); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _647,    monty::rc_ptr< ::mosek::fusion::Expression > _648,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _649) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_647,_648,_649); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _647,monty::rc_ptr< ::mosek::fusion::Expression > _648,monty::rc_ptr< ::mosek::fusion::QConeDomain > _649){ return constraint_(std::string (""),_647,_648,_649); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _650,    monty::rc_ptr< ::mosek::fusion::Set > _651,    monty::rc_ptr< ::mosek::fusion::Expression > _652,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _653) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_650,_651,_652,_653); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _650,monty::rc_ptr< ::mosek::fusion::Set > _651,monty::rc_ptr< ::mosek::fusion::Expression > _652,monty::rc_ptr< ::mosek::fusion::QConeDomain > _653){ return constraint_(_650,_651,_652,_653); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _654,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _655) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_654,_655); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _654,monty::rc_ptr< ::mosek::fusion::RangeDomain > _655){ return constraint_(std::string (""),nullptr,_654,_655); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _656,    monty::rc_ptr< ::mosek::fusion::Expression > _657,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _658) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_656,_657,_658); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _656,monty::rc_ptr< ::mosek::fusion::Expression > _657,monty::rc_ptr< ::mosek::fusion::RangeDomain > _658){ return constraint_(_656,nullptr,_657,_658); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _659,    monty::rc_ptr< ::mosek::fusion::Expression > _660,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _661) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_659,_660,_661); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _659,monty::rc_ptr< ::mosek::fusion::Expression > _660,monty::rc_ptr< ::mosek::fusion::RangeDomain > _661){ return constraint_(std::string (""),_659,_660,_661); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _662,    monty::rc_ptr< ::mosek::fusion::Set > _663,    monty::rc_ptr< ::mosek::fusion::Expression > _664,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _665) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_662,_663,_664,_665); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _662,monty::rc_ptr< ::mosek::fusion::Set > _663,monty::rc_ptr< ::mosek::fusion::Expression > _664,monty::rc_ptr< ::mosek::fusion::RangeDomain > _665){ return constraint_(_662,_663,_664,_665); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _666,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _667) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_666,_667); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _666,monty::rc_ptr< ::mosek::fusion::LinearDomain > _667){ return constraint_(std::string (""),nullptr,_666,_667); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _668,    monty::rc_ptr< ::mosek::fusion::Expression > _669,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _670) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_668,_669,_670); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _668,monty::rc_ptr< ::mosek::fusion::Expression > _669,monty::rc_ptr< ::mosek::fusion::LinearDomain > _670){ return constraint_(_668,nullptr,_669,_670); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Set > _671,    monty::rc_ptr< ::mosek::fusion::Expression > _672,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _673) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_671,_672,_673); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Set > _671,monty::rc_ptr< ::mosek::fusion::Expression > _672,monty::rc_ptr< ::mosek::fusion::LinearDomain > _673){ return constraint_(std::string (""),_671,_672,_673); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _674,    monty::rc_ptr< ::mosek::fusion::Set > _675,    monty::rc_ptr< ::mosek::fusion::Expression > _676,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _677) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_674,_675,_676,_677); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _674,monty::rc_ptr< ::mosek::fusion::Set > _675,monty::rc_ptr< ::mosek::fusion::Expression > _676,monty::rc_ptr< ::mosek::fusion::LinearDomain > _677){ return constraint_(_674,_675,_676,_677); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _678,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _679) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_678,_679); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _678,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _679){ return constraint_(std::string (""),_678,_679); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _680,    monty::rc_ptr< ::mosek::fusion::Expression > _681,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _682) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_680,_681,_682); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _680,monty::rc_ptr< ::mosek::fusion::Expression > _681,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _682){ return constraint_(_680,_681,_682); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( monty::rc_ptr< ::mosek::fusion::Expression > _683,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _684) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_683,_684); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( monty::rc_ptr< ::mosek::fusion::Expression > _683,monty::rc_ptr< ::mosek::fusion::PSDDomain > _684){ return constraint_(std::string (""),_683,_684); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint  ( const std::string & _685,    monty::rc_ptr< ::mosek::fusion::Expression > _686,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _687) { return mosek::fusion::p_Model::_get_impl(this)->constraint(_685,_686,_687); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint( const std::string & _685,monty::rc_ptr< ::mosek::fusion::Expression > _686,monty::rc_ptr< ::mosek::fusion::PSDDomain > _687){ return constraint_(_685,_686,_687); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _688) { return mosek::fusion::p_Model::_get_impl(this)->variable(_688); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _688){ return variable_(std::string (""),mosek::fusion::p_LinPSDDomain::_get_impl(_688)->shape,_688); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _689,    int _690,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _691) { return mosek::fusion::p_Model::_get_impl(this)->variable(_689,_690,_691); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _689,int _690,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _691){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_689,_689,_690),_691); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _692,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _693) { return mosek::fusion::p_Model::_get_impl(this)->variable(_692,_693); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _692,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _693){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_692,_692),_693); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _694,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _695) { return mosek::fusion::p_Model::_get_impl(this)->variable(_694,_695); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _694,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _695){ return variable_(_694,nullptr,_695); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _696,    int _697,    int _698,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _699) { return mosek::fusion::p_Model::_get_impl(this)->variable(_696,_697,_698,_699); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _696,int _697,int _698,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _699){ return variable_(_696,::mosek::fusion::p_Set::make(_697,_697,_698),_699); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _700,    int _701,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _702) { return mosek::fusion::p_Model::_get_impl(this)->variable(_700,_701,_702); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _700,int _701,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _702){ return variable_(_700,::mosek::fusion::p_Set::make(_701,_701),_702); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _703,    monty::rc_ptr< ::mosek::fusion::Set > _704,    monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _705) { return mosek::fusion::p_Model::_get_impl(this)->variable(_703,_704,_705); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _703,monty::rc_ptr< ::mosek::fusion::Set > _704,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _705){ return variable_(_703,_704,_705); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::PSDDomain > _706) { return mosek::fusion::p_Model::_get_impl(this)->variable(_706); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::PSDDomain > _706){ return variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_706)->shape,_706); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _707,    int _708,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _709) { return mosek::fusion::p_Model::_get_impl(this)->variable(_707,_708,_709); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _707,int _708,monty::rc_ptr< ::mosek::fusion::PSDDomain > _709){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_707,_707,_708),_709); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _710,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _711) { return mosek::fusion::p_Model::_get_impl(this)->variable(_710,_711); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _710,monty::rc_ptr< ::mosek::fusion::PSDDomain > _711){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_710,_710),_711); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _712,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _713) { return mosek::fusion::p_Model::_get_impl(this)->variable(_712,_713); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _712,monty::rc_ptr< ::mosek::fusion::PSDDomain > _713){ return variable_(_712,nullptr,_713); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _714,    int _715,    int _716,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _717) { return mosek::fusion::p_Model::_get_impl(this)->variable(_714,_715,_716,_717); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _714,int _715,int _716,monty::rc_ptr< ::mosek::fusion::PSDDomain > _717){ return variable_(_714,::mosek::fusion::p_Set::make(_715,_715,_716),_717); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _718,    int _719,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _720) { return mosek::fusion::p_Model::_get_impl(this)->variable(_718,_719,_720); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _718,int _719,monty::rc_ptr< ::mosek::fusion::PSDDomain > _720){ return variable_(_718,::mosek::fusion::p_Set::make(_719,_719),_720); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _721,    monty::rc_ptr< ::mosek::fusion::Set > _722,    monty::rc_ptr< ::mosek::fusion::PSDDomain > _723) { return mosek::fusion::p_Model::_get_impl(this)->variable(_721,_722,_723); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _721,monty::rc_ptr< ::mosek::fusion::Set > _722,monty::rc_ptr< ::mosek::fusion::PSDDomain > _723){ return variable_(_721,_722,_723); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::Model::variable  ( int _724,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _725) { return mosek::fusion::p_Model::_get_impl(this)->variable(_724,_725); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable( int _724,monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _725){ return variable_(std::string (""),_724,_725); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::Model::variable  ( const std::string & _726,    int _727,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _728) { return mosek::fusion::p_Model::_get_impl(this)->variable(_726,_727,_728); }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable( const std::string & _726,int _727,monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _728){ return variable_(_726,_727,_728); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::QConeDomain > _729) { return mosek::fusion::p_Model::_get_impl(this)->variable(_729); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::QConeDomain > _729){ return variable_(std::string (""),nullptr,_729); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _730) { return mosek::fusion::p_Model::_get_impl(this)->variable(_730); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::RangeDomain > _730){ return ranged_variable(std::string (""),nullptr,_730); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _731) { return mosek::fusion::p_Model::_get_impl(this)->variable(_731); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::LinearDomain > _731){ return variable_(std::string (""),nullptr,_731); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( std::shared_ptr< monty::ndarray< int,1 > > _732,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _733) { return mosek::fusion::p_Model::_get_impl(this)->variable(_732,_733); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( std::shared_ptr< monty::ndarray< int,1 > > _732,monty::rc_ptr< ::mosek::fusion::RangeDomain > _733){ return ranged_variable(std::string (""),::mosek::fusion::p_Set::make(_732),_733); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( std::shared_ptr< monty::ndarray< int,1 > > _734,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _735) { return mosek::fusion::p_Model::_get_impl(this)->variable(_734,_735); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( std::shared_ptr< monty::ndarray< int,1 > > _734,monty::rc_ptr< ::mosek::fusion::LinearDomain > _735){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_734),_735); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::Set > _736,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _737) { return mosek::fusion::p_Model::_get_impl(this)->variable(_736,_737); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::Set > _736,monty::rc_ptr< ::mosek::fusion::QConeDomain > _737){ return variable_(std::string (""),_736,_737); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::Set > _738,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _739) { return mosek::fusion::p_Model::_get_impl(this)->variable(_738,_739); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::Set > _738,monty::rc_ptr< ::mosek::fusion::RangeDomain > _739){ return ranged_variable(std::string (""),_738,_739); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( monty::rc_ptr< ::mosek::fusion::Set > _740,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _741) { return mosek::fusion::p_Model::_get_impl(this)->variable(_740,_741); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( monty::rc_ptr< ::mosek::fusion::Set > _740,monty::rc_ptr< ::mosek::fusion::LinearDomain > _741){ return variable_(std::string (""),_740,_741); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _742,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _743) { return mosek::fusion::p_Model::_get_impl(this)->variable(_742,_743); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _742,monty::rc_ptr< ::mosek::fusion::QConeDomain > _743){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_742),_743); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _744,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _745) { return mosek::fusion::p_Model::_get_impl(this)->variable(_744,_745); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _744,monty::rc_ptr< ::mosek::fusion::RangeDomain > _745){ return ranged_variable(std::string (""),::mosek::fusion::p_Set::make(_744),_745); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _746,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _747) { return mosek::fusion::p_Model::_get_impl(this)->variable(_746,_747); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _746,monty::rc_ptr< ::mosek::fusion::LinearDomain > _747){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_746),_747); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( std::shared_ptr< monty::ndarray< int,1 > > _748) { return mosek::fusion::p_Model::_get_impl(this)->variable(_748); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( std::shared_ptr< monty::ndarray< int,1 > > _748){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_748),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( int _749) { return mosek::fusion::p_Model::_get_impl(this)->variable(_749); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( int _749){ return variable_(std::string (""),::mosek::fusion::p_Set::make(_749),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( ) { return mosek::fusion::p_Model::_get_impl(this)->variable(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( ){ return variable_(std::string (""),::mosek::fusion::p_Set::make((int)1),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _750,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _751) { return mosek::fusion::p_Model::_get_impl(this)->variable(_750,_751); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _750,monty::rc_ptr< ::mosek::fusion::QConeDomain > _751){ return variable_(_750,nullptr,_751); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _752,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _753) { return mosek::fusion::p_Model::_get_impl(this)->variable(_752,_753); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _752,monty::rc_ptr< ::mosek::fusion::RangeDomain > _753){ return ranged_variable(_752,nullptr,_753); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _754,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _755) { return mosek::fusion::p_Model::_get_impl(this)->variable(_754,_755); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _754,monty::rc_ptr< ::mosek::fusion::LinearDomain > _755){ return variable_(_754,nullptr,_755); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _756,    std::shared_ptr< monty::ndarray< int,1 > > _757,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _758) { return mosek::fusion::p_Model::_get_impl(this)->variable(_756,_757,_758); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _756,std::shared_ptr< monty::ndarray< int,1 > > _757,monty::rc_ptr< ::mosek::fusion::RangeDomain > _758){ return ranged_variable(_756,::mosek::fusion::p_Set::make(_757),_758); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _759,    std::shared_ptr< monty::ndarray< int,1 > > _760,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _761) { return mosek::fusion::p_Model::_get_impl(this)->variable(_759,_760,_761); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _759,std::shared_ptr< monty::ndarray< int,1 > > _760,monty::rc_ptr< ::mosek::fusion::LinearDomain > _761){ return _pubthis->variable(_759,::mosek::fusion::p_Set::make(_760),_761); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _762,    monty::rc_ptr< ::mosek::fusion::Set > _763,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _764) { return mosek::fusion::p_Model::_get_impl(this)->variable(_762,_763,_764); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _762,monty::rc_ptr< ::mosek::fusion::Set > _763,monty::rc_ptr< ::mosek::fusion::QConeDomain > _764){ return variable_(_762,_763,_764); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _765,    monty::rc_ptr< ::mosek::fusion::Set > _766,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _767) { return mosek::fusion::p_Model::_get_impl(this)->variable(_765,_766,_767); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _765,monty::rc_ptr< ::mosek::fusion::Set > _766,monty::rc_ptr< ::mosek::fusion::RangeDomain > _767){ return ranged_variable(_765,_766,_767); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _768,    monty::rc_ptr< ::mosek::fusion::Set > _769,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _770) { return mosek::fusion::p_Model::_get_impl(this)->variable(_768,_769,_770); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _768,monty::rc_ptr< ::mosek::fusion::Set > _769,monty::rc_ptr< ::mosek::fusion::LinearDomain > _770){ return variable_(_768,_769,_770); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _771,    int _772,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _773) { return mosek::fusion::p_Model::_get_impl(this)->variable(_771,_772,_773); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _771,int _772,monty::rc_ptr< ::mosek::fusion::QConeDomain > _773){ return variable_(_771,::mosek::fusion::p_Set::make(_772),_773); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _774,    int _775,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _776) { return mosek::fusion::p_Model::_get_impl(this)->variable(_774,_775,_776); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _774,int _775,monty::rc_ptr< ::mosek::fusion::RangeDomain > _776){ return ranged_variable(_774,::mosek::fusion::p_Set::make(_775),_776); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _777,    int _778,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _779) { return mosek::fusion::p_Model::_get_impl(this)->variable(_777,_778,_779); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _777,int _778,monty::rc_ptr< ::mosek::fusion::LinearDomain > _779){ return variable_(_777,::mosek::fusion::p_Set::make(_778),_779); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _780,    std::shared_ptr< monty::ndarray< int,1 > > _781) { return mosek::fusion::p_Model::_get_impl(this)->variable(_780,_781); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _780,std::shared_ptr< monty::ndarray< int,1 > > _781){ return variable_(_780,::mosek::fusion::p_Set::make(_781),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _782,    int _783) { return mosek::fusion::p_Model::_get_impl(this)->variable(_782,_783); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _782,int _783){ return variable_(_782,::mosek::fusion::p_Set::make(_783),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable  ( const std::string & _784) { return mosek::fusion::p_Model::_get_impl(this)->variable(_784); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable( const std::string & _784){ return variable_(_784,::mosek::fusion::p_Set::make((int)1),::mosek::fusion::p_Domain::unbounded()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::ranged_variable( const std::string & _785,int _786,monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > _787){ monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _788 = nullptr; if ((((int)((_785).size()) > (int)0) && hasVariable(_785))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_785).get())->a(std::string ("'")).get())->toString());}else {}int _789 = _786; if ((_789 > (int)0)){ if (((mosek::fusion::p_SymmetricRangeDomain::_get_impl(_787)->dim > (int)0) && (mosek::fusion::p_SymmetricRangeDomain::_get_impl(_787)->dim != _789))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}}else { (_789 = ([&]() -> int { if ( (mosek::fusion::p_SymmetricRangeDomain::_get_impl(_787)->dim > (int)0)) return (mosek::fusion::p_SymmetricRangeDomain::_get_impl(_787)->dim); else return ((int)1); })()); }int _790 = task_vars_used; int _791 = task_numcon(); int _792 = task_numcone(); int _793 = task_numbarvar(); {monty::finally _7493([&]{ if (! _788){ task_cleanup(_790,_791,_792,_793); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _794 = nullptr; int _795 = ((_789 * (_789 + (int)1)) / (int)2); int _796 = (int)0; if (mosek::fusion::p_RangeDomain::_get_impl(_787)->sparse_flag){ (_796 = task_alloc_vars(_795)); natvarmap_ensure(_795); (natvarmap_num = (natvarmap_num + _795)); std::shared_ptr< monty::ndarray< double,1 > > _797 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7494; for (int _798=(int)0, _7495=_789; _798 < _7495;++_798) for (int _799=(int)0, _7496=_798; _799 < _7496;++_799)_7494.push_back(mosek::fusion::p_SymmetricRangeDomain::_get_impl(_787.get())->get_lb_item((long long)((((_798 * (_798 + (int)1)) / (int)2) + _799)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7494.size()),_7494.begin(),_7494.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _800 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7497; for (int _801=(int)0, _7498=_789; _801 < _7498;++_801) for (int _802=(int)0, _7499=_801; _802 < _7499;++_802)_7497.push_back(mosek::fusion::p_SymmetricRangeDomain::_get_impl(_787.get())->get_ub_item((long long)((((_801 * (_801 + (int)1)) / (int)2) + _802)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7497.size()),_7497.begin(),_7497.end())); })(); task_var_putboundslice_ra(_796,(_796 + _795),_797,_800); (_794 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_795)))); int _7500 = (int)0; int _7501 = _795; for (int _803 = _7500;_803<_7501;++_803){ (((*_794)(_803)) = (_796 + _803)); }int _7502 = (int)0; int _7503 = _795; for (int _804 = _7502;_804<_7503;++_804){ (((*natvarmap_idx)((_804 + _796))) = (long long)_804); }int _7504 = (int)0; int _7505 = _795; for (int _805 = _7504;_805<_7505;++_805){ (((*natvarmap_Var)((_805 + _796))) = vars_used); }}else {}(_788 = ::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(_pubthis,_785,::mosek::fusion::RangeDomain::t(_787),_789,_794,numVariables())); if (mosek::fusion::p_RangeDomain::_get_impl(_787)->cardinal_flag){ _788->makeInteger(); }else {}}}addVariable(_785,::mosek::fusion::ModelVariable::t(_788)); return _788; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::ranged_variable( const std::string & _806,monty::rc_ptr< ::mosek::fusion::Set > _807,monty::rc_ptr< ::mosek::fusion::RangeDomain > _808){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _809 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _810; if ((((int)((_806).size()) > (int)0) && hasVariable(_806))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_806).get())->a(std::string ("'")).get())->toString());}else {}if (_807){ if ((! mosek::fusion::p_RangeDomain::_get_impl(_808.get())->match_shape(_807))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}(_810 = _807); }else { (_810 = mosek::fusion::p_RangeDomain::_get_impl(_808)->shape); if (! _810){ (_810 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else {}}int _811 = task_vars_used; int _812 = task_numcon(); int _813 = task_numcone(); int _814 = task_numbarvar(); {monty::finally _7506([&]{ if (! _809){ task_cleanup(_811,_812,_813,_814); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _815 = nullptr; int _816 = (int)mosek::fusion::p_Set::_get_impl(_810)->size; int _817 = (int)0; if ((! mosek::fusion::p_RangeDomain::_get_impl(_808)->sparse_flag)){ (_817 = task_alloc_vars(_816)); natvarmap_ensure(_816); (natvarmap_num = (natvarmap_num + _816)); std::shared_ptr< monty::ndarray< double,1 > > _818 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7507; for (long long _819=(long long)0, _7508=_816; _819 < _7508;++_819)_7507.push_back(mosek::fusion::p_RangeDomain::_get_impl(_808.get())->get_lb_item(_819)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7507.size()),_7507.begin(),_7507.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _820 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7509; for (long long _821=(long long)0, _7510=_816; _821 < _7510;++_821)_7509.push_back(mosek::fusion::p_RangeDomain::_get_impl(_808.get())->get_ub_item(_821)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7509.size()),_7509.begin(),_7509.end())); })(); task_var_putboundslice_ra(_817,(_817 + _816),_818,_820); (_815 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_816)))); int _7511 = (int)0; int _7512 = _816; for (int _822 = _7511;_822<_7512;++_822){ (((*_815)(_822)) = (_817 + _822)); }int _7513 = (int)0; int _7514 = _816; for (int _823 = _7513;_823<_7514;++_823){ (((*natvarmap_idx)((_823 + _817))) = (long long)_823); }int _7515 = (int)0; int _7516 = _816; for (int _824 = _7515;_824<_7516;++_824){ (((*natvarmap_Var)((_824 + _817))) = vars_used); }}else {}(_809 = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(_pubthis,_806,_810,_808,_815,numVariables())); if (mosek::fusion::p_RangeDomain::_get_impl(_808)->cardinal_flag){ _809->makeInteger(); }else {}}}addVariable(_806,_809); return _809; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable_( const std::string & _825,monty::rc_ptr< ::mosek::fusion::Set > _826,monty::rc_ptr< ::mosek::fusion::QConeDomain > _827){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _828 = nullptr; monty::rc_ptr< ::mosek::fusion::ModelVariable > _829 = nullptr; if ((((int)((_825).size()) > (int)0) && hasVariable(_825))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_825).get())->a(std::string ("'")).get())->toString());}else {}monty::rc_ptr< ::mosek::fusion::Set > _830 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _826) return (_826); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_QConeDomain::_get_impl(_827)->shape) return (mosek::fusion::p_QConeDomain::_get_impl(_827)->shape); else return (::mosek::fusion::p_IntSet::_new_IntSet((int)1)); })()); })(); if (((! mosek::fusion::p_QConeDomain::_get_impl(_827.get())->match_shape(_830)) || (_827->getAxis() >= mosek::fusion::p_Set::_get_impl(_830)->nd))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}int _831 = ([&]() -> int { if ( mosek::fusion::p_QConeDomain::_get_impl(_827)->shape) return (_827->getAxis()); else return ((mosek::fusion::p_Set::_get_impl(_830)->nd - (int)1)); })(); int _832 = _830->dim(_831); int _833 = (int)1; int _7517 = (int)0; int _7518 = mosek::fusion::p_Set::_get_impl(_830)->nd; for (int _834 = _7517;_834<_7518;++_834){ if ((_831 != _834)){ (_833 *= _830->dim(_834)); }else {}}int _835 = (int)1; int _7519 = (int)0; int _7520 = _831; for (int _836 = _7519;_836<_7520;++_836){ (_835 *= _830->dim(_836)); }int _837 = (int)1; int _7521 = (_831 + (int)1); int _7522 = mosek::fusion::p_Set::_get_impl(_830)->nd; for (int _838 = _7521;_838<_7522;++_838){ (_837 *= _830->dim(_838)); }if ((((mosek::fusion::p_QConeDomain::_get_impl(_827)->key == ::mosek::fusion::QConeKey::InQCone) && (_832 < (int)2)) || ((mosek::fusion::p_QConeDomain::_get_impl(_827)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_832 < (int)3)))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for cone"));}else {}int _839 = task_vars_used; int _840 = task_numcon(); int _841 = task_numcone(); int _842 = task_numbarvar(); {monty::finally _7523([&]{ if (! _828){ (natvarmap_num = _839); (natbarvarmap_num = _842); task_cleanup(_839,_840,_841,_842); }else {}});{ int _843 = (int)mosek::fusion::p_Set::_get_impl(_830)->size; int _844 = task_alloc_vars(_843); natvarmap_ensure(_843); (natvarmap_num = (natvarmap_num + _843)); int _845 = (_844 + _843); int _7524 = (int)0; int _7525 = (_845 - _844); for (int _846 = _7524;_846<_7525;++_846){ (((*natvarmap_idx)((_846 + _844))) = (long long)_846); }task_var_putboundslice_fr(_844,_845); if (mosek::fusion::p_QConeDomain::_get_impl(_827)->int_flag){ task_var_putintlist(::mosek::fusion::Utils::Tools::range(_844,_845)); }else {}int _847; std::shared_ptr< monty::ndarray< int,1 > > _848 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7526; for (int _849=(int)0, _7527=(_833 * _832); _849 < _7527;++_849)_7526.push_back((_849 + _844)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7526.size()),_7526.begin(),_7526.end())); })(); if ((mosek::fusion::p_QConeDomain::_get_impl(_827)->key == ::mosek::fusion::QConeKey::InQCone)){ (_847 = task_append_quadcone(_832,_844,_833,_835,_837)); }else { (_847 = task_append_rquadcone(_832,_844,_833,_835,_837)); }(_829 = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(_pubthis,_825,_827,_830,_848,_832,_847,_833,numVariables())); if (mosek::fusion::p_QConeDomain::_get_impl(_827)->int_flag){ }else {}int _7528 = (int)0; int _7529 = _843; for (int _850 = _7528;_850<_7529;++_850){ (((*natvarmap_Var)((_850 + _844))) = vars_used); }(_828 = _829); }}addVariable(_825,_828); return _828; }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable_( const std::string & _851,int _852,monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _853){ monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _854 = nullptr; if ((((int)((_851).size()) > (int)0) && hasVariable(_851))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_851).get())->a(std::string ("'")).get())->toString());}else {}int _855 = _852; if ((_855 > (int)0)){ if (((mosek::fusion::p_SymmetricLinearDomain::_get_impl(_853)->dim > (int)0) && (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_853)->dim != _855))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}}else { (_855 = ([&]() -> int { if ( (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_853)->dim > (int)0)) return (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_853)->dim); else return ((int)1); })()); }int _856 = task_vars_used; int _857 = task_numcon(); int _858 = task_numcone(); int _859 = task_numbarvar(); {monty::finally _7530([&]{ if (! _854){ task_cleanup(_856,_857,_858,_859); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _860 = nullptr; mosek::fusion::RelationKey _861 = mosek::fusion::p_SymmetricLinearDomain::_get_impl(_853)->key; int _862 = ((_855 * (_855 + (int)1)) / (int)2); int _863 = (int)0; if ((! mosek::fusion::p_SymmetricLinearDomain::_get_impl(_853)->sparse_flag)){ (_863 = task_alloc_vars(_862)); natvarmap_ensure(_862); (natvarmap_num = (natvarmap_num + _862)); if ((_861 == ::mosek::fusion::RelationKey::IsFree)){ task_var_putboundslice_fr(_863,(_863 + _862)); }else { std::shared_ptr< monty::ndarray< double,1 > > _864 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_862))); { int _865 = (int)0; int _7531 = (int)0; int _7532 = _855; for (int _866 = _7531;_866<_7532;++_866){ int _7533 = (int)0; int _7534 = _866; for (int _867 = _7533;_867<_7534;++_867){ (((*_864)(_865)) = mosek::fusion::p_SymmetricLinearDomain::_get_impl(_853.get())->get_rhs_item((long long)(((_866 * _855) + _867)))); ( ++ _865 ); }}}if ((_861 == ::mosek::fusion::RelationKey::LessThan)){ task_var_putboundslice_up(_863,(_863 + _862),_864); }else if ((_861 == ::mosek::fusion::RelationKey::GreaterThan)){ task_var_putboundslice_lo(_863,(_863 + _862),_864); }else if ((_861 == ::mosek::fusion::RelationKey::EqualsTo)){ task_var_putboundslice_fx(_863,(_863 + _862),_864); }else {}}(_860 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7535; for (int _868=(int)0, _7536=_862; _868 < _7536;++_868)_7535.push_back((_863 + _868)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7535.size()),_7535.begin(),_7535.end())); })()); int _7537 = (int)0; int _7538 = _862; for (int _869 = _7537;_869<_7538;++_869){ (((*natvarmap_idx)((_869 + _863))) = (long long)_869); }}else {}(_854 = ::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(_pubthis,_851,_853,_855,_860,numVariables())); if (mosek::fusion::p_SymmetricLinearDomain::_get_impl(_853)->cardinal_flag){ _854->makeInteger(); }else {}if ((! mosek::fusion::p_SymmetricLinearDomain::_get_impl(_853)->sparse_flag)){ int _7539 = (int)0; int _7540 = _862; for (int _870 = _7539;_870<_7540;++_870){ (((*natvarmap_Var)((_870 + _863))) = vars_used); }}else {}}}addVariable(_851,::mosek::fusion::ModelVariable::t(_854)); return _854; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable_( const std::string & _871,monty::rc_ptr< ::mosek::fusion::Set > _872,monty::rc_ptr< ::mosek::fusion::LinearDomain > _873){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _874 = nullptr; monty::rc_ptr< ::mosek::fusion::ModelVariable > _875 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _876; if ((((int)((_871).size()) > (int)0) && hasVariable(_871))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate variable name '")).get())->a(_871).get())->a(std::string ("'")).get())->toString());}else {}if (_872){ if ((! mosek::fusion::p_LinearDomain::_get_impl(_873.get())->match_shape(_872))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}(_876 = _872); }else { (_876 = mosek::fusion::p_LinearDomain::_get_impl(_873)->shape); if (! _876){ (_876 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else {}}int _877 = task_vars_used; int _878 = task_numcon(); int _879 = task_numcone(); int _880 = task_numbarvar(); {monty::finally _7541([&]{ if (! _874){ task_cleanup(_877,_878,_879,_880); }else {}});{ std::shared_ptr< monty::ndarray< int,1 > > _881 = nullptr; mosek::fusion::RelationKey _882 = mosek::fusion::p_LinearDomain::_get_impl(_873)->key; int _883 = (int)mosek::fusion::p_Set::_get_impl(_876)->size; int _884 = (int)0; if ((! mosek::fusion::p_LinearDomain::_get_impl(_873)->sparse_flag)){ (_884 = task_alloc_vars(_883)); natvarmap_ensure(_883); (natvarmap_num = (natvarmap_num + _883)); if ((_882 == ::mosek::fusion::RelationKey::IsFree)){ task_var_putboundslice_fr(_884,(_884 + _883)); }else { std::shared_ptr< monty::ndarray< double,1 > > _885 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_883))); int _7542 = (int)0; int _7543 = _883; for (int _886 = _7542;_886<_7543;++_886){ (((*_885)(_886)) = mosek::fusion::p_LinearDomain::_get_impl(_873.get())->get_rhs_item((long long)_886)); }if ((_882 == ::mosek::fusion::RelationKey::LessThan)){ task_var_putboundslice_up(_884,(_884 + _883),_885); }else if ((_882 == ::mosek::fusion::RelationKey::GreaterThan)){ task_var_putboundslice_lo(_884,(_884 + _883),_885); }else if ((_882 == ::mosek::fusion::RelationKey::EqualsTo)){ task_var_putboundslice_fx(_884,(_884 + _883),_885); }else {}}(_881 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7544; for (int _887=(int)0, _7545=_883; _887 < _7545;++_887)_7544.push_back((_884 + _887)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7544.size()),_7544.begin(),_7544.end())); })()); int _7546 = (int)0; int _7547 = _883; for (int _888 = _7546;_888<_7547;++_888){ (((*natvarmap_idx)((_888 + _884))) = (long long)_888); }}else {}(_875 = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(_pubthis,_871,_873,_876,_881,numVariables())); if (mosek::fusion::p_LinearDomain::_get_impl(_873)->cardinal_flag){ }else {}(_874 = _875); if (mosek::fusion::p_LinearDomain::_get_impl(_873)->cardinal_flag){ _875->makeInteger(); }else {}if ((! mosek::fusion::p_LinearDomain::_get_impl(_873)->sparse_flag)){ int _7548 = (int)0; int _7549 = _883; for (int _889 = _7548;_889<_7549;++_889){ (((*natvarmap_Var)((_889 + _884))) = vars_used); }}else {}}}addVariable(_871,_874); return _874; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::variable_( const std::string & _890,monty::rc_ptr< ::mosek::fusion::Set > _891,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _892){ monty::rc_ptr< ::mosek::fusion::Set > _893 = nullptr; if (! _891){ if (! mosek::fusion::p_LinPSDDomain::_get_impl(_892)->shape){ throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));}else { (_893 = mosek::fusion::p_LinPSDDomain::_get_impl(_892)->shape); }}else if (! mosek::fusion::p_LinPSDDomain::_get_impl(_892)->shape){ (_893 = _891); }else { if (((mosek::fusion::p_Set::_get_impl(_891)->nd != mosek::fusion::p_Set::_get_impl(mosek::fusion::p_LinPSDDomain::_get_impl(_892)->shape)->nd) || ((_891->dim((int)0) != mosek::fusion::p_LinPSDDomain::_get_impl(_892)->shape->dim((int)0)) || (_891->dim((int)1) != mosek::fusion::p_LinPSDDomain::_get_impl(_892)->shape->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Ambiguous dimensions for variable"));}else { (_893 = _891); }}int _894 = _893->dim((int)0); int _895 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(((int)1 + ((int)8 * _894)))) - (int)1) / (int)2); if ((((_895 * (_895 + (int)1)) / (int)2) != _894)){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));}else {}int _896 = (int)1; int _7550 = (int)1; int _7551 = mosek::fusion::p_Set::_get_impl(_893)->nd; for (int _897 = _7550;_897<_7551;++_897){ (_896 *= _893->dim(_897)); }int _898 = task_append_barvar(_895,_896); monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _899 = ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(_pubthis,_890,_895,_893,_898,numVariables()); natbarvarmap_ensure((int)1); (((*natbarvarmap_Var)(natbarvarmap_num)) = vars_used); ( ++ natbarvarmap_num ); addVariable(_890,::mosek::fusion::ModelVariable::t(_899)); return _899; }monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::variable_( const std::string & _900,monty::rc_ptr< ::mosek::fusion::Set > _901,monty::rc_ptr< ::mosek::fusion::PSDDomain > _902){ int _903; int _904; if (_901){ if (((mosek::fusion::p_Set::_get_impl(_901)->nd != (int)2) && (mosek::fusion::p_Set::_get_impl(_901)->nd != (int)3))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for semidefinite variables"));}else if ((_901->dim((int)0) != _901->dim((int)1))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for semidefinite variables"));}else {}(_903 = _901->dim((int)0)); if ((mosek::fusion::p_Set::_get_impl(_901)->nd > (int)2)){ (_904 = _901->dim((int)2)); }else { (_904 = (int)1); }if ((mosek::fusion::p_PSDDomain::_get_impl(_902)->shape && ((mosek::fusion::p_PSDDomain::_get_impl(_902)->shape->dim((int)0) != _903) || ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_PSDDomain::_get_impl(_902)->shape)->nd == (int)3) && (mosek::fusion::p_PSDDomain::_get_impl(_902)->shape->dim((int)2) != _904))))){ throw ::mosek::fusion::DomainError(std::string ("Domain and shape do not match"));}else {}}else { if (! mosek::fusion::p_PSDDomain::_get_impl(_902)->shape){ throw ::mosek::fusion::DomainError(std::string ("Either domain size of shape must be defined"));}else { (_903 = mosek::fusion::p_PSDDomain::_get_impl(_902)->shape->dim((int)0)); (_904 = mosek::fusion::p_PSDDomain::_get_impl(_902)->shape->dim((int)2)); }}int _905 = task_append_barvar(_903,_904); monty::rc_ptr< ::mosek::fusion::PSDVariable > _906 = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(_pubthis,_900,_903,_905,_904,numVariables()); natbarvarmap_ensure((int)1); (((*natbarvarmap_Var)(natbarvarmap_num)) = vars_used); ( ++ natbarvarmap_num ); addVariable(_900,::mosek::fusion::ModelVariable::t(_906)); return _906; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _907,monty::rc_ptr< ::mosek::fusion::Set > _908,monty::rc_ptr< ::mosek::fusion::Expression > _909,monty::rc_ptr< ::mosek::fusion::RangeDomain > _910){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _911 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _912; if ((((int)((_907).size()) > (int)0) && hasConstraint(_907))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_907).get())->a(std::string ("'")).get())->toString());}else {}(_912 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _908) return (_908); else return (_909->getShape()); })()); if ((! mosek::fusion::p_RangeDomain::_get_impl(_910.get())->match_shape(_912))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _913 = _909->eval(); { int _7552 = (int)0; int _7553 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_913)->x)->size(0)); for (int _914 = _7552;_914<_7553;++_914){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_913)->x)(_914))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_913)->x)(_914))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _915 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_913)->ptrb,mosek::fusion::p_Set::_get_impl(_912)->size,mosek::fusion::p_FlatExpr::_get_impl(_913)->inst,mosek::fusion::p_FlatExpr::_get_impl(_913)->subj,mosek::fusion::p_FlatExpr::_get_impl(_913)->cof,mosek::fusion::p_FlatExpr::_get_impl(_913)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_913)->x); int _916 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_915)->ptrb)->size(0)) - (int)1); int _917 = task_vars_used; int _918 = task_numcone(); int _919 = task_numcon(); int _920 = task_numbarvar(); {monty::finally _7554([&]{ if (! _911){ (natvarmap_num = _917); (natbarvarmap_num = _920); task_cleanup(_917,_919,_918,_920); }else {}});{ int _921 = _916; int _922 = task_append_con(_921); int _923 = (_922 + _921); if (((int)((_907).size()) > (int)0)){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _924 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); { int _925 = (int)0; for (;(_925 < _921);( ++ _925 )){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_924.get())->clear().get())->a(_907).get())->a(std::string ("[")).get())->a(_925).get())->a(std::string ("]")); task_con_name((_925 + _922),mosek::fusion::Utils::p_StringBuffer::_get_impl(_924.get())->toString()); }}}else {}if ((mosek::fusion::p_ConNZStruct::_get_impl(_915)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_915)->subj)->size(0)) > (int)0))){ task_putarowslice(_922,_923,mosek::fusion::p_ConNZStruct::_get_impl(_915)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_915)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_915)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_915)->barsubi){ int _7555 = (int)0; int _7556 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_915)->barsubi)->size(0)); for (int _926 = _7555;_926<_7556;++_926){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_915)->barsubi)(_926)) + _922),((*mosek::fusion::p_ConNZStruct::_get_impl(_915)->barsubj)(_926)),((*mosek::fusion::p_ConNZStruct::_get_impl(_915)->barmidx)(_926))); }}else {}std::shared_ptr< monty::ndarray< double,1 > > _927 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_916))); std::shared_ptr< monty::ndarray< double,1 > > _928 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_916))); if (mosek::fusion::p_ConNZStruct::_get_impl(_915)->bfix){ int _7557 = (int)0; int _7558 = _916; for (int _929 = _7557;_929<_7558;++_929){ (((*_927)(_929)) = (mosek::fusion::p_RangeDomain::_get_impl(_910.get())->get_lb_item((long long)_929) - ((*mosek::fusion::p_ConNZStruct::_get_impl(_915)->bfix)(_929)))); (((*_928)(_929)) = (mosek::fusion::p_RangeDomain::_get_impl(_910.get())->get_ub_item((long long)_929) - ((*mosek::fusion::p_ConNZStruct::_get_impl(_915)->bfix)(_929)))); }}else { int _930 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_915)->ptrb)->size(0)) - (int)1); int _7559 = (int)0; int _7560 = _916; for (int _931 = _7559;_931<_7560;++_931){ (((*_927)(_931)) = mosek::fusion::p_RangeDomain::_get_impl(_910.get())->get_lb_item((long long)_931)); (((*_928)(_931)) = mosek::fusion::p_RangeDomain::_get_impl(_910.get())->get_ub_item((long long)_931)); }}std::shared_ptr< monty::ndarray< int,1 > > _932 = ::mosek::fusion::Utils::Tools::range(_922,_923); task_con_putboundslice_ra(_922,_923,_927,_928); (_911 = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(_pubthis,_907,_912,_910,_932,mosek::fusion::p_ConNZStruct::_get_impl(_915)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_915)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_915)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_915)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_915)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_915)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_915)->barmidx)); addConstraint(_907,_911); }}return _911; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _933,monty::rc_ptr< ::mosek::fusion::Set > _934,monty::rc_ptr< ::mosek::fusion::Expression > _935,monty::rc_ptr< ::mosek::fusion::QConeDomain > _936){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _937 = nullptr; int _938 = (int)mosek::fusion::p_Set::_get_impl(_935->getShape())->size; if ((((int)((_933).size()) > (int)0) && hasConstraint(_933))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_933).get())->a(std::string ("'")).get())->toString());}else {}monty::rc_ptr< ::mosek::fusion::Set > _939 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _934) return (_934); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_QConeDomain::_get_impl(_936)->shape) return (mosek::fusion::p_QConeDomain::_get_impl(_936)->shape); else return (_935->getShape()); })()); })(); if (((mosek::fusion::p_QConeDomain::_get_impl(_936)->shape && (! mosek::fusion::p_QConeDomain::_get_impl(_936.get())->match_shape(_939))) || (_935->getShape() && (! _939->compare(_935->getShape()))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}int _940 = ([&]() -> int { if ( mosek::fusion::p_QConeDomain::_get_impl(_936)->shape) return (_936->getAxis()); else return ((mosek::fusion::p_Set::_get_impl(_939)->nd - (int)1)); })(); int _941 = _939->dim(_940); int _942 = (int)1; int _7561 = (int)0; int _7562 = mosek::fusion::p_Set::_get_impl(_939)->nd; for (int _943 = _7561;_943<_7562;++_943){ if ((_940 != _943)){ (_942 *= _939->dim(_943)); }else {}}int _944 = (int)1; int _7563 = (int)0; int _7564 = _940; for (int _945 = _7563;_945<_7564;++_945){ (_944 *= _939->dim(_945)); }int _946 = (int)1; int _7565 = (_940 + (int)1); int _7566 = mosek::fusion::p_Set::_get_impl(_939)->nd; for (int _947 = _7565;_947<_7566;++_947){ (_946 *= _939->dim(_947)); }monty::rc_ptr< ::mosek::fusion::FlatExpr > _948 = _935->eval(); { int _7567 = (int)0; int _7568 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_948)->x)->size(0)); for (int _949 = _7567;_949<_7568;++_949){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_948)->x)(_949))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_948)->x)(_949))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _950 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_948)->ptrb,mosek::fusion::p_Set::_get_impl(_939)->size,mosek::fusion::p_FlatExpr::_get_impl(_948)->inst,mosek::fusion::p_FlatExpr::_get_impl(_948)->subj,mosek::fusion::p_FlatExpr::_get_impl(_948)->cof,mosek::fusion::p_FlatExpr::_get_impl(_948)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_948)->x); int _951 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_950)->ptrb)->size(0)) - (int)1); int _952 = task_vars_used; int _953 = task_numcon(); int _954 = task_numcone(); int _955 = task_numbarvar(); {monty::finally _7569([&]{ if (! _937){ (natvarmap_num = _952); (natbarvarmap_num = _955); task_cleanup(_952,_953,_954,_955); }else {}});{ int _956 = task_append_con(_951); int _957 = (_956 + _951); if ((mosek::fusion::p_ConNZStruct::_get_impl(_950)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_950)->subj)->size(0)) > (int)0))){ task_putarowslice(_956,_957,mosek::fusion::p_ConNZStruct::_get_impl(_950)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_950)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_950)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_950)->barsubi){ int _7570 = (int)0; int _7571 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_950)->barsubi)->size(0)); for (int _958 = _7570;_958<_7571;++_958){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_950)->barsubi)(_958)) + _956),((*mosek::fusion::p_ConNZStruct::_get_impl(_950)->barsubj)(_958)),((*mosek::fusion::p_ConNZStruct::_get_impl(_950)->barmidx)(_958))); }}else {}std::shared_ptr< monty::ndarray< int,1 > > _959 = ::mosek::fusion::Utils::Tools::range(_956,_957); std::shared_ptr< monty::ndarray< double,1 > > _960 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_957 - _956)))); int _961 = (_941 * _942); std::shared_ptr< monty::ndarray< double,1 > > _962 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_961))); { std::shared_ptr< monty::ndarray< double,1 > > _963 = mosek::fusion::p_ConNZStruct::_get_impl(_950)->bfix; std::shared_ptr< monty::ndarray< double,1 > > _964 = mosek::fusion::p_FlatExpr::_get_impl(_948)->bfix; { if (! mosek::fusion::p_ConNZStruct::_get_impl(_950)->bfix){ int _7572 = (int)0; int _7573 = (_957 - _956); for (int _965 = _7572;_965<_7573;++_965){ (((*_960)(_965)) = (- ((*mosek::fusion::p_ConNZStruct::_get_impl(_950)->bfix)(_965)))); }}else {}if (mosek::fusion::p_FlatExpr::_get_impl(_948)->bfix){ int _7574 = (int)0; int _7575 = _961; for (int _966 = _7574;_966<_7575;++_966){ (((*_962)(_966)) = (- ((*mosek::fusion::p_ConNZStruct::_get_impl(_950)->bfix)(_966)))); }}else {}}}task_con_putboundslice_fx(_956,_957,_962); int _967 = task_alloc_vars(_961); natvarmap_ensure(_961); (natvarmap_num = (natvarmap_num + _961)); int _968 = (_967 + _961); task_putaijlist(::mosek::fusion::Utils::Tools::range(_956,_957),::mosek::fusion::Utils::Tools::range(_967,_968),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7576; for (int _969=(int)0, _7577=_961; _969 < _7577;++_969)_7576.push_back((- 1.0)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7576.size()),_7576.begin(),_7576.end())); })(),(long long)(_961)); task_var_putboundslice_fr(_967,_968); int _970; if ((mosek::fusion::p_QConeDomain::_get_impl(_936)->key == ::mosek::fusion::QConeKey::InQCone)){ (_970 = task_append_quadcone(_941,_967,_942,_944,_946)); }else { (_970 = task_append_rquadcone(_941,_967,_942,_944,_946)); }(_937 = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(_pubthis,_933,_936,_939,::mosek::fusion::Utils::Tools::range(_956,_957),_967,_968,_941,_970,_942,mosek::fusion::p_ConNZStruct::_get_impl(_950)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_950)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_950)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_950)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_950)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_950)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_950)->barmidx)); addConstraint(_933,_937); return _937; }}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _971,monty::rc_ptr< ::mosek::fusion::Set > _972,monty::rc_ptr< ::mosek::fusion::Expression > _973,monty::rc_ptr< ::mosek::fusion::LinearDomain > _974){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _975 = nullptr; int _976 = (int)mosek::fusion::p_Set::_get_impl(_973->getShape())->size; monty::rc_ptr< ::mosek::fusion::Set > _977; if ((((int)((_971).size()) > (int)0) && hasConstraint(_971))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_971).get())->a(std::string ("'")).get())->toString());}else {}(_977 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _972) return (_972); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_LinearDomain::_get_impl(_974)->shape) return (mosek::fusion::p_LinearDomain::_get_impl(_974)->shape); else return (_973->getShape()); })()); })()); if (((mosek::fusion::p_LinearDomain::_get_impl(_974)->shape && (! mosek::fusion::p_LinearDomain::_get_impl(_974.get())->match_shape(_977))) || (_973->getShape() && (! _977->compare(_973->getShape()))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _978 = _973->eval(); { int _7578 = (int)0; int _7579 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_978)->x)->size(0)); for (int _979 = _7578;_979<_7579;++_979){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_978)->x)(_979))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_978)->x)(_979))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _980 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_978)->ptrb,mosek::fusion::p_Set::_get_impl(_977)->size,mosek::fusion::p_FlatExpr::_get_impl(_978)->inst,mosek::fusion::p_FlatExpr::_get_impl(_978)->subj,mosek::fusion::p_FlatExpr::_get_impl(_978)->cof,mosek::fusion::p_FlatExpr::_get_impl(_978)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_978)->x); int _981 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_980)->ptrb)->size(0)) - (int)1); int _982 = task_vars_used; int _983 = task_numcon(); int _984 = task_numcone(); int _985 = task_numbarvar(); {monty::finally _7580([&]{ if (! _975){ (natvarmap_num = _982); (natbarvarmap_num = _985); task_cleanup(_982,_983,_984,_985); }else {}});{ int _986 = _981; int _987 = task_append_con(_986); int _988 = (_987 + _986); if ((mosek::fusion::p_ConNZStruct::_get_impl(_980)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_980)->subj)->size(0)) > (int)0))){ task_putarowslice(_987,_988,mosek::fusion::p_ConNZStruct::_get_impl(_980)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_980)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_980)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_980)->barsubi){ int _7581 = (int)0; int _7582 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_980)->barsubi)->size(0)); for (int _989 = _7581;_989<_7582;++_989){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_980)->barsubi)(_989)) + _987),((*mosek::fusion::p_ConNZStruct::_get_impl(_980)->barsubj)(_989)),((*mosek::fusion::p_ConNZStruct::_get_impl(_980)->barmidx)(_989))); }}else {}std::shared_ptr< monty::ndarray< int,1 > > _990 = ::mosek::fusion::Utils::Tools::range(_987,_988); std::shared_ptr< monty::ndarray< double,1 > > _991 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_ConNZStruct::_get_impl(_980)->bfix) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7583; for (int _992=(int)0, _7584=(_988 - _987); _992 < _7584;++_992)_7583.push_back(mosek::fusion::p_LinearDomain::_get_impl(_974.get())->get_rhs_item((long long)(_992))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7583.size()),_7583.begin(),_7583.end())); })()); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7585; for (int _993=(int)0, _7586=(_988 - _987); _993 < _7586;++_993)_7585.push_back((mosek::fusion::p_LinearDomain::_get_impl(_974.get())->get_rhs_item((long long)(_993)) - ((*mosek::fusion::p_ConNZStruct::_get_impl(_980)->bfix)(_993)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7585.size()),_7585.begin(),_7585.end())); })()); })(); mosek::fusion::RelationKey _994 = mosek::fusion::p_LinearDomain::_get_impl(_974)->key; if ((_994 == ::mosek::fusion::RelationKey::IsFree)){ task_con_putboundslice_fr(_987,_988); }else if ((_994 == ::mosek::fusion::RelationKey::LessThan)){ task_con_putboundslice_up(_987,_988,_991); }else if ((_994 == ::mosek::fusion::RelationKey::GreaterThan)){ task_con_putboundslice_lo(_987,_988,_991); }else { task_con_putboundslice_fx(_987,_988,_991); }(_975 = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(_pubthis,_971,_974,_977,_990,mosek::fusion::p_ConNZStruct::_get_impl(_980)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_980)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_980)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_980)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_980)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_980)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_980)->barmidx)); addConstraint(_971,_975); return _975; }}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > mosek::fusion::p_Model::build_conA( std::shared_ptr< monty::ndarray< long long,1 > > _995,long long _996,std::shared_ptr< monty::ndarray< long long,1 > > _997,std::shared_ptr< monty::ndarray< long long,1 > > _998,std::shared_ptr< monty::ndarray< double,1 > > _999,std::shared_ptr< monty::ndarray< double,1 > > _1000,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1001){ std::shared_ptr< monty::ndarray< int,1 > > _1002 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _1003 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_996 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _1004 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _1005 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _997) return (_997); else return (([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7587; for (long long _1006=(long long)0, _7588=((int)((_995)->size(0)) - (int)1); _1006 < _7588;++_1006)_7587.push_back(_1006); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7587.size()),_7587.begin(),_7587.end())); })()); })(); std::shared_ptr< monty::ndarray< double,1 > > _1007 = _1000; int _1008 = (int)0; int _1009 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _1010; std::shared_ptr< monty::ndarray< int,1 > > _1011; std::shared_ptr< monty::ndarray< int,1 > > _1012; std::shared_ptr< monty::ndarray< long long,1 > > _1013; { int _1014 = (int)((_998)->size(0)); (_1010 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1014)))); (_1011 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1014)))); (_1012 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1014)))); std::shared_ptr< monty::ndarray< int,1 > > _1015 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1014))); ::mosek::fusion::p_Model::inst(_1001,_998,_1010,_1011,_1012); (_1013 = ::mosek::fusion::Utils::Tools::range((long long)((_998)->size(0)))); if ((_1014 > ((int)3 * (int)((_995)->size(0))))){ int _7589 = (int)0; int _7590 = ((int)((_995)->size(0)) - (int)1); for (int _1016 = _7589;_1016<_7590;++_1016){ ::mosek::fusion::p_Sort::argsort(_1013,_1010,((*_995)(_1016)),((*_995)((_1016 + (int)1))),true); long long _7591 = ((*_995)(_1016)); long long _7592 = ((*_995)((_1016 + (int)1))); for (long long _1017 = _7591;_1017<_7592;++_1017){ (((*_1015)(_1017)) = _1016); }}}else { int _7593 = (int)0; int _7594 = ((int)((_995)->size(0)) - (int)1); for (int _1018 = _7593;_1018<_7594;++_1018){ long long _7595 = ((*_995)(_1018)); long long _7596 = ((*_995)((_1018 + (int)1))); for (long long _1019 = _7595;_1019<_7596;++_1019){ (((*_1015)(_1019)) = _1018); }}::mosek::fusion::p_Sort::argsort(_1013,_1015,_1010,(long long)((int)0),(long long)((int)((_1013)->size(0))),true); }(_1009 = (int)0); (_1008 = (int)0); if (((int)((_1013)->size(0)) > (int)0)){ if ((((*_1010)(((*_1013)((int)0)))) >= (int)0)){ ( ++ _1009 ); }else { ( ++ _1008 ); }int _7597 = (int)1; int _7598 = _1014; for (int _1020 = _7597;_1020<_7598;++_1020){ if ((((*_1010)(((*_1013)(_1020)))) < (int)0)){ ( ++ _1008 ); }else if (((((*_1015)(((*_1013)(_1020)))) != ((*_1015)(((*_1013)((_1020 - (int)1)))))) || (((*_1010)(((*_1013)(_1020)))) != ((*_1010)(((*_1013)((_1020 - (int)1)))))))){ ( ++ _1009 ); }else {}}}else {}if ((_1009 == _1014)){ (_1002 = _1010); (_1004 = _999); if (((int)((_1005)->size(0)) == _996)){ (_1003 = _995); }else { int _1021 = (int)0; int _7599 = (int)0; int _7600 = ((int)((_1003)->size(0)) - (int)1); for (int _1022 = _7599;_1022<_7600;++_1022){ if (((_1021 < (int)((_1005)->size(0))) && (_1022 == ((*_1005)(_1021))))){ ( ++ _1021 ); (((*_1003)((_1022 + (int)1))) = ((*_995)(_1021))); }else { (((*_1003)((_1022 + (int)1))) = ((*_1003)(_1022))); }}}}else { int _1023 = (int)0; long long _1024 = (long long)0; (_1002 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1009)))); (_1004 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1009)))); int _1025 = (int)0; int _7601 = (int)0; int _7602 = ((int)((_1003)->size(0)) - (int)1); for (int _1026 = _7601;_1026<_7602;++_1026){ if (((_1025 >= (int)((_1005)->size(0))) || (_1026 != ((*_1005)(_1025))))){ (((*_1003)((_1026 + (int)1))) = ((*_1003)(_1026))); }else { long long _1027 = ((*_995)(_1025)); while (((_1027 < ((*_995)((_1025 + (int)1)))) && (((*_1010)(((*_1013)(_1027)))) < (int)0))) { ( ++ _1027 ); }long long _1028 = _1027; while ((_1028 < ((*_995)((_1025 + (int)1))))) { ( ++ _1028 ); }if ((_1028 > _1027)){ int _1029 = (int)0; (((*_1002)(((*_1003)(_1026)))) = ((*_1010)(((*_1013)(_1027))))); (((*_1004)(((*_1003)(_1026)))) = ((*_999)(((*_1013)(_1027))))); long long _7603 = (_1027 + (int)1); long long _7604 = _1028; for (long long _1030 = _7603;_1030<_7604;++_1030){ if ((((*_1010)(((*_1013)((_1030 - (int)1))))) != ((*_1010)(((*_1013)(_1030)))))){ ( ++ _1029 ); (((*_1002)((_1029 + ((*_1003)(_1026))))) = ((*_1010)(((*_1013)(_1030))))); (((*_1004)((_1029 + ((*_1003)(_1026))))) = ((*_999)(((*_1013)(_1030))))); }else { (((*_1004)((_1029 + ((*_1003)(_1026))))) += ((*_999)(((*_1013)(_1030))))); }}(((*_1003)((_1026 + (int)1))) = ((((*_1003)(_1026)) + _1029) + (int)1)); }else { (((*_1003)((_1026 + (int)1))) = ((*_1003)(_1026))); }( ++ _1025 ); }}}}std::shared_ptr< monty::ndarray< long long,1 > > _1031 = _1003; std::shared_ptr< monty::ndarray< int,1 > > _1032 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _1033 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _1034 = nullptr; int _1035 = (int)0; if ((_1008 > (int)0)){ int _7605 = (int)0; int _7606 = ((int)((_995)->size(0)) - (int)1); for (int _1036 = _7605;_1036<_7606;++_1036){ long long _1037 = ((*_995)(_1036)); while (((_1037 < ((*_995)((_1036 + (int)1)))) && (((*_1010)(((*_1013)(_1037)))) < (int)0))) { ( ++ _1037 ); }if ((_1037 > ((*_995)(_1036)))){ ( ++ _1035 ); long long _7607 = (((*_995)(_1036)) + (int)1); long long _7608 = _1037; for (long long _1038 = _7607;_1038<_7608;++_1038){ if ((((*_1010)(((*_1013)((_1038 - (int)1))))) != ((*_1010)(((*_1013)(_1038)))))){ ( ++ _1035 ); }else {}}}else {}}if ((_1035 > (int)0)){ int _1039 = (int)0; (_1032 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1035)))); (_1033 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1035)))); (_1034 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1035)))); int _7609 = (int)0; int _7610 = ((int)((_995)->size(0)) - (int)1); for (int _1040 = _7609;_1040<_7610;++_1040){ long long _1041 = ((*_995)(_1040)); while (((_1041 < ((*_995)((_1040 + (int)1)))) && (((*_1010)(((*_1013)(_1041)))) < (int)0))) { long long _1042 = _1041; int _1043 = ((*_1010)(((*_1013)(_1041)))); ( ++ _1041 ); while (((_1041 < ((*_995)((_1040 + (int)1)))) && (((*_1010)(((*_1013)(_1041)))) == _1043))) { ( ++ _1041 ); }int _1044 = (- (_1043 + (int)1)); int _1045 = task_barvardim(_1044); long long _7611 = _1042; long long _7612 = _1041; for (long long _1046 = _7611;_1046<_7612;++_1046){ long long _1047 = ((*_1013)(_1046)); if ((((*_1011)(_1047)) < ((*_1012)(_1047)))){ int _1048 = ((*_1011)(_1047)); (((*_1011)(_1047)) = ((*_1012)(_1047))); (((*_1012)(_1047)) = _1048); (((*_999)(_1047)) *= 0.5); }else if ((((*_1011)(_1047)) > ((*_1012)(_1047)))){ (((*_999)(_1047)) *= 0.5); }else {}}if (((_1041 - _1042) > (int)1)){ if (((_1041 - _1042) < ((int)2 * _1045))){ ::mosek::fusion::p_Sort::argsort(_1013,_1011,_1012,_1042,_1041,true); }else { ::mosek::fusion::p_Sort::argbucketsort(_1013,_1012,_1042,_1041,(int)0,_1045); ::mosek::fusion::p_Sort::argbucketsort(_1013,_1011,_1042,_1041,(int)0,_1045); }}else {}int _1049 = (int)1; long long _7613 = (_1042 + (int)1); long long _7614 = _1041; for (long long _1050 = _7613;_1050<_7614;++_1050){ if (((((*_1012)(((*_1013)(_1050)))) != ((*_1012)(((*_1013)((_1050 - (int)1)))))) || (((*_1011)(((*_1013)(_1050)))) != ((*_1011)(((*_1013)((_1050 - (int)1)))))))){ ( ++ _1049 ); }else {}}std::shared_ptr< monty::ndarray< int,1 > > _1051 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1049))); std::shared_ptr< monty::ndarray< int,1 > > _1052 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1049))); std::shared_ptr< monty::ndarray< double,1 > > _1053 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1049))); { int _1054 = (int)0; (((*_1051)((int)0)) = ((*_1011)(((*_1013)(_1042))))); (((*_1052)((int)0)) = ((*_1012)(((*_1013)(_1042))))); (((*_1053)((int)0)) = ((*_999)(((*_1013)(_1042))))); long long _7615 = (_1042 + (int)1); long long _7616 = _1041; for (long long _1055 = _7615;_1055<_7616;++_1055){ if (((((*_1012)(((*_1013)(_1055)))) != ((*_1012)(((*_1013)((_1055 - (int)1)))))) || (((*_1011)(((*_1013)(_1055)))) != ((*_1011)(((*_1013)((_1055 - (int)1)))))))){ ( ++ _1054 ); (((*_1051)(_1054)) = ((*_1011)(((*_1013)(_1055))))); (((*_1052)(_1054)) = ((*_1012)(((*_1013)(_1055))))); (((*_1053)(_1054)) = ((*_999)(((*_1013)(_1055))))); }else { (((*_1053)(_1054)) += ((*_999)(((*_1013)(_1055))))); }}}(((*_1032)(_1039)) = (int)((*_1005)(_1040))); (((*_1033)(_1039)) = _1044); (((*_1034)(_1039)) = task_append_barmatrix(_1045,_1051,_1052,_1053)); ( ++ _1039 ); }}}else {}}else {}std::shared_ptr< monty::ndarray< double,1 > > _1056 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_996))); if (_1000){ int _7617 = (int)0; int _7618 = (int)((_1005)->size(0)); for (int _1057 = _7617;_1057<_7618;++_1057){ (((*_1056)(((*_1005)(_1057)))) = ((*_1000)(_1057))); }}else {}return ::mosek::fusion::p_ConNZStruct::_new_ConNZStruct(_1003,_1002,_1004,_1056,_1032,_1033,_1034); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _1058,monty::rc_ptr< ::mosek::fusion::Expression > _1059,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1060){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _1061 = nullptr; int _1062 = (int)mosek::fusion::p_Set::_get_impl(_1059->getShape())->size; if ((((int)((_1058).size()) > (int)0) && hasConstraint(_1058))){ throw ::mosek::fusion::NameError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Duplicate constraint name '")).get())->a(_1058).get())->a(std::string ("'")).get())->toString());}else {}monty::rc_ptr< ::mosek::fusion::Set > _1063 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( mosek::fusion::p_LinPSDDomain::_get_impl(_1060)->shape) return (mosek::fusion::p_LinPSDDomain::_get_impl(_1060)->shape); else return (_1059->getShape()); })(); if (((mosek::fusion::p_LinPSDDomain::_get_impl(_1060)->shape && (! mosek::fusion::p_LinPSDDomain::_get_impl(_1060)->shape->compare(_1063))) || (_1059->getShape() && (! _1063->compare(_1059->getShape()))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));}else {}int _1064 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(((int)1 + ((int)8 * _1063->dim((int)0))))) - (int)1) / (int)2); if ((((_1064 * (_1064 + (int)1)) / (int)2) != _1063->dim((int)0))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));}else {}int _1065 = (int)0; int _1066 = _1063->dim((int)0); int _1067 = (int)1; int _7619 = (int)1; int _7620 = mosek::fusion::p_Set::_get_impl(_1063)->nd; for (int _1068 = _7619;_1068<_7620;++_1068){ (_1067 *= _1063->dim(_1068)); }monty::rc_ptr< ::mosek::fusion::FlatExpr > _1069 = _1059->eval(); { int _7621 = (int)0; int _7622 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_1069)->x)->size(0)); for (int _1070 = _7621;_1070<_7622;++_1070){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_1069)->x)(_1070))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_1069)->x)(_1070))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}monty::rc_ptr< ::mosek::fusion::ConNZStruct > _1071 = build_conA(mosek::fusion::p_FlatExpr::_get_impl(_1069)->ptrb,mosek::fusion::p_Set::_get_impl(_1063)->size,mosek::fusion::p_FlatExpr::_get_impl(_1069)->inst,mosek::fusion::p_FlatExpr::_get_impl(_1069)->subj,mosek::fusion::p_FlatExpr::_get_impl(_1069)->cof,mosek::fusion::p_FlatExpr::_get_impl(_1069)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_1069)->x); int _1072 = ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_1071)->ptrb)->size(0)) - (int)1); int _1073 = task_vars_used; int _1074 = task_numcon(); int _1075 = task_numcone(); int _1076 = task_numbarvar(); {monty::finally _7623([&]{ if (! _1061){ (natvarmap_num = _1073); (natbarvarmap_num = _1076); task_cleanup(_1073,_1074,_1075,_1076); }else {}});{ int _1077 = task_append_con(_1072); int _1078 = (_1077 + _1072); if ((mosek::fusion::p_ConNZStruct::_get_impl(_1071)->subj && ((int)((mosek::fusion::p_ConNZStruct::_get_impl(_1071)->subj)->size(0)) > (int)0))){ task_putarowslice(_1077,_1078,mosek::fusion::p_ConNZStruct::_get_impl(_1071)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_1071)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_1071)->cof); }else {}if (mosek::fusion::p_ConNZStruct::_get_impl(_1071)->barsubi){ int _7624 = (int)0; int _7625 = (int)((mosek::fusion::p_ConNZStruct::_get_impl(_1071)->barsubi)->size(0)); for (int _1079 = _7624;_1079<_7625;++_1079){ task_putbaraij((((*mosek::fusion::p_ConNZStruct::_get_impl(_1071)->barsubi)(_1079)) + _1077),((*mosek::fusion::p_ConNZStruct::_get_impl(_1071)->barsubj)(_1079)),((*mosek::fusion::p_ConNZStruct::_get_impl(_1071)->barmidx)(_1079))); }}else {}std::shared_ptr< monty::ndarray< int,1 > > _1080 = ::mosek::fusion::Utils::Tools::range(_1077,_1078); std::shared_ptr< monty::ndarray< double,1 > > _1081 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_ConNZStruct::_get_impl(_1071)->bfix) return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_1078 - _1077))))); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7626; for (int _1082=(int)0, _7627=(_1078 - _1077); _1082 < _7627;++_1082)_7626.push_back((- ((*mosek::fusion::p_ConNZStruct::_get_impl(_1071)->bfix)(_1082)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7626.size()),_7626.begin(),_7626.end())); })()); })(); int _1083 = (_1066 * _1067); std::shared_ptr< monty::ndarray< double,1 > > _1084 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_FlatExpr::_get_impl(_1069)->bfix) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7628; for (int _1085=(int)0, _7629=_1083; _1085 < _7629;++_1085)_7628.push_back((- ((*mosek::fusion::p_ConNZStruct::_get_impl(_1071)->bfix)(_1085)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7628.size()),_7628.begin(),_7628.end())); })()); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1083)))); })(); task_con_putboundslice_fx(_1077,_1078,_1084); int _1086 = task_append_barvar(_1064,_1067); { std::shared_ptr< monty::ndarray< int,1 > > _1087 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1088 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1089 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); int _1090 = (int)0; int _7630 = (int)0; int _7631 = _1064; for (int _1091 = _7630;_1091<_7631;++_1091){ (((*_1088)((int)0)) = _1091); int _7632 = _1091; int _7633 = _1064; for (int _1092 = _7632;_1092<_7633;++_1092){ (((*_1087)((int)0)) = _1092); (((*_1089)((int)0)) = (- ([&]() -> double { if ( (_1092 == _1091)) return (1.0); else return (0.5); })())); int _1093 = task_append_barmatrix(_1064,_1087,_1088,_1089); int _7634 = (int)0; int _7635 = _1067; for (int _1094 = _7634;_1094<_7635;++_1094){ task_putbaraij(((_1077 + _1090) + (_1094 * _1066)),(_1086 + _1094),_1093); }( ++ _1090 ); }}}(_1061 = ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(_pubthis,_1058,_1063,::mosek::fusion::Utils::Tools::range(_1077,_1078),_1066,_1086,_1067,mosek::fusion::p_ConNZStruct::_get_impl(_1071)->ptrb,mosek::fusion::p_ConNZStruct::_get_impl(_1071)->subj,mosek::fusion::p_ConNZStruct::_get_impl(_1071)->cof,mosek::fusion::p_ConNZStruct::_get_impl(_1071)->bfix,mosek::fusion::p_ConNZStruct::_get_impl(_1071)->barsubi,mosek::fusion::p_ConNZStruct::_get_impl(_1071)->barsubj,mosek::fusion::p_ConNZStruct::_get_impl(_1071)->barmidx)); addConstraint(_1058,_1061); }}return _1061; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::constraint_( const std::string & _1095,monty::rc_ptr< ::mosek::fusion::Expression > _1096,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1097){ monty::rc_ptr< ::mosek::fusion::Constraint > _1098; if ((mosek::fusion::p_PSDDomain::_get_impl(_1097)->key == ::mosek::fusion::PSDKey::IsSymPSD)){ return nonsym_psdconstraint(_1095,_1096,_1097); }else if ((mosek::fusion::p_PSDDomain::_get_impl(_1097)->key == ::mosek::fusion::PSDKey::IsTrilPSD)){ monty::rc_ptr< ::mosek::fusion::FlatExpr > _1099 = _1096->eval(); { int _7636 = (int)0; int _7637 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_1099)->x)->size(0)); for (int _1100 = _7636;_1100<_7637;++_1100){ if ((((*mosek::fusion::p_FlatExpr::_get_impl(_1099)->x)(_1100))->getModel() && (((*mosek::fusion::p_FlatExpr::_get_impl(_1099)->x)(_1100))->getModel() != _pubthis))){ throw ::mosek::fusion::ModelError(std::string ("Expression belong to different models"));}else {}}}if (((! ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1099)->shape)->nd == (int)2) || (mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1099)->shape)->nd == (int)3))) || (mosek::fusion::p_FlatExpr::_get_impl(_1099)->shape->dim((int)0) != mosek::fusion::p_FlatExpr::_get_impl(_1099)->shape->dim((int)1)))){ throw ::mosek::fusion::DomainError(std::string ("Invalid expression shape for semidefinite constraint"));}else {}int _1101 = mosek::fusion::p_FlatExpr::_get_impl(_1099)->shape->dim((int)0); int _1102 = (int)1; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1099)->shape)->nd > (int)2)){ (_1102 = mosek::fusion::p_FlatExpr::_get_impl(_1099)->shape->dim((int)2)); }else {}int _1103 = (((_1102 * _1101) * (_1101 + (int)1)) / (int)2); if ((mosek::fusion::p_PSDDomain::_get_impl(_1097)->shape && ((mosek::fusion::p_PSDDomain::_get_impl(_1097)->shape->dim((int)0) != _1101) || (mosek::fusion::p_PSDDomain::_get_impl(_1097)->shape->dim((int)2) != _1102)))){ throw ::mosek::fusion::DomainError(std::string ("Expression shape does not match domain"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _1104 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1103))); { int _1105 = (int)0; int _7638 = (int)0; int _7639 = _1102; for (int _1106 = _7638;_1106<_7639;++_1106){ int _7640 = (int)0; int _7641 = _1101; for (int _1107 = _7640;_1107<_7641;++_1107){ int _7642 = (int)0; int _7643 = (_1107 + (int)1); for (int _1108 = _7642;_1108<_7643;++_1108){ (((*_1104)(_1105)) = (long long)((((_1106 * _1101) * _1101) + (_1107 * _1101)) + _1108)); ( ++ _1105 ); }}}}std::shared_ptr< monty::ndarray< double,1 > > _1109 = mosek::fusion::p_FlatExpr::_get_impl(_1099)->bfix; if (! _1109){ (_1109 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((mosek::fusion::p_FlatExpr::_get_impl(_1099)->ptrb)->size(0)) - (int)1))))); }else {}return sdptrilcon(_1095,_1101,_1102,mosek::fusion::p_FlatExpr::_get_impl(_1099)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_1099)->inst,_1104,mosek::fusion::p_FlatExpr::_get_impl(_1099)->subj,mosek::fusion::p_FlatExpr::_get_impl(_1099)->cof,_1109,mosek::fusion::p_FlatExpr::_get_impl(_1099)->x); }else { throw ::mosek::fusion::UnexpectedError(std::string ("Invalid domain"));}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::nonsym_psdconstraint( const std::string & _1110,monty::rc_ptr< ::mosek::fusion::Expression > _1111,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1112){ monty::rc_ptr< ::mosek::fusion::FlatExpr > _1113 = _1111->eval(); if (((! ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1113)->shape)->nd == (int)2) || (mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1113)->shape)->nd == (int)3))) || (mosek::fusion::p_FlatExpr::_get_impl(_1113)->shape->dim((int)0) != mosek::fusion::p_FlatExpr::_get_impl(_1113)->shape->dim((int)1)))){ throw ::mosek::fusion::DomainError(std::string ("Invalid expression shape for semidefinite constraint"));}else {}int _1114 = mosek::fusion::p_FlatExpr::_get_impl(_1113)->shape->dim((int)0); int _1115 = (int)1; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_1113)->shape)->nd > (int)2)){ (_1115 = mosek::fusion::p_FlatExpr::_get_impl(_1113)->shape->dim((int)2)); }else {}int _1116 = (((_1115 * _1114) * (_1114 + (int)1)) / (int)2); if ((mosek::fusion::p_PSDDomain::_get_impl(_1112)->shape && ((mosek::fusion::p_PSDDomain::_get_impl(_1112)->shape->dim((int)0) != _1114) || ((mosek::fusion::p_PSDDomain::_get_impl(_1112)->shape->dim((int)1) != _1114) || (mosek::fusion::p_PSDDomain::_get_impl(_1112)->shape->dim((int)2) != _1115))))){ throw ::mosek::fusion::DomainError(std::string ("Expression shape does not match domain"));}else {}if ((! mosek::fusion::p_FlatExpr::_get_impl(_1113)->inst || ((int)((mosek::fusion::p_FlatExpr::_get_impl(_1113)->inst)->size(0)) == _1116))){ long long _1117 = _1116; std::shared_ptr< monty::ndarray< long long,1 > > _1118 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1117))); std::shared_ptr< monty::ndarray< long long,1 > > _1119 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_1117 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _1120 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1113)->subj)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1121 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1113)->subj)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1122 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7644; for (long long _1123=(int)0, _7645=_1117; _1123 < _7645;++_1123)_7644.push_back(_1123); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7644.size()),_7644.begin(),_7644.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _1124 = nullptr; { int _1125 = (int)0; int _7646 = (int)0; int _7647 = _1115; for (int _1126 = _7646;_1126<_7647;++_1126){ int _7648 = (int)0; int _7649 = _1114; for (int _1127 = _7648;_1127<_7649;++_1127){ int _7650 = (int)0; int _7651 = (_1127 + (int)1); for (int _1128 = _7650;_1128<_7651;++_1128){ long long _1129 = (long long)((((_1126 * _1114) * _1114) + (_1127 * _1114)) + _1128); long long _1130 = (long long)((((_1126 * _1114) * _1114) + (_1128 * _1114)) + _1127); if ((_1127 == _1128)){ (((*_1119)((_1125 + (int)1))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)((_1129 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1129)))); }else { (((*_1119)((_1125 + (int)1))) = (((((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)((_1129 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1129))) + ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)((_1130 + (int)1)))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1130)))); }(((*_1118)(_1125)) = _1129); ( ++ _1125 ); }}}int _7652 = (int)0; int _7653 = _1116; for (int _1131 = _7652;_1131<_7653;++_1131){ (((*_1119)((_1131 + (int)1))) = (((*_1119)((_1131 + (int)1))) + ((*_1119)(_1131)))); }}if (mosek::fusion::p_FlatExpr::_get_impl(_1113)->bfix){ (_1124 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1118)->size(0)))))); int _1132 = (int)0; int _7654 = (int)0; int _7655 = _1115; for (int _1133 = _7654;_1133<_7655;++_1133){ int _7656 = (int)0; int _7657 = _1114; for (int _1134 = _7656;_1134<_7657;++_1134){ int _7658 = (int)0; int _7659 = (_1134 + (int)1); for (int _1135 = _7658;_1135<_7659;++_1135){ long long _1136 = (long long)((((_1133 * _1114) * _1114) + (_1134 * _1114)) + _1135); long long _1137 = (long long)((((_1133 * _1114) * _1114) + (_1135 * _1114)) + _1134); if ((_1134 == _1135)){ (((*_1124)(_1132)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->bfix)(_1136))); }else { (((*_1124)(_1132)) = (0.5 * (((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->bfix)(_1136)) + ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->bfix)(_1137))))); }( ++ _1132 ); }}}}else {}{ int _1138 = (int)0; int _7660 = (int)0; int _7661 = _1115; for (int _1139 = _7660;_1139<_7661;++_1139){ int _7662 = (int)0; int _7663 = _1114; for (int _1140 = _7662;_1140<_7663;++_1140){ int _7664 = (int)0; int _7665 = (_1140 + (int)1); for (int _1141 = _7664;_1141<_7665;++_1141){ int _1142 = ((((_1139 * _1114) * _1114) + (_1140 * _1114)) + _1141); int _1143 = ((((_1139 * _1114) * _1114) + (_1141 * _1114)) + _1140); if ((_1140 == _1141)){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1113)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1142)),_1121,((*_1119)(_1138)),(((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)((_1142 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1142)))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1113)->cof,((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1142)),_1120,((*_1119)(_1138)),(((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)((_1142 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1142)))); }else { long long _1144 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)((_1142 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1142))); long long _1145 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)((_1143 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1143))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1113)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1142)),_1121,((*_1119)(_1138)),_1144); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1113)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1143)),_1121,(((*_1119)(_1138)) + _1144),_1145); long long _7666 = (long long)0; long long _7667 = _1144; for (long long _1146 = _7666;_1146<_7667;++_1146){ (((*_1120)((((*_1119)(_1138)) + _1146))) = (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1142)) + _1146))))); }long long _7668 = (long long)0; long long _7669 = _1145; for (long long _1147 = _7668;_1147<_7669;++_1147){ (((*_1120)(((((*_1119)(_1138)) + _1144) + _1147))) = (0.5 * ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1143)) + _1147))))); }}( ++ _1138 ); }}}}return sdptrilcon(_1110,_1114,_1115,_1119,_1118,_1122,_1121,_1120,_1124,mosek::fusion::p_FlatExpr::_get_impl(_1113)->x); }else { int _1148 = (_1114 * _1114); std::shared_ptr< monty::ndarray< long long,1 > > _1149 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1113)->inst); int _7670 = (int)0; int _7671 = (int)((_1149)->size(0)); for (int _1150 = _7670;_1150<_7671;++_1150){ long long _1151 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->inst)(_1150)) / _1148); long long _1152 = ((((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->inst)(_1150)) / _1114) % _1114); long long _1153 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->inst)(_1150)) % _1114); if ((_1153 > _1152)){ (((*_1149)(_1150)) = (((_1151 * _1148) + (_1153 * _1114)) + _1152)); }else { (((*_1149)(_1150)) = ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->inst)(_1150))); }if ((_1152 != _1153)){ long long _7672 = ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(_1150)); long long _7673 = ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)((_1150 + (int)1))); for (long long _1154 = _7672;_1154<_7673;++_1154){ (((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->cof)(_1154)) /= (int)2); }(((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->bfix)(_1150)) /= (int)2); }else {}}std::shared_ptr< monty::ndarray< long long,1 > > _1155 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7674; for (int _1156=(int)0, _7675=(int)((_1149)->size(0)); _1156 < _7675;++_1156)_7674.push_back(_1156); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7674.size()),_7674.begin(),_7674.end())); })(); { std::shared_ptr< monty::ndarray< long long,1 > > _1157 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((_1115 * _1114) + (int)1)))); ::mosek::fusion::p_Sort::argTransposeSort(_1155,_1157,_1115,_1114,_1114,_1149); ::mosek::fusion::p_Sort::argTransposeSort(_1155,_1157,(_1115 * _1114),_1114,(int)1,_1149); }int _1158 = (int)0; if (((int)((_1155)->size(0)) > (int)0)){ ( ++ _1158 ); int _7676 = (int)1; int _7677 = (int)((_1155)->size(0)); for (int _1159 = _7676;_1159<_7677;++_1159){ if ((((*_1149)(((*_1155)(_1159)))) > ((*_1149)(((*_1155)((_1159 - (int)1))))))){ ( ++ _1158 ); }else {}}}else {}if (((int)((_1149)->size(0)) == _1158)){ return sdptrilcon(_1110,_1114,_1115,mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb,_1149,_1155,mosek::fusion::p_FlatExpr::_get_impl(_1113)->subj,mosek::fusion::p_FlatExpr::_get_impl(_1113)->cof,mosek::fusion::p_FlatExpr::_get_impl(_1113)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_1113)->x); }else { std::shared_ptr< monty::ndarray< long long,1 > > _1160 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_1158 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _1161 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1158))); std::shared_ptr< monty::ndarray< long long,1 > > _1162 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1113)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _1163 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_1113)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _1164 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1158))); { int _1165 = (int)0; (((*_1160)((int)1)) = (((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)((((*_1155)((int)0)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(((*_1155)((int)0)))))); (((*_1161)((int)0)) = ((*_1149)(((*_1155)((int)0))))); int _7678 = (int)1; int _7679 = (int)((_1149)->size(0)); for (int _1166 = _7678;_1166<_7679;++_1166){ if ((((*_1149)(((*_1155)(_1166)))) > ((*_1149)(((*_1155)((_1166 - (int)1))))))){ ( ++ _1165 ); }else {}(((*_1160)((_1165 + (int)1))) += (((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)((((*_1155)(_1166)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(((*_1155)(_1166)))))); (((*_1161)(_1165)) = ((*_1149)(((*_1155)(_1166))))); }}{ int _1167 = (int)0; int _7680 = (int)0; int _7681 = (int)((_1155)->size(0)); for (int _1168 = _7680;_1168<_7681;++_1168){ if (((_1168 > (int)0) && (((*_1149)(((*_1155)(_1168)))) != ((*_1149)(((*_1155)((_1168 - (int)1)))))))){ ( ++ _1167 ); }else {}long long _1169 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)((((*_1155)(_1168)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(((*_1155)(_1168))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1113)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(((*_1155)(_1168)))),_1162,((*_1160)(_1167)),_1169); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_1113)->cof,((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->ptrb)(((*_1155)(_1168)))),_1163,((*_1160)(_1167)),_1169); (((*_1160)(_1167)) += _1169); }}if (mosek::fusion::p_FlatExpr::_get_impl(_1113)->bfix){ int _1170 = (int)0; int _7682 = (int)0; int _7683 = (int)((_1155)->size(0)); for (int _1171 = _7682;_1171<_7683;++_1171){ if (((_1171 > (int)0) && (((*_1149)(((*_1155)(_1171)))) != ((*_1149)(((*_1155)((_1171 - (int)1)))))))){ ( ++ _1170 ); }else {}long long _1172 = ((((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->inst)(((*_1155)(_1171)))) / _1114) % _1114); long long _1173 = (((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->inst)(((*_1155)(_1171)))) % _1114); (((*_1164)(_1170)) += ((*mosek::fusion::p_FlatExpr::_get_impl(_1113)->bfix)(((*_1155)(_1171))))); }}else {}return sdptrilcon(_1110,_1114,_1115,_1160,_1161,::mosek::fusion::Utils::Tools::range((long long)((_1161)->size(0))),_1162,_1163,_1164,mosek::fusion::p_FlatExpr::_get_impl(_1113)->x); }}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::sdptrilcon( const std::string & _1174,int _1175,int _1176,std::shared_ptr< monty::ndarray< long long,1 > > _1177,std::shared_ptr< monty::ndarray< long long,1 > > _1178,std::shared_ptr< monty::ndarray< long long,1 > > _1179,std::shared_ptr< monty::ndarray< long long,1 > > _1180,std::shared_ptr< monty::ndarray< double,1 > > _1181,std::shared_ptr< monty::ndarray< double,1 > > _1182,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1183){ monty::rc_ptr< ::mosek::fusion::ModelConstraint > _1184 = nullptr; long long _1185 = (int)0; int _7684 = (int)0; int _7685 = (int)((_1179)->size(0)); for (int _1186 = _7684;_1186<_7685;++_1186){ (_1185 = (_1185 + (((*_1177)((((*_1179)(_1186)) + (int)1))) - ((*_1177)(((*_1179)(_1186))))))); }std::shared_ptr< monty::ndarray< int,1 > > _1187 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1185))); std::shared_ptr< monty::ndarray< int,1 > > _1188 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1185))); std::shared_ptr< monty::ndarray< int,1 > > _1189 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1185))); std::shared_ptr< monty::ndarray< long long,1 > > _1190 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_1179)->size(0)) + (int)1)))); { int _1191 = (int)0; int _7686 = (int)0; int _7687 = (int)((_1179)->size(0)); for (int _1192 = _7686;_1192<_7687;++_1192){ ::mosek::fusion::p_Model::inst(_1183,(int)((*_1177)(((*_1179)(_1192)))),(int)((*_1177)((((*_1179)(_1192)) + (int)1))),_1180,_1191,_1187,_1188,_1189); (_1191 = (_1191 + (int)(((*_1177)((((*_1179)(_1192)) + (int)1))) - ((*_1177)(((*_1179)(_1192))))))); (((*_1190)((_1192 + (int)1))) = _1191); }}int _1193 = (_1176 * ((_1175 * (_1175 + (int)1)) / (int)2)); long long _1194 = (long long)0; long long _7688 = (long long)0; long long _7689 = _1185; for (long long _1195 = _7688;_1195<_7689;++_1195){ if ((((*_1187)(_1195)) < (int)0)){ ( ++ _1194 ); }else {}}long long _1196 = (_1185 - _1194); std::shared_ptr< monty::ndarray< long long,1 > > _1197 = ::mosek::fusion::Utils::Tools::range(_1185); int _7690 = (int)0; int _7691 = (int)((_1179)->size(0)); for (int _1198 = _7690;_1198<_7691;++_1198){ ::mosek::fusion::p_CommonTools::argQsort(_1197,_1187,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),((*_1190)(_1198)),((*_1190)((_1198 + (int)1)))); }long long _1199 = (long long)0; int _7692 = (int)0; int _7693 = (int)((_1179)->size(0)); for (int _1200 = _7692;_1200<_7693;++_1200){ long long _1201 = ((*_1190)(_1200)); long long _1202 = ((*_1190)((_1200 + (int)1))); while (((_1201 < _1202) && (((*_1187)(((*_1197)(_1201)))) < (int)0))) { ( ++ _1201 ); }if ((_1201 < _1202)){ ( ++ _1199 ); ( ++ _1201 ); }else {}while ((_1201 < _1202)) { if ((((*_1187)(((*_1197)((_1201 - (int)1))))) < ((*_1187)(((*_1197)(_1201)))))){ ( ++ _1199 ); }else {}( ++ _1201 ); }}std::shared_ptr< monty::ndarray< long long,1 > > _1203 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1179)->size(0))))); int _7694 = (int)0; int _7695 = (int)((_1179)->size(0)); for (int _1204 = _7694;_1204<_7695;++_1204){ long long _1205 = (((*_1178)(((*_1179)(_1204)))) / (_1175 * _1175)); long long _1206 = ((((*_1178)(((*_1179)(_1204)))) % (_1175 * _1175)) / _1175); long long _1207 = (((*_1178)(((*_1179)(_1204)))) % _1175); (((*_1203)(_1204)) = (((_1205 * ((_1175 * (_1175 + (int)1)) / (int)2)) + ((_1206 * (_1206 + (int)1)) / (int)2)) + _1207)); }int _1208 = task_vars_used; int _1209 = task_numcon(); int _1210 = task_numcone(); int _1211 = task_numbarvar(); {monty::finally _7696([&]{ if (! _1184){ (natbarvarmap_num = _1211); (natvarmap_num = _1208); task_cleanup(_1208,_1209,_1210,_1211); }else {}});{ int _1212 = task_append_con(_1193); int _1213 = (_1212 + _1193); int _1214 = task_alloc_vars(_1193); int _1215 = (_1214 + _1193); std::shared_ptr< monty::ndarray< long long,1 > > _1216 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_1193 + (int)1)))); std::shared_ptr< monty::ndarray< int,1 > > _1217 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1199))); std::shared_ptr< monty::ndarray< double,1 > > _1218 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1199))); if ((_1196 > (int)0)){ long long _1219 = (long long)0; int _7697 = (int)0; int _7698 = _1193; for (int _1220 = _7697;_1220<_7698;++_1220){ long long _1221 = ((*_1216)(_1220)); if ((_1220 == ((*_1203)(_1219)))){ long long _1222 = ((*_1190)((_1219 + (int)1))); long long _1223 = ((*_1190)(_1219)); while (((_1223 < _1222) && (((*_1187)(((*_1197)(_1223)))) < (int)0))) { ( ++ _1223 ); }if ((_1223 < _1222)){ (((*_1217)(_1221)) = ((*_1187)(((*_1197)(_1223))))); (((*_1218)(_1221)) = ((*_1181)(((*_1197)(_1223))))); ( ++ _1223 ); while ((_1223 < _1222)) { if ((((*_1187)(((*_1197)(_1223)))) == ((*_1217)(_1221)))){ (((*_1218)(_1221)) = (((*_1218)(_1221)) + ((*_1181)(((*_1197)(_1223)))))); }else { ( ++ _1221 ); (((*_1217)(_1221)) = ((*_1187)(((*_1197)(_1223))))); (((*_1218)(_1221)) = ((*_1181)(((*_1197)(_1223))))); }( ++ _1223 ); }( ++ _1221 ); }else {}( ++ _1219 ); }else {}(((*_1216)((_1220 + (int)1))) = _1221); }task_putarowslice(_1212,_1213,_1216,_1217,_1218); }else {}std::shared_ptr< monty::ndarray< double,1 > > _1224 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1193))); if (_1182){ int _7699 = (int)0; int _7700 = (int)((_1179)->size(0)); for (int _1225 = _7699;_1225<_7700;++_1225){ (((*_1224)(((*_1203)(_1225)))) = (- ((*_1182)(((*_1179)(_1225)))))); }}else {}task_con_putboundslice_fx(_1212,_1213,_1224); if ((_1194 > (int)0)){ int _7701 = (int)0; int _7702 = (int)((_1179)->size(0)); for (int _1226 = _7701;_1226<_7702;++_1226){ long long _1227 = ((*_1177)(((*_1179)(_1226)))); long long _1228 = ((*_1177)((((*_1179)(_1226)) + (int)1))); long long _1229 = _1227; while (((_1229 < _1228) && (((*_1187)(((*_1197)(_1229)))) < (int)0))) { ( ++ _1229 ); }if ((_1227 < _1229)){ int _1230 = ((*_1187)(((*_1197)(_1227)))); while ((_1227 < _1229)) { long long _1231 = _1227; while (((_1227 < _1229) && (((*_1187)(((*_1197)(_1227)))) == _1230))) { ( ++ _1227 ); }int _1232 = (- (_1230 + (int)1)); ::mosek::fusion::p_CommonTools::argQsort(_1197,_1188,_1189,_1231,_1227); int _1233 = (int)1; long long _7703 = (_1231 + (int)1); long long _7704 = _1227; for (long long _1234 = _7703;_1234<_7704;++_1234){ if (((((*_1188)(((*_1197)(_1234)))) != ((*_1188)(((*_1197)((_1234 - (int)1)))))) || (((*_1189)(((*_1197)(_1234)))) != ((*_1189)(((*_1197)((_1234 - (int)1)))))))){ ( ++ _1233 ); }else {}}std::shared_ptr< monty::ndarray< int,1 > > _1235 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1233))); std::shared_ptr< monty::ndarray< int,1 > > _1236 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1233))); std::shared_ptr< monty::ndarray< double,1 > > _1237 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1233))); { int _1238 = (- (int)1); int _1239 = (- (int)1); int _1240 = (int)0; long long _7705 = _1231; long long _7706 = _1227; for (long long _1241 = _7705;_1241<_7706;++_1241){ if (((((*_1188)(((*_1197)(_1241)))) == _1239) && (((*_1189)(((*_1197)(_1241)))) == _1240))){ (((*_1237)(_1238)) = (((*_1237)(_1238)) + ((*_1181)(((*_1197)(_1241)))))); }else { ( ++ _1238 ); (((*_1235)(_1238)) = ((*_1188)(((*_1197)(_1241))))); (((*_1236)(_1238)) = ((*_1189)(((*_1197)(_1241))))); (((*_1237)(_1238)) = ((*_1181)(((*_1197)(_1241))))); (_1239 = ((*_1235)(_1238))); (_1240 = ((*_1236)(_1238))); }}}int _1242 = task_barvardim(_1232); int _1243 = task_append_barmatrix(_1242,_1235,_1236,_1237); task_putbaraij((int)(((*_1203)(_1226)) + _1212),_1232,_1243); }}else {}}}else {}int _1244 = task_append_barvar(_1175,_1176); { std::shared_ptr< monty::ndarray< int,1 > > _1245 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1246 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1247 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); int _7707 = (int)0; int _7708 = _1175; for (int _1248 = _7707;_1248<_7708;++_1248){ int _7709 = (int)0; int _7710 = (_1248 + (int)1); for (int _1249 = _7709;_1249<_7710;++_1249){ (((*_1245)((int)0)) = _1248); (((*_1246)((int)0)) = _1249); (((*_1247)((int)0)) = (- ([&]() -> double { if ( (_1248 == _1249)) return (1.0); else return (0.5); })())); int _1250 = task_append_barmatrix(_1175,_1245,_1246,_1247); int _7711 = (int)0; int _7712 = _1176; for (int _1251 = _7711;_1251<_7712;++_1251){ int _1252 = (((((_1251 * _1175) * (_1175 + (int)1)) / (int)2) + ((_1248 * (_1248 + (int)1)) / (int)2)) + _1249); task_putbaraij((_1212 + _1252),(_1244 + _1251),_1250); }}}}monty::rc_ptr< ::mosek::fusion::Set > _1253 = nullptr; if ((_1176 == (int)1)){ (_1253 = ::mosek::fusion::p_NDSet::_new_NDSet(_1175,_1175)); }else { (_1253 = ::mosek::fusion::p_NDSet::_new_NDSet(_1175,_1175,_1176)); }(_1184 = ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(_pubthis,_1174,_1253,::mosek::fusion::Utils::Tools::range(_1212,_1213),_1175,_1244,_1176,_1216,_1217,_1218,_1224,nullptr,nullptr,nullptr)); natbarvarmap_ensure(_1176); (natbarvarmap_num += _1176); addConstraint(_1174,_1184); return _1184; }}}void mosek::fusion::Model::addConstraint  ( const std::string & _1254,    monty::rc_ptr< ::mosek::fusion::ModelConstraint > _1255) { mosek::fusion::p_Model::_get_impl(this)->addConstraint(_1254,_1255); }void mosek::fusion::p_Model::addConstraint( const std::string & _1254,monty::rc_ptr< ::mosek::fusion::ModelConstraint > _1255){ if ((cons_used >= (int)((cons)->size(0)))){ int _1256 = ([&]() -> int { if ( ((int)((cons)->size(0)) > (int)100)) return (((int)((cons)->size(0)) * (int)2)); else return ((int)100); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _1257 = cons; (cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_1256)))); int _7713 = (int)0; int _7714 = cons_used; for (int _1258 = _7713;_1258<_7714;++_1258){ (((*cons)(_1258)) = ((*_1257)(_1258))); }}else {}(((*cons)(cons_used)) = _1255); if (((int)((_1254).size()) > (int)0)){ mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->setItem(_1254,cons_used); }else {}( ++ cons_used ); }void mosek::fusion::Model::addVariable  ( const std::string & _1259,    monty::rc_ptr< ::mosek::fusion::ModelVariable > _1260) { mosek::fusion::p_Model::_get_impl(this)->addVariable(_1259,_1260); }void mosek::fusion::p_Model::addVariable( const std::string & _1259,monty::rc_ptr< ::mosek::fusion::ModelVariable > _1260){ if ((vars_used >= (int)((vars)->size(0)))){ int _1261 = ([&]() -> int { if ( ((int)((vars)->size(0)) > (int)100)) return (((int)((vars)->size(0)) * (int)2)); else return ((int)100); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _1262 = vars; (vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_1261)))); int _7715 = (int)0; int _7716 = vars_used; for (int _1263 = _7715;_1263<_7716;++_1263){ (((*vars)(_1263)) = ((*_1262)(_1263))); }}else {}(((*vars)(vars_used)) = _1260); if (((int)((_1259).size()) > (int)0)){ mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->setItem(_1259,vars_used); }else {}( ++ vars_used ); }long long mosek::fusion::Model::numConstraints  ( ) { return mosek::fusion::p_Model::_get_impl(this)->numConstraints(); }long long mosek::fusion::p_Model::numConstraints( ){ return cons_used; }long long mosek::fusion::Model::numVariables  ( ) { return mosek::fusion::p_Model::_get_impl(this)->numVariables(); }long long mosek::fusion::p_Model::numVariables( ){ return vars_used; }bool mosek::fusion::Model::hasConstraint  ( const std::string & _1264) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1264); }bool mosek::fusion::p_Model::hasConstraint( const std::string & _1264){ return mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->hasItem(_1264); }bool mosek::fusion::Model::hasVariable  ( const std::string & _1265) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1265); }bool mosek::fusion::p_Model::hasVariable( const std::string & _1265){ return mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->hasItem(_1265); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint  ( int _1266) { return mosek::fusion::p_Model::_get_impl(this)->getConstraint(_1266); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::getConstraint( int _1266){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelConstraint > { if ( ((_1266 >= (int)0) && (_1266 < cons_used))) return (((*cons)(_1266))); else return (nullptr); })(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint  ( const std::string & _1267) { return mosek::fusion::p_Model::_get_impl(this)->getConstraint(_1267); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::getConstraint( const std::string & _1267){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelConstraint > { if ( mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->hasItem(_1267)) return (((*cons)(mosek::fusion::Utils::p_StringIntMap::_get_impl(con_map.get())->getItem(_1267)))); else return (nullptr); })(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable  ( int _1268) { return mosek::fusion::p_Model::_get_impl(this)->getVariable(_1268); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::getVariable( int _1268){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelVariable > { if ( ((_1268 >= (int)0) && (_1268 < vars_used))) return (((*vars)(_1268))); else return (nullptr); })(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable  ( const std::string & _1269) { return mosek::fusion::p_Model::_get_impl(this)->getVariable(_1269); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::getVariable( const std::string & _1269){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::ModelVariable > { if ( mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->hasItem(_1269)) return (((*vars)(mosek::fusion::Utils::p_StringIntMap::_get_impl(var_map.get())->getItem(_1269)))); else return (nullptr); })(); }std::string mosek::fusion::Model::getName  ( ) { return mosek::fusion::p_Model::_get_impl(this)->getName(); }std::string mosek::fusion::p_Model::getName( ){ return model_name; }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone  ( ) { return mosek::fusion::p_Model::_get_impl(this)->clone(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::clone( ){ return ::mosek::fusion::p_Model::_new_Model(_pubthis); }void mosek::fusion::p_Model::natbarvarmap_ensure( int _1270){ if (((natbarvarmap_num + _1270) > (int)((natbarvarmap_Var)->size(0)))){ int _1271 = ((int)2 * (int)((natbarvarmap_Var)->size(0))); if ((_1271 < (natbarvarmap_num + _1270))){ (_1271 = (natbarvarmap_num + _1270)); }else {}std::shared_ptr< monty::ndarray< int,1 > > _1272 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1271))); std::shared_ptr< monty::ndarray< int,1 > > _1273 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1271))); int _7717 = (int)0; int _7718 = natbarvarmap_num; for (int _1274 = _7717;_1274<_7718;++_1274){ (((*_1272)(_1274)) = ((*natbarvarmap_Var)(_1274))); }(natbarvarmap_Var = _1272); }else {}}void mosek::fusion::p_Model::natvarmap_ensure( int _1275){ if (((natvarmap_num + _1275) > (int)((natvarmap_idx)->size(0)))){ int _1276 = ((int)2 * (int)((natvarmap_idx)->size(0))); if ((_1276 < (natvarmap_num + _1275))){ (_1276 = (natvarmap_num + _1275)); }else {}std::shared_ptr< monty::ndarray< long long,1 > > _1277 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1276))); ::mosek::fusion::Utils::Tools::arraycopy(natvarmap_idx,(int)0,_1277,(int)0,natvarmap_num); std::shared_ptr< monty::ndarray< int,1 > > _1278 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1276))); int _7719 = (int)0; int _7720 = natvarmap_num; for (int _1279 = _7719;_1279<_7720;++_1279){ (((*_1278)(_1279)) = ((*natvarmap_Var)(_1279))); }(natvarmap_idx = _1277); (natvarmap_Var = _1278); }else {}}int mosek::fusion::p_Model::task_alloc_vars( int _1280){ if (((task_vars_allocated - task_vars_used) < _1280)){ int _1281 = ([&]() -> int { if ( (((_1280 + task_vars_used) - task_vars_allocated) < (int)1000)) return ((int)1000); else return (_1280); })(); task_append_var(_1281); (task_vars_allocated += _1281); }else {}int _1282 = task_vars_used; (task_vars_used += _1280); return _1282; }void mosek::fusion::p_Model::destroy(){con_map.reset();cons.reset();vars.reset();initsol_xx_flag.reset();initsol_xx.reset();natbarvarmap_Var.reset();var_map.reset();natvarmap_idx.reset();natvarmap_Var.reset();}void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }mosek::fusion::CompoundVariable::CompoundVariable(mosek::fusion::p_CompoundVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "CompoundVariable()" << this << std::endl; */ }mosek::fusion::CompoundVariable::~CompoundVariable() {  /* std::cout << "~CompoundVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_CompoundVariable::p_CompoundVariable  (::mosek::fusion::CompoundVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::CompoundVariable::t mosek::fusion::p_CompoundVariable::_new_CompoundVariable  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1283,    int _1284){ return new mosek::fusion::CompoundVariable(_1283,_1284); }mosek::fusion::CompoundVariable::CompoundVariable  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1283,    int _1284) :    CompoundVariable(new mosek::fusion::p_CompoundVariable(this)){ mosek::fusion::p_CompoundVariable::_get_impl(this)->_initialize(_1283,_1284); }void mosek::fusion::p_CompoundVariable::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1283,    int _1284){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(::mosek::fusion::p_CompoundVariable::model_from_var(_1283),::mosek::fusion::p_CompoundVariable::compute_shape(_1283,_1284));int _1285 = (int)0; int _1286 = (int)0; int _7721 = (int)0; int _7722 = (int)((_1283)->size(0)); for (int _1287 = _7721;_1287<_7722;++_1287){ if ((mosek::fusion::p_Set::_get_impl(((*_1283)(_1287))->getShape())->size == (int)1)){ ( ++ _1285 ); ( ++ _1286 ); }else if ((mosek::fusion::p_Set::_get_impl(((*_1283)(_1287))->getShape())->size > (int)1)){ ( ++ _1285 ); (_1286 += ((*_1283)(_1287))->getShape()->dim(_1284)); }else {}}(vars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_1285)))); (varsb = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_1285 + (int)1))))); (((*varsb)((int)0)) = (int)0); (stackdim = _1284); { int _1288 = (int)0; int _7723 = (int)0; int _7724 = (int)((_1283)->size(0)); for (int _1289 = _7723;_1289<_7724;++_1289){ if ((mosek::fusion::p_Set::_get_impl(((*_1283)(_1289))->getShape())->size > (int)0)){ (((*vars)(_1288)) = ((*_1283)(_1289))); if ((mosek::fusion::p_Set::_get_impl(((*_1283)(_1289))->getShape())->size == (int)1)){ (((*varsb)((_1288 + (int)1))) = (((*varsb)(_1288)) + (int)1)); }else { (((*varsb)((_1288 + (int)1))) = (((*varsb)(_1288)) + ((*_1283)(_1289))->getShape()->dim(_1284))); }( ++ _1288 ); }else {}}}}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::CompoundVariable::elementDesc  ( long long _1290,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1291) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->elementDesc(_1290,_1291); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_CompoundVariable::elementDesc( long long _1290,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1291){ if (((_1290 < (long long)0) || (_1290 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}std::shared_ptr< monty::ndarray< int,1 > > _1292 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1290); int _1293 = (int)0; while ((((*_1292)(stackdim)) >= ((*varsb)((_1293 + (int)1))))) { ( ++ _1293 ); }(((*_1292)(stackdim)) = (((*_1292)(stackdim)) - ((*varsb)(_1293)))); ((*vars)(_1293))->elementDesc(mosek::fusion::p_Set::_get_impl(((*vars)(_1293))->getShape().get())->linearidx(_1292),_1291); return _1291; }void mosek::fusion::CompoundVariable::elementName  ( long long _1294,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1295) { mosek::fusion::p_CompoundVariable::_get_impl(this)->elementName(_1294,_1295); }void mosek::fusion::p_CompoundVariable::elementName( long long _1294,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1295){ if (((_1294 < (long long)0) || (_1294 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}std::shared_ptr< monty::ndarray< int,1 > > _1296 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1294); int _1297 = (int)0; while ((((*_1296)(stackdim)) >= ((*varsb)((_1297 + (int)1))))) { ( ++ _1297 ); }(((*_1296)(stackdim)) = (((*_1296)(stackdim)) - ((*varsb)(_1297)))); ((*vars)(_1297))->elementName(mosek::fusion::p_Set::_get_impl(((*vars)(_1297))->getShape().get())->linearidx(_1296),_1295); }void mosek::fusion::CompoundVariable::inst  ( long long _1298,    long long _1299,    std::shared_ptr< monty::ndarray< int,1 > > _1300,    std::shared_ptr< monty::ndarray< int,1 > > _1301,    std::shared_ptr< monty::ndarray< int,1 > > _1302) { mosek::fusion::p_CompoundVariable::_get_impl(this)->inst(_1298,_1299,_1300,_1301,_1302); }void mosek::fusion::p_CompoundVariable::inst( long long _1298,long long _1299,std::shared_ptr< monty::ndarray< int,1 > > _1300,std::shared_ptr< monty::ndarray< int,1 > > _1301,std::shared_ptr< monty::ndarray< int,1 > > _1302){ if (((_1298 < (long long)0) || (_1298 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}std::shared_ptr< monty::ndarray< int,1 > > _1303 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_1298); int _1304 = (int)0; while ((((*_1303)(stackdim)) >= ((*varsb)((_1304 + (int)1))))) { ( ++ _1304 ); }(((*_1303)(stackdim)) = (((*_1303)(stackdim)) - ((*varsb)(_1304)))); ((*vars)(_1304))->inst(mosek::fusion::p_Set::_get_impl(((*vars)(_1304))->getShape().get())->linearidx(_1303),_1299,_1300,_1301,_1302); }void mosek::fusion::CompoundVariable::set_values  ( long long _1305,    std::shared_ptr< monty::ndarray< int,1 > > _1306,    std::shared_ptr< monty::ndarray< long long,1 > > _1307,    int _1308,    std::shared_ptr< monty::ndarray< double,1 > > _1309,    bool _1310) { mosek::fusion::p_CompoundVariable::_get_impl(this)->set_values(_1305,_1306,_1307,_1308,_1309,_1310); }void mosek::fusion::p_CompoundVariable::set_values( long long _1305,std::shared_ptr< monty::ndarray< int,1 > > _1306,std::shared_ptr< monty::ndarray< long long,1 > > _1307,int _1308,std::shared_ptr< monty::ndarray< double,1 > > _1309,bool _1310){ int _1311 = (int)((_1307)->size(0)); int _1312 = ((*_1306)((int)0)); int _7725 = (int)1; int _7726 = (int)((_1306)->size(0)); for (int _1313 = _7725;_1313<_7726;++_1313){ (_1312 = (_1312 * ((*_1306)(_1313)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1314 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7727; for (int _1315=(int)0, _7728=(int)((_1306)->size(0)); _1315 < _7728;++_1315)_7727.push_back(_1305); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7727.size()),_7727.begin(),_7727.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _1316 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1306)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _1317 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _1318 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_1318)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); int _7729 = (int)1; int _7730 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1319 = _7729;_1319<_7730;++_1319){ (((*_1318)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1319) - (int)1))) = (((*_1318)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1319))) * shape_p->dim((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1319)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1320 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1321 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); int _7731 = (int)0; int _7732 = _1312; for (int _1322 = _7731;_1322<_7732;++_1322){ { long long _1323 = ((*_1314)((int)0)); int _7733 = (int)0; int _7734 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1324 = _7733;_1324<_7734;++_1324){ (((*_1317)(_1324)) = (int)(_1323 / ((*_1318)(_1324)))); (_1323 = (_1323 - ((long long)((*_1317)(_1324)) * ((*_1318)(_1324))))); }}{ int _1325 = (int)0; while ((((*_1317)(stackdim)) >= ((*varsb)((_1325 + (int)1))))) { ( ++ _1325 ); }(((*_1317)(stackdim)) = (((*_1317)(stackdim)) - ((*varsb)(_1325)))); (((*_1320)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1325))->getShape().get())->linearidx(_1317)); (((*_1321)((int)0)) = ((*_1309)((_1308 + _1322)))); ((*vars)(_1325))->set_values(_1320,_1321,_1310); }{ ( ++ ((*_1316)((int)0)) ); (((*_1314)((int)0)) = (((*_1314)((int)0)) + ((*_1307)((_1311 - (int)1))))); int _1326 = (int)0; { (_1326 = (int)0); for (;((_1326 < (_1311 - (int)1)) && (((*_1316)(_1326)) == ((*_1306)(_1326))));( ++ _1326 )){ (((*_1316)(_1326)) = (int)0); ( ++ ((*_1316)((_1326 + (int)1))) ); }}int _7735 = (int)0; int _7736 = _1326; for (int _1327 = _7735;_1327<_7736;++_1327){ (((*_1314)(_1327)) = ((*_1314)(_1326))); }}}}void mosek::fusion::CompoundVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1328,    std::shared_ptr< monty::ndarray< double,1 > > _1329,    bool _1330) { mosek::fusion::p_CompoundVariable::_get_impl(this)->set_values(_1328,_1329,_1330); }void mosek::fusion::p_CompoundVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1328,std::shared_ptr< monty::ndarray< double,1 > > _1329,bool _1330){ std::shared_ptr< monty::ndarray< long long,1 > > _1331 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< double,1 > > _1332 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1333 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7737 = (int)0; int _7738 = (int)((_1328)->size(0)); for (int _1334 = _7737;_1334<_7738;++_1334){ { long long _1335 = (long long)((*_1328)(_1334)); int _7739 = (int)0; int _7740 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1336 = _7739;_1336<_7740;++_1336){ (((*_1333)(_1336)) = (int)(_1335 / shape_p->stride(_1336))); (_1335 = (_1335 - ((long long)((*_1333)(_1336)) * shape_p->stride(_1336)))); }}{ int _1337 = (int)0; while ((((*_1333)(stackdim)) >= ((*varsb)((_1337 + (int)1))))) { ( ++ _1337 ); }(((*_1333)(stackdim)) = (((*_1333)(stackdim)) - ((*varsb)(_1337)))); (((*_1331)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1337))->getShape().get())->linearidx(_1333)); (((*_1332)((int)0)) = ((*_1329)(_1334))); ((*vars)(_1337))->set_values(_1331,_1332,_1330); }}}void mosek::fusion::CompoundVariable::values  ( long long _1338,    std::shared_ptr< monty::ndarray< int,1 > > _1339,    std::shared_ptr< monty::ndarray< long long,1 > > _1340,    int _1341,    std::shared_ptr< monty::ndarray< double,1 > > _1342,    bool _1343) { mosek::fusion::p_CompoundVariable::_get_impl(this)->values(_1338,_1339,_1340,_1341,_1342,_1343); }void mosek::fusion::p_CompoundVariable::values( long long _1338,std::shared_ptr< monty::ndarray< int,1 > > _1339,std::shared_ptr< monty::ndarray< long long,1 > > _1340,int _1341,std::shared_ptr< monty::ndarray< double,1 > > _1342,bool _1343){ int _1344 = (int)((_1340)->size(0)); int _1345 = ((*_1339)((int)0)); int _7741 = (int)1; int _7742 = (int)((_1339)->size(0)); for (int _1346 = _7741;_1346<_7742;++_1346){ (_1345 *= ((*_1339)(_1346))); }std::shared_ptr< monty::ndarray< long long,1 > > _1347 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7743; for (int _1348=(int)0, _7744=(int)((_1339)->size(0)); _1348 < _7744;++_1348)_7743.push_back(_1338); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7743.size()),_7743.begin(),_7743.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _1349 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1339)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _1350 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _1351 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); int _7745 = (int)0; int _7746 = _1345; for (int _1352 = _7745;_1352<_7746;++_1352){ { long long _1353 = ((*_1347)((int)0)); int _7747 = (int)0; int _7748 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1354 = _7747;_1354<_7748;++_1354){ (((*_1350)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1354) - (int)1))) = (int)(_1353 % shape_p->dim(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1354) - (int)1)))); (_1353 /= shape_p->dim(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _1354) - (int)1))); }}{ int _1355 = (int)0; while ((((*_1350)(stackdim)) >= ((*varsb)((_1355 + (int)1))))) { ( ++ _1355 ); }(((*_1350)(stackdim)) = (((*_1350)(stackdim)) - ((*varsb)(_1355)))); (((*_1351)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1355))->getShape().get())->linearidx(_1350)); ((*vars)(_1355))->values(_1351,(_1341 + _1352),_1342,_1343); }{ ( ++ ((*_1349)((int)0)) ); int _1356 = (int)0; { (_1356 = (int)0); for (;((_1356 < (_1344 - (int)1)) && (((*_1349)(_1356)) == ((*_1339)(((_1344 - (int)1) - _1356)))));( ++ _1356 )){ (((*_1349)(_1356)) = (int)0); ( ++ ((*_1349)((_1356 + (int)1))) ); }}(((*_1347)(_1356)) += ((*_1340)(((_1344 - _1356) - (int)1)))); int _7749 = (int)0; int _7750 = _1356; for (int _1357 = _7749;_1357<_7750;++_1357){ (((*_1347)(_1357)) = ((*_1347)(_1356))); }}}}void mosek::fusion::CompoundVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1358,    int _1359,    std::shared_ptr< monty::ndarray< double,1 > > _1360,    bool _1361) { mosek::fusion::p_CompoundVariable::_get_impl(this)->values(_1358,_1359,_1360,_1361); }void mosek::fusion::p_CompoundVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1358,int _1359,std::shared_ptr< monty::ndarray< double,1 > > _1360,bool _1361){ std::shared_ptr< monty::ndarray< long long,1 > > _1362 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1363 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7751 = (int)0; int _7752 = (int)((_1358)->size(0)); for (int _1364 = _7751;_1364<_7752;++_1364){ { long long _1365 = (long long)((*_1358)(_1364)); int _7753 = (int)0; int _7754 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1366 = _7753;_1366<_7754;++_1366){ (((*_1363)(_1366)) = (int)(_1365 / shape_p->stride(_1366))); (_1365 = (_1365 - ((long long)((*_1363)(_1366)) * shape_p->stride(_1366)))); }}{ int _1367 = (int)0; while ((((*_1363)(stackdim)) >= ((*varsb)((_1367 + (int)1))))) { ( ++ _1367 ); }(((*_1363)(stackdim)) = (((*_1363)(stackdim)) - ((*varsb)(_1367)))); (((*_1362)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1367))->getShape().get())->linearidx(_1363)); ((*vars)(_1367))->values(_1362,(_1359 + _1364),_1360,_1361); }}}void mosek::fusion::CompoundVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1368) { mosek::fusion::p_CompoundVariable::_get_impl(this)->make_continuous(_1368); }void mosek::fusion::p_CompoundVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1368){ std::shared_ptr< monty::ndarray< long long,1 > > _1369 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1370 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7755 = (int)0; int _7756 = (int)((_1368)->size(0)); for (int _1371 = _7755;_1371<_7756;++_1371){ { long long _1372 = (long long)((*_1368)(_1371)); int _7757 = (int)0; int _7758 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1373 = _7757;_1373<_7758;++_1373){ (((*_1370)(_1373)) = (int)(_1372 / shape_p->stride(_1373))); (_1372 = (_1372 - ((long long)((*_1370)(_1373)) * shape_p->stride(_1373)))); }}{ int _1374 = (int)0; while ((((*_1370)(stackdim)) >= ((*varsb)((_1374 + (int)1))))) { ( ++ _1374 ); }(((*_1370)(stackdim)) = (((*_1370)(stackdim)) - ((*varsb)(_1374)))); (((*_1369)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1374))->getShape().get())->linearidx(_1370)); ((*vars)(_1374))->make_continuous(_1369); }}}void mosek::fusion::CompoundVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1375) { mosek::fusion::p_CompoundVariable::_get_impl(this)->make_integer(_1375); }void mosek::fusion::p_CompoundVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1375){ std::shared_ptr< monty::ndarray< long long,1 > > _1376 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _1377 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _7759 = (int)0; int _7760 = (int)((_1375)->size(0)); for (int _1378 = _7759;_1378<_7760;++_1378){ { long long _1379 = (long long)((*_1375)(_1378)); int _7761 = (int)0; int _7762 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1380 = _7761;_1380<_7762;++_1380){ (((*_1377)(_1380)) = (int)(_1379 / shape_p->stride(_1380))); (_1379 = (_1379 - ((long long)((*_1377)(_1380)) * shape_p->stride(_1380)))); }}{ int _1381 = (int)0; while ((((*_1377)(stackdim)) >= ((*varsb)((_1381 + (int)1))))) { ( ++ _1381 ); }(((*_1377)(stackdim)) = (((*_1377)(stackdim)) - ((*varsb)(_1381)))); (((*_1376)((int)0)) = mosek::fusion::p_Set::_get_impl(((*vars)(_1381))->getShape().get())->linearidx(_1377)); ((*vars)(_1381))->make_integer(_1376); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::CompoundVariable::asExpr  ( ) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_CompoundVariable::asExpr( ){ std::shared_ptr< monty::ndarray< long long,1 > > _1382 = ::mosek::fusion::Utils::Tools::range((long long)0,(mosek::fusion::p_Set::_get_impl(shape_p)->size + (int)1)); std::shared_ptr< monty::ndarray< double,1 > > _1383 = ::mosek::fusion::Utils::Tools::ones((int)mosek::fusion::p_Set::_get_impl(shape_p)->size); std::shared_ptr< monty::ndarray< long long,1 > > _1384 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); if ((stackdim < (int)1)){ int _7763 = (int)0; int _7764 = (int)mosek::fusion::p_Set::_get_impl(shape_p)->size; for (int _1385 = _7763;_1385<_7764;++_1385){ (((*_1384)(_1385)) = _1385); }}else if ((stackdim >= mosek::fusion::p_Set::_get_impl(shape_p)->nd)){ int _1386 = (int)0; long long _1387 = mosek::fusion::p_Set::_get_impl(((*vars)((int)0))->getShape())->size; int _7765 = (int)0; long long _7766 = _1387; for (long long _1388 = _7765;_1388<_7766;++_1388){ int _7767 = (int)0; int _7768 = (int)((vars)->size(0)); for (int _1389 = _7767;_1389<_7768;++_1389){ (((*_1384)(_1386)) = ((_1389 * _1387) + _1388)); ( ++ _1386 ); }}}else { int _1390 = (int)1; int _7769 = (int)0; int _7770 = stackdim; for (int _1391 = _7769;_1391<_7770;++_1391){ (_1390 *= shape_p->dim(_1391)); }std::shared_ptr< monty::ndarray< long long,1 > > _1392 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((vars)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1393 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((vars)->size(0)) + (int)1)))); int _7771 = (int)1; int _7772 = ((int)((vars)->size(0)) + (int)1); for (int _1394 = _7771;_1394<_7772;++_1394){ (((*_1393)(_1394)) = (((*_1393)((_1394 - (int)1))) + mosek::fusion::p_Set::_get_impl(((*vars)((_1394 - (int)1)))->getShape())->size)); }int _1395 = (int)0; int _7773 = (int)0; int _7774 = _1390; for (int _1396 = _7773;_1396<_7774;++_1396){ int _1397 = (int)0; int _7775 = (int)0; int _7776 = (int)((vars)->size(0)); for (int _1398 = _7775;_1398<_7776;++_1398){ int _7777 = (int)0; long long _7778 = ((*vars)(_1398))->getShape()->stride((stackdim - (int)1)); for (long long _1399 = _7777;_1399<_7778;++_1399){ (((*_1384)(_1395)) = ((((*_1393)(_1398)) + ((*_1392)(_1398))) + _1399)); ( ++ _1395 ); }(((*_1392)(_1398)) += ((*vars)(_1398))->getShape()->stride((stackdim - (int)1))); }}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1400 = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Variable > > _7779; for (int _1401=(int)0, _7780=(int)((vars)->size(0)); _1401 < _7780;++_1401)_7779.push_back(((*vars)(_1401))); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_7779.size()),_7779.begin(),_7779.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_1382,_1400,_1384,_1383,nullptr,shape_p,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::CompoundVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _1402,    std::shared_ptr< monty::ndarray< int,1 > > _1403) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->slice(_1402,_1403); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_CompoundVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _1402,std::shared_ptr< monty::ndarray< int,1 > > _1403){ if (((int)((_1402)->size(0)) != (int)((_1403)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else if (((int)((_1402)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd)){ throw ::mosek::fusion::SliceError(std::string ("Slice has wrong number of dimensions"));}else { int _7781 = (int)0; int _7782 = (int)((_1402)->size(0)); for (int _1404 = _7781;_1404<_7782;++_1404){ if (((((*_1402)(_1404)) < (int)0) || ((((*_1402)(_1404)) > ((*_1403)(_1404))) || (((*_1403)(_1404)) > shape_p->dim(_1404))))){ throw ::mosek::fusion::SliceError(std::string ("Slice index is out of bounds"));}else {}}}bool _1405 = false; { { int _1406 = (int)0; for (;(_1406 < (int)((_1402)->size(0)));( ++ _1406 )){ if ((((*_1402)(_1406)) >= ((*_1403)(_1406)))){ (_1405 = true); }else {}}}}if (_1405){ int _1407 = (int)((_1402)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _1408 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1407))); { int _1409 = (int)0; for (;(_1409 < _1407);( ++ _1409 )){ if ((((*_1402)(_1409)) < ((*_1403)(_1409)))){ (((*_1408)(_1409)) = (((*_1403)(_1409)) - ((*_1402)(_1409)))); }else { (((*_1408)(_1409)) = (int)0); }}}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_1408)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1407)))); }else if (((int)((_1402)->size(0)) == (int)1)){ return _pubthis->slice(((*_1402)((int)0)),((*_1403)((int)0))); }else { int _1410 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; std::shared_ptr< monty::ndarray< int,1 > > _1411 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1410))); std::shared_ptr< monty::ndarray< int,1 > > _1412 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1410))); int _1413; int _1414; int _1415; int _1416; { int _1417 = (int)0; while ((((*_1402)(stackdim)) >= ((*varsb)((_1417 + (int)1))))) { ( ++ _1417 ); }(_1413 = _1417); (_1414 = (((*_1402)(stackdim)) - (int)((*varsb)(_1417)))); while ((((*_1403)(stackdim)) > (int)((*varsb)((_1417 + (int)1))))) { ( ++ _1417 ); }(_1415 = _1417); (_1416 = (((*_1403)(stackdim)) - (int)((*varsb)(_1417)))); }{ int _1418 = (int)0; for (;(_1418 < _1410);( ++ _1418 )){ (((*_1411)(_1418)) = ((*_1402)(_1418))); (((*_1412)(_1418)) = ((*_1403)(_1418))); }}if ((_1413 == _1415)){ (((*_1411)(stackdim)) = _1414); (((*_1412)(stackdim)) = _1416); return ((*vars)(_1413))->slice(_1411,_1412); }else { std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1419 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((_1415 - _1413) + (int)1)))); (((*_1411)(stackdim)) = _1414); (((*_1412)(stackdim)) = ((*vars)(_1413))->getShape()->dim(stackdim)); (((*_1419)((int)0)) = ((*vars)(_1413))->slice(_1411,_1412)); (((*_1411)(stackdim)) = (int)0); (((*_1412)(stackdim)) = _1416); (((*_1419)(((int)((_1419)->size(0)) - (int)1))) = ((*vars)(_1415))->slice(_1411,_1412)); int _7783 = (int)1; int _7784 = ((int)((_1419)->size(0)) - (int)1); for (int _1420 = _7783;_1420<_7784;++_1420){ (((*_1411)(stackdim)) = (int)0); (((*_1412)(stackdim)) = ((*vars)((_1420 + _1413)))->getShape()->dim(stackdim)); (((*_1419)(_1420)) = ((*vars)((_1420 + _1413)))->slice(_1411,_1412)); }return ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_1419,stackdim); }}}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::CompoundVariable::slice  ( int _1421,    int _1422) { return mosek::fusion::p_CompoundVariable::_get_impl(this)->slice(_1421,_1422); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_CompoundVariable::slice( int _1421,int _1422){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::SliceError(std::string ("Slice has wrong number of dimensions"));}else if ((_1421 > _1422)){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice range"));}else if (((_1421 < (int)0) || (_1422 > shape_p->dim((int)0)))){ throw ::mosek::fusion::SliceError(std::string ("Slice index is out of bounds"));}else {}if ((_1421 == _1422)){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet((int)0)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0})); }else {}int _1423; int _1424; int _1425; int _1426; { int _1427 = (int)0; while ((_1421 >= ((*varsb)((_1427 + (int)1))))) { ( ++ _1427 ); }(_1423 = _1427); (_1424 = (_1421 - ((*varsb)(_1427)))); while ((_1422 > ((*varsb)((_1427 + (int)1))))) { ( ++ _1427 ); }(_1425 = _1427); (_1426 = (_1422 - ((*varsb)(_1427)))); }if ((_1423 == _1425)){ return ((*vars)(_1423))->slice(_1424,_1426); }else { std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1428 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((_1425 - _1423) + (int)1)))); if ((_1424 > (int)0)){ (((*_1428)((int)0)) = ((*vars)(_1423))->slice(_1424,((*vars)(_1423))->getShape()->dim((int)0))); }else { (((*_1428)((int)0)) = ((*vars)(_1423))); }if ((_1426 < ((*vars)(_1425))->getShape()->dim((int)0))){ (((*_1428)(((int)((_1428)->size(0)) - (int)1))) = ((*vars)(_1425))->slice((int)0,_1426)); }else { (((*_1428)(((int)((_1428)->size(0)) - (int)1))) = ((*vars)(_1425))); }{ int _1429 = (int)1; for (;(_1429 < ((int)((_1428)->size(0)) - (int)1));( ++ _1429 )){ (((*_1428)(_1429)) = ((*vars)((_1423 + _1429)))); }}return ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_1428,(int)0); }}monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_CompoundVariable::compute_shape( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1430,int _1431){ monty::rc_ptr< ::mosek::fusion::Set > _1432 = ((*_1430)((int)0))->getShape(); int _1433 = (int)0; int _7785 = (int)0; int _7786 = (int)((_1430)->size(0)); for (int _1434 = _7785;_1434<_7786;++_1434){ monty::rc_ptr< ::mosek::fusion::Variable > _1435 = ((*_1430)(_1434)); if ((mosek::fusion::p_Set::_get_impl(_1435->getShape())->size > (int)0)){ if ((mosek::fusion::p_Set::_get_impl(_1435->getShape())->nd != mosek::fusion::p_Set::_get_impl(_1432)->nd)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}int _7787 = (int)0; int _7788 = mosek::fusion::p_Set::_get_impl(_1432)->nd; for (int _1436 = _7787;_1436<_7788;++_1436){ if (((_1436 != _1431) && (_1432->dim(_1436) != _1435->getShape()->dim(_1436)))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}}(_1433 = (_1433 + _1435->getShape()->dim(_1431))); }else {}}if ((mosek::fusion::p_Set::_get_impl(_1432)->nd == (int)1)){ return ::mosek::fusion::p_IntSet::_new_IntSet(_1433); }else { std::shared_ptr< monty::ndarray< int,1 > > _1437 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7789; for (int _1438=(int)0, _7790=mosek::fusion::p_Set::_get_impl(_1432)->nd; _1438 < _7790;++_1438)_7789.push_back(_1432->dim(_1438)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7789.size()),_7789.begin(),_7789.end())); })(); (((*_1437)(_1431)) = _1433); return ::mosek::fusion::p_NDSet::_new_NDSet(_1437); }}monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_CompoundVariable::model_from_var( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _1439){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::Model > { if ( (! _1439 || ((int)((_1439)->size(0)) == (int)0))) return (nullptr); else return (((*_1439)((int)0))->getModel()); })(); }void mosek::fusion::p_CompoundVariable::destroy(){varsb.reset();vars.reset();}void mosek::fusion::CompoundVariable::destroy() { mosek::fusion::p_CompoundVariable::_get_impl(this)->destroy(); }mosek::fusion::PickVariable::PickVariable(mosek::fusion::p_PickVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "PickVariable()" << this << std::endl; */ }mosek::fusion::PickVariable::~PickVariable() {  /* std::cout << "~PickVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PickVariable::p_PickVariable  (::mosek::fusion::PickVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PickVariable::t mosek::fusion::p_PickVariable::_new_PickVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1440,    std::shared_ptr< monty::ndarray< long long,1 > > _1441){ return new mosek::fusion::PickVariable(_1440,_1441); }mosek::fusion::PickVariable::PickVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1440,    std::shared_ptr< monty::ndarray< long long,1 > > _1441) :    PickVariable(new mosek::fusion::p_PickVariable(this)){ mosek::fusion::p_PickVariable::_get_impl(this)->_initialize(_1440,_1441); }void mosek::fusion::p_PickVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _1440,    std::shared_ptr< monty::ndarray< long long,1 > > _1441){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_1440->getModel(),::mosek::fusion::p_Set::make((int)((_1441)->size(0))));(mosek::fusion::p_PickVariable::_get_impl(_pubthis)->origin = _1440); long long _1442 = _1440->getShape()->getSize(); int _7791 = (int)0; int _7792 = (int)((_1441)->size(0)); for (int _1443 = _7791;_1443<_7792;++_1443){ if (((((*_1441)(_1443)) < (int)0) || (((*_1441)(_1443)) >= _1442))){ throw ::mosek::fusion::IndexError(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(std::string ("Index (")).get())->a(((*_1441)(_1443))).get())->a(std::string (") is out of bounds")).get())->toString());}else {}}(mosek::fusion::p_PickVariable::_get_impl(_pubthis)->indexes = _1441); }}void mosek::fusion::PickVariable::inst  ( long long _1444,    long long _1445,    std::shared_ptr< monty::ndarray< int,1 > > _1446,    std::shared_ptr< monty::ndarray< int,1 > > _1447,    std::shared_ptr< monty::ndarray< int,1 > > _1448) { mosek::fusion::p_PickVariable::_get_impl(this)->inst(_1444,_1445,_1446,_1447,_1448); }void mosek::fusion::p_PickVariable::inst( long long _1444,long long _1445,std::shared_ptr< monty::ndarray< int,1 > > _1446,std::shared_ptr< monty::ndarray< int,1 > > _1447,std::shared_ptr< monty::ndarray< int,1 > > _1448){ origin->inst(((*indexes)(_1444)),_1445,_1446,_1447,_1448); }void mosek::fusion::PickVariable::set_values  ( long long _1449,    std::shared_ptr< monty::ndarray< int,1 > > _1450,    std::shared_ptr< monty::ndarray< long long,1 > > _1451,    int _1452,    std::shared_ptr< monty::ndarray< double,1 > > _1453,    bool _1454) { mosek::fusion::p_PickVariable::_get_impl(this)->set_values(_1449,_1450,_1451,_1452,_1453,_1454); }void mosek::fusion::p_PickVariable::set_values( long long _1449,std::shared_ptr< monty::ndarray< int,1 > > _1450,std::shared_ptr< monty::ndarray< long long,1 > > _1451,int _1452,std::shared_ptr< monty::ndarray< double,1 > > _1453,bool _1454){ _pubthis->set_values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7793; for (int _1455=(int)0, _7794=((*_1450)((int)0)); _1455 < _7794;++_1455)_7793.push_back((_1449 + (((*_1451)((int)0)) * _1455))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7793.size()),_7793.begin(),_7793.end())); })(),([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_1452 == (int)0)) return (_1453); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7795; for (int _1456=(int)0, _7796=((*_1450)((int)0)); _1456 < _7796;++_1456)_7795.push_back(((*_1453)((_1456 + _1452)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7795.size()),_7795.begin(),_7795.end())); })()); })(),_1454); }void mosek::fusion::PickVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1457,    std::shared_ptr< monty::ndarray< double,1 > > _1458,    bool _1459) { mosek::fusion::p_PickVariable::_get_impl(this)->set_values(_1457,_1458,_1459); }void mosek::fusion::p_PickVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1457,std::shared_ptr< monty::ndarray< double,1 > > _1458,bool _1459){ origin->set_values(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7797; for (int _1460=(int)0, _7798=(int)((_1457)->size(0)); _1460 < _7798;++_1460)_7797.push_back(((*indexes)(((*_1457)(_1460))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7797.size()),_7797.begin(),_7797.end())); })(),_1458,_1459); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PickVariable::elementDesc  ( long long _1461,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1462) { return mosek::fusion::p_PickVariable::_get_impl(this)->elementDesc(_1461,_1462); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PickVariable::elementDesc( long long _1461,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1462){ return origin->elementDesc(((*indexes)(_1461)),_1462); }void mosek::fusion::PickVariable::elementName  ( long long _1463,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1464) { mosek::fusion::p_PickVariable::_get_impl(this)->elementName(_1463,_1464); }void mosek::fusion::p_PickVariable::elementName( long long _1463,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1464){ origin->elementName(((*indexes)(_1463)),_1464); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PickVariable::slice  ( int _1465,    int _1466) { return mosek::fusion::p_PickVariable::_get_impl(this)->slice(_1465,_1466); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_PickVariable::slice( int _1465,int _1466){ return ::mosek::fusion::p_PickVariable::_new_PickVariable(origin,([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7799; for (int _1467=_1465, _7800=_1466; _1467 < _7800;++_1467)_7799.push_back(((*indexes)(_1467))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7799.size()),_7799.begin(),_7799.end())); })()); }void mosek::fusion::PickVariable::values  ( long long _1468,    std::shared_ptr< monty::ndarray< int,1 > > _1469,    std::shared_ptr< monty::ndarray< long long,1 > > _1470,    int _1471,    std::shared_ptr< monty::ndarray< double,1 > > _1472,    bool _1473) { mosek::fusion::p_PickVariable::_get_impl(this)->values(_1468,_1469,_1470,_1471,_1472,_1473); }void mosek::fusion::p_PickVariable::values( long long _1468,std::shared_ptr< monty::ndarray< int,1 > > _1469,std::shared_ptr< monty::ndarray< long long,1 > > _1470,int _1471,std::shared_ptr< monty::ndarray< double,1 > > _1472,bool _1473){ std::shared_ptr< monty::ndarray< long long,1 > > _1474 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7801; for (int _1475=(int)0, _7802=((*_1469)((int)0)); _1475 < _7802;++_1475)_7801.push_back((_1468 + (_1475 * ((*_1470)((int)0))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7801.size()),_7801.begin(),_7801.end())); })(); _pubthis->values(_1474,_1471,_1472,_1473); }void mosek::fusion::PickVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1476,    int _1477,    std::shared_ptr< monty::ndarray< double,1 > > _1478,    bool _1479) { mosek::fusion::p_PickVariable::_get_impl(this)->values(_1476,_1477,_1478,_1479); }void mosek::fusion::p_PickVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1476,int _1477,std::shared_ptr< monty::ndarray< double,1 > > _1478,bool _1479){ std::shared_ptr< monty::ndarray< long long,1 > > _1480 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7803; for (int _1481=(int)0, _7804=(int)((_1476)->size(0)); _1481 < _7804;++_1481)_7803.push_back(((*indexes)(((*_1476)(_1481))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7803.size()),_7803.begin(),_7803.end())); })(); origin->values(_1480,_1477,_1478,_1479); }void mosek::fusion::PickVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1482) { mosek::fusion::p_PickVariable::_get_impl(this)->make_continuous(_1482); }void mosek::fusion::p_PickVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1482){ origin->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7805; for (int _1483=(int)0, _7806=(int)((_1482)->size(0)); _1483 < _7806;++_1483)_7805.push_back(((*indexes)(((*_1482)(_1483))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7805.size()),_7805.begin(),_7805.end())); })()); }void mosek::fusion::PickVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1484) { mosek::fusion::p_PickVariable::_get_impl(this)->make_integer(_1484); }void mosek::fusion::p_PickVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1484){ origin->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _7807; for (int _1485=(int)0, _7808=(int)((_1484)->size(0)); _1485 < _7808;++_1485)_7807.push_back(((*indexes)(((*_1484)(_1485))))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7807.size()),_7807.begin(),_7807.end())); })()); }void mosek::fusion::p_PickVariable::destroy(){indexes.reset();origin.reset();}void mosek::fusion::PickVariable::destroy() { mosek::fusion::p_PickVariable::_get_impl(this)->destroy(); }mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceVariable::p_SliceVariable  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1486,    monty::rc_ptr< ::mosek::fusion::Set > _1487,    long long _1488,    std::shared_ptr< monty::ndarray< long long,1 > > _1489){ return new mosek::fusion::SliceVariable(_1486,_1487,_1488,_1489); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::Variable > _1486,    monty::rc_ptr< ::mosek::fusion::Set > _1487,    long long _1488,    std::shared_ptr< monty::ndarray< long long,1 > > _1489) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1486,_1487,_1488,_1489); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _1486,    monty::rc_ptr< ::mosek::fusion::Set > _1487,    long long _1488,    std::shared_ptr< monty::ndarray< long long,1 > > _1489){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_1486->getModel(),_1487);(mosek::fusion::p_SliceVariable::_get_impl(_pubthis)->origin = _1486); (mosek::fusion::p_SliceVariable::_get_impl(_pubthis)->first = _1488); (mosek::fusion::p_SliceVariable::_get_impl(_pubthis)->strides = _1489); }}void mosek::fusion::SliceVariable::inst  ( long long _1490,    long long _1491,    std::shared_ptr< monty::ndarray< int,1 > > _1492,    std::shared_ptr< monty::ndarray< int,1 > > _1493,    std::shared_ptr< monty::ndarray< int,1 > > _1494) { mosek::fusion::p_SliceVariable::_get_impl(this)->inst(_1490,_1491,_1492,_1493,_1494); }void mosek::fusion::p_SliceVariable::inst( long long _1490,long long _1491,std::shared_ptr< monty::ndarray< int,1 > > _1492,std::shared_ptr< monty::ndarray< int,1 > > _1493,std::shared_ptr< monty::ndarray< int,1 > > _1494){ if (((_1490 < (long long)0) || (_1490 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1495 = first; long long _1496 = _1490; int _7809 = (int)0; int _7810 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1497 = _7809;_1497<_7810;++_1497){ long long _1498 = (_1496 / shape_p->stride(_1497)); (_1496 = (_1496 - (_1498 * shape_p->stride(_1497)))); (_1495 = (_1495 + (((*strides)(_1497)) * _1498))); }origin->inst(_1495,_1491,_1492,_1493,_1494); }void mosek::fusion::SliceVariable::set_values  ( long long _1499,    std::shared_ptr< monty::ndarray< int,1 > > _1500,    std::shared_ptr< monty::ndarray< long long,1 > > _1501,    int _1502,    std::shared_ptr< monty::ndarray< double,1 > > _1503,    bool _1504) { mosek::fusion::p_SliceVariable::_get_impl(this)->set_values(_1499,_1500,_1501,_1502,_1503,_1504); }void mosek::fusion::p_SliceVariable::set_values( long long _1499,std::shared_ptr< monty::ndarray< int,1 > > _1500,std::shared_ptr< monty::ndarray< long long,1 > > _1501,int _1502,std::shared_ptr< monty::ndarray< double,1 > > _1503,bool _1504){ if (((_1499 == (long long)0) && (((int)((_1500)->size(0)) == (int)1) && ((((*_1500)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_1501)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _1505 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7811; for (int _1506=(int)0, _7812=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _1506 < _7812;++_1506)_7811.push_back(shape_p->dim(_1506)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7811.size()),_7811.begin(),_7811.end())); })(); origin->set_values(first,_1505,strides,_1502,_1503,_1504); }else { int _1507 = (int)((_1500)->size(0)); bool _1508 = (_1507 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _1509 = (int)0; for (;((_1509 < _1507) && _1508);( ++ _1509 )){ (_1508 = (((*_1501)(_1509)) == shape_p->stride(_1509))); }}if (_1508){ long long _1510 = first; { long long _1511 = _1499; int _7813 = (int)0; int _7814 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _1512 = _7813;_1512<_7814;++_1512){ long long _1513 = (_1511 / ((*_1501)(_1512))); (_1511 = (_1511 - (((*_1501)(_1512)) * _1513))); (_1510 = (_1510 + (shape_p->stride(_1512) * _1513))); }}origin->set_values(_1510,_1500,strides,_1502,_1503,_1504); }else { long long _1514 = (long long)1; int _7815 = (int)0; int _7816 = (int)((_1500)->size(0)); for (int _1515 = _7815;_1515<_7816;++_1515){ (_1514 = (_1514 * ((*_1500)(_1515)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1516 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1514))); { std::shared_ptr< monty::ndarray< int,1 > > _1517 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1500)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1518 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1500)->size(0))))); long long _7817 = (long long)0; long long _7818 = _1514; for (long long _1519 = _7817;_1519<_7818;++_1519){ (((*_1516)(_1519)) = (mosek::fusion::p_Set::_get_impl(origin->getShape().get())->linearidx(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((_1499 + ((*_1518)((int)0))))) + first)); { int _1520 = (int)0; ( ++ ((*_1517)((int)0)) ); (((*_1518)((int)0)) = (((*_1518)((int)0)) + ((*_1501)((_1507 - (int)1))))); while (((_1520 < (_1507 - (int)1)) && (((*_1517)(_1520)) >= ((*_1500)(((_1507 - _1520) - (int)1)))))) { (((*_1518)((_1520 + (int)1))) = (((*_1518)((_1520 + (int)1))) + ((*_1501)(((_1507 - _1520) - (int)2))))); (((*_1517)(_1520)) = (int)0); ( ++ ((*_1517)((_1520 + (int)1))) ); ( ++ _1520 ); }int _7819 = (int)0; int _7820 = _1520; for (int _1521 = _7819;_1521<_7820;++_1521){ (((*_1518)(_1521)) = ((*_1518)(_1520))); }}}}origin->set_values(_1516,([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_1502 == (int)0)) return (_1503); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7821; for (long long _1522=(int)0, _7822=_1514; _1522 < _7822;++_1522)_7821.push_back(((*_1503)((_1522 + _1502)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7821.size()),_7821.begin(),_7821.end())); })()); })(),_1504); }}}void mosek::fusion::SliceVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1523,    std::shared_ptr< monty::ndarray< double,1 > > _1524,    bool _1525) { mosek::fusion::p_SliceVariable::_get_impl(this)->set_values(_1523,_1524,_1525); }void mosek::fusion::p_SliceVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1523,std::shared_ptr< monty::ndarray< double,1 > > _1524,bool _1525){ std::shared_ptr< monty::ndarray< long long,1 > > _1526 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1523)->size(0))))); int _7823 = (int)0; int _7824 = (int)((_1523)->size(0)); for (int _1527 = _7823;_1527<_7824;++_1527){ std::shared_ptr< monty::ndarray< int,1 > > _1528 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1523)(_1527))); long long _1529 = first; int _7825 = (int)0; int _7826 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1530 = _7825;_1530<_7826;++_1530){ (_1529 = (_1529 + ((long long)((*_1528)(_1530)) * ((*strides)(_1530))))); }(((*_1526)(_1527)) = _1529); }origin->set_values(_1526,_1524,_1525); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::SliceVariable::elementDesc  ( long long _1531,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1532) { return mosek::fusion::p_SliceVariable::_get_impl(this)->elementDesc(_1531,_1532); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_SliceVariable::elementDesc( long long _1531,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1532){ if (((_1531 < (long long)0) || (_1531 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1533 = first; long long _1534 = _1531; int _7827 = (int)0; int _7828 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1535 = _7827;_1535<_7828;++_1535){ long long _1536 = (_1534 / shape_p->stride(_1535)); (_1534 = (_1534 - (_1536 * shape_p->stride(_1535)))); (_1533 = (_1533 + (((*strides)(_1535)) * _1536))); }origin->elementDesc(_1533,_1532); return _1532; }void mosek::fusion::SliceVariable::elementName  ( long long _1537,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1538) { mosek::fusion::p_SliceVariable::_get_impl(this)->elementName(_1537,_1538); }void mosek::fusion::p_SliceVariable::elementName( long long _1537,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1538){ if (((_1537 < (long long)0) || (_1537 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1539 = first; long long _1540 = _1537; int _7829 = (int)0; int _7830 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1541 = _7829;_1541<_7830;++_1541){ long long _1542 = (_1540 / shape_p->stride(_1541)); (_1540 = (_1540 - (_1542 * shape_p->stride(_1541)))); (_1539 = (_1539 + (((*strides)(_1541)) * _1542))); }origin->elementName(_1539,_1538); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SliceVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _1543,    std::shared_ptr< monty::ndarray< int,1 > > _1544) { return mosek::fusion::p_SliceVariable::_get_impl(this)->slice(_1543,_1544); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_SliceVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _1543,std::shared_ptr< monty::ndarray< int,1 > > _1544){ monty::rc_ptr< ::mosek::fusion::Set > _1545 = shape_p->slice(_1543,_1544); long long _1546 = first; { int _1547 = (int)0; for (;(_1547 < (int)((_1543)->size(0)));( ++ _1547 )){ (_1546 = (_1546 + (((*strides)(_1547)) * ((*_1543)(_1547))))); }}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(origin,_1545,_1546,strides); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SliceVariable::slice  ( int _1548,    int _1549) { return mosek::fusion::p_SliceVariable::_get_impl(this)->slice(_1548,_1549); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_SliceVariable::slice( int _1548,int _1549){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(origin,shape_p->slice(_1548,_1549),(first + (long long)_1548),strides); }void mosek::fusion::SliceVariable::values  ( long long _1550,    std::shared_ptr< monty::ndarray< int,1 > > _1551,    std::shared_ptr< monty::ndarray< long long,1 > > _1552,    int _1553,    std::shared_ptr< monty::ndarray< double,1 > > _1554,    bool _1555) { mosek::fusion::p_SliceVariable::_get_impl(this)->values(_1550,_1551,_1552,_1553,_1554,_1555); }void mosek::fusion::p_SliceVariable::values( long long _1550,std::shared_ptr< monty::ndarray< int,1 > > _1551,std::shared_ptr< monty::ndarray< long long,1 > > _1552,int _1553,std::shared_ptr< monty::ndarray< double,1 > > _1554,bool _1555){ if (((_1550 == (long long)0) && (((int)((_1551)->size(0)) == (int)1) && ((((*_1551)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_1552)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _1556 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7831; for (int _1557=(int)0, _7832=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _1557 < _7832;++_1557)_7831.push_back(shape_p->dim(_1557)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7831.size()),_7831.begin(),_7831.end())); })(); origin->values(first,_1556,strides,_1553,_1554,_1555); }else { int _1558 = (int)((_1551)->size(0)); bool _1559 = (_1558 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _1560 = (int)0; for (;((_1560 < _1558) && _1559);( ++ _1560 )){ (_1559 = (((*_1552)(_1560)) == shape_p->stride(_1560))); }}if (_1559){ long long _1561 = first; { long long _1562 = _1550; int _7833 = (int)0; int _7834 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _1563 = _7833;_1563<_7834;++_1563){ long long _1564 = (_1562 / ((*_1552)(_1563))); (_1562 = (_1562 - (((*_1552)(_1563)) * _1564))); (_1561 = (_1561 + (shape_p->stride(_1563) * _1564))); }}origin->values(_1561,_1551,strides,_1553,_1554,_1555); }else { long long _1565 = (long long)1; int _7835 = (int)0; int _7836 = (int)((_1551)->size(0)); for (int _1566 = _7835;_1566<_7836;++_1566){ (_1565 = (_1565 * ((*_1551)(_1566)))); }std::shared_ptr< monty::ndarray< long long,1 > > _1567 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1565))); { std::shared_ptr< monty::ndarray< int,1 > > _1568 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1551)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _1569 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1551)->size(0))))); long long _7837 = (long long)0; long long _7838 = _1565; for (long long _1570 = _7837;_1570<_7838;++_1570){ (((*_1567)(_1570)) = (mosek::fusion::p_Set::_get_impl(origin->getShape().get())->linearidx(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((_1550 + ((*_1569)((int)0))))) + first)); { int _1571 = (int)0; ( ++ ((*_1568)((int)0)) ); (((*_1569)((int)0)) = (((*_1569)((int)0)) + ((*_1552)((_1558 - (int)1))))); while (((_1571 < (_1558 - (int)1)) && (((*_1568)(_1571)) >= ((*_1551)(((_1558 - _1571) - (int)1)))))) { (((*_1569)((_1571 + (int)1))) = (((*_1569)((_1571 + (int)1))) + ((*_1552)(((_1558 - _1571) - (int)2))))); (((*_1568)(_1571)) = (int)0); ( ++ ((*_1568)((_1571 + (int)1))) ); ( ++ _1571 ); }int _7839 = (int)0; int _7840 = _1571; for (int _1572 = _7839;_1572<_7840;++_1572){ (((*_1569)(_1572)) = ((*_1569)(_1571))); }}}}origin->values(_1567,_1553,_1554,_1555); }}}void mosek::fusion::SliceVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1573,    int _1574,    std::shared_ptr< monty::ndarray< double,1 > > _1575,    bool _1576) { mosek::fusion::p_SliceVariable::_get_impl(this)->values(_1573,_1574,_1575,_1576); }void mosek::fusion::p_SliceVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1573,int _1574,std::shared_ptr< monty::ndarray< double,1 > > _1575,bool _1576){ std::shared_ptr< monty::ndarray< long long,1 > > _1577 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1573)->size(0))))); int _7841 = (int)0; int _7842 = (int)((_1573)->size(0)); for (int _1578 = _7841;_1578<_7842;++_1578){ std::shared_ptr< monty::ndarray< int,1 > > _1579 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1573)(_1578))); long long _1580 = first; int _7843 = (int)0; int _7844 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1581 = _7843;_1581<_7844;++_1581){ (_1580 = (_1580 + ((long long)((*_1579)(_1581)) * ((*strides)(_1581))))); }(((*_1577)(_1578)) = _1580); }origin->values(_1577,_1574,_1575,_1576); }void mosek::fusion::SliceVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1582) { mosek::fusion::p_SliceVariable::_get_impl(this)->make_continuous(_1582); }void mosek::fusion::p_SliceVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1582){ std::shared_ptr< monty::ndarray< long long,1 > > _1583 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1582)->size(0))))); int _7845 = (int)0; int _7846 = (int)((_1582)->size(0)); for (int _1584 = _7845;_1584<_7846;++_1584){ std::shared_ptr< monty::ndarray< int,1 > > _1585 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1582)(_1584))); long long _1586 = first; int _7847 = (int)0; int _7848 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1587 = _7847;_1587<_7848;++_1587){ (_1586 = (_1586 + ((long long)((*_1585)(_1587)) * ((*strides)(_1587))))); }(((*_1583)(_1584)) = _1586); }origin->make_continuous(_1583); }void mosek::fusion::SliceVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1588) { mosek::fusion::p_SliceVariable::_get_impl(this)->make_integer(_1588); }void mosek::fusion::p_SliceVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1588){ std::shared_ptr< monty::ndarray< long long,1 > > _1589 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1588)->size(0))))); int _7849 = (int)0; int _7850 = (int)((_1588)->size(0)); for (int _1590 = _7849;_1590<_7850;++_1590){ std::shared_ptr< monty::ndarray< int,1 > > _1591 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_1588)(_1590))); long long _1592 = first; int _7851 = (int)0; int _7852 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1593 = _7851;_1593<_7852;++_1593){ (_1592 = (_1592 + ((long long)((*_1591)(_1593)) * ((*strides)(_1593))))); }(((*_1589)(_1590)) = _1592); }origin->make_integer(_1589); }void mosek::fusion::p_SliceVariable::destroy(){strides.reset();origin.reset();}void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }mosek::fusion::SymRangedVariable::SymRangedVariable(mosek::fusion::p_SymRangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymRangedVariable()" << this << std::endl; */ }mosek::fusion::SymRangedVariable::~SymRangedVariable() {  /* std::cout << "~SymRangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymRangedVariable::p_SymRangedVariable  (::mosek::fusion::SymRangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1594,    monty::rc_ptr< ::mosek::fusion::Model > _1595){ return new mosek::fusion::SymRangedVariable(_1594,_1595); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1594,    monty::rc_ptr< ::mosek::fusion::Model > _1595) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1594,_1595); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1594,    monty::rc_ptr< ::mosek::fusion::Model > _1595){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1594,_1595);(nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_SymRangedVariable::_get_impl(_1594)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7853; for (int _1596=(int)0, _7854=(int)((mosek::fusion::p_SymRangedVariable::_get_impl(_1594)->nativeidxs)->size(0)); _1596 < _7854;++_1596)_7853.push_back(((*mosek::fusion::p_SymRangedVariable::_get_impl(_1594)->nativeidxs)(_1596))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7853.size()),_7853.begin(),_7853.end())); })()); else return (nullptr); })()); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_SymRangedVariable::_get_impl(_1594)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_SymRangedVariable::_get_impl(_1594)->idxmap.get())->clone()); else return (nullptr); })()); (dom = mosek::fusion::p_SymRangedVariable::_get_impl(_1594)->dom); (mosek::fusion::p_SymRangedVariable::_get_impl(_pubthis)->dim = mosek::fusion::p_SymRangedVariable::_get_impl(_1594)->dim); (names_flushed = mosek::fusion::p_SymRangedVariable::_get_impl(_1594)->names_flushed); }}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1597,    const std::string &  _1598,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1599,    int _1600,    std::shared_ptr< monty::ndarray< int,1 > > _1601,    long long _1602){ return new mosek::fusion::SymRangedVariable(_1597,_1598,_1599,_1600,_1601,_1602); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1597,    const std::string &  _1598,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1599,    int _1600,    std::shared_ptr< monty::ndarray< int,1 > > _1601,    long long _1602) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1597,_1598,_1599,_1600,_1601,_1602); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1597,    const std::string &  _1598,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1599,    int _1600,    std::shared_ptr< monty::ndarray< int,1 > > _1601,    long long _1602){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1597,_1598,::mosek::fusion::p_Set::make(_1600,_1600),_1602);(mosek::fusion::p_SymRangedVariable::_get_impl(_pubthis)->dim = _1600); (nativeidxs = _1601); if (! _1601){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); }else { (idxmap = nullptr); }(dom = _1599); (names_flushed = false); }}std::string mosek::fusion::SymRangedVariable::toString  ( ) { return mosek::fusion::p_SymRangedVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymRangedVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1603 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_1603.get())->a(std::string ("RangedVariable(")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_1603.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_1603.get())->a(shape_p->dim((int)0)); int _7855 = (int)1; int _7856 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1604 = _7855;_1604<_7856;++_1604){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_1603.get())->a(std::string (",")).get())->a(shape_p->dim(_1604)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_1603.get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_1603.get())->toString(); }void mosek::fusion::p_SymRangedVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _7857 = (int)0; int _7858 = (int)((nativeidxs)->size(0)); for (int _1605 = _7857;_1605<_7858;++_1605){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_1605)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1605))).get())->a(std::string ("]")).get())->toString()); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _1606 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->keys(); std::shared_ptr< monty::ndarray< int,1 > > _1607 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->values(); int _7859 = (int)0; int _7860 = (int)((_1606)->size(0)); for (int _1608 = _7859;_1608<_7860;++_1608){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*_1607)(_1608)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1608))).get())->a(std::string ("]")).get())->toString()); }}(names_flushed = true); }else {}}void mosek::fusion::SymRangedVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _1609,    int _1610,    int _1611,    long long _1612,    long long _1613,    std::shared_ptr< monty::ndarray< int,1 > > _1614,    std::shared_ptr< monty::ndarray< int,1 > > _1615,    std::shared_ptr< monty::ndarray< int,1 > > _1616) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->inst(_1609,_1610,_1611,_1612,_1613,_1614,_1615,_1616); }void mosek::fusion::p_SymRangedVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _1609,int _1610,int _1611,long long _1612,long long _1613,std::shared_ptr< monty::ndarray< int,1 > > _1614,std::shared_ptr< monty::ndarray< int,1 > > _1615,std::shared_ptr< monty::ndarray< int,1 > > _1616){ if (nativeidxs){ int _7861 = _1610; int _7862 = _1611; for (int _1617 = _7861;_1617<_7862;++_1617){ (((*_1614)(((_1613 + _1617) - _1610))) = ((*nativeidxs)(tril_lin_idx((((*_1609)(_1617)) - _1612))))); }}else { int _7863 = _1610; int _7864 = _1611; for (int _1618 = _7863;_1618<_7864;++_1618){ long long _1619 = tril_lin_idx((((*_1609)(_1618)) - _1612)); long long _1620 = tril_idx((((*_1609)(_1618)) - _1612)); if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1619))){ int _1621 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(::mosek::fusion::ModelVariable::t(_pubthis),_1620,mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1620),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1620)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_1620,_1621); (((*_1614)(((_1613 + _1618) - _1610))) = _1621); (names_flushed = false); }else { (((*_1614)(((_1613 + _1618) - _1610))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1620)); }}}}void mosek::fusion::SymRangedVariable::inst  ( long long _1622,    long long _1623,    std::shared_ptr< monty::ndarray< int,1 > > _1624,    std::shared_ptr< monty::ndarray< int,1 > > _1625,    std::shared_ptr< monty::ndarray< int,1 > > _1626) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->inst(_1622,_1623,_1624,_1625,_1626); }void mosek::fusion::p_SymRangedVariable::inst( long long _1622,long long _1623,std::shared_ptr< monty::ndarray< int,1 > > _1624,std::shared_ptr< monty::ndarray< int,1 > > _1625,std::shared_ptr< monty::ndarray< int,1 > > _1626){ if (((_1622 < (long long)0) || (_1622 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}long long _1627 = tril_lin_idx(_1622); long long _1628 = tril_idx(_1622); if (nativeidxs){ (((*_1624)(_1623)) = ((*nativeidxs)(_1627))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1628))){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _1629 = _pubthis; int _1630 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(_1629,_1627,mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1628),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1628)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_1628,_1630); (((*_1624)(_1623)) = _1630); (names_flushed = false); }else { (((*_1624)(_1623)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1628)); }}}void mosek::fusion::p_SymRangedVariable::dual_u( long long _1631,std::shared_ptr< monty::ndarray< int,1 > > _1632,std::shared_ptr< monty::ndarray< long long,1 > > _1633,int _1634,std::shared_ptr< monty::ndarray< double,1 > > _1635){ long long _1636 = (long long)1; int _1637 = (int)((_1633)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1638 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1631,_1632,_1633); std::shared_ptr< monty::ndarray< double,1 > > _1639 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _7865 = (int)0; int _7866 = _1637; for (int _1640 = _7865;_1640<_7866;++_1640){ (_1636 = (_1636 * ((*_1632)(_1640)))); }if (nativeidxs){ long long _7867 = (long long)0; long long _7868 = _1636; for (long long _1641 = _7867;_1641<_7868;++_1641){ int _1642 = ((*nativeidxs)(tril_lin_idx(_1638->get()))); (((*_1635)((_1641 + _1634))) = ((*_1639)(_1642))); _1638->inc(); }}else { mosek::fusion::SolutionStatus _1643 = model->getPrimalSolutionStatus(); int _7869 = (int)0; int _7870 = (int)_1636; for (int _1644 = _7869;_1644<_7870;++_1644){ long long _1645 = tril_idx(_1638->get()); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1645)){ int _1646 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1645); (((*_1635)(_1644)) = ((*_1639)(_1646))); }else { if (((_1643 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1643 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1643 == ::mosek::fusion::SolutionStatus::Feasible) || (_1643 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1635)((_1634 + _1644))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1645)); }else { (((*_1635)((_1634 + _1644))) = 0.0); }}_1638->inc(); }}}void mosek::fusion::p_SymRangedVariable::dual_u( std::shared_ptr< monty::ndarray< long long,1 > > _1647,int _1648,std::shared_ptr< monty::ndarray< double,1 > > _1649){ std::shared_ptr< monty::ndarray< double,1 > > _1650 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _7871 = (int)0; int _7872 = (int)((_1647)->size(0)); for (int _1651 = _7871;_1651<_7872;++_1651){ int _1652 = ((*nativeidxs)(tril_lin_idx(((*_1647)(_1651))))); (((*_1649)((_1648 + _1651))) = ((*_1650)(_1652))); }}else { mosek::fusion::SolutionStatus _1653 = model->getPrimalSolutionStatus(); int _7873 = (int)0; int _7874 = (int)((_1647)->size(0)); for (int _1654 = _7873;_1654<_7874;++_1654){ long long _1655 = tril_idx(((*_1647)(_1654))); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1655)){ int _1656 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1655); (((*_1649)((_1648 + _1654))) = ((*_1650)(_1656))); }else { if (((_1653 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1653 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1653 == ::mosek::fusion::SolutionStatus::Feasible) || (_1653 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1649)((_1648 + _1654))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1655)); }else { (((*_1649)((_1648 + _1654))) = 0.0); }}}}}void mosek::fusion::p_SymRangedVariable::dual_l( long long _1657,std::shared_ptr< monty::ndarray< int,1 > > _1658,std::shared_ptr< monty::ndarray< long long,1 > > _1659,int _1660,std::shared_ptr< monty::ndarray< double,1 > > _1661){ long long _1662 = (long long)1; int _1663 = (int)((_1659)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1664 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1657,_1658,_1659); std::shared_ptr< monty::ndarray< double,1 > > _1665 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); int _7875 = (int)0; int _7876 = _1663; for (int _1666 = _7875;_1666<_7876;++_1666){ (_1662 = (_1662 * ((*_1658)(_1666)))); }if (nativeidxs){ long long _7877 = (long long)0; long long _7878 = _1662; for (long long _1667 = _7877;_1667<_7878;++_1667){ int _1668 = ((*nativeidxs)(tril_lin_idx(_1664->get()))); (((*_1661)((_1667 + _1660))) = ((*_1665)(_1668))); _1664->inc(); }}else { mosek::fusion::SolutionStatus _1669 = model->getPrimalSolutionStatus(); int _7879 = (int)0; int _7880 = (int)_1662; for (int _1670 = _7879;_1670<_7880;++_1670){ long long _1671 = tril_idx(_1664->get()); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1671)){ int _1672 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1671); (((*_1661)(_1670)) = ((*_1665)(_1672))); }else { if (((_1669 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1669 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1669 == ::mosek::fusion::SolutionStatus::Feasible) || (_1669 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1661)((_1660 + _1670))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1671)); }else { (((*_1661)((_1660 + _1670))) = 0.0); }}_1664->inc(); }}}void mosek::fusion::p_SymRangedVariable::dual_l( std::shared_ptr< monty::ndarray< long long,1 > > _1673,int _1674,std::shared_ptr< monty::ndarray< double,1 > > _1675){ std::shared_ptr< monty::ndarray< double,1 > > _1676 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _7881 = (int)0; int _7882 = (int)((_1673)->size(0)); for (int _1677 = _7881;_1677<_7882;++_1677){ int _1678 = ((*nativeidxs)(tril_lin_idx(((*_1673)(_1677))))); (((*_1675)((_1674 + _1677))) = ((*_1676)(_1678))); }}else { mosek::fusion::SolutionStatus _1679 = model->getPrimalSolutionStatus(); int _7883 = (int)0; int _7884 = (int)((_1673)->size(0)); for (int _1680 = _7883;_1680<_7884;++_1680){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1673)(_1680)))){ int _1681 = ((*nativeidxs)(tril_lin_idx(((*_1673)(_1680))))); (((*_1675)((_1674 + _1680))) = ((*_1676)(_1681))); }else { if (((_1679 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1679 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1679 == ::mosek::fusion::SolutionStatus::Feasible) || (_1679 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1675)((_1674 + _1680))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(tril_idx(((*_1673)(_1680))))); }else { (((*_1675)((_1674 + _1680))) = 0.0); }}}}}void mosek::fusion::p_SymRangedVariable::dual_values( long long _1682,std::shared_ptr< monty::ndarray< int,1 > > _1683,std::shared_ptr< monty::ndarray< long long,1 > > _1684,int _1685,std::shared_ptr< monty::ndarray< double,1 > > _1686){ long long _1687 = (long long)1; int _1688 = (int)((_1684)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1689 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1682,_1683,_1684); std::shared_ptr< monty::ndarray< double,1 > > _1690 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _1691 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _7885 = (int)0; int _7886 = _1688; for (int _1692 = _7885;_1692<_7886;++_1692){ (_1687 = (_1687 * ((*_1683)(_1692)))); }if (nativeidxs){ long long _7887 = (long long)0; long long _7888 = _1687; for (long long _1693 = _7887;_1693<_7888;++_1693){ int _1694 = ((*nativeidxs)(tril_lin_idx(_1689->get()))); (((*_1686)((_1693 + _1685))) = (((*_1690)(_1694)) - ((*_1691)(_1694)))); _1689->inc(); }}else { mosek::fusion::SolutionStatus _1695 = model->getPrimalSolutionStatus(); int _7889 = (int)0; int _7890 = (int)_1687; for (int _1696 = _7889;_1696<_7890;++_1696){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1689->get())){ int _1697 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(_1689->get())); (((*_1686)(_1696)) = (((*_1690)(_1697)) - ((*_1691)(_1697)))); }else { if (((_1695 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1695 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1695 == ::mosek::fusion::SolutionStatus::Feasible) || (_1695 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1686)((_1685 + _1696))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(tril_idx(_1689->get()))); }else { (((*_1686)((_1685 + _1696))) = 0.0); }}_1689->inc(); }}}void mosek::fusion::p_SymRangedVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _1698,int _1699,std::shared_ptr< monty::ndarray< double,1 > > _1700){ std::shared_ptr< monty::ndarray< double,1 > > _1701 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _1702 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _7891 = (int)0; int _7892 = (int)((_1698)->size(0)); for (int _1703 = _7891;_1703<_7892;++_1703){ int _1704 = ((*nativeidxs)(tril_lin_idx(((*_1698)(_1703))))); (((*_1700)((_1699 + _1703))) = (((*_1701)(_1704)) - ((*_1702)(_1704)))); }}else { mosek::fusion::SolutionStatus _1705 = model->getPrimalSolutionStatus(); int _7893 = (int)0; int _7894 = (int)((_1698)->size(0)); for (int _1706 = _7893;_1706<_7894;++_1706){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(tril_idx(((*_1698)(_1706))))){ int _1707 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(((*_1698)(_1706)))); (((*_1700)((_1699 + _1706))) = (((*_1701)(_1707)) - ((*_1702)(_1707)))); }else { if (((_1705 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1705 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1705 == ::mosek::fusion::SolutionStatus::Feasible) || (_1705 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1700)((_1699 + _1706))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(tril_idx(((*_1698)(_1706))))); }else { (((*_1700)((_1699 + _1706))) = 0.0); }}}}}void mosek::fusion::SymRangedVariable::set_values  ( long long _1708,    std::shared_ptr< monty::ndarray< int,1 > > _1709,    std::shared_ptr< monty::ndarray< long long,1 > > _1710,    int _1711,    std::shared_ptr< monty::ndarray< double,1 > > _1712,    bool _1713) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->set_values(_1708,_1709,_1710,_1711,_1712,_1713); }void mosek::fusion::p_SymRangedVariable::set_values( long long _1708,std::shared_ptr< monty::ndarray< int,1 > > _1709,std::shared_ptr< monty::ndarray< long long,1 > > _1710,int _1711,std::shared_ptr< monty::ndarray< double,1 > > _1712,bool _1713){ if (_1713){ long long _1714 = (long long)1; int _1715 = (int)((_1710)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1716 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1708,_1709,_1710); int _7895 = (int)0; int _7896 = _1715; for (int _1717 = _7895;_1717<_7896;++_1717){ (_1714 = (_1714 * ((*_1709)(_1717)))); }if (nativeidxs){ int _1718 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _1719 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7897; for (long long _1720=(int)0, _7898=_1714; _1720 < _7898;++_1720)_7897.push_back(((*nativeidxs)(tril_lin_idx(_1716->next())))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7897.size()),_7897.begin(),_7897.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _1721 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_1711 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7899; for (int _1722=(int)0, _7900=_1718; _1722 < _7900;++_1722)_7899.push_back(((*_1712)((_1711 + _1722)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7899.size()),_7899.begin(),_7899.end())); })()); else return (_1712); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1719,_1721); }else { std::shared_ptr< monty::ndarray< int,1 > > _1723 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1714))); int _7901 = (int)0; long long _7902 = _1714; for (long long _1724 = _7901;_1724<_7902;++_1724){ _pubthis->inst(_1716->next(),_1724,_1723,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _1725 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7903; for (long long _1726=(int)0, _7904=_1714; _1726 < _7904;++_1726)_7903.push_back(((*_1712)((_1711 + _1726)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7903.size()),_7903.begin(),_7903.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1723,_1725); }}else { }}void mosek::fusion::SymRangedVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1727,    std::shared_ptr< monty::ndarray< double,1 > > _1728,    bool _1729) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->set_values(_1727,_1728,_1729); }void mosek::fusion::p_SymRangedVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1727,std::shared_ptr< monty::ndarray< double,1 > > _1728,bool _1729){ if (_1729){ if (nativeidxs){ int _1730 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _1731 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7905; for (int _1732=(int)0, _7906=_1730; _1732 < _7906;++_1732)_7905.push_back(((*nativeidxs)(tril_lin_idx(((*_1727)(_1732)))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7905.size()),_7905.begin(),_7905.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _1733 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7907; for (int _1734=(int)0, _7908=_1730; _1734 < _7908;++_1734)_7907.push_back(((*_1728)(_1734))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7907.size()),_7907.begin(),_7907.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1731,_1733); }else { std::shared_ptr< monty::ndarray< int,1 > > _1735 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1727)->size(0))))); int _7909 = (int)0; int _7910 = (int)((_1727)->size(0)); for (int _1736 = _7909;_1736<_7910;++_1736){ _pubthis->inst(((*_1727)(_1736)),(long long)(_1736),_1735,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _1737 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7911; for (int _1738=(int)0, _7912=(int)((_1727)->size(0)); _1738 < _7912;++_1738)_7911.push_back(((*_1728)(_1738))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7911.size()),_7911.begin(),_7911.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1735,_1737); }}else { }}void mosek::fusion::SymRangedVariable::values  ( long long _1739,    std::shared_ptr< monty::ndarray< int,1 > > _1740,    std::shared_ptr< monty::ndarray< long long,1 > > _1741,    int _1742,    std::shared_ptr< monty::ndarray< double,1 > > _1743,    bool _1744) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->values(_1739,_1740,_1741,_1742,_1743,_1744); }void mosek::fusion::p_SymRangedVariable::values( long long _1739,std::shared_ptr< monty::ndarray< int,1 > > _1740,std::shared_ptr< monty::ndarray< long long,1 > > _1741,int _1742,std::shared_ptr< monty::ndarray< double,1 > > _1743,bool _1744){ if (_1744){ long long _1745 = (long long)1; int _1746 = (int)((_1741)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1747 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1739,_1740,_1741); std::shared_ptr< monty::ndarray< double,1 > > _1748 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _7913 = (int)0; int _7914 = _1746; for (int _1749 = _7913;_1749<_7914;++_1749){ (_1745 = (_1745 * ((*_1740)(_1749)))); }if (nativeidxs){ long long _7915 = (long long)0; long long _7916 = _1745; for (long long _1750 = _7915;_1750<_7916;++_1750){ (((*_1743)((_1750 + _1742))) = ((*_1748)(((*nativeidxs)(tril_lin_idx(_1747->get())))))); _1747->inc(); }}else { mosek::fusion::SolutionStatus _1751 = model->getPrimalSolutionStatus(); int _7917 = (int)0; int _7918 = (int)_1745; for (int _1752 = _7917;_1752<_7918;++_1752){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1747->get())){ (((*_1743)(_1752)) = ((*_1748)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(_1747->get()))))); }else { if (((_1751 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1751 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1751 == ::mosek::fusion::SolutionStatus::Feasible) || (_1751 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1743)((_1742 + _1752))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(tril_idx(_1747->get()))); }else { (((*_1743)((_1742 + _1752))) = 0.0); }}_1747->inc(); }}}else { dual_values(_1739,_1740,_1741,_1742,_1743); }}void mosek::fusion::SymRangedVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1753,    int _1754,    std::shared_ptr< monty::ndarray< double,1 > > _1755,    bool _1756) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->values(_1753,_1754,_1755,_1756); }void mosek::fusion::p_SymRangedVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1753,int _1754,std::shared_ptr< monty::ndarray< double,1 > > _1755,bool _1756){ if (_1756){ std::shared_ptr< monty::ndarray< double,1 > > _1757 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _7919 = (int)0; int _7920 = (int)((_1753)->size(0)); for (int _1758 = _7919;_1758<_7920;++_1758){ (((*_1755)((_1754 + _1758))) = ((*_1757)(((*nativeidxs)(tril_lin_idx(((*_1753)(_1758)))))))); }}else { mosek::fusion::SolutionStatus _1759 = model->getPrimalSolutionStatus(); if (((_1759 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1759 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1759 == ::mosek::fusion::SolutionStatus::Feasible) || (_1759 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ int _7921 = (int)0; int _7922 = (int)((_1753)->size(0)); for (int _1760 = _7921;_1760<_7922;++_1760){ long long _1761 = ((*_1753)(_1760)); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1761)){ (((*_1755)((_1754 + _1760))) = ((*_1757)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1761)))); }else { (((*_1755)((_1754 + _1760))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1761)); }}}else { int _7923 = (int)0; int _7924 = (int)((_1753)->size(0)); for (int _1762 = _7923;_1762<_7924;++_1762){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1753)(_1762)))){ (((*_1755)((_1754 + _1762))) = ((*_1757)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1753)(_1762)))))); }else { (((*_1755)((_1754 + _1762))) = 0.0); }}}}}else { dual_values(_1753,_1754,_1755); }}long long mosek::fusion::p_SymRangedVariable::tril_idx( long long _1763){ long long _1764 = (_1763 / dim); long long _1765 = (_1763 % dim); if ((_1765 > _1764)){ return ((_1765 * dim) + _1764); }else { return _1763; }}long long mosek::fusion::p_SymRangedVariable::tril_lin_idx( long long _1766){ long long _1767 = (_1766 / dim); long long _1768 = (_1766 % dim); if ((_1768 > _1767)){ return (((_1768 * (_1768 + (int)1)) / (int)2) + _1767); }else { return (((_1767 * (_1767 + (int)1)) / (int)2) + _1768); }}void mosek::fusion::SymRangedVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1769) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->make_continuous(_1769); }void mosek::fusion::p_SymRangedVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1769){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7925; for (int _1770=(int)0, _7926=(int)((_1769)->size(0)); _1770 < _7926;++_1770)_7925.push_back(((*nativeidxs)(((*_1769)(_1770))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7925.size()),_7925.begin(),_7925.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _1771 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1769)->size(0))))); _pubthis->inst(_1769,(int)0,(int)((_1769)->size(0)),(long long)((int)0),(long long)((int)0),_1771,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_1771); }}void mosek::fusion::SymRangedVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1772) { mosek::fusion::p_SymRangedVariable::_get_impl(this)->make_integer(_1772); }void mosek::fusion::p_SymRangedVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1772){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7927; for (int _1773=(int)0, _7928=(int)((_1772)->size(0)); _1773 < _7928;++_1773)_7927.push_back(((*nativeidxs)(((*_1772)(_1773))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7927.size()),_7927.begin(),_7927.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _1774 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1772)->size(0))))); _pubthis->inst(_1772,(int)0,(int)((_1772)->size(0)),(long long)((int)0),(long long)((int)0),_1774,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_1774); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymRangedVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _1775){ return ::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(_pubthis,_1775); }void mosek::fusion::p_SymRangedVariable::destroy(){nativeidxs.reset();dom.reset();idxmap.reset();}void mosek::fusion::SymRangedVariable::destroy() { mosek::fusion::p_SymRangedVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::SymRangedVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::slice(int _2473,int _2474)
{ return mosek::fusion::ModelVariable::slice(_2473,_2474); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2600)
{ return mosek::fusion::BaseVariable::pick(_2600); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2603)
{ return mosek::fusion::BaseVariable::pick(_2603); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
void mosek::fusion::SymRangedVariable::makeContinuous()
{ mosek::fusion::BaseVariable::makeContinuous(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymRangedVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2593,std::shared_ptr< monty::ndarray< int,1 > > _2594,std::shared_ptr< monty::ndarray< int,1 > > _2595)
{ return mosek::fusion::BaseVariable::pick(_2593,_2594,_2595); }
void mosek::fusion::SymRangedVariable::elementName(long long _2464,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2465)
{ mosek::fusion::ModelVariable::elementName(_2464,_2465); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(int _2592)
{ return mosek::fusion::BaseVariable::index(_2592); }
void mosek::fusion::SymRangedVariable::makeInteger()
{ mosek::fusion::BaseVariable::makeInteger(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(int _2586,int _2587,int _2588)
{ return mosek::fusion::BaseVariable::index(_2586,_2587,_2588); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(int _2589,int _2590)
{ return mosek::fusion::BaseVariable::index(_2589,_2590); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymRangedVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2591)
{ return mosek::fusion::BaseVariable::index(_2591); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2597,std::shared_ptr< monty::ndarray< int,1 > > _2598)
{ return mosek::fusion::BaseVariable::pick(_2597,_2598); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymRangedVariable::level()
{ return mosek::fusion::BaseVariable::level(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::SymRangedVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::SymRangedVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2577)
{ mosek::fusion::BaseVariable::setLevel(_2577); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::diag(int _2606)
{ return mosek::fusion::BaseVariable::diag(_2606); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymRangedVariable::dual()
{ return mosek::fusion::BaseVariable::dual(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2466,std::shared_ptr< monty::ndarray< int,1 > > _2467)
{ return mosek::fusion::ModelVariable::slice(_2466,_2467); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::SymRangedVariable::elementDesc(long long _2528,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2529)
{ return mosek::fusion::BaseVariable::elementDesc(_2528,_2529); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymRangedVariable::antidiag(int _2605)
{ return mosek::fusion::BaseVariable::antidiag(_2605); }
long long mosek::fusion::SymRangedVariable::size()
{ return mosek::fusion::BaseVariable::size(); }
void mosek::fusion::SymRangedVariable::values(int _2560,std::shared_ptr< monty::ndarray< double,1 > > _2561,bool _2562)
{ mosek::fusion::BaseVariable::values(_2560,_2561,_2562); }
mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedVariable::p_RangedVariable  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1776,    monty::rc_ptr< ::mosek::fusion::Model > _1777){ return new mosek::fusion::RangedVariable(_1776,_1777); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1776,    monty::rc_ptr< ::mosek::fusion::Model > _1777) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1776,_1777); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1776,    monty::rc_ptr< ::mosek::fusion::Model > _1777){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1776,_1777);(dom = mosek::fusion::p_RangedVariable::_get_impl(_1776)->dom); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_RangedVariable::_get_impl(_1776)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_RangedVariable::_get_impl(_1776)->idxmap.get())->clone()); else return (nullptr); })()); (nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_RangedVariable::_get_impl(_1776)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7929; for (int _1778=(int)0, _7930=(int)((mosek::fusion::p_RangedVariable::_get_impl(_1776)->nativeidxs)->size(0)); _1778 < _7930;++_1778)_7929.push_back(((*mosek::fusion::p_RangedVariable::_get_impl(_1776)->nativeidxs)(_1778))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7929.size()),_7929.begin(),_7929.end())); })()); else return (nullptr); })()); (names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_1776)->names_flushed); }}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1779,    const std::string &  _1780,    monty::rc_ptr< ::mosek::fusion::Set > _1781,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1782,    std::shared_ptr< monty::ndarray< int,1 > > _1783,    long long _1784){ return new mosek::fusion::RangedVariable(_1779,_1780,_1781,_1782,_1783,_1784); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1779,    const std::string &  _1780,    monty::rc_ptr< ::mosek::fusion::Set > _1781,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1782,    std::shared_ptr< monty::ndarray< int,1 > > _1783,    long long _1784) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1779,_1780,_1781,_1782,_1783,_1784); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1779,    const std::string &  _1780,    monty::rc_ptr< ::mosek::fusion::Set > _1781,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _1782,    std::shared_ptr< monty::ndarray< int,1 > > _1783,    long long _1784){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1779,_1780,_1781,_1784);(nativeidxs = _1783); if (! _1783){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); }else { (idxmap = nullptr); }(dom = _1782); (names_flushed = false); }}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc  ( long long _1785,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1786) { return mosek::fusion::p_RangedVariable::_get_impl(this)->elementDesc(_1785,_1786); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::elementDesc( long long _1785,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1786){ _pubthis->elementName(_1785,_1786); mosek::fusion::p_RangeDomain::_get_impl(dom.get())->domainToString(_1785,_1786); return _1786; }void mosek::fusion::p_RangedVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _7931 = (int)0; int _7932 = (int)((nativeidxs)->size(0)); for (int _1787 = _7931;_1787<_7932;++_1787){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_1787)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1787))).get())->a(std::string ("]")).get())->toString()); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _1788 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->keys(); std::shared_ptr< monty::ndarray< int,1 > > _1789 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->values(); int _7933 = (int)0; int _7934 = (int)((_1788)->size(0)); for (int _1790 = _7933;_1790<_7934;++_1790){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*_1789)(_1790)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_1790))).get())->a(std::string ("]")).get())->toString()); }}(names_flushed = true); }else {}}void mosek::fusion::RangedVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _1791,    int _1792,    int _1793,    long long _1794,    long long _1795,    std::shared_ptr< monty::ndarray< int,1 > > _1796,    std::shared_ptr< monty::ndarray< int,1 > > _1797,    std::shared_ptr< monty::ndarray< int,1 > > _1798) { mosek::fusion::p_RangedVariable::_get_impl(this)->inst(_1791,_1792,_1793,_1794,_1795,_1796,_1797,_1798); }void mosek::fusion::p_RangedVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _1791,int _1792,int _1793,long long _1794,long long _1795,std::shared_ptr< monty::ndarray< int,1 > > _1796,std::shared_ptr< monty::ndarray< int,1 > > _1797,std::shared_ptr< monty::ndarray< int,1 > > _1798){ if (nativeidxs){ int _7935 = _1792; int _7936 = _1793; for (int _1799 = _7935;_1799<_7936;++_1799){ (((*_1796)(((_1795 + _1799) - _1792))) = ((*nativeidxs)(((*_1791)((_1799 - _1794)))))); }}else { int _7937 = _1792; int _7938 = _1793; for (int _1800 = _7937;_1800<_7938;++_1800){ if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1791)(((long long)_1800 - _1794)))))){ int _1801 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(::mosek::fusion::ModelVariable::t(_pubthis),((*_1791)((_1800 - _1794))),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(((*_1791)((_1800 - _1794)))),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_1791)((_1800 - _1794))))); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(((*_1791)((_1800 - _1794))),_1801); (((*_1796)(((_1795 + _1800) - _1792))) = _1801); (names_flushed = false); }else { (((*_1796)(((_1795 + _1800) - _1792))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1791)(((long long)_1800 - _1794))))); }}}}void mosek::fusion::RangedVariable::inst  ( long long _1802,    long long _1803,    std::shared_ptr< monty::ndarray< int,1 > > _1804,    std::shared_ptr< monty::ndarray< int,1 > > _1805,    std::shared_ptr< monty::ndarray< int,1 > > _1806) { mosek::fusion::p_RangedVariable::_get_impl(this)->inst(_1802,_1803,_1804,_1805,_1806); }void mosek::fusion::p_RangedVariable::inst( long long _1802,long long _1803,std::shared_ptr< monty::ndarray< int,1 > > _1804,std::shared_ptr< monty::ndarray< int,1 > > _1805,std::shared_ptr< monty::ndarray< int,1 > > _1806){ if (((_1802 < (long long)0) || (_1802 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}if (nativeidxs){ (((*_1804)(_1803)) = ((*nativeidxs)(_1802))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1802))){ monty::rc_ptr< ::mosek::fusion::ModelVariable > _1807 = _pubthis; int _1808 = mosek::fusion::p_Model::_get_impl(model.get())->append_rangedvar(_1807,_1802,mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(_1802),mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1802)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_1802,_1808); (((*_1804)(_1803)) = _1808); (names_flushed = false); }else { (((*_1804)(_1803)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1802)); }}}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::RangedVariable::upperBoundVar  ( ) { return mosek::fusion::p_RangedVariable::_get_impl(this)->upperBoundVar(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_RangedVariable::upperBoundVar( ){ std::shared_ptr< monty::ndarray< long long,1 > > _1809 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_1809)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _1810 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_1810 > (int)0);( -- _1810 )){ (((*_1809)((_1810 - (int)1))) = (((*_1809)(_1810)) * (long long)shape_p->dim(_1810))); }}return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis,shape_p,(long long)0,_1809,false); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::RangedVariable::lowerBoundVar  ( ) { return mosek::fusion::p_RangedVariable::_get_impl(this)->lowerBoundVar(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_RangedVariable::lowerBoundVar( ){ std::shared_ptr< monty::ndarray< long long,1 > > _1811 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_1811)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _1812 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_1812 > (int)0);( -- _1812 )){ (((*_1811)((_1812 - (int)1))) = (((*_1811)(_1812)) * shape_p->dim(_1812))); }}return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis,shape_p,(long long)0,_1811,true); }void mosek::fusion::p_RangedVariable::dual_u( long long _1813,std::shared_ptr< monty::ndarray< int,1 > > _1814,std::shared_ptr< monty::ndarray< long long,1 > > _1815,int _1816,std::shared_ptr< monty::ndarray< double,1 > > _1817){ long long _1818 = (long long)1; int _1819 = (int)((_1815)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1820 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1813,_1814,_1815); std::shared_ptr< monty::ndarray< double,1 > > _1821 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _7939 = (int)0; int _7940 = _1819; for (int _1822 = _7939;_1822<_7940;++_1822){ (_1818 = (_1818 * ((*_1814)(_1822)))); }if (nativeidxs){ long long _7941 = (long long)0; long long _7942 = _1818; for (long long _1823 = _7941;_1823<_7942;++_1823){ int _1824 = ((*nativeidxs)(_1820->get())); (((*_1817)((_1823 + _1816))) = ((*_1821)(_1824))); _1820->inc(); }}else { mosek::fusion::SolutionStatus _1825 = model->getPrimalSolutionStatus(); int _7943 = (int)0; int _7944 = (int)_1818; for (int _1826 = _7943;_1826<_7944;++_1826){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1820->get())){ int _1827 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1820->get()); (((*_1817)(_1826)) = ((*_1821)(_1827))); }else { if (((_1825 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1825 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1825 == ::mosek::fusion::SolutionStatus::Feasible) || (_1825 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1817)((_1816 + _1826))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1820->get())); }else { (((*_1817)((_1816 + _1826))) = 0.0); }}_1820->inc(); }}}void mosek::fusion::p_RangedVariable::dual_u( std::shared_ptr< monty::ndarray< long long,1 > > _1828,int _1829,std::shared_ptr< monty::ndarray< double,1 > > _1830){ std::shared_ptr< monty::ndarray< double,1 > > _1831 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _7945 = (int)0; int _7946 = (int)((_1828)->size(0)); for (int _1832 = _7945;_1832<_7946;++_1832){ int _1833 = ((*nativeidxs)(((*_1828)(_1832)))); (((*_1830)((_1829 + _1832))) = ((*_1831)(_1833))); }}else { mosek::fusion::SolutionStatus _1834 = model->getPrimalSolutionStatus(); int _7947 = (int)0; int _7948 = (int)((_1828)->size(0)); for (int _1835 = _7947;_1835<_7948;++_1835){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1828)(_1835)))){ int _1836 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1828)(_1835))); (((*_1830)((_1829 + _1835))) = ((*_1831)(_1836))); }else { if (((_1834 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1834 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1834 == ::mosek::fusion::SolutionStatus::Feasible) || (_1834 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1830)((_1829 + _1835))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_1828)(_1835)))); }else { (((*_1830)((_1829 + _1835))) = 0.0); }}}}}void mosek::fusion::p_RangedVariable::dual_l( long long _1837,std::shared_ptr< monty::ndarray< int,1 > > _1838,std::shared_ptr< monty::ndarray< long long,1 > > _1839,int _1840,std::shared_ptr< monty::ndarray< double,1 > > _1841){ long long _1842 = (long long)1; int _1843 = (int)((_1839)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1844 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1837,_1838,_1839); std::shared_ptr< monty::ndarray< double,1 > > _1845 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); int _7949 = (int)0; int _7950 = _1843; for (int _1846 = _7949;_1846<_7950;++_1846){ (_1842 = (_1842 * ((*_1838)(_1846)))); }if (nativeidxs){ long long _7951 = (long long)0; long long _7952 = _1842; for (long long _1847 = _7951;_1847<_7952;++_1847){ int _1848 = ((*nativeidxs)(_1844->get())); (((*_1841)((_1847 + _1840))) = ((*_1845)(_1848))); _1844->inc(); }}else { mosek::fusion::SolutionStatus _1849 = model->getPrimalSolutionStatus(); int _7953 = (int)0; int _7954 = (int)_1842; for (int _1850 = _7953;_1850<_7954;++_1850){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1844->get())){ int _1851 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1844->get()); (((*_1841)(_1850)) = ((*_1845)(_1851))); }else { if (((_1849 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1849 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1849 == ::mosek::fusion::SolutionStatus::Feasible) || (_1849 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1841)((_1840 + _1850))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1844->get())); }else { (((*_1841)((_1840 + _1850))) = 0.0); }}_1844->inc(); }}}void mosek::fusion::p_RangedVariable::dual_l( std::shared_ptr< monty::ndarray< long long,1 > > _1852,int _1853,std::shared_ptr< monty::ndarray< double,1 > > _1854){ std::shared_ptr< monty::ndarray< double,1 > > _1855 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _7955 = (int)0; int _7956 = (int)((_1852)->size(0)); for (int _1856 = _7955;_1856<_7956;++_1856){ int _1857 = ((*nativeidxs)(((*_1852)(_1856)))); (((*_1854)((_1853 + _1856))) = ((*_1855)(_1857))); }}else { mosek::fusion::SolutionStatus _1858 = model->getPrimalSolutionStatus(); int _7957 = (int)0; int _7958 = (int)((_1852)->size(0)); for (int _1859 = _7957;_1859<_7958;++_1859){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1852)(_1859)))){ int _1860 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1852)(_1859))); (((*_1854)((_1853 + _1859))) = ((*_1855)(_1860))); }else { if (((_1858 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1858 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1858 == ::mosek::fusion::SolutionStatus::Feasible) || (_1858 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1854)((_1853 + _1859))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_1852)(_1859)))); }else { (((*_1854)((_1853 + _1859))) = 0.0); }}}}}void mosek::fusion::p_RangedVariable::dual_values( long long _1861,std::shared_ptr< monty::ndarray< int,1 > > _1862,std::shared_ptr< monty::ndarray< long long,1 > > _1863,int _1864,std::shared_ptr< monty::ndarray< double,1 > > _1865){ long long _1866 = (long long)1; int _1867 = (int)((_1863)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1868 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1861,_1862,_1863); std::shared_ptr< monty::ndarray< double,1 > > _1869 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _1870 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _7959 = (int)0; int _7960 = _1867; for (int _1871 = _7959;_1871<_7960;++_1871){ (_1866 = (_1866 * ((*_1862)(_1871)))); }if (nativeidxs){ long long _7961 = (long long)0; long long _7962 = _1866; for (long long _1872 = _7961;_1872<_7962;++_1872){ int _1873 = ((*nativeidxs)(_1868->get())); (((*_1865)((_1872 + _1864))) = (((*_1869)(_1873)) - ((*_1870)(_1873)))); _1868->inc(); }}else { mosek::fusion::SolutionStatus _1874 = model->getPrimalSolutionStatus(); int _7963 = (int)0; int _7964 = (int)_1866; for (int _1875 = _7963;_1875<_7964;++_1875){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1868->get())){ int _1876 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1868->get()); (((*_1865)(_1875)) = (((*_1869)(_1876)) - ((*_1870)(_1876)))); }else { if (((_1874 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1874 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1874 == ::mosek::fusion::SolutionStatus::Feasible) || (_1874 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1865)((_1864 + _1875))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1868->get())); }else { (((*_1865)((_1864 + _1875))) = 0.0); }}_1868->inc(); }}}void mosek::fusion::p_RangedVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _1877,int _1878,std::shared_ptr< monty::ndarray< double,1 > > _1879){ std::shared_ptr< monty::ndarray< double,1 > > _1880 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _1881 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _7965 = (int)0; int _7966 = (int)((_1877)->size(0)); for (int _1882 = _7965;_1882<_7966;++_1882){ int _1883 = ((*nativeidxs)(((*_1877)(_1882)))); (((*_1879)((_1878 + _1882))) = (((*_1880)(_1883)) - ((*_1881)(_1883)))); }}else { mosek::fusion::SolutionStatus _1884 = model->getPrimalSolutionStatus(); int _7967 = (int)0; int _7968 = (int)((_1877)->size(0)); for (int _1885 = _7967;_1885<_7968;++_1885){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1877)(_1885)))){ int _1886 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1877)(_1885))); (((*_1879)((_1878 + _1885))) = (((*_1880)(_1886)) - ((*_1881)(_1886)))); }else { if (((_1884 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1884 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1884 == ::mosek::fusion::SolutionStatus::Feasible) || (_1884 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1879)((_1878 + _1885))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_1877)(_1885)))); }else { (((*_1879)((_1878 + _1885))) = 0.0); }}}}}void mosek::fusion::RangedVariable::set_values  ( long long _1887,    std::shared_ptr< monty::ndarray< int,1 > > _1888,    std::shared_ptr< monty::ndarray< long long,1 > > _1889,    int _1890,    std::shared_ptr< monty::ndarray< double,1 > > _1891,    bool _1892) { mosek::fusion::p_RangedVariable::_get_impl(this)->set_values(_1887,_1888,_1889,_1890,_1891,_1892); }void mosek::fusion::p_RangedVariable::set_values( long long _1887,std::shared_ptr< monty::ndarray< int,1 > > _1888,std::shared_ptr< monty::ndarray< long long,1 > > _1889,int _1890,std::shared_ptr< monty::ndarray< double,1 > > _1891,bool _1892){ if (_1892){ long long _1893 = (long long)1; int _1894 = (int)((_1889)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1895 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1887,_1888,_1889); int _7969 = (int)0; int _7970 = _1894; for (int _1896 = _7969;_1896<_7970;++_1896){ (_1893 = (_1893 * ((*_1888)(_1896)))); }if (nativeidxs){ int _1897 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _1898 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7971; for (long long _1899=(int)0, _7972=_1893; _1899 < _7972;++_1899)_7971.push_back(((*nativeidxs)(_1895->next()))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7971.size()),_7971.begin(),_7971.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _1900 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_1890 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7973; for (int _1901=(int)0, _7974=_1897; _1901 < _7974;++_1901)_7973.push_back(((*_1891)((_1890 + _1901)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7973.size()),_7973.begin(),_7973.end())); })()); else return (_1891); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1898,_1900); }else { std::shared_ptr< monty::ndarray< int,1 > > _1902 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1893))); int _7975 = (int)0; long long _7976 = _1893; for (long long _1903 = _7975;_1903<_7976;++_1903){ _pubthis->inst(_1895->next(),_1903,_1902,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _1904 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7977; for (long long _1905=(int)0, _7978=_1893; _1905 < _7978;++_1905)_7977.push_back(((*_1891)((_1890 + _1905)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7977.size()),_7977.begin(),_7977.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1902,_1904); }}else { }}void mosek::fusion::RangedVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1906,    std::shared_ptr< monty::ndarray< double,1 > > _1907,    bool _1908) { mosek::fusion::p_RangedVariable::_get_impl(this)->set_values(_1906,_1907,_1908); }void mosek::fusion::p_RangedVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1906,std::shared_ptr< monty::ndarray< double,1 > > _1907,bool _1908){ if (_1908){ if (nativeidxs){ int _1909 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _1910 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7979; for (int _1911=(int)0, _7980=_1909; _1911 < _7980;++_1911)_7979.push_back(((*nativeidxs)(((*_1906)(_1911))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7979.size()),_7979.begin(),_7979.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _1912 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7981; for (int _1913=(int)0, _7982=_1909; _1913 < _7982;++_1913)_7981.push_back(((*_1907)(_1913))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7981.size()),_7981.begin(),_7981.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1910,_1912); }else { std::shared_ptr< monty::ndarray< int,1 > > _1914 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1906)->size(0))))); int _7983 = (int)0; int _7984 = (int)((_1906)->size(0)); for (int _1915 = _7983;_1915<_7984;++_1915){ _pubthis->inst(((*_1906)(_1915)),(long long)(_1915),_1914,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _1916 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _7985; for (int _1917=(int)0, _7986=(int)((_1906)->size(0)); _1917 < _7986;++_1917)_7985.push_back(((*_1907)(_1917))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7985.size()),_7985.begin(),_7985.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_1914,_1916); }}else { }}void mosek::fusion::RangedVariable::values  ( long long _1918,    std::shared_ptr< monty::ndarray< int,1 > > _1919,    std::shared_ptr< monty::ndarray< long long,1 > > _1920,    int _1921,    std::shared_ptr< monty::ndarray< double,1 > > _1922,    bool _1923) { mosek::fusion::p_RangedVariable::_get_impl(this)->values(_1918,_1919,_1920,_1921,_1922,_1923); }void mosek::fusion::p_RangedVariable::values( long long _1918,std::shared_ptr< monty::ndarray< int,1 > > _1919,std::shared_ptr< monty::ndarray< long long,1 > > _1920,int _1921,std::shared_ptr< monty::ndarray< double,1 > > _1922,bool _1923){ if (_1923){ long long _1924 = (long long)1; int _1925 = (int)((_1920)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _1926 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1918,_1919,_1920); std::shared_ptr< monty::ndarray< double,1 > > _1927 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _7987 = (int)0; int _7988 = _1925; for (int _1928 = _7987;_1928<_7988;++_1928){ (_1924 = (_1924 * ((*_1919)(_1928)))); }if (nativeidxs){ long long _7989 = (long long)0; long long _7990 = _1924; for (long long _1929 = _7989;_1929<_7990;++_1929){ (((*_1922)((_1929 + _1921))) = ((*_1927)(((*nativeidxs)(_1926->get()))))); _1926->inc(); }}else { mosek::fusion::SolutionStatus _1930 = model->getPrimalSolutionStatus(); int _7991 = (int)0; int _7992 = (int)_1924; for (int _1931 = _7991;_1931<_7992;++_1931){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_1926->get())){ (((*_1922)(_1931)) = ((*_1927)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_1926->get())))); }else { if (((_1930 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1930 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1930 == ::mosek::fusion::SolutionStatus::Feasible) || (_1930 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1922)((_1921 + _1931))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_1926->get())); }else { (((*_1922)((_1921 + _1931))) = 0.0); }}_1926->inc(); }}}else { dual_values(_1918,_1919,_1920,_1921,_1922); }}void mosek::fusion::RangedVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1932,    int _1933,    std::shared_ptr< monty::ndarray< double,1 > > _1934,    bool _1935) { mosek::fusion::p_RangedVariable::_get_impl(this)->values(_1932,_1933,_1934,_1935); }void mosek::fusion::p_RangedVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _1932,int _1933,std::shared_ptr< monty::ndarray< double,1 > > _1934,bool _1935){ if (_1935){ std::shared_ptr< monty::ndarray< double,1 > > _1936 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _7993 = (int)0; int _7994 = (int)((_1932)->size(0)); for (int _1937 = _7993;_1937<_7994;++_1937){ (((*_1934)((_1933 + _1937))) = ((*_1936)(((*nativeidxs)(((*_1932)(_1937))))))); }}else { mosek::fusion::SolutionStatus _1938 = model->getPrimalSolutionStatus(); int _7995 = (int)0; int _7996 = (int)((_1932)->size(0)); for (int _1939 = _7995;_1939<_7996;++_1939){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_1932)(_1939)))){ (((*_1934)((_1933 + _1939))) = ((*_1936)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_1932)(_1939)))))); }else { if (((_1938 == ::mosek::fusion::SolutionStatus::Optimal) || ((_1938 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_1938 == ::mosek::fusion::SolutionStatus::Feasible) || (_1938 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_1934)((_1933 + _1939))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_1932)(_1939)))); }else { (((*_1934)((_1933 + _1939))) = 0.0); }}}}}else { dual_values(_1932,_1933,_1934); }}void mosek::fusion::RangedVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _1940) { mosek::fusion::p_RangedVariable::_get_impl(this)->make_continuous(_1940); }void mosek::fusion::p_RangedVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _1940){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7997; for (int _1941=(int)0, _7998=(int)((_1940)->size(0)); _1941 < _7998;++_1941)_7997.push_back(((*nativeidxs)(((*_1940)(_1941))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7997.size()),_7997.begin(),_7997.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _1942 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1940)->size(0))))); _pubthis->inst(_1940,(int)0,(int)((_1940)->size(0)),(long long)((int)0),(long long)((int)0),_1942,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_1942); }}void mosek::fusion::RangedVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _1943) { mosek::fusion::p_RangedVariable::_get_impl(this)->make_integer(_1943); }void mosek::fusion::p_RangedVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _1943){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _7999; for (int _1944=(int)0, _8000=(int)((_1943)->size(0)); _1944 < _8000;++_1944)_7999.push_back(((*nativeidxs)(((*_1943)(_1944))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7999.size()),_7999.begin(),_7999.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _1945 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1943)->size(0))))); _pubthis->inst(_1943,(int)0,(int)((_1943)->size(0)),(long long)((int)0),(long long)((int)0),_1945,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_1945); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _1946){ return ::mosek::fusion::p_RangedVariable::_new_RangedVariable(_pubthis,_1946); }void mosek::fusion::p_RangedVariable::destroy(){nativeidxs.reset();dom.reset();idxmap.reset();}void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1947,    monty::rc_ptr< ::mosek::fusion::Model > _1948){ return new mosek::fusion::LinearPSDVariable(_1947,_1948); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1947,    monty::rc_ptr< ::mosek::fusion::Model > _1948) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1947,_1948); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1947,    monty::rc_ptr< ::mosek::fusion::Model > _1948){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1947,_1948);(blocksize = mosek::fusion::p_LinearPSDVariable::_get_impl(_1947)->blocksize); (conesize = mosek::fusion::p_LinearPSDVariable::_get_impl(_1947)->conesize); (coneidx = mosek::fusion::p_LinearPSDVariable::_get_impl(_1947)->coneidx); (sdpvardim = mosek::fusion::p_LinearPSDVariable::_get_impl(_1947)->sdpvardim); (numcones = mosek::fusion::p_LinearPSDVariable::_get_impl(_1947)->numcones); }}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1949,    const std::string &  _1950,    int _1951,    monty::rc_ptr< ::mosek::fusion::Set > _1952,    int _1953,    long long _1954){ return new mosek::fusion::LinearPSDVariable(_1949,_1950,_1951,_1952,_1953,_1954); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1949,    const std::string &  _1950,    int _1951,    monty::rc_ptr< ::mosek::fusion::Set > _1952,    int _1953,    long long _1954) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1949,_1950,_1951,_1952,_1953,_1954); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1949,    const std::string &  _1950,    int _1951,    monty::rc_ptr< ::mosek::fusion::Set > _1952,    int _1953,    long long _1954){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_1949,_1950,_1952,_1954);(blocksize = _1952->dim((int)0)); (conesize = _1952->dim((int)0)); (coneidx = _1953); (sdpvardim = _1951); (numcones = (int)1); int _8001 = (int)1; int _8002 = mosek::fusion::p_Set::_get_impl(_1952)->nd; for (int _1955 = _8001;_1955<_8002;++_1955){ (numcones *= _1952->dim(_1955)); }}}void mosek::fusion::p_LinearPSDVariable::flushNames( ){ }std::string mosek::fusion::LinearPSDVariable::toString  ( ) { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1956 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_1956.get())->a(std::string ("PSDVariable(")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_1956.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_1956.get())->a(shape_p->dim((int)0)); int _8003 = (int)1; int _8004 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _1957 = _8003;_1957<_8004;++_1957){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_1956.get())->a(std::string (",")).get())->a(shape_p->dim(_1957)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_1956.get())->a(std::string (")")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_1956.get())->toString(); }void mosek::fusion::LinearPSDVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _1958,    int _1959,    int _1960,    long long _1961,    long long _1962,    std::shared_ptr< monty::ndarray< int,1 > > _1963,    std::shared_ptr< monty::ndarray< int,1 > > _1964,    std::shared_ptr< monty::ndarray< int,1 > > _1965) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->inst(_1958,_1959,_1960,_1961,_1962,_1963,_1964,_1965); }void mosek::fusion::p_LinearPSDVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _1958,int _1959,int _1960,long long _1961,long long _1962,std::shared_ptr< monty::ndarray< int,1 > > _1963,std::shared_ptr< monty::ndarray< int,1 > > _1964,std::shared_ptr< monty::ndarray< int,1 > > _1965){ int _8005 = _1959; int _8006 = _1960; for (int _1966 = _8005;_1966<_8006;++_1966){ if (((((*_1958)(_1966)) < _1961) || (((*_1958)(_1966)) >= (mosek::fusion::p_Set::_get_impl(shape_p)->size + _1961)))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}}long long _1967 = _1962; int _1968 = sdpvardim; int _8007 = _1959; int _8008 = _1960; for (int _1969 = _8007;_1969<_8008;++_1969){ long long _1970 = (((*_1958)(_1969)) - _1961); int _1971 = (int)(_1970 / blocksize); long long _1972 = (_1970 % blocksize); (((*_1963)(_1967)) = (- (((int)1 + coneidx) + _1971))); int _1973 = (int)((_1968 + 0.5) - ::mosek::fusion::Utils::Tools::sqrt((((_1968 + 0.5) * (_1968 + 0.5)) - (_1972 * (int)2)))); int _1974 = (int)(_1972 - ((_1973 * ((((int)2 * _1968) - _1973) - (int)1)) / (int)2)); if ((_1974 >= _1973)){ (((*_1964)(_1967)) = _1974); (((*_1965)(_1967)) = _1973); }else { (((*_1964)(_1967)) = _1973); (((*_1965)(_1967)) = _1974); }( ++ _1967 ); }}void mosek::fusion::LinearPSDVariable::inst  ( long long _1975,    long long _1976,    std::shared_ptr< monty::ndarray< int,1 > > _1977,    std::shared_ptr< monty::ndarray< int,1 > > _1978,    std::shared_ptr< monty::ndarray< int,1 > > _1979) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->inst(_1975,_1976,_1977,_1978,_1979); }void mosek::fusion::p_LinearPSDVariable::inst( long long _1975,long long _1976,std::shared_ptr< monty::ndarray< int,1 > > _1977,std::shared_ptr< monty::ndarray< int,1 > > _1978,std::shared_ptr< monty::ndarray< int,1 > > _1979){ if (((_1975 < (int)0) || (_1975 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}int _1980 = sdpvardim; int _1981 = (int)(_1975 / blocksize); long long _1982 = (_1975 % blocksize); (((*_1977)(_1976)) = (- (((int)1 + coneidx) + _1981))); int _1983 = (int)((_1980 + 0.5) - ::mosek::fusion::Utils::Tools::sqrt((((_1980 + 0.5) * (_1980 + 0.5)) - (_1982 * (int)2)))); int _1984 = (int)(_1982 - ((_1983 * ((((int)2 * _1980) + (int)1) + _1983)) / (int)2)); if ((_1984 >= _1983)){ (((*_1978)(_1976)) = _1984); (((*_1979)(_1976)) = _1983); }else { (((*_1978)(_1976)) = _1983); (((*_1979)(_1976)) = _1984); }}void mosek::fusion::LinearPSDVariable::set_values  ( long long _1985,    std::shared_ptr< monty::ndarray< int,1 > > _1986,    std::shared_ptr< monty::ndarray< long long,1 > > _1987,    int _1988,    std::shared_ptr< monty::ndarray< double,1 > > _1989,    bool _1990) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->set_values(_1985,_1986,_1987,_1988,_1989,_1990); }void mosek::fusion::p_LinearPSDVariable::set_values( long long _1985,std::shared_ptr< monty::ndarray< int,1 > > _1986,std::shared_ptr< monty::ndarray< long long,1 > > _1987,int _1988,std::shared_ptr< monty::ndarray< double,1 > > _1989,bool _1990){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}void mosek::fusion::LinearPSDVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _1991,    std::shared_ptr< monty::ndarray< double,1 > > _1992,    bool _1993) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->set_values(_1991,_1992,_1993); }void mosek::fusion::p_LinearPSDVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _1991,std::shared_ptr< monty::ndarray< double,1 > > _1992,bool _1993){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}void mosek::fusion::LinearPSDVariable::values  ( long long _1994,    std::shared_ptr< monty::ndarray< int,1 > > _1995,    std::shared_ptr< monty::ndarray< long long,1 > > _1996,    int _1997,    std::shared_ptr< monty::ndarray< double,1 > > _1998,    bool _1999) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->values(_1994,_1995,_1996,_1997,_1998,_1999); }void mosek::fusion::p_LinearPSDVariable::values( long long _1994,std::shared_ptr< monty::ndarray< int,1 > > _1995,std::shared_ptr< monty::ndarray< long long,1 > > _1996,int _1997,std::shared_ptr< monty::ndarray< double,1 > > _1998,bool _1999){ long long _2000 = (long long)1; int _2001 = (int)((_1996)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2002 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_1994,_1995,_1996); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2003 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _1999) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _8009 = (int)0; int _8010 = _2001; for (int _2004 = _8009;_2004<_8010;++_2004){ (_2000 = (_2000 * ((*_1995)(_2004)))); }long long _8011 = (long long)0; long long _8012 = _2000; for (long long _2005 = _8011;_2005<_8012;++_2005){ { long long _2006 = (_2002->get() / blocksize); long long _2007 = (_2002->get() % blocksize); (((*_1998)(_2005)) = ((*((*_2003)(((long long)coneidx + _2006))))(_2007))); }_2002->inc(); }}void mosek::fusion::LinearPSDVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2008,    int _2009,    std::shared_ptr< monty::ndarray< double,1 > > _2010,    bool _2011) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->values(_2008,_2009,_2010,_2011); }void mosek::fusion::p_LinearPSDVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2008,int _2009,std::shared_ptr< monty::ndarray< double,1 > > _2010,bool _2011){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2012 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _2011) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _8013 = (int)0; int _8014 = (int)((_2008)->size(0)); for (int _2013 = _8013;_2013<_8014;++_2013){ if (((((*_2008)(_2013)) < (int)0) || (((*_2008)(_2013)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}}int _8015 = (int)0; int _8016 = (int)((_2008)->size(0)); for (int _2014 = _8015;_2014<_8016;++_2014){ long long _2015 = (((*_2008)(_2014)) / blocksize); long long _2016 = (((*_2008)(_2014)) % blocksize); (((*_2010)(_2014)) = ((*((*_2012)(((long long)coneidx + _2015))))(_2016))); }}void mosek::fusion::LinearPSDVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2017) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_2017); }void mosek::fusion::p_LinearPSDVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2017){ }void mosek::fusion::LinearPSDVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2018) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_2018); }void mosek::fusion::p_LinearPSDVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2018){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2019){ return ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(_pubthis,_2019); }void mosek::fusion::p_LinearPSDVariable::destroy(){}void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDVariable::p_PSDVariable  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2020,    monty::rc_ptr< ::mosek::fusion::Model > _2021){ return new mosek::fusion::PSDVariable(_2020,_2021); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2020,    monty::rc_ptr< ::mosek::fusion::Model > _2021) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2020,_2021); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _2020,    monty::rc_ptr< ::mosek::fusion::Model > _2021){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2020,_2021);(conesize = mosek::fusion::p_PSDVariable::_get_impl(_2020)->conesize); (coneidx = mosek::fusion::p_PSDVariable::_get_impl(_2020)->coneidx); (numcones = mosek::fusion::p_PSDVariable::_get_impl(_2020)->numcones); }}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2022,    const std::string &  _2023,    int _2024,    int _2025,    int _2026,    long long _2027){ return new mosek::fusion::PSDVariable(_2022,_2023,_2024,_2025,_2026,_2027); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2022,    const std::string &  _2023,    int _2024,    int _2025,    int _2026,    long long _2027) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_2022,_2023,_2024,_2025,_2026,_2027); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2022,    const std::string &  _2023,    int _2024,    int _2025,    int _2026,    long long _2027){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2022,_2023,::mosek::fusion::p_NDSet::_new_NDSet(_2024,_2024),_2027);(conesize = _2024); (coneidx = _2025); (numcones = _2026); }}void mosek::fusion::p_PSDVariable::flushNames( ){ }std::string mosek::fusion::PSDVariable::toString  ( ) { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2028 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2028.get())->a(std::string ("PSDVariable(")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2028.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2028.get())->a(shape_p->dim((int)0)); int _8017 = (int)1; int _8018 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2029 = _8017;_2029<_8018;++_2029){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2028.get())->a(std::string (",")).get())->a(shape_p->dim(_2029)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2028.get())->a(std::string (")")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2028.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc  ( long long _2030,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2031) { return mosek::fusion::p_PSDVariable::_get_impl(this)->elementDesc(_2030,_2031); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::elementDesc( long long _2030,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2031){ long long _2032 = ((long long)conesize * (long long)conesize); long long _2033 = (_2030 / _2032); long long _2034 = (_2030 % _2032); long long _2035 = (_2034 / conesize); long long _2036 = (_2034 % conesize); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2031.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(_2033).get())->a(std::string (",")).get())->a(_2035).get())->a(std::string (",")).get())->a(_2036).get())->a(std::string ("] ")); if ((numcones > (int)1)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2031.get())->a(std::string (" : element (")).get())->a(_2033).get())->a(std::string (",")).get())->a(_2035).get())->a(std::string (",")).get())->a(_2036); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2031.get())->a(std::string (" : element (")).get())->a(_2035).get())->a(std::string (",")).get())->a(_2036); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2031.get())->a(std::string (") in a semidefinite cone of size (")).get())->a(numcones).get())->a(std::string (",")).get())->a(conesize).get())->a(std::string (",")).get())->a(conesize).get())->a(std::string (")")); return _2031; }void mosek::fusion::PSDVariable::elementName  ( long long _2037,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2038) { mosek::fusion::p_PSDVariable::_get_impl(this)->elementName(_2037,_2038); }void mosek::fusion::p_PSDVariable::elementName( long long _2037,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2038){ long long _2039 = ((long long)conesize * (long long)conesize); long long _2040 = (_2037 / _2039); long long _2041 = (_2037 % _2039); long long _2042 = (_2041 / conesize); long long _2043 = (_2041 % conesize); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2038.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(_2040).get())->a(std::string (",")).get())->a(_2042).get())->a(std::string (",")).get())->a(_2043).get())->a(std::string ("] ")); }void mosek::fusion::PSDVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2044,    int _2045,    int _2046,    long long _2047,    long long _2048,    std::shared_ptr< monty::ndarray< int,1 > > _2049,    std::shared_ptr< monty::ndarray< int,1 > > _2050,    std::shared_ptr< monty::ndarray< int,1 > > _2051) { mosek::fusion::p_PSDVariable::_get_impl(this)->inst(_2044,_2045,_2046,_2047,_2048,_2049,_2050,_2051); }void mosek::fusion::p_PSDVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2044,int _2045,int _2046,long long _2047,long long _2048,std::shared_ptr< monty::ndarray< int,1 > > _2049,std::shared_ptr< monty::ndarray< int,1 > > _2050,std::shared_ptr< monty::ndarray< int,1 > > _2051){ int _8019 = _2045; int _8020 = _2046; for (int _2052 = _8019;_2052<_8020;++_2052){ if (((((*_2044)(_2052)) < _2047) || (((*_2044)(_2052)) >= (mosek::fusion::p_Set::_get_impl(shape_p)->size + _2047)))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}}long long _2053 = _2048; int _8021 = _2045; int _8022 = _2046; for (int _2054 = _8021;_2054<_8022;++_2054){ long long _2055 = (((*_2044)(_2054)) - _2047); int _2056 = (int)(_2055 / (conesize * conesize)); long long _2057 = (_2055 - ((conesize * conesize) * _2056)); (((*_2049)(_2053)) = (- (((int)1 + coneidx) + _2056))); int _2058 = ((int)_2057 / shape_p->dim((int)1)); int _2059 = ((int)_2057 - (int)(_2058 * shape_p->dim((int)1))); if ((_2058 >= _2059)){ (((*_2050)(_2053)) = _2058); (((*_2051)(_2053)) = _2059); }else { (((*_2050)(_2053)) = _2059); (((*_2051)(_2053)) = _2058); }( ++ _2053 ); }}void mosek::fusion::PSDVariable::inst  ( long long _2060,    long long _2061,    std::shared_ptr< monty::ndarray< int,1 > > _2062,    std::shared_ptr< monty::ndarray< int,1 > > _2063,    std::shared_ptr< monty::ndarray< int,1 > > _2064) { mosek::fusion::p_PSDVariable::_get_impl(this)->inst(_2060,_2061,_2062,_2063,_2064); }void mosek::fusion::p_PSDVariable::inst( long long _2060,long long _2061,std::shared_ptr< monty::ndarray< int,1 > > _2062,std::shared_ptr< monty::ndarray< int,1 > > _2063,std::shared_ptr< monty::ndarray< int,1 > > _2064){ if (((_2060 < (int)0) || (_2060 >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}int _2065 = (int)(_2060 / (conesize * conesize)); long long _2066 = (_2060 - ((conesize * conesize) * _2065)); (((*_2062)(_2061)) = (- (((int)1 + coneidx) + _2065))); int _2067 = ((int)_2066 / shape_p->dim((int)1)); int _2068 = ((int)_2066 - (int)(_2067 * shape_p->dim((int)1))); if ((_2067 >= _2068)){ (((*_2063)(_2061)) = _2067); (((*_2064)(_2061)) = _2068); }else { (((*_2063)(_2061)) = _2068); (((*_2064)(_2061)) = _2067); }}void mosek::fusion::PSDVariable::set_values  ( long long _2069,    std::shared_ptr< monty::ndarray< int,1 > > _2070,    std::shared_ptr< monty::ndarray< long long,1 > > _2071,    int _2072,    std::shared_ptr< monty::ndarray< double,1 > > _2073,    bool _2074) { mosek::fusion::p_PSDVariable::_get_impl(this)->set_values(_2069,_2070,_2071,_2072,_2073,_2074); }void mosek::fusion::p_PSDVariable::set_values( long long _2069,std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< long long,1 > > _2071,int _2072,std::shared_ptr< monty::ndarray< double,1 > > _2073,bool _2074){ }void mosek::fusion::PSDVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2075,    std::shared_ptr< monty::ndarray< double,1 > > _2076,    bool _2077) { mosek::fusion::p_PSDVariable::_get_impl(this)->set_values(_2075,_2076,_2077); }void mosek::fusion::p_PSDVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2075,std::shared_ptr< monty::ndarray< double,1 > > _2076,bool _2077){ }void mosek::fusion::PSDVariable::values  ( long long _2078,    std::shared_ptr< monty::ndarray< int,1 > > _2079,    std::shared_ptr< monty::ndarray< long long,1 > > _2080,    int _2081,    std::shared_ptr< monty::ndarray< double,1 > > _2082,    bool _2083) { mosek::fusion::p_PSDVariable::_get_impl(this)->values(_2078,_2079,_2080,_2081,_2082,_2083); }void mosek::fusion::p_PSDVariable::values( long long _2078,std::shared_ptr< monty::ndarray< int,1 > > _2079,std::shared_ptr< monty::ndarray< long long,1 > > _2080,int _2081,std::shared_ptr< monty::ndarray< double,1 > > _2082,bool _2083){ long long _2084 = (long long)1; int _2085 = (int)((_2080)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2086 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2078,_2079,_2080); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2087 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _2083) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _2088 = (conesize * conesize); int _8023 = (int)0; int _8024 = _2085; for (int _2089 = _8023;_2089<_8024;++_2089){ (_2084 = (_2084 * ((*_2079)(_2089)))); }long long _8025 = (long long)0; long long _8026 = _2084; for (long long _2090 = _8025;_2090<_8026;++_2090){ { long long _2091 = (_2086->get() / _2088); long long _2092 = (_2086->get() - (_2091 * _2088)); long long _2093 = (_2092 / conesize); long long _2094 = (_2092 - (_2093 * conesize)); if ((_2094 > _2093)){ (((*_2082)(_2090)) = ((*((*_2087)(((long long)coneidx + _2091))))((((_2093 * conesize) + _2094) - ((_2093 * (_2093 + (int)1)) / (int)2))))); }else { (((*_2082)(_2090)) = ((*((*_2087)(((long long)coneidx + _2091))))((((_2094 * conesize) + _2093) - ((_2094 * (_2094 + (int)1)) / (int)2))))); }}_2086->inc(); }}void mosek::fusion::PSDVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2095,    int _2096,    std::shared_ptr< monty::ndarray< double,1 > > _2097,    bool _2098) { mosek::fusion::p_PSDVariable::_get_impl(this)->values(_2095,_2096,_2097,_2098); }void mosek::fusion::p_PSDVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2095,int _2096,std::shared_ptr< monty::ndarray< double,1 > > _2097,bool _2098){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2099 = ([&]() -> std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > { if ( _2098) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default)); })(); int _2100 = (conesize * conesize); int _8027 = (int)0; int _8028 = (int)((_2095)->size(0)); for (int _2101 = _8027;_2101<_8028;++_2101){ long long _2102 = (((*_2095)(_2101)) / _2100); long long _2103 = (((*_2095)(_2101)) - (_2102 * _2100)); long long _2104 = (_2103 / conesize); long long _2105 = (_2103 - (_2104 * conesize)); if ((_2105 > _2104)){ (((*_2097)(_2101)) = ((*((*_2099)(((long long)coneidx + _2102))))((((_2104 * conesize) + _2105) - ((_2104 * (_2104 + (int)1)) / (int)2))))); }else { (((*_2097)(_2101)) = ((*((*_2099)(((long long)coneidx + _2102))))((((_2105 * conesize) + _2104) - ((_2105 * (_2105 + (int)1)) / (int)2))))); }}}void mosek::fusion::PSDVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2106) { mosek::fusion::p_PSDVariable::_get_impl(this)->make_continuous(_2106); }void mosek::fusion::p_PSDVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2106){ }void mosek::fusion::PSDVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2107) { mosek::fusion::p_PSDVariable::_get_impl(this)->make_integer(_2107); }void mosek::fusion::p_PSDVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2107){ throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2108){ return ::mosek::fusion::p_PSDVariable::_new_PSDVariable(_pubthis,_2108); }void mosek::fusion::p_PSDVariable::destroy(){}void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::PSDVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::slice(int _2473,int _2474)
{ return mosek::fusion::ModelVariable::slice(_2473,_2474); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2600)
{ return mosek::fusion::BaseVariable::pick(_2600); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2603)
{ return mosek::fusion::BaseVariable::pick(_2603); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
void mosek::fusion::PSDVariable::makeContinuous()
{ mosek::fusion::BaseVariable::makeContinuous(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::PSDVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2593,std::shared_ptr< monty::ndarray< int,1 > > _2594,std::shared_ptr< monty::ndarray< int,1 > > _2595)
{ return mosek::fusion::BaseVariable::pick(_2593,_2594,_2595); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(int _2592)
{ return mosek::fusion::BaseVariable::index(_2592); }
void mosek::fusion::PSDVariable::makeInteger()
{ mosek::fusion::BaseVariable::makeInteger(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(int _2586,int _2587,int _2588)
{ return mosek::fusion::BaseVariable::index(_2586,_2587,_2588); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(int _2589,int _2590)
{ return mosek::fusion::BaseVariable::index(_2589,_2590); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::PSDVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2591)
{ return mosek::fusion::BaseVariable::index(_2591); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2597,std::shared_ptr< monty::ndarray< int,1 > > _2598)
{ return mosek::fusion::BaseVariable::pick(_2597,_2598); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::PSDVariable::level()
{ return mosek::fusion::BaseVariable::level(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::PSDVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::PSDVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2577)
{ mosek::fusion::BaseVariable::setLevel(_2577); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::diag(int _2606)
{ return mosek::fusion::BaseVariable::diag(_2606); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::PSDVariable::dual()
{ return mosek::fusion::BaseVariable::dual(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2466,std::shared_ptr< monty::ndarray< int,1 > > _2467)
{ return mosek::fusion::ModelVariable::slice(_2466,_2467); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::PSDVariable::antidiag(int _2605)
{ return mosek::fusion::BaseVariable::antidiag(_2605); }
long long mosek::fusion::PSDVariable::size()
{ return mosek::fusion::BaseVariable::size(); }
void mosek::fusion::PSDVariable::values(int _2560,std::shared_ptr< monty::ndarray< double,1 > > _2561,bool _2562)
{ mosek::fusion::BaseVariable::values(_2560,_2561,_2562); }
mosek::fusion::SymLinearVariable::SymLinearVariable(mosek::fusion::p_SymLinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymLinearVariable()" << this << std::endl; */ }mosek::fusion::SymLinearVariable::~SymLinearVariable() {  /* std::cout << "~SymLinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymLinearVariable::p_SymLinearVariable  (::mosek::fusion::SymLinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _2109,    monty::rc_ptr< ::mosek::fusion::Model > _2110){ return new mosek::fusion::SymLinearVariable(_2109,_2110); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _2109,    monty::rc_ptr< ::mosek::fusion::Model > _2110) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_2109,_2110); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _2109,    monty::rc_ptr< ::mosek::fusion::Model > _2110){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2109,_2110);(nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_SymLinearVariable::_get_impl(_2109)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8029; for (int _2111=(int)0, _8030=(int)((mosek::fusion::p_SymLinearVariable::_get_impl(_2109)->nativeidxs)->size(0)); _2111 < _8030;++_2111)_8029.push_back(((*mosek::fusion::p_SymLinearVariable::_get_impl(_2109)->nativeidxs)(_2111))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8029.size()),_8029.begin(),_8029.end())); })()); else return (nullptr); })()); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_SymLinearVariable::_get_impl(_2109)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_SymLinearVariable::_get_impl(_2109)->idxmap.get())->clone()); else return (nullptr); })()); (dom = mosek::fusion::p_SymLinearVariable::_get_impl(_2109)->dom); (mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->dim = mosek::fusion::p_SymLinearVariable::_get_impl(_2109)->dim); (names_flushed = mosek::fusion::p_SymLinearVariable::_get_impl(_2109)->names_flushed); }}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2112,    const std::string &  _2113,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _2114,    int _2115,    std::shared_ptr< monty::ndarray< int,1 > > _2116,    long long _2117){ return new mosek::fusion::SymLinearVariable(_2112,_2113,_2114,_2115,_2116,_2117); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2112,    const std::string &  _2113,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _2114,    int _2115,    std::shared_ptr< monty::ndarray< int,1 > > _2116,    long long _2117) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_2112,_2113,_2114,_2115,_2116,_2117); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2112,    const std::string &  _2113,    monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > _2114,    int _2115,    std::shared_ptr< monty::ndarray< int,1 > > _2116,    long long _2117){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2112,_2113,::mosek::fusion::p_Set::make(_2115,_2115),_2117);(mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->nativeidxs = _2116); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( ! mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->nativeidxs) return (::mosek::fusion::Utils::p_IntMap::_new_IntMap()); else return (nullptr); })()); (mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->dom = _2114); (mosek::fusion::p_SymLinearVariable::_get_impl(_pubthis)->dim = _2115); (names_flushed = false); }}std::string mosek::fusion::SymLinearVariable::toString  ( ) { return mosek::fusion::p_SymLinearVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymLinearVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2118 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2118.get())->a(std::string ("SymLinearVariable( (")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2118.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2118.get())->a(shape_p->dim((int)0)); int _8031 = (int)1; int _8032 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2119 = _8031;_2119<_8032;++_2119){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2118.get())->a(std::string (",")).get())->a(shape_p->dim(_2119)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2118.get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2118.get())->toString(); }void mosek::fusion::p_SymLinearVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _8033 = (int)0; int _8034 = dim; for (int _2120 = _8033;_2120<_8034;++_2120){ int _8035 = (int)0; int _8036 = (_2120 + (int)1); for (int _2121 = _8035;_2121<_8036;++_2121){ int _2122 = (((_2120 * dim) - ((_2120 * (_2120 + (int)1)) / (int)2)) + _2121); int _2123 = ((_2120 * dim) + _2121); mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_2122)),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2123))).get())->a(std::string ("]")).get())->toString()); })()); }}}else { int _8037 = (int)0; int _8038 = dim; for (int _2124 = _8037;_2124<_8038;++_2124){ int _8039 = (int)0; int _8040 = (_2124 + (int)1); for (int _2125 = _8039;_2125<_8040;++_2125){ int _2126 = ((_2124 * dim) + _2125); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem((long long)(_2126))){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem((long long)(_2126)))),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2126))).get())->a(std::string ("]")).get())->toString()); })()); }else {}}}}(names_flushed = true); }else {}}void mosek::fusion::SymLinearVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2127,    int _2128,    int _2129,    long long _2130,    long long _2131,    std::shared_ptr< monty::ndarray< int,1 > > _2132,    std::shared_ptr< monty::ndarray< int,1 > > _2133,    std::shared_ptr< monty::ndarray< int,1 > > _2134) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->inst(_2127,_2128,_2129,_2130,_2131,_2132,_2133,_2134); }void mosek::fusion::p_SymLinearVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2127,int _2128,int _2129,long long _2130,long long _2131,std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133,std::shared_ptr< monty::ndarray< int,1 > > _2134){ if (nativeidxs){ int _8041 = _2128; int _8042 = _2129; for (int _2135 = _8041;_2135<_8042;++_2135){ (((*_2132)(((_2131 + _2135) - _2128))) = ((*nativeidxs)(tril_lin_idx((((*_2127)(_2135)) - _2130))))); }}else { int _8043 = _2128; int _8044 = _2129; for (int _2136 = _8043;_2136<_8044;++_2136){ long long _2137 = tril_lin_idx((((*_2127)(_2136)) - _2130)); long long _2138 = tril_idx((((*_2127)(_2136)) - _2130)); if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2138))){ int _2139 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),_2138,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom)->key,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(_2137)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_2138,_2139); (((*_2132)(((_2131 + _2136) - _2128))) = _2139); (names_flushed = false); }else { (((*_2132)(((_2131 + _2136) - _2128))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2138)); }}}}void mosek::fusion::SymLinearVariable::inst  ( long long _2140,    long long _2141,    std::shared_ptr< monty::ndarray< int,1 > > _2142,    std::shared_ptr< monty::ndarray< int,1 > > _2143,    std::shared_ptr< monty::ndarray< int,1 > > _2144) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->inst(_2140,_2141,_2142,_2143,_2144); }void mosek::fusion::p_SymLinearVariable::inst( long long _2140,long long _2141,std::shared_ptr< monty::ndarray< int,1 > > _2142,std::shared_ptr< monty::ndarray< int,1 > > _2143,std::shared_ptr< monty::ndarray< int,1 > > _2144){ long long _2145 = tril_lin_idx(_2140); long long _2146 = tril_idx(_2140); if (nativeidxs){ (((*_2142)(_2141)) = ((*nativeidxs)(_2145))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2146))){ int _2147 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),_2146,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom)->key,mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(_2146)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_2145,_2147); (((*_2142)(_2141)) = _2147); }else { (((*_2142)(_2141)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2145)); }}}void mosek::fusion::p_SymLinearVariable::dual_values( long long _2148,std::shared_ptr< monty::ndarray< int,1 > > _2149,std::shared_ptr< monty::ndarray< long long,1 > > _2150,int _2151,std::shared_ptr< monty::ndarray< double,1 > > _2152){ long long _2153 = (long long)1; int _2154 = (int)((_2150)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2155 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2148,_2149,_2150); std::shared_ptr< monty::ndarray< double,1 > > _2156 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2157 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8045 = (int)0; int _8046 = _2154; for (int _2158 = _8045;_2158<_8046;++_2158){ (_2153 = (_2153 * ((*_2149)(_2158)))); }if (nativeidxs){ long long _8047 = (long long)0; long long _8048 = _2153; for (long long _2159 = _8047;_2159<_8048;++_2159){ int _2160 = ((*nativeidxs)(tril_lin_idx(_2155->get()))); (((*_2152)((_2159 + _2151))) = (((*_2156)(_2160)) - ((*_2157)(_2160)))); _2155->inc(); }}else { mosek::fusion::SolutionStatus _2161 = model->getPrimalSolutionStatus(); int _8049 = (int)0; int _8050 = (int)_2153; for (int _2162 = _8049;_2162<_8050;++_2162){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(tril_lin_idx(_2155->get()))){ int _2163 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2155->get()); (((*_2152)((_2151 + _2162))) = (((*_2156)(_2163)) - ((*_2157)(_2163)))); }else { (((*_2152)((_2151 + _2162))) = 0.0); }_2155->inc(); }}}void mosek::fusion::p_SymLinearVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2164,int _2165,std::shared_ptr< monty::ndarray< double,1 > > _2166){ std::shared_ptr< monty::ndarray< double,1 > > _2167 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2168 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8051 = (int)0; int _8052 = (int)((_2164)->size(0)); for (int _2169 = _8051;_2169<_8052;++_2169){ int _2170 = ((*nativeidxs)(tril_lin_idx(((*_2164)(_2169))))); (((*_2166)((_2165 + _2169))) = (((*_2167)(_2170)) - ((*_2168)(_2170)))); }}else { mosek::fusion::SolutionStatus _2171 = model->getPrimalSolutionStatus(); int _8053 = (int)0; int _8054 = (int)((_2164)->size(0)); for (int _2172 = _8053;_2172<_8054;++_2172){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2164)(_2172)))){ int _2173 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2164)(_2172))); (((*_2166)((_2165 + _2172))) = (((*_2167)(_2173)) - ((*_2168)(_2173)))); }else { (((*_2166)((_2165 + _2172))) = 0.0); }}}}void mosek::fusion::SymLinearVariable::set_values  ( long long _2174,    std::shared_ptr< monty::ndarray< int,1 > > _2175,    std::shared_ptr< monty::ndarray< long long,1 > > _2176,    int _2177,    std::shared_ptr< monty::ndarray< double,1 > > _2178,    bool _2179) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->set_values(_2174,_2175,_2176,_2177,_2178,_2179); }void mosek::fusion::p_SymLinearVariable::set_values( long long _2174,std::shared_ptr< monty::ndarray< int,1 > > _2175,std::shared_ptr< monty::ndarray< long long,1 > > _2176,int _2177,std::shared_ptr< monty::ndarray< double,1 > > _2178,bool _2179){ if (_2179){ long long _2180 = (long long)1; int _2181 = (int)((_2176)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2182 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2174,_2175,_2176); int _8055 = (int)0; int _8056 = _2181; for (int _2183 = _8055;_2183<_8056;++_2183){ (_2180 = (_2180 * ((*_2175)(_2183)))); }if (nativeidxs){ int _2184 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2185 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8057; for (long long _2186=(int)0, _8058=_2180; _2186 < _8058;++_2186)_8057.push_back(((*nativeidxs)(tril_lin_idx(_2182->next())))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8057.size()),_8057.begin(),_8057.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2187 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_2177 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8059; for (int _2188=(int)0, _8060=_2184; _2188 < _8060;++_2188)_8059.push_back(((*_2178)((_2177 + _2188)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8059.size()),_8059.begin(),_8059.end())); })()); else return (_2178); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2185,_2187); }else { std::shared_ptr< monty::ndarray< int,1 > > _2189 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2180))); int _8061 = (int)0; long long _8062 = _2180; for (long long _2190 = _8061;_2190<_8062;++_2190){ _pubthis->inst(_2182->next(),_2190,_2189,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2191 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8063; for (long long _2192=(int)0, _8064=_2180; _2192 < _8064;++_2192)_8063.push_back(((*_2178)((_2177 + _2192)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8063.size()),_8063.begin(),_8063.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2189,_2191); }}else { }}void mosek::fusion::SymLinearVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2193,    std::shared_ptr< monty::ndarray< double,1 > > _2194,    bool _2195) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->set_values(_2193,_2194,_2195); }void mosek::fusion::p_SymLinearVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2193,std::shared_ptr< monty::ndarray< double,1 > > _2194,bool _2195){ if (_2195){ if (nativeidxs){ int _2196 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2197 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8065; for (int _2198=(int)0, _8066=_2196; _2198 < _8066;++_2198)_8065.push_back(((*nativeidxs)(tril_lin_idx(((*_2193)(_2198)))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8065.size()),_8065.begin(),_8065.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2199 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8067; for (int _2200=(int)0, _8068=_2196; _2200 < _8068;++_2200)_8067.push_back(((*_2194)(_2200))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8067.size()),_8067.begin(),_8067.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2197,_2199); }else { std::shared_ptr< monty::ndarray< int,1 > > _2201 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2193)->size(0))))); int _8069 = (int)0; int _8070 = (int)((_2193)->size(0)); for (int _2202 = _8069;_2202<_8070;++_2202){ _pubthis->inst(((*_2193)(_2202)),(long long)(_2202),_2201,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2201,_2194); }}else { }}void mosek::fusion::SymLinearVariable::values  ( long long _2203,    std::shared_ptr< monty::ndarray< int,1 > > _2204,    std::shared_ptr< monty::ndarray< long long,1 > > _2205,    int _2206,    std::shared_ptr< monty::ndarray< double,1 > > _2207,    bool _2208) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->values(_2203,_2204,_2205,_2206,_2207,_2208); }void mosek::fusion::p_SymLinearVariable::values( long long _2203,std::shared_ptr< monty::ndarray< int,1 > > _2204,std::shared_ptr< monty::ndarray< long long,1 > > _2205,int _2206,std::shared_ptr< monty::ndarray< double,1 > > _2207,bool _2208){ if (_2208){ long long _2209 = (long long)1; int _2210 = (int)((_2205)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2211 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2203,_2204,_2205); std::shared_ptr< monty::ndarray< double,1 > > _2212 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _8071 = (int)0; int _8072 = _2210; for (int _2213 = _8071;_2213<_8072;++_2213){ (_2209 *= ((*_2204)(_2213))); }if (nativeidxs){ long long _8073 = (long long)0; long long _8074 = _2209; for (long long _2214 = _8073;_2214<_8074;++_2214){ (((*_2207)((_2214 + _2206))) = ((*_2212)(((*nativeidxs)(tril_lin_idx(_2211->get())))))); _2211->inc(); }}else { mosek::fusion::SolutionStatus _2215 = model->getPrimalSolutionStatus(); if (((_2215 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2215 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2215 == ::mosek::fusion::SolutionStatus::Feasible) || (_2215 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ int _8075 = (int)0; int _8076 = (int)_2209; for (int _2216 = _8075;_2216<_8076;++_2216){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2211->get())){ (((*_2207)((_2206 + _2216))) = ((*_2212)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2211->get())))); }else { (((*_2207)((_2206 + _2216))) = mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(tril_idx(_2211->get()))); }_2211->inc(); }}else { int _8077 = (int)0; int _8078 = (int)_2209; for (int _2217 = _8077;_2217<_8078;++_2217){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2211->get())){ (((*_2207)((_2206 + _2217))) = ((*_2212)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2211->get())))); }else { (((*_2207)((_2206 + _2217))) = 0.0); }_2211->inc(); }}}}else { dual_values(_2203,_2204,_2205,_2206,_2207); }}void mosek::fusion::SymLinearVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2218,    int _2219,    std::shared_ptr< monty::ndarray< double,1 > > _2220,    bool _2221) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->values(_2218,_2219,_2220,_2221); }void mosek::fusion::p_SymLinearVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2218,int _2219,std::shared_ptr< monty::ndarray< double,1 > > _2220,bool _2221){ if (_2221){ std::shared_ptr< monty::ndarray< double,1 > > _2222 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8079 = (int)0; int _8080 = (int)((_2218)->size(0)); for (int _2223 = _8079;_2223<_8080;++_2223){ (((*_2220)((_2219 + _2223))) = ((*_2222)(((*nativeidxs)(tril_lin_idx(((*_2218)(_2223)))))))); }}else { mosek::fusion::SolutionStatus _2224 = model->getPrimalSolutionStatus(); if (((_2224 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2224 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2224 == ::mosek::fusion::SolutionStatus::Feasible) || (_2224 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ int _8081 = (int)0; int _8082 = (int)((_2218)->size(0)); for (int _2225 = _8081;_2225<_8082;++_2225){ long long _2226 = ((*_2218)(_2225)); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2226)){ (((*_2220)((_2219 + _2225))) = ((*_2222)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2226)))); }else { (((*_2220)((_2219 + _2225))) = mosek::fusion::p_SymmetricLinearDomain::_get_impl(dom.get())->get_rhs_item(tril_idx(_2226))); }}}else { int _8083 = (int)0; int _8084 = (int)((_2218)->size(0)); for (int _2227 = _8083;_2227<_8084;++_2227){ long long _2228 = ((*_2218)(_2227)); if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2228)){ (((*_2220)((_2219 + _2227))) = ((*_2222)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(tril_idx(_2228))))); }else { (((*_2220)((_2219 + _2227))) = 0.0); }}}}}else { dual_values(_2218,_2219,_2220); }}void mosek::fusion::SymLinearVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2229) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->make_continuous(_2229); }void mosek::fusion::p_SymLinearVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2229){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8085; for (int _2230=(int)0, _8086=(int)((_2229)->size(0)); _2230 < _8086;++_2230)_8085.push_back(((*nativeidxs)(((*_2229)(_2230))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8085.size()),_8085.begin(),_8085.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2231 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2229)->size(0))))); _pubthis->inst(_2229,(int)0,(int)((_2229)->size(0)),(long long)((int)0),(long long)((int)0),_2231,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_2231); }}void mosek::fusion::SymLinearVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2232) { mosek::fusion::p_SymLinearVariable::_get_impl(this)->make_integer(_2232); }void mosek::fusion::p_SymLinearVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2232){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8087; for (int _2233=(int)0, _8088=(int)((_2232)->size(0)); _2233 < _8088;++_2233)_8087.push_back(((*nativeidxs)(((*_2232)(_2233))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8087.size()),_8087.begin(),_8087.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2234 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2232)->size(0))))); _pubthis->inst(_2232,(int)0,(int)((_2232)->size(0)),(long long)((int)0),(long long)((int)0),_2234,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_2234); }}long long mosek::fusion::p_SymLinearVariable::tril_idx( long long _2235){ long long _2236 = (_2235 / dim); long long _2237 = (_2235 % dim); if ((_2237 > _2236)){ return ((_2237 * dim) + _2236); }else { return _2235; }}long long mosek::fusion::p_SymLinearVariable::tril_lin_idx( long long _2238){ long long _2239 = (_2238 / dim); long long _2240 = (_2238 % dim); if ((_2240 > _2239)){ return (((_2240 * (_2240 + (int)1)) / (int)2) + _2239); }else { return (((_2239 * (_2239 + (int)1)) / (int)2) + _2240); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymLinearVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2241){ return ::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(_pubthis,_2241); }void mosek::fusion::p_SymLinearVariable::destroy(){dom.reset();nativeidxs.reset();idxmap.reset();}void mosek::fusion::SymLinearVariable::destroy() { mosek::fusion::p_SymLinearVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::SymLinearVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::slice(int _2473,int _2474)
{ return mosek::fusion::ModelVariable::slice(_2473,_2474); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2600)
{ return mosek::fusion::BaseVariable::pick(_2600); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2603)
{ return mosek::fusion::BaseVariable::pick(_2603); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
void mosek::fusion::SymLinearVariable::makeContinuous()
{ mosek::fusion::BaseVariable::makeContinuous(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymLinearVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2593,std::shared_ptr< monty::ndarray< int,1 > > _2594,std::shared_ptr< monty::ndarray< int,1 > > _2595)
{ return mosek::fusion::BaseVariable::pick(_2593,_2594,_2595); }
void mosek::fusion::SymLinearVariable::elementName(long long _2464,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2465)
{ mosek::fusion::ModelVariable::elementName(_2464,_2465); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(int _2592)
{ return mosek::fusion::BaseVariable::index(_2592); }
void mosek::fusion::SymLinearVariable::makeInteger()
{ mosek::fusion::BaseVariable::makeInteger(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(int _2586,int _2587,int _2588)
{ return mosek::fusion::BaseVariable::index(_2586,_2587,_2588); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(int _2589,int _2590)
{ return mosek::fusion::BaseVariable::index(_2589,_2590); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::SymLinearVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2591)
{ return mosek::fusion::BaseVariable::index(_2591); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2597,std::shared_ptr< monty::ndarray< int,1 > > _2598)
{ return mosek::fusion::BaseVariable::pick(_2597,_2598); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymLinearVariable::level()
{ return mosek::fusion::BaseVariable::level(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::SymLinearVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::SymLinearVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2577)
{ mosek::fusion::BaseVariable::setLevel(_2577); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::diag(int _2606)
{ return mosek::fusion::BaseVariable::diag(_2606); }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SymLinearVariable::dual()
{ return mosek::fusion::BaseVariable::dual(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2466,std::shared_ptr< monty::ndarray< int,1 > > _2467)
{ return mosek::fusion::ModelVariable::slice(_2466,_2467); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::SymLinearVariable::elementDesc(long long _2528,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2529)
{ return mosek::fusion::BaseVariable::elementDesc(_2528,_2529); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::SymLinearVariable::antidiag(int _2605)
{ return mosek::fusion::BaseVariable::antidiag(_2605); }
long long mosek::fusion::SymLinearVariable::size()
{ return mosek::fusion::BaseVariable::size(); }
void mosek::fusion::SymLinearVariable::values(int _2560,std::shared_ptr< monty::ndarray< double,1 > > _2561,bool _2562)
{ mosek::fusion::BaseVariable::values(_2560,_2561,_2562); }
mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearVariable::p_LinearVariable  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2242,    monty::rc_ptr< ::mosek::fusion::Model > _2243){ return new mosek::fusion::LinearVariable(_2242,_2243); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2242,    monty::rc_ptr< ::mosek::fusion::Model > _2243) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2242,_2243); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _2242,    monty::rc_ptr< ::mosek::fusion::Model > _2243){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2242,_2243);(nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_LinearVariable::_get_impl(_2242)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8089; for (int _2244=(int)0, _8090=(int)((mosek::fusion::p_LinearVariable::_get_impl(_2242)->nativeidxs)->size(0)); _2244 < _8090;++_2244)_8089.push_back(((*mosek::fusion::p_LinearVariable::_get_impl(_2242)->nativeidxs)(_2244))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8089.size()),_8089.begin(),_8089.end())); })()); else return (nullptr); })()); (idxmap = ([&]() -> monty::rc_ptr< ::mosek::fusion::Utils::IntMap > { if ( mosek::fusion::p_LinearVariable::_get_impl(_2242)->idxmap) return (mosek::fusion::Utils::p_IntMap::_get_impl(mosek::fusion::p_LinearVariable::_get_impl(_2242)->idxmap.get())->clone()); else return (nullptr); })()); (dom = mosek::fusion::p_LinearVariable::_get_impl(_2242)->dom); (names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_2242)->names_flushed); }}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2245,    const std::string &  _2246,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _2247,    monty::rc_ptr< ::mosek::fusion::Set > _2248,    std::shared_ptr< monty::ndarray< int,1 > > _2249,    long long _2250){ return new mosek::fusion::LinearVariable(_2245,_2246,_2247,_2248,_2249,_2250); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2245,    const std::string &  _2246,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _2247,    monty::rc_ptr< ::mosek::fusion::Set > _2248,    std::shared_ptr< monty::ndarray< int,1 > > _2249,    long long _2250) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_2245,_2246,_2247,_2248,_2249,_2250); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2245,    const std::string &  _2246,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _2247,    monty::rc_ptr< ::mosek::fusion::Set > _2248,    std::shared_ptr< monty::ndarray< int,1 > > _2249,    long long _2250){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2245,_2246,_2248,_2250);(nativeidxs = _2249); if (! _2249){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); }else { (idxmap = nullptr); }(dom = _2247); (names_flushed = false); }}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::LinearVariable::elementDesc  ( long long _2251,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2252) { return mosek::fusion::p_LinearVariable::_get_impl(this)->elementDesc(_2251,_2252); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_LinearVariable::elementDesc( long long _2251,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2252){ _pubthis->elementName(_2251,_2252); mosek::fusion::p_LinearDomain::_get_impl(dom.get())->domainToString(_2251,_2252); return _2252; }void mosek::fusion::LinearVariable::elementName  ( long long _2253,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2254) { mosek::fusion::p_LinearVariable::_get_impl(this)->elementName(_2253,_2254); }void mosek::fusion::p_LinearVariable::elementName( long long _2253,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2254){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2254.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_2253)).get())->a(std::string ("] ")); }void mosek::fusion::p_LinearVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ if (nativeidxs){ int _8091 = (int)0; int _8092 = (int)((nativeidxs)->size(0)); for (int _2255 = _8091;_2255<_8092;++_2255){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_2255)),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2255))).get())->a(std::string ("]")).get())->toString()); })()); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _2256 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->keys(); std::shared_ptr< monty::ndarray< int,1 > > _2257 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->values(); int _8093 = (int)0; int _8094 = (int)((_2256)->size(0)); for (int _2258 = _8093;_2258<_8094;++_2258){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*_2257)(_2258)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname(((*_2256)(_2258)))).get())->a(std::string ("]")).get())->toString()); }}(names_flushed = true); }else {}}void mosek::fusion::LinearVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2259,    int _2260,    int _2261,    long long _2262,    long long _2263,    std::shared_ptr< monty::ndarray< int,1 > > _2264,    std::shared_ptr< monty::ndarray< int,1 > > _2265,    std::shared_ptr< monty::ndarray< int,1 > > _2266) { mosek::fusion::p_LinearVariable::_get_impl(this)->inst(_2259,_2260,_2261,_2262,_2263,_2264,_2265,_2266); }void mosek::fusion::p_LinearVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2259,int _2260,int _2261,long long _2262,long long _2263,std::shared_ptr< monty::ndarray< int,1 > > _2264,std::shared_ptr< monty::ndarray< int,1 > > _2265,std::shared_ptr< monty::ndarray< int,1 > > _2266){ if (nativeidxs){ int _8095 = _2260; int _8096 = _2261; for (int _2267 = _8095;_2267<_8096;++_2267){ (((*_2264)((_2263 + (long long)(_2267 - _2260)))) = ((*nativeidxs)(((*_2259)(((long long)_2267 - _2262)))))); }}else { int _8097 = _2260; int _8098 = _2261; for (int _2268 = _8097;_2268<_8098;++_2268){ if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2259)(((long long)_2268 - _2262)))))){ int _2269 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),((*_2259)(((long long)_2268 - _2262))),mosek::fusion::p_LinearDomain::_get_impl(dom)->key,mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(((*_2259)(((long long)_2268 - _2262))))); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(((*_2259)((_2268 - _2262))),_2269); (((*_2264)(((_2263 + _2268) - _2260))) = _2269); (names_flushed = false); }else { (((*_2264)(((_2263 + _2268) - _2260))) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2259)(((long long)_2268 - _2262))))); }}}}void mosek::fusion::LinearVariable::inst  ( long long _2270,    long long _2271,    std::shared_ptr< monty::ndarray< int,1 > > _2272,    std::shared_ptr< monty::ndarray< int,1 > > _2273,    std::shared_ptr< monty::ndarray< int,1 > > _2274) { mosek::fusion::p_LinearVariable::_get_impl(this)->inst(_2270,_2271,_2272,_2273,_2274); }void mosek::fusion::p_LinearVariable::inst( long long _2270,long long _2271,std::shared_ptr< monty::ndarray< int,1 > > _2272,std::shared_ptr< monty::ndarray< int,1 > > _2273,std::shared_ptr< monty::ndarray< int,1 > > _2274){ if (nativeidxs){ (((*_2272)(_2271)) = ((*nativeidxs)(_2270))); }else { if ((! mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2270))){ int _2275 = mosek::fusion::p_Model::_get_impl(model.get())->append_linearvar(::mosek::fusion::ModelVariable::t(_pubthis),_2270,mosek::fusion::p_LinearDomain::_get_impl(dom)->key,mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_2270)); mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(_2270,_2275); (((*_2272)(_2271)) = _2275); }else { (((*_2272)(_2271)) = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2270)); }}}void mosek::fusion::p_LinearVariable::dual_values( long long _2276,std::shared_ptr< monty::ndarray< int,1 > > _2277,std::shared_ptr< monty::ndarray< long long,1 > > _2278,int _2279,std::shared_ptr< monty::ndarray< double,1 > > _2280){ long long _2281 = (long long)1; int _2282 = (int)((_2278)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2283 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2276,_2277,_2278); std::shared_ptr< monty::ndarray< double,1 > > _2284 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2285 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); int _8099 = (int)0; int _8100 = _2282; for (int _2286 = _8099;_2286<_8100;++_2286){ (_2281 = (_2281 * ((*_2277)(_2286)))); }if (nativeidxs){ long long _8101 = (long long)0; long long _8102 = _2281; for (long long _2287 = _8101;_2287<_8102;++_2287){ int _2288 = ((*nativeidxs)(_2283->get())); (((*_2280)((_2287 + _2279))) = (((*_2284)(_2288)) - ((*_2285)(_2288)))); _2283->inc(); }}else { mosek::fusion::SolutionStatus _2289 = model->getPrimalSolutionStatus(); int _8103 = (int)0; int _8104 = (int)_2281; for (int _2290 = _8103;_2290<_8104;++_2290){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2283->get())){ int _2291 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2283->get()); (((*_2280)((_2279 + _2290))) = (((*_2284)(_2291)) - ((*_2285)(_2291)))); }else { if (((_2289 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2289 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2289 == ::mosek::fusion::SolutionStatus::Feasible) || (_2289 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2280)((_2279 + _2290))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_2283->get())); }else { (((*_2280)((_2279 + _2290))) = 0.0); }}_2283->inc(); }}}void mosek::fusion::p_LinearVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2292,int _2293,std::shared_ptr< monty::ndarray< double,1 > > _2294){ std::shared_ptr< monty::ndarray< double,1 > > _2295 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _2296 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_sux(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8105 = (int)0; int _8106 = (int)((_2292)->size(0)); for (int _2297 = _8105;_2297<_8106;++_2297){ int _2298 = ((*nativeidxs)(((*_2292)(_2297)))); (((*_2294)((_2293 + _2297))) = (((*_2295)(_2298)) - ((*_2296)(_2298)))); }}else { mosek::fusion::SolutionStatus _2299 = model->getPrimalSolutionStatus(); int _8107 = (int)0; int _8108 = (int)((_2292)->size(0)); for (int _2300 = _8107;_2300<_8108;++_2300){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2292)(_2300)))){ int _2301 = mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2292)(_2300))); (((*_2294)((_2293 + _2300))) = (((*_2295)(_2301)) - ((*_2296)(_2301)))); }else { if (((_2299 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2299 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2299 == ::mosek::fusion::SolutionStatus::Feasible) || (_2299 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2294)((_2293 + _2300))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(((*_2292)(_2300)))); }else { (((*_2294)((_2293 + _2300))) = 0.0); }}}}}void mosek::fusion::LinearVariable::set_values  ( long long _2302,    std::shared_ptr< monty::ndarray< int,1 > > _2303,    std::shared_ptr< monty::ndarray< long long,1 > > _2304,    int _2305,    std::shared_ptr< monty::ndarray< double,1 > > _2306,    bool _2307) { mosek::fusion::p_LinearVariable::_get_impl(this)->set_values(_2302,_2303,_2304,_2305,_2306,_2307); }void mosek::fusion::p_LinearVariable::set_values( long long _2302,std::shared_ptr< monty::ndarray< int,1 > > _2303,std::shared_ptr< monty::ndarray< long long,1 > > _2304,int _2305,std::shared_ptr< monty::ndarray< double,1 > > _2306,bool _2307){ if (_2307){ long long _2308 = (long long)1; int _2309 = (int)((_2304)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2310 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2302,_2303,_2304); int _8109 = (int)0; int _8110 = _2309; for (int _2311 = _8109;_2311<_8110;++_2311){ (_2308 = (_2308 * ((*_2303)(_2311)))); }if (nativeidxs){ int _2312 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2313 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8111; for (long long _2314=(int)0, _8112=_2308; _2314 < _8112;++_2314)_8111.push_back(((*nativeidxs)(_2310->next()))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8111.size()),_8111.begin(),_8111.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2315 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_2305 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8113; for (int _2316=(int)0, _8114=_2312; _2316 < _8114;++_2316)_8113.push_back(((*_2306)(_2316))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8113.size()),_8113.begin(),_8113.end())); })()); else return (_2306); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2313,_2315); }else { std::shared_ptr< monty::ndarray< int,1 > > _2317 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2308))); int _8115 = (int)0; long long _8116 = _2308; for (long long _2318 = _8115;_2318<_8116;++_2318){ _pubthis->inst(_2310->next(),_2318,_2317,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2319 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8117; for (long long _2320=(int)0, _8118=_2308; _2320 < _8118;++_2320)_8117.push_back(((*_2306)((_2305 + _2320)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8117.size()),_8117.begin(),_8117.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2317,_2319); }}else { }}void mosek::fusion::LinearVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2321,    std::shared_ptr< monty::ndarray< double,1 > > _2322,    bool _2323) { mosek::fusion::p_LinearVariable::_get_impl(this)->set_values(_2321,_2322,_2323); }void mosek::fusion::p_LinearVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2321,std::shared_ptr< monty::ndarray< double,1 > > _2322,bool _2323){ if (_2323){ if (nativeidxs){ int _2324 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2325 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8119; for (int _2326=(int)0, _8120=_2324; _2326 < _8120;++_2326)_8119.push_back(((*nativeidxs)(((*_2321)(_2326))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8119.size()),_8119.begin(),_8119.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2327 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8121; for (int _2328=(int)0, _8122=_2324; _2328 < _8122;++_2328)_8121.push_back(((*_2322)(_2328))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8121.size()),_8121.begin(),_8121.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2325,_2327); }else { std::shared_ptr< monty::ndarray< int,1 > > _2329 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2321)->size(0))))); int _8123 = (int)0; int _8124 = (int)((_2321)->size(0)); for (int _2330 = _8123;_2330<_8124;++_2330){ _pubthis->inst(((*_2321)(_2330)),(long long)(_2330),_2329,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); }std::shared_ptr< monty::ndarray< double,1 > > _2331 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8125; for (int _2332=(int)0, _8126=(int)((_2321)->size(0)); _2332 < _8126;++_2332)_8125.push_back(((*_2322)(_2332))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8125.size()),_8125.begin(),_8125.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2329,_2331); }}else { }}void mosek::fusion::LinearVariable::values  ( long long _2333,    std::shared_ptr< monty::ndarray< int,1 > > _2334,    std::shared_ptr< monty::ndarray< long long,1 > > _2335,    int _2336,    std::shared_ptr< monty::ndarray< double,1 > > _2337,    bool _2338) { mosek::fusion::p_LinearVariable::_get_impl(this)->values(_2333,_2334,_2335,_2336,_2337,_2338); }void mosek::fusion::p_LinearVariable::values( long long _2333,std::shared_ptr< monty::ndarray< int,1 > > _2334,std::shared_ptr< monty::ndarray< long long,1 > > _2335,int _2336,std::shared_ptr< monty::ndarray< double,1 > > _2337,bool _2338){ if ((! _2338)){ dual_values(_2333,_2334,_2335,_2336,_2337); }else { long long _2339 = (long long)1; int _2340 = (int)((_2335)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2341 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2333,_2334,_2335); std::shared_ptr< monty::ndarray< double,1 > > _2342 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); int _8127 = (int)0; int _8128 = _2340; for (int _2343 = _8127;_2343<_8128;++_2343){ (_2339 = (_2339 * ((*_2334)(_2343)))); }if (nativeidxs){ long long _8129 = (long long)0; long long _8130 = _2339; for (long long _2344 = _8129;_2344<_8130;++_2344){ (((*_2337)((_2344 + _2336))) = ((*_2342)(((*nativeidxs)(_2341->get()))))); _2341->inc(); }}else { mosek::fusion::SolutionStatus _2345 = model->getPrimalSolutionStatus(); int _8131 = (int)0; int _8132 = (int)_2339; for (int _2346 = _8131;_2346<_8132;++_2346){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_2341->get())){ (((*_2337)((_2336 + _2346))) = ((*_2342)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_2341->get())))); }else { if (((_2345 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2345 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2345 == ::mosek::fusion::SolutionStatus::Feasible) || (_2345 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2337)((_2336 + _2346))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_2341->get())); }else { (((*_2337)((_2336 + _2346))) = 0.0); }}_2341->inc(); }}}}void mosek::fusion::LinearVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2347) { mosek::fusion::p_LinearVariable::_get_impl(this)->make_continuous(_2347); }void mosek::fusion::p_LinearVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2347){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8133; for (int _2348=(int)0, _8134=(int)((_2347)->size(0)); _2348 < _8134;++_2348)_8133.push_back(((*nativeidxs)(((*_2347)(_2348))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8133.size()),_8133.begin(),_8133.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2349 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2347)->size(0))))); _pubthis->inst(_2347,(int)0,(int)((_2347)->size(0)),(long long)((int)0),(long long)((int)0),_2349,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(_2349); }}void mosek::fusion::LinearVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2350) { mosek::fusion::p_LinearVariable::_get_impl(this)->make_integer(_2350); }void mosek::fusion::p_LinearVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2350){ if (nativeidxs){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8135; for (int _2351=(int)0, _8136=(int)((_2350)->size(0)); _2351 < _8136;++_2351)_8135.push_back(((*nativeidxs)(((*_2350)(_2351))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8135.size()),_8135.begin(),_8135.end())); })()); }else { std::shared_ptr< monty::ndarray< int,1 > > _2352 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2350)->size(0))))); _pubthis->inst(_2350,(int)0,(int)((_2350)->size(0)),(long long)((int)0),(long long)((int)0),_2352,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),std::shared_ptr< monty::ndarray< int,1 > >(nullptr)); mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(_2352); }}void mosek::fusion::LinearVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2353,    int _2354,    std::shared_ptr< monty::ndarray< double,1 > > _2355,    bool _2356) { mosek::fusion::p_LinearVariable::_get_impl(this)->values(_2353,_2354,_2355,_2356); }void mosek::fusion::p_LinearVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2353,int _2354,std::shared_ptr< monty::ndarray< double,1 > > _2355,bool _2356){ if ((! _2356)){ dual_values(_2353,_2354,_2355); }else { std::shared_ptr< monty::ndarray< double,1 > > _2357 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); if (nativeidxs){ int _8137 = (int)0; int _8138 = (int)((_2353)->size(0)); for (int _2358 = _8137;_2358<_8138;++_2358){ (((*_2355)((_2354 + _2358))) = ((*_2357)(((*nativeidxs)(((*_2353)(_2358))))))); }}else { mosek::fusion::SolutionStatus _2359 = model->getPrimalSolutionStatus(); int _8139 = (int)0; int _8140 = (int)((_2353)->size(0)); for (int _2360 = _8139;_2360<_8140;++_2360){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_2353)(_2360)))){ (((*_2355)((_2354 + _2360))) = ((*_2357)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_2353)(_2360)))))); }else { if (((_2359 == ::mosek::fusion::SolutionStatus::Optimal) || ((_2359 == ::mosek::fusion::SolutionStatus::NearOptimal) || ((_2359 == ::mosek::fusion::SolutionStatus::Feasible) || (_2359 == ::mosek::fusion::SolutionStatus::NearFeasible))))){ (((*_2355)((_2354 + _2360))) = mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(((*_2353)(_2360)))); }else { (((*_2355)((_2354 + _2360))) = 0.0); }}}}}}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2361){ return ::mosek::fusion::p_LinearVariable::_new_LinearVariable(_pubthis,_2361); }void mosek::fusion::p_LinearVariable::destroy(){dom.reset();nativeidxs.reset();idxmap.reset();}void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable(mosek::fusion::p_BoundInterfaceVariable *_impl) : mosek::fusion::SliceVariable(_impl) { /*std::cout << "BoundInterfaceVariable()" << this << std::endl; */ }mosek::fusion::BoundInterfaceVariable::~BoundInterfaceVariable() {  /* std::cout << "~BoundInterfaceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceVariable::p_BoundInterfaceVariable  (::mosek::fusion::BoundInterfaceVariable * _pubthis) :     mosek::fusion::p_SliceVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2362,    monty::rc_ptr< ::mosek::fusion::Set > _2363,    long long _2364,    std::shared_ptr< monty::ndarray< long long,1 > > _2365,    bool _2366){ return new mosek::fusion::BoundInterfaceVariable(_2362,_2363,_2364,_2365,_2366); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2362,    monty::rc_ptr< ::mosek::fusion::Set > _2363,    long long _2364,    std::shared_ptr< monty::ndarray< long long,1 > > _2365,    bool _2366) :    BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this)){ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_2362,_2363,_2364,_2365,_2366); }void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _2362,    monty::rc_ptr< ::mosek::fusion::Set > _2363,    long long _2364,    std::shared_ptr< monty::ndarray< long long,1 > > _2365,    bool _2366){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_SliceVariable::_initialize(_2362,_2363,_2364,_2365);(originvar = _2362); (islower = _2366); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::slice_( monty::rc_ptr< ::mosek::fusion::Set > _2367,long long _2368,std::shared_ptr< monty::ndarray< long long,1 > > _2369){ return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(originvar,_2367,_2368,_2369,islower); }void mosek::fusion::p_BoundInterfaceVariable::dual_values( long long _2370,std::shared_ptr< monty::ndarray< int,1 > > _2371,std::shared_ptr< monty::ndarray< long long,1 > > _2372,int _2373,std::shared_ptr< monty::ndarray< double,1 > > _2374){ if (islower){ mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_l(_2370,_2371,_2372,_2373,_2374); }else { mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_u(_2370,_2371,_2372,_2373,_2374); }}void mosek::fusion::p_BoundInterfaceVariable::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2375,int _2376,std::shared_ptr< monty::ndarray< double,1 > > _2377){ if (islower){ mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_l(_2375,_2376,_2377); }else { mosek::fusion::p_RangedVariable::_get_impl(originvar.get())->dual_u(_2375,_2376,_2377); }}void mosek::fusion::p_BoundInterfaceVariable::destroy(){originvar.reset();}void mosek::fusion::BoundInterfaceVariable::destroy() { mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->destroy(); }mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicVariable::p_ConicVariable  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2378,    monty::rc_ptr< ::mosek::fusion::Model > _2379){ return new mosek::fusion::ConicVariable(_2378,_2379); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2378,    monty::rc_ptr< ::mosek::fusion::Model > _2379) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2378,_2379); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _2378,    monty::rc_ptr< ::mosek::fusion::Model > _2379){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2378,_2379);(dom = mosek::fusion::p_ConicVariable::_get_impl(_2378)->dom); (coneidx = mosek::fusion::p_ConicVariable::_get_impl(_2378)->coneidx); (conesize = mosek::fusion::p_ConicVariable::_get_impl(_2378)->conesize); (numcone = mosek::fusion::p_ConicVariable::_get_impl(_2378)->numcone); (nativeidxs = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConicVariable::_get_impl(_2378)->nativeidxs) return (([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8141; for (int _2380=(int)0, _8142=(int)((mosek::fusion::p_ConicVariable::_get_impl(_2378)->nativeidxs)->size(0)); _2380 < _8142;++_2380)_8141.push_back(((*mosek::fusion::p_ConicVariable::_get_impl(_2378)->nativeidxs)(_2380))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8141.size()),_8141.begin(),_8141.end())); })()); else return (nullptr); })()); (names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_2378)->names_flushed); }}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2381,    const std::string &  _2382,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _2383,    monty::rc_ptr< ::mosek::fusion::Set > _2384,    std::shared_ptr< monty::ndarray< int,1 > > _2385,    int _2386,    int _2387,    int _2388,    long long _2389){ return new mosek::fusion::ConicVariable(_2381,_2382,_2383,_2384,_2385,_2386,_2387,_2388,_2389); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _2381,    const std::string &  _2382,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _2383,    monty::rc_ptr< ::mosek::fusion::Set > _2384,    std::shared_ptr< monty::ndarray< int,1 > > _2385,    int _2386,    int _2387,    int _2388,    long long _2389) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_2381,_2382,_2383,_2384,_2385,_2386,_2387,_2388,_2389); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2381,    const std::string &  _2382,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _2383,    monty::rc_ptr< ::mosek::fusion::Set > _2384,    std::shared_ptr< monty::ndarray< int,1 > > _2385,    int _2386,    int _2387,    int _2388,    long long _2389){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelVariable::_initialize(_2381,_2382,_2384,_2389);(dom = _2383); (conesize = _2386); (coneidx = _2387); (numcone = _2388); (nativeidxs = _2385); (names_flushed = false); }}std::string mosek::fusion::ConicVariable::toString  ( ) { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2390 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2390.get())->a(std::string ("ConicVariable( ")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2390.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("',")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2390.get())->a(std::string ("(")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_2390.get())->a(shape_p->dim((int)0)); int _8143 = (int)1; int _8144 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2391 = _8143;_2391<_8144;++_2391){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2390.get())->a(std::string (",")).get())->a(shape_p->dim(_2391)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2390.get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2390.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::ConicVariable::elementDesc  ( long long _2392,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2393) { return mosek::fusion::p_ConicVariable::_get_impl(this)->elementDesc(_2392,_2393); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_ConicVariable::elementDesc( long long _2392,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2393){ _pubthis->elementName(_2392,_2393); mosek::fusion::p_QConeDomain::_get_impl(dom.get())->domainToString(_2392,_2393); return _2393; }void mosek::fusion::ConicVariable::elementName  ( long long _2394,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2395) { mosek::fusion::p_ConicVariable::_get_impl(this)->elementName(_2394,_2395); }void mosek::fusion::p_ConicVariable::elementName( long long _2394,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2395){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2395.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_2394)).get())->a(std::string ("] ")); }void mosek::fusion::p_ConicVariable::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ int _8145 = (int)0; int _8146 = (int)((nativeidxs)->size(0)); for (int _2396 = _8145;_2396<_8146;++_2396){ mosek::fusion::p_Model::_get_impl(model.get())->varname(((*nativeidxs)(_2396)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_2396))).get())->a(std::string ("]")).get())->toString()); }(names_flushed = true); }else {}}void mosek::fusion::ConicVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2397,    int _2398,    int _2399,    long long _2400,    long long _2401,    std::shared_ptr< monty::ndarray< int,1 > > _2402,    std::shared_ptr< monty::ndarray< int,1 > > _2403,    std::shared_ptr< monty::ndarray< int,1 > > _2404) { mosek::fusion::p_ConicVariable::_get_impl(this)->inst(_2397,_2398,_2399,_2400,_2401,_2402,_2403,_2404); }void mosek::fusion::p_ConicVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2397,int _2398,int _2399,long long _2400,long long _2401,std::shared_ptr< monty::ndarray< int,1 > > _2402,std::shared_ptr< monty::ndarray< int,1 > > _2403,std::shared_ptr< monty::ndarray< int,1 > > _2404){ if (nativeidxs){ int _8147 = _2398; int _8148 = _2399; for (int _2405 = _8147;_2405<_8148;++_2405){ (((*_2402)((_2401 + (long long)(_2405 - _2398)))) = ((*nativeidxs)(((*_2397)(((long long)_2405 - _2400)))))); }}else {}}void mosek::fusion::ConicVariable::inst  ( long long _2406,    long long _2407,    std::shared_ptr< monty::ndarray< int,1 > > _2408,    std::shared_ptr< monty::ndarray< int,1 > > _2409,    std::shared_ptr< monty::ndarray< int,1 > > _2410) { mosek::fusion::p_ConicVariable::_get_impl(this)->inst(_2406,_2407,_2408,_2409,_2410); }void mosek::fusion::p_ConicVariable::inst( long long _2406,long long _2407,std::shared_ptr< monty::ndarray< int,1 > > _2408,std::shared_ptr< monty::ndarray< int,1 > > _2409,std::shared_ptr< monty::ndarray< int,1 > > _2410){ if (((_2406 < (int)0) || (_2406 >= (long long)((nativeidxs)->size(0))))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}(((*_2408)(_2407)) = ((*nativeidxs)(_2406))); }void mosek::fusion::ConicVariable::set_values  ( long long _2411,    std::shared_ptr< monty::ndarray< int,1 > > _2412,    std::shared_ptr< monty::ndarray< long long,1 > > _2413,    int _2414,    std::shared_ptr< monty::ndarray< double,1 > > _2415,    bool _2416) { mosek::fusion::p_ConicVariable::_get_impl(this)->set_values(_2411,_2412,_2413,_2414,_2415,_2416); }void mosek::fusion::p_ConicVariable::set_values( long long _2411,std::shared_ptr< monty::ndarray< int,1 > > _2412,std::shared_ptr< monty::ndarray< long long,1 > > _2413,int _2414,std::shared_ptr< monty::ndarray< double,1 > > _2415,bool _2416){ if (_2416){ long long _2417 = (long long)1; int _2418 = (int)((_2413)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2419 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2411,_2412,_2413); int _8149 = (int)0; int _8150 = _2418; for (int _2420 = _8149;_2420<_8150;++_2420){ (_2417 = (_2417 * ((*_2412)(_2420)))); }int _2421 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2422 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8151; for (long long _2423=(int)0, _8152=_2417; _2423 < _8152;++_2423)_8151.push_back(((*nativeidxs)(_2419->next()))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8151.size()),_8151.begin(),_8151.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2424 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (_2414 > (int)0)) return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8153; for (int _2425=(int)0, _8154=_2421; _2425 < _8154;++_2425)_8153.push_back(((*_2415)((_2414 + _2425)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8153.size()),_8153.begin(),_8153.end())); })()); else return (_2415); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2422,_2424); }else { }}void mosek::fusion::ConicVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2426,    std::shared_ptr< monty::ndarray< double,1 > > _2427,    bool _2428) { mosek::fusion::p_ConicVariable::_get_impl(this)->set_values(_2426,_2427,_2428); }void mosek::fusion::p_ConicVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2426,std::shared_ptr< monty::ndarray< double,1 > > _2427,bool _2428){ if (_2428){ int _2429 = (int)((nativeidxs)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2430 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8155; for (int _2431=(int)0, _8156=_2429; _2431 < _8156;++_2431)_8155.push_back(((*nativeidxs)(((*_2426)(_2431))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8155.size()),_8155.begin(),_8155.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _2432 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8157; for (int _2433=(int)0, _8158=_2429; _2433 < _8158;++_2433)_8157.push_back(((*_2427)(_2433))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8157.size()),_8157.begin(),_8157.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->setSolution_xx(_2430,_2432); }else { }}void mosek::fusion::ConicVariable::values  ( long long _2434,    std::shared_ptr< monty::ndarray< int,1 > > _2435,    std::shared_ptr< monty::ndarray< long long,1 > > _2436,    int _2437,    std::shared_ptr< monty::ndarray< double,1 > > _2438,    bool _2439) { mosek::fusion::p_ConicVariable::_get_impl(this)->values(_2434,_2435,_2436,_2437,_2438,_2439); }void mosek::fusion::p_ConicVariable::values( long long _2434,std::shared_ptr< monty::ndarray< int,1 > > _2435,std::shared_ptr< monty::ndarray< long long,1 > > _2436,int _2437,std::shared_ptr< monty::ndarray< double,1 > > _2438,bool _2439){ long long _2440 = (long long)1; int _2441 = (int)((_2436)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _2442 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2434,_2435,_2436); std::shared_ptr< monty::ndarray< double,1 > > _2443 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _2439) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default)); })(); int _8159 = (int)0; int _8160 = _2441; for (int _2444 = _8159;_2444<_8160;++_2444){ (_2440 = (_2440 * ((*_2435)(_2444)))); }long long _8161 = (long long)0; long long _8162 = _2440; for (long long _2445 = _8161;_2445<_8162;++_2445){ (((*_2438)((_2445 + _2437))) = ((*_2443)(((*nativeidxs)(_2442->get()))))); _2442->inc(); }}void mosek::fusion::ConicVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2446,    int _2447,    std::shared_ptr< monty::ndarray< double,1 > > _2448,    bool _2449) { mosek::fusion::p_ConicVariable::_get_impl(this)->values(_2446,_2447,_2448,_2449); }void mosek::fusion::p_ConicVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2446,int _2447,std::shared_ptr< monty::ndarray< double,1 > > _2448,bool _2449){ std::shared_ptr< monty::ndarray< double,1 > > _2450 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _2449) return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default)); else return (mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default)); })(); int _8163 = (int)0; int _8164 = (int)((_2446)->size(0)); for (int _2451 = _8163;_2451<_8164;++_2451){ (((*_2448)((_2447 + _2451))) = ((*_2450)(((*nativeidxs)(((*_2446)(_2451))))))); }}void mosek::fusion::ConicVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2452) { mosek::fusion::p_ConicVariable::_get_impl(this)->make_continuous(_2452); }void mosek::fusion::p_ConicVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2452){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putcontlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8165; for (int _2453=(int)0, _8166=(int)((_2452)->size(0)); _2453 < _8166;++_2453)_8165.push_back(((*nativeidxs)(((*_2452)(_2453))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8165.size()),_8165.begin(),_8165.end())); })()); }void mosek::fusion::ConicVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2454) { mosek::fusion::p_ConicVariable::_get_impl(this)->make_integer(_2454); }void mosek::fusion::p_ConicVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2454){ mosek::fusion::p_Model::_get_impl(_pubthis->getModel().get())->task_var_putintlist(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8167; for (int _2455=(int)0, _8168=(int)((_2454)->size(0)); _2455 < _8168;++_2455)_8167.push_back(((*nativeidxs)(((*_2454)(_2455))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8167.size()),_8167.begin(),_8167.end())); })()); }int mosek::fusion::p_ConicVariable::get_variable_index( int _2456){ if ((_2456 >= (int)((nativeidxs)->size(0)))){ throw ::mosek::fusion::IndexError(std::string ("Variable index out of range"));}else { return ((*nativeidxs)(_2456)); }}monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::clone( monty::rc_ptr< ::mosek::fusion::Model > _2457){ return ::mosek::fusion::p_ConicVariable::_new_ConicVariable(_pubthis,_2457); }void mosek::fusion::p_ConicVariable::destroy(){nativeidxs.reset();dom.reset();}void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelVariable::p_ModelVariable  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _2458,    monty::rc_ptr< ::mosek::fusion::Model > _2459){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_2458,_2459);(name = mosek::fusion::p_ModelVariable::_get_impl(_2458)->name); (varid = mosek::fusion::p_ModelVariable::_get_impl(_2458)->varid); }}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2460,    const std::string &  _2461,    monty::rc_ptr< ::mosek::fusion::Set > _2462,    long long _2463){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(_2460,_2462);(name = _2461); (varid = _2463); }}void mosek::fusion::ModelVariable::elementName  ( long long _2464,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2465) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_2464,_2465); }void mosek::fusion::p_ModelVariable::elementName( long long _2464,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2465){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2465.get())->a(([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("_")); else return (name); })()).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_2464)).get())->a(std::string ("]")); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::ModelVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _2466,    std::shared_ptr< monty::ndarray< int,1 > > _2467) { return mosek::fusion::p_ModelVariable::_get_impl(this)->slice(_2466,_2467); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_ModelVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _2466,std::shared_ptr< monty::ndarray< int,1 > > _2467){ if (((int)((_2466)->size(0)) != (int)((_2467)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _2468 = shape_p->slice(_2466,_2467); std::shared_ptr< monty::ndarray< long long,1 > > _2469 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_2469)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _2470 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_2470 > (int)0);(_2470 = (_2470 - (int)1))){ (((*_2469)((_2470 - (int)1))) = (((*_2469)(_2470)) * shape_p->dim(_2470))); }}long long _2471 = (long long)0; { int _2472 = (int)0; for (;(_2472 < (int)((_2469)->size(0)));( ++ _2472 )){ (_2471 = (_2471 + (((*_2469)(_2472)) * ((*_2466)(_2472))))); }}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),_2468,_2471,_2469); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::ModelVariable::slice  ( int _2473,    int _2474) { return mosek::fusion::p_ModelVariable::_get_impl(this)->slice(_2473,_2474); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_ModelVariable::slice( int _2473,int _2474){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Wrong size of slice"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _2475 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}); return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),shape_p->slice(_2473,_2474),(long long)_2473,_2475); }void mosek::fusion::p_ModelVariable::destroy(){}void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_NilVariable::p_NilVariable  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (){ return new mosek::fusion::NilVariable(); }mosek::fusion::NilVariable::NilVariable  () :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }void mosek::fusion::p_NilVariable::_initialize  (){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::p_Set::make((int)0));}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc  ( long long _2477,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2478) { return mosek::fusion::p_NilVariable::_get_impl(this)->elementDesc(_2477,_2478); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::elementDesc( long long _2477,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2478){ return _2478; }void mosek::fusion::NilVariable::elementName  ( long long _2479,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2480) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_2479,_2480); }void mosek::fusion::p_NilVariable::elementName( long long _2479,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2480){ }void mosek::fusion::NilVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2481,    int _2482,    int _2483,    long long _2484,    long long _2485,    std::shared_ptr< monty::ndarray< int,1 > > _2486,    std::shared_ptr< monty::ndarray< int,1 > > _2487,    std::shared_ptr< monty::ndarray< int,1 > > _2488) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2481,_2482,_2483,_2484,_2485,_2486,_2487,_2488); }void mosek::fusion::p_NilVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2481,int _2482,int _2483,long long _2484,long long _2485,std::shared_ptr< monty::ndarray< int,1 > > _2486,std::shared_ptr< monty::ndarray< int,1 > > _2487,std::shared_ptr< monty::ndarray< int,1 > > _2488){ }void mosek::fusion::NilVariable::inst  ( long long _2489,    long long _2490,    std::shared_ptr< monty::ndarray< int,1 > > _2491,    std::shared_ptr< monty::ndarray< int,1 > > _2492,    std::shared_ptr< monty::ndarray< int,1 > > _2493) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_2489,_2490,_2491,_2492,_2493); }void mosek::fusion::p_NilVariable::inst( long long _2489,long long _2490,std::shared_ptr< monty::ndarray< int,1 > > _2491,std::shared_ptr< monty::ndarray< int,1 > > _2492,std::shared_ptr< monty::ndarray< int,1 > > _2493){ }void mosek::fusion::NilVariable::set_values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2494,    std::shared_ptr< monty::ndarray< double,1 > > _2495,    bool _2496) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_2494,_2495,_2496); }void mosek::fusion::p_NilVariable::set_values( std::shared_ptr< monty::ndarray< long long,1 > > _2494,std::shared_ptr< monty::ndarray< double,1 > > _2495,bool _2496){ }void mosek::fusion::NilVariable::set_values  ( long long _2497,    std::shared_ptr< monty::ndarray< int,1 > > _2498,    std::shared_ptr< monty::ndarray< long long,1 > > _2499,    int _2500,    std::shared_ptr< monty::ndarray< double,1 > > _2501,    bool _2502) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_2497,_2498,_2499,_2500,_2501,_2502); }void mosek::fusion::p_NilVariable::set_values( long long _2497,std::shared_ptr< monty::ndarray< int,1 > > _2498,std::shared_ptr< monty::ndarray< long long,1 > > _2499,int _2500,std::shared_ptr< monty::ndarray< double,1 > > _2501,bool _2502){ }void mosek::fusion::NilVariable::values  ( std::shared_ptr< monty::ndarray< long long,1 > > _2503,    int _2504,    std::shared_ptr< monty::ndarray< double,1 > > _2505,    bool _2506) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_2503,_2504,_2505,_2506); }void mosek::fusion::p_NilVariable::values( std::shared_ptr< monty::ndarray< long long,1 > > _2503,int _2504,std::shared_ptr< monty::ndarray< double,1 > > _2505,bool _2506){ }void mosek::fusion::NilVariable::values  ( long long _2507,    std::shared_ptr< monty::ndarray< int,1 > > _2508,    std::shared_ptr< monty::ndarray< long long,1 > > _2509,    int _2510,    std::shared_ptr< monty::ndarray< double,1 > > _2511,    bool _2512) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_2507,_2508,_2509,_2510,_2511,_2512); }void mosek::fusion::p_NilVariable::values( long long _2507,std::shared_ptr< monty::ndarray< int,1 > > _2508,std::shared_ptr< monty::ndarray< long long,1 > > _2509,int _2510,std::shared_ptr< monty::ndarray< double,1 > > _2511,bool _2512){ }void mosek::fusion::NilVariable::make_continuous  ( std::shared_ptr< monty::ndarray< long long,1 > > _2513) { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(_2513); }void mosek::fusion::p_NilVariable::make_continuous( std::shared_ptr< monty::ndarray< long long,1 > > _2513){ }void mosek::fusion::NilVariable::make_integer  ( std::shared_ptr< monty::ndarray< long long,1 > > _2514) { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(_2514); }void mosek::fusion::p_NilVariable::make_integer( std::shared_ptr< monty::ndarray< long long,1 > > _2514){ }void mosek::fusion::NilVariable::makeContinuous  ( ) { mosek::fusion::p_NilVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_NilVariable::makeContinuous( ){ _pubthis->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8169; for (long long _2515=(int)0, _8170=_pubthis->size(); _2515 < _8170;++_2515)_8169.push_back(_2515); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8169.size()),_8169.begin(),_8169.end())); })()); }void mosek::fusion::NilVariable::makeInteger  ( ) { mosek::fusion::p_NilVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_NilVariable::makeInteger( ){ _pubthis->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8171; for (long long _2516=(int)0, _8172=_pubthis->size(); _2516 < _8172;++_2516)_8171.push_back(_2516); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8171.size()),_8171.begin(),_8171.end())); })()); }std::string mosek::fusion::NilVariable::toString  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_NilVariable::toString( ){ return std::string ("NilVariable"); }long long mosek::fusion::NilVariable::size  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->size(); }long long mosek::fusion::p_NilVariable::size( ){ return (int)0; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::NilVariable::dual  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_NilVariable::dual( ){ return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::NilVariable::level  ( ) { return mosek::fusion::p_NilVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_NilVariable::level( ){ return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index  ( std::shared_ptr< monty::ndarray< int,1 > > _2517) { return mosek::fusion::p_NilVariable::_get_impl(this)->index(_2517); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::index( std::shared_ptr< monty::ndarray< int,1 > > _2517){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index  ( int _2518) { return mosek::fusion::p_NilVariable::_get_impl(this)->index(_2518); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::index( int _2518){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _2519,    std::shared_ptr< monty::ndarray< int,1 > > _2520) { return mosek::fusion::p_NilVariable::_get_impl(this)->slice(_2519,_2520); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _2519,std::shared_ptr< monty::ndarray< int,1 > > _2520){ int _8173 = (int)0; int _8174 = (int)((_2519)->size(0)); for (int _2521 = _8173;_2521<_8174;++_2521){ if ((((*_2520)(_2521)) > ((*_2519)(_2521)))){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}else {}}return _pubthis; }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice  ( int _2522,    int _2523) { return mosek::fusion::p_NilVariable::_get_impl(this)->slice(_2522,_2523); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::slice( int _2522,int _2523){ if ((_2523 > _2522)){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));}else { return _pubthis; }}void mosek::fusion::p_NilVariable::destroy(){}void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::NilVariable::asExpr()
{ return mosek::fusion::BaseVariable::asExpr(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2600)
{ return mosek::fusion::BaseVariable::pick(_2600); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2603)
{ return mosek::fusion::BaseVariable::pick(_2603); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::antidiag()
{ return mosek::fusion::BaseVariable::antidiag(); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NilVariable::shape()
{ return mosek::fusion::BaseVariable::shape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2593,std::shared_ptr< monty::ndarray< int,1 > > _2594,std::shared_ptr< monty::ndarray< int,1 > > _2595)
{ return mosek::fusion::BaseVariable::pick(_2593,_2594,_2595); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _2586,int _2587,int _2588)
{ return mosek::fusion::BaseVariable::index(_2586,_2587,_2588); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::diag()
{ return mosek::fusion::BaseVariable::diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _2589,int _2590)
{ return mosek::fusion::BaseVariable::index(_2589,_2590); }
monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NilVariable::getShape()
{ return mosek::fusion::BaseVariable::getShape(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::transpose()
{ return mosek::fusion::BaseVariable::transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2597,std::shared_ptr< monty::ndarray< int,1 > > _2598)
{ return mosek::fusion::BaseVariable::pick(_2597,_2598); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::NilVariable::getModel()
{ return mosek::fusion::BaseVariable::getModel(); }
void mosek::fusion::NilVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2577)
{ mosek::fusion::BaseVariable::setLevel(_2577); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::diag(int _2606)
{ return mosek::fusion::BaseVariable::diag(_2606); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::antidiag(int _2605)
{ return mosek::fusion::BaseVariable::antidiag(_2605); }
void mosek::fusion::NilVariable::values(int _2560,std::shared_ptr< monty::ndarray< double,1 > > _2561,bool _2562)
{ mosek::fusion::BaseVariable::values(_2560,_2561,_2562); }
mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseVariable::p_BaseVariable  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _2524,    monty::rc_ptr< ::mosek::fusion::Model > _2525){monty::rc_reserve __reserve_this(_pubthis); { { (model = _2525); (shape_p = mosek::fusion::p_BaseVariable::_get_impl(_2524)->shape_p); }}}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2526,    monty::rc_ptr< ::mosek::fusion::Set > _2527){monty::rc_reserve __reserve_this(_pubthis); { { (model = _2526); (shape_p = _2527); }}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::BaseVariable::elementDesc  ( long long _2528,    monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2529) { return mosek::fusion::p_BaseVariable::_get_impl(this)->elementDesc(_2528,_2529); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_BaseVariable::elementDesc( long long _2528,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2529){ _pubthis->elementName(_2528,_2529); return _2529; }std::string mosek::fusion::BaseVariable::toString  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseVariable::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2532 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2532.get())->a(std::string ("Variable( (")).get())->a(shape_p->dim((int)0)); int _8175 = (int)1; int _8176 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2533 = _8175;_2533<_8176;++_2533){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2532.get())->a(std::string (",")).get())->a(shape_p->dim(_2533)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2532.get())->a(std::string (" )")); if ((mosek::fusion::p_Set::_get_impl(shape_p)->size < (int)51)){ int _8177 = (int)0; long long _8178 = mosek::fusion::p_Set::_get_impl(shape_p)->size; for (long long _2534 = _8177;_2534<_8178;++_2534){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2532.get())->a(std::string (",\n  ")); _pubthis->elementDesc(_2534,_2532); }}else { int _8179 = (int)0; int _8180 = (int)25; for (int _2535 = _8179;_2535<_8180;++_2535){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2532.get())->a(std::string (",\n  ")); _pubthis->elementDesc((long long)(_2535),_2532); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2532.get())->a(std::string ("... (")).get())->a((mosek::fusion::p_Set::_get_impl(shape_p)->size - (int)50)).get())->a(std::string (" elements left out)")); long long _8181 = (mosek::fusion::p_Set::_get_impl(shape_p)->size - (int)25); long long _8182 = mosek::fusion::p_Set::_get_impl(shape_p)->size; for (long long _2536 = _8181;_2536<_8182;++_2536){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2532.get())->a(std::string (",\n  ")); _pubthis->elementDesc(_2536,_2532); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_2532.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2532.get())->toString(); }void mosek::fusion::BaseVariable::inst  ( std::shared_ptr< monty::ndarray< long long,1 > > _2537,    int _2538,    int _2539,    long long _2540,    long long _2541,    std::shared_ptr< monty::ndarray< int,1 > > _2542,    std::shared_ptr< monty::ndarray< int,1 > > _2543,    std::shared_ptr< monty::ndarray< int,1 > > _2544) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2537,_2538,_2539,_2540,_2541,_2542,_2543,_2544); }void mosek::fusion::p_BaseVariable::inst( std::shared_ptr< monty::ndarray< long long,1 > > _2537,int _2538,int _2539,long long _2540,long long _2541,std::shared_ptr< monty::ndarray< int,1 > > _2542,std::shared_ptr< monty::ndarray< int,1 > > _2543,std::shared_ptr< monty::ndarray< int,1 > > _2544){ int _8183 = _2538; int _8184 = _2539; for (int _2545 = _8183;_2545<_8184;++_2545){ _pubthis->inst((((*_2537)(_2545)) - _2540),((_2541 + _2545) - _2538),_2542,_2543,_2544); }}void mosek::fusion::BaseVariable::values  ( int _2560,    std::shared_ptr< monty::ndarray< double,1 > > _2561,    bool _2562) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_2560,_2561,_2562); }void mosek::fusion::p_BaseVariable::values( int _2560,std::shared_ptr< monty::ndarray< double,1 > > _2561,bool _2562){ std::shared_ptr< monty::ndarray< long long,1 > > _2563 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< int,1 > > _2564 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8185 = (int)0; int _8186 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2565 = _8185;_2565<_8186;++_2565){ (((*_2563)(_2565)) = shape_p->stride(_2565)); }int _8187 = (int)0; int _8188 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2566 = _8187;_2566<_8188;++_2566){ (((*_2564)(_2566)) = shape_p->dim(_2566)); }_pubthis->values((long long)0,_2564,_2563,_2560,_2561,_2562); }void mosek::fusion::BaseVariable::setLevel  ( std::shared_ptr< monty::ndarray< double,1 > > _2577) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_2577); }void mosek::fusion::p_BaseVariable::setLevel( std::shared_ptr< monty::ndarray< double,1 > > _2577){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->size > (int)((_2577)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));}else {}_pubthis->set_values((long long)0,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8189; for (int _2578=(int)0, _8190=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _2578 < _8190;++_2578)_8189.push_back(shape_p->dim(_2578)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8189.size()),_8189.begin(),_8189.end())); })(),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8191; for (int _2579=(int)0, _8192=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _2579 < _8192;++_2579)_8191.push_back(shape_p->stride(_2579)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8191.size()),_8191.begin(),_8191.end())); })(),(int)0,_2577,true); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::getModel( ){ return model; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::BaseVariable::shape  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->shape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_BaseVariable::shape( ){ return shape_p; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::BaseVariable::getShape  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_BaseVariable::getShape( ){ return shape_p; }long long mosek::fusion::BaseVariable::size  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->size(); }long long mosek::fusion::p_BaseVariable::size( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->size; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable::dual  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual( ){ std::shared_ptr< monty::ndarray< double,1 > > _2580 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); if ((mosek::fusion::p_Set::_get_impl(shape_p)->size > (int)0)){ _pubthis->values((int)0,_2580,false); }else {}return _2580; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable::level  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level( ){ std::shared_ptr< monty::ndarray< double,1 > > _2581 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); if ((mosek::fusion::p_Set::_get_impl(shape_p)->size > (int)0)){ _pubthis->values((int)0,_2581,true); }else {}return _2581; }void mosek::fusion::BaseVariable::makeContinuous  ( ) { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_BaseVariable::makeContinuous( ){ _pubthis->make_continuous(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8193; for (long long _2584=(long long)0, _8194=_pubthis->size(); _2584 < _8194;++_2584)_8193.push_back(_2584); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8193.size()),_8193.begin(),_8193.end())); })()); }void mosek::fusion::BaseVariable::makeInteger  ( ) { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_BaseVariable::makeInteger( ){ _pubthis->make_integer(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8195; for (long long _2585=(long long)0, _8196=_pubthis->size(); _2585 < _8196;++_2585)_8195.push_back(_2585); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8195.size()),_8195.begin(),_8195.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::transpose( ){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd > (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make(shape_p->dim((int)1),shape_p->dim((int)0)),(long long)((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{shape_p->stride((int)1),shape_p->stride((int)0)})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( int _2586,    int _2587,    int _2588) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2586,_2587,_2588); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( int _2586,int _2587,int _2588){ return _pubthis->index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_2586,_2587,_2588})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( int _2589,    int _2590) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2589,_2590); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( int _2589,int _2590){ return _pubthis->index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_2589,_2590})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( std::shared_ptr< monty::ndarray< int,1 > > _2591) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2591); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( std::shared_ptr< monty::ndarray< int,1 > > _2591){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2591)->size(0)))){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(_2591)})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index  ( int _2592) { return mosek::fusion::p_BaseVariable::_get_impl(this)->index(_2592); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::index( int _2592){ return _pubthis->pick(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_2592})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _2593,    std::shared_ptr< monty::ndarray< int,1 > > _2594,    std::shared_ptr< monty::ndarray< int,1 > > _2595) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2593,_2594,_2595); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,1 > > _2593,std::shared_ptr< monty::ndarray< int,1 > > _2594,std::shared_ptr< monty::ndarray< int,1 > > _2595){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)3)){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}if ((((int)((_2593)->size(0)) != (int)((_2594)->size(0))) || ((int)((_2593)->size(0)) != (int)((_2595)->size(0))))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8197; for (int _2596=(int)0, _8198=(int)((_2593)->size(0)); _2596 < _8198;++_2596)_8197.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_2593)(_2596)),((*_2594)(_2596)),((*_2595)(_2596))}))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8197.size()),_8197.begin(),_8197.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2597,_2598); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,1 > > _2597,std::shared_ptr< monty::ndarray< int,1 > > _2598){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)2)){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}if (((int)((_2597)->size(0)) != (int)((_2598)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8199; for (int _2599=(int)0, _8200=(int)((_2597)->size(0)); _2599 < _8200;++_2599)_8199.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_2597)(_2599)),((*_2598)(_2599))}))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8199.size()),_8199.begin(),_8199.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,2 > > _2600) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2600); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,2 > > _2600){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2600)->size(1)))){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8201; for (int _2601=(int)0, _8202=(int)((_2600)->size(0)); _2601 < _8202;++_2601)_8201.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8203; for (int _2602=(int)0, _8204=(int)((_2600)->size(1)); _2602 < _8204;++_2602)_8203.push_back(((*_2600)(_2601,_2602))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8203.size()),_8203.begin(),_8203.end())); })())); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8201.size()),_8201.begin(),_8201.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _2603) { return mosek::fusion::p_BaseVariable::_get_impl(this)->pick(_2603); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::pick( std::shared_ptr< monty::ndarray< int,1 > > _2603){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::IndexError(std::string ("Invalid index"));}else {}return ::mosek::fusion::p_PickVariable::_new_PickVariable(::mosek::fusion::Variable::t(_pubthis),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8205; for (int _2604=(int)0, _8206=(int)((_2603)->size(0)); _2604 < _8206;++_2604)_8205.push_back(((*_2603)(_2604))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8205.size()),_8205.begin(),_8205.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag  ( int _2605) { return mosek::fusion::p_BaseVariable::_get_impl(this)->antidiag(_2605); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::antidiag( int _2605){ if ((_2605 >= (int)0)){ return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,((shape_p->dim((int)1) - (int)1) - _2605)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(- (int)1)})); }else { return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(- _2605),(shape_p->dim((int)1) - (int)1)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(- (int)1)})); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::antidiag( ){ return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,(shape_p->dim((int)1) - (int)1)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(- (int)1)})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag  ( int _2606) { return mosek::fusion::p_BaseVariable::_get_impl(this)->diag(_2606); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::diag( int _2606){ if ((_2606 >= (int)0)){ return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,_2606}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(int)1})); }else { return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(- _2606),(int)0}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(int)1})); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::diag( ){ return general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)0,(int)0}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)1,(int)1})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::general_diag( std::shared_ptr< monty::ndarray< int,1 > > _2607,std::shared_ptr< monty::ndarray< int,1 > > _2608){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2607)->size(0))) || (mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_2608)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));}else {}int _8207 = (int)0; int _8208 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2609 = _8207;_2609<_8208;++_2609){ if (((((*_2607)(_2609)) < (int)0) || (((*_2607)(_2609)) >= shape_p->dim(_2609)))){ throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));}else {}}long long _2610 = (long long)0; int _8209 = (int)0; int _8210 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2611 = _8209;_2611<_8210;++_2611){ (_2610 += (shape_p->stride(_2611) * ((*_2607)(_2611)))); }std::shared_ptr< monty::ndarray< int,1 > > _2612 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8211; for (int _2613=(int)0, _8212=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _2613 < _8212;++_2613)_8211.push_back(([&]() -> int { if ( (((*_2608)(_2613)) > (int)0)) return (((((shape_p->dim(_2613) - ((*_2607)(_2613))) - (int)1) / ((*_2608)(_2613))) + (int)1)); else return (([&]() -> int { if ( (((*_2608)(_2613)) < (int)0)) return (((((*_2607)(_2613)) / (- ((*_2608)(_2613)))) + (int)1)); else return ((int)0); })()); })()); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8211.size()),_8211.begin(),_8211.end())); })(); int _2614 = ((*_2612)((int)0)); int _8213 = (int)1; int _8214 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2615 = _8213;_2615<_8214;++_2615){ (_2614 = ([&]() -> int { if ( (_2614 < ((*_2612)(_2615)))) return (_2614); else return (((*_2612)(_2615))); })()); }long long _2616 = (long long)0; int _8215 = (int)0; int _8216 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2617 = _8215;_2617<_8216;++_2617){ (_2616 += (((*_2608)(_2617)) * shape_p->stride(_2617))); }return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make(_2614),_2610,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{_2616})); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr  ( ) { return mosek::fusion::p_BaseVariable::_get_impl(this)->asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::asExpr( ){ return ::mosek::fusion::p_Expr::_new_Expr(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8217; for (long long _2618=(long long)0, _8218=(mosek::fusion::p_Set::_get_impl(shape_p)->size + (int)1); _2618 < _8218;++_2618)_8217.push_back(_2618); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8217.size()),_8217.begin(),_8217.end())); })(),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_pubthis}),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8219; for (long long _2619=(long long)0, _8220=mosek::fusion::p_Set::_get_impl(shape_p)->size; _2619 < _8220;++_2619)_8219.push_back(_2619); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8219.size()),_8219.begin(),_8219.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8221; for (long long _2620=(long long)0, _8222=mosek::fusion::p_Set::_get_impl(shape_p)->size; _2620 < _8222;++_2620)_8221.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8221.size()),_8221.begin(),_8221.end())); })(),nullptr,shape_p,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _2621,    std::shared_ptr< monty::ndarray< int,1 > > _2622) { return mosek::fusion::p_BaseVariable::_get_impl(this)->slice(_2621,_2622); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::slice( std::shared_ptr< monty::ndarray< int,1 > > _2621,std::shared_ptr< monty::ndarray< int,1 > > _2622){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8223; for (int _2623=(int)0, _8224=(int)((_2621)->size(0)); _2623 < _8224;++_2623)_8223.push_back((((*_2622)(_2623)) - ((*_2621)(_2623)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8223.size()),_8223.begin(),_8223.end())); })()),mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(_2621),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8225; for (int _2624=(int)0, _8226=(int)((_2621)->size(0)); _2624 < _8226;++_2624)_8225.push_back(shape_p->stride(_2624)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8225.size()),_8225.begin(),_8225.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice  ( int _2625,    int _2626) { return mosek::fusion::p_BaseVariable::_get_impl(this)->slice(_2625,_2626); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::slice( int _2625,int _2626){ return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(::mosek::fusion::Variable::t(_pubthis),::mosek::fusion::p_Set::make((_2626 - _2625)),(long long)(_2625),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)1})); }void mosek::fusion::p_BaseVariable::destroy(){model.reset();shape_p.reset();}void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }mosek::fusion::p_Var::p_Var  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress  ( monty::rc_ptr< ::mosek::fusion::Variable > _2689) { return mosek::fusion::p_Var::compress(_2689); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress( monty::rc_ptr< ::mosek::fusion::Variable > _2689){ int _2690 = _2689->getShape()->realnd(); if ((_2690 == mosek::fusion::p_Set::_get_impl(_2689->getShape())->nd)){ return _2689; }else if ((_2690 == (int)1)){ return ::mosek::fusion::p_Var::reshape(_2689,(int)mosek::fusion::p_Set::_get_impl(_2689->getShape())->size); }else { std::shared_ptr< monty::ndarray< int,1 > > _2691 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2690))); { int _2692 = (int)0; int _8227 = (int)0; int _8228 = mosek::fusion::p_Set::_get_impl(_2689->getShape())->nd; for (int _2693 = _8227;_2693<_8228;++_2693){ if ((_2689->getShape()->dim(_2693) > (int)1)){ (((*_2691)(_2692)) = _2689->getShape()->dim(_2693)); ( ++ _2692 ); }else {}}}return ::mosek::fusion::p_Var::reshape(_2689,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2691))); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2694,    int _2695) { return mosek::fusion::p_Var::reshape(_2694,_2695); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2694,int _2695){ if ((_2695 != mosek::fusion::p_Set::_get_impl(_2694->getShape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2694,::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet(_2695)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2696,    int _2697,    int _2698) { return mosek::fusion::p_Var::reshape(_2696,_2697,_2698); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2696,int _2697,int _2698){ if (((_2697 * _2698) != mosek::fusion::p_Set::_get_impl(_2696->getShape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2696,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2697,_2698)),(long long)0,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)_2698,(long long)1})); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten  ( monty::rc_ptr< ::mosek::fusion::Variable > _2699) { return mosek::fusion::p_Var::flatten(_2699); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten( monty::rc_ptr< ::mosek::fusion::Variable > _2699){ if ((mosek::fusion::p_Set::_get_impl(_2699->getShape())->nd == (int)1)){ return _2699; }else { return ::mosek::fusion::p_Var::reshape(_2699,::mosek::fusion::p_Set::make((int)mosek::fusion::p_Set::_get_impl(_2699->getShape())->size)); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2700,    std::shared_ptr< monty::ndarray< int,1 > > _2701) { return mosek::fusion::p_Var::reshape(_2700,_2701); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2700,std::shared_ptr< monty::ndarray< int,1 > > _2701){ monty::rc_ptr< ::mosek::fusion::Set > _2702 = ::mosek::fusion::p_Set::make(_2701); return ::mosek::fusion::p_Var::reshape(_2700,_2702); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2703,    monty::rc_ptr< ::mosek::fusion::Set > _2704) { return mosek::fusion::p_Var::reshape(_2703,_2704); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape( monty::rc_ptr< ::mosek::fusion::Variable > _2703,monty::rc_ptr< ::mosek::fusion::Set > _2704){ if ((mosek::fusion::p_Set::_get_impl(_2704)->size != mosek::fusion::p_Set::_get_impl(_2703->getShape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2703,_2704,(long long)((int)0),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8229; for (int _2705=(int)0, _8230=mosek::fusion::p_Set::_get_impl(_2704)->nd; _2705 < _8230;++_2705)_8229.push_back(_2704->stride(_2705)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8229.size()),_8229.begin(),_8229.end())); })()); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape_( monty::rc_ptr< ::mosek::fusion::Variable > _2706,monty::rc_ptr< ::mosek::fusion::Set > _2707){ std::shared_ptr< monty::ndarray< long long,1 > > _2708 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8231; for (int _2709=(int)0, _8232=mosek::fusion::p_Set::_get_impl(_2707)->nd; _2709 < _8232;++_2709)_8231.push_back(_2707->stride(_2709)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8231.size()),_8231.begin(),_8231.end())); })(); return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2706,_2707,(long long)0,_2708); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_flip_( monty::rc_ptr< ::mosek::fusion::Variable > _2710,std::shared_ptr< monty::ndarray< int,1 > > _2711){ std::shared_ptr< monty::ndarray< long long,1 > > _2712 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8233; for (int _2713=(int)0, _8234=mosek::fusion::p_Set::_get_impl(_2710->getShape())->nd; _2713 < _8234;++_2713)_8233.push_back(_2710->getShape()->stride(_2713)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8233.size()),_8233.begin(),_8233.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _2714 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8235; for (int _2715=(int)0, _8236=mosek::fusion::p_Set::_get_impl(_2710->getShape())->nd; _2715 < _8236;++_2715)_8235.push_back(_2710->getShape()->dim(_2715)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8235.size()),_8235.begin(),_8235.end())); })(); long long _2716 = (long long)0; int _8237 = (int)0; int _8238 = (int)((_2711)->size(0)); for (int _2717 = _8237;_2717<_8238;++_2717){ (_2716 = (_2716 + (((*_2712)(((*_2711)(_2717)))) * (((*_2714)(_2717)) - (int)1)))); (((*_2712)(((*_2714)(_2717)))) = (- ((*_2712)(((*_2714)(_2717)))))); }return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2710,_2710->getShape(),(long long)0,_2712); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_( monty::rc_ptr< ::mosek::fusion::Variable > _2718,std::shared_ptr< monty::ndarray< int,1 > > _2719){ std::shared_ptr< monty::ndarray< long long,1 > > _2720 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8239; for (int _2721=(int)0, _8240=mosek::fusion::p_Set::_get_impl(_2718->getShape())->nd; _2721 < _8240;++_2721)_8239.push_back(_2718->getShape()->stride(((*_2719)(_2721)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8239.size()),_8239.begin(),_8239.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _2722 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8241; for (int _2723=(int)0, _8242=mosek::fusion::p_Set::_get_impl(_2718->getShape())->nd; _2723 < _8242;++_2723)_8241.push_back(_2718->getShape()->dim(((*_2719)(_2723)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8241.size()),_8241.begin(),_8241.end())); })(); return ::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2718,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2722)),(long long)0,_2720); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2724,    int _2725) { return mosek::fusion::p_Var::hrepeat(_2724,_2725); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat( monty::rc_ptr< ::mosek::fusion::Variable > _2724,int _2725){ return ::mosek::fusion::p_Var::drepeat(_2724,(int)1,_2725); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2726,    int _2727) { return mosek::fusion::p_Var::vrepeat(_2726,_2727); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat( monty::rc_ptr< ::mosek::fusion::Variable > _2726,int _2727){ return ::mosek::fusion::p_Var::drepeat(_2726,(int)0,_2727); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2728,    int _2729) { return mosek::fusion::p_Var::repeat(_2728,_2729); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat( monty::rc_ptr< ::mosek::fusion::Variable > _2728,int _2729){ return ::mosek::fusion::p_Var::drepeat(_2728,(int)0,_2729); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2730,    int _2731,    int _2732) { return mosek::fusion::p_Var::repeat(_2730,_2731,_2732); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat( monty::rc_ptr< ::mosek::fusion::Variable > _2730,int _2731,int _2732){ return ::mosek::fusion::p_Var::drepeat(_2730,_2731,_2732); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat( monty::rc_ptr< ::mosek::fusion::Variable > _2733,int _2734,int _2735){ if ((_2735 < (int)0)){ throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));}else if ((_2735 == (int)0)){ return ::mosek::fusion::p_NilVariable::_new_NilVariable(); }else if ((_2735 == (int)1)){ return _2733; }else if ((_2734 < (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _2736 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(_2733->getShape())->nd + (int)1)))); (((*_2736)((int)0)) = _2735); int _8243 = (int)0; int _8244 = mosek::fusion::p_Set::_get_impl(_2733->getShape())->nd; for (int _2737 = _8243;_2737<_8244;++_2737){ (((*_2736)((_2737 + (int)1))) = _2733->getShape()->dim(_2737)); }return ::mosek::fusion::p_Var::reshape(::mosek::fusion::p_Var::dstack(([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Variable > > _8245; for (int _2738=(int)0, _8246=_2735; _2738 < _8246;++_2738)_8245.push_back(_2733); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_8245.size()),_8245.begin(),_8245.end())); })(),(int)0),::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2736))); }else { return ::mosek::fusion::p_Var::dstack(([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Variable > > _8247; for (int _2739=(int)0, _8248=_2735; _2739 < _8248;++_2739)_8247.push_back(_2733); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_8247.size()),_8247.begin(),_8247.end())); })(),_2734); }}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2740) { return mosek::fusion::p_Var::stack(_2740); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2740){ { monty::rc_ptr< ::mosek::fusion::Model > _2741 = nullptr; int _8249 = (int)0; int _8250 = (int)((_2740)->size(0)); for (int _2742 = _8249;_2742<_8250;++_2742){ int _8251 = (int)0; int _8252 = (int)((((*_2740)(_2742)))->size(0)); for (int _2743 = _8251;_2743<_8252;++_2743){ if (! _2741){ (_2741 = ((*((*_2740)(_2742)))(_2743))->getModel()); }else if ((((*((*_2740)(_2742)))(_2743))->getModel() && (((*((*_2740)(_2742)))(_2743))->getModel() != _2741))){ throw ::mosek::fusion::ModelError(std::string ("Variables belong to different models"));}else {}}}}int _2744 = (int)0; int _8253 = (int)0; int _8254 = (int)((_2740)->size(0)); for (int _2745 = _8253;_2745<_8254;++_2745){ if (((int)((((*_2740)(_2745)))->size(0)) > (int)0)){ ( ++ _2744 ); }else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2746 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_2744))); if ((_2744 == (int)0)){ return ::mosek::fusion::p_NilVariable::_new_NilVariable(); }else {}int _2747 = (int)0; int _8255 = (int)0; int _8256 = (int)((_2740)->size(0)); for (int _2748 = _8255;_2748<_8256;++_2748){ if (((int)((((*_2740)(_2748)))->size(0)) == (int)0)){ }else if (((int)((((*_2740)(_2748)))->size(0)) == (int)1)){ monty::rc_ptr< ::mosek::fusion::Variable > _2749 = ((*((*_2740)(_2748)))((int)0)); (((*_2746)(_2747)) = ([&]() -> monty::rc_ptr< ::mosek::fusion::Variable > { if ( (mosek::fusion::p_Set::_get_impl(_2749->getShape())->nd == (int)1)) return (::mosek::fusion::p_Var::reshape(_2749,_2749->getShape()->dim((int)0),(int)1)); else return (_2749); })()); ( ++ _2747 ); }else { int _2750 = (int)0; int _8257 = (int)0; int _8258 = (int)((((*_2740)(_2748)))->size(0)); for (int _2751 = _8257;_2751<_8258;++_2751){ if ((mosek::fusion::p_Set::_get_impl(((*((*_2740)(_2748)))(_2751))->getShape())->size > (int)0)){ ( ++ _2750 ); }else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2752 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_2750))); int _2753 = (int)0; int _8259 = (int)0; int _8260 = (int)((((*_2740)(_2748)))->size(0)); for (int _2754 = _8259;_2754<_8260;++_2754){ monty::rc_ptr< ::mosek::fusion::Variable > _2755 = ((*((*_2740)(_2748)))(_2754)); if ((mosek::fusion::p_Set::_get_impl(_2755->getShape())->size > (int)0)){ if ((mosek::fusion::p_Set::_get_impl(_2755->getShape())->nd == (int)1)){ (((*_2752)(_2753)) = ::mosek::fusion::p_Var::reshape(_2755,_2755->getShape()->dim((int)0),(int)1)); }else { (((*_2752)(_2753)) = _2755); }( ++ _2753 ); }else {}}(((*_2746)(_2747)) = ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_2752,(int)1)); ( ++ _2747 ); }}return ([&]() -> monty::rc_ptr< ::mosek::fusion::Variable > { if ( ((int)((_2746)->size(0)) == (int)1)) return (((*_2746)((int)0))); else return (::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_2746,(int)0)); })(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2756,    monty::rc_ptr< ::mosek::fusion::Variable > _2757,    monty::rc_ptr< ::mosek::fusion::Variable > _2758) { return mosek::fusion::p_Var::vstack(_2756,_2757,_2758); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _2756,monty::rc_ptr< ::mosek::fusion::Variable > _2757,monty::rc_ptr< ::mosek::fusion::Variable > _2758){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2756,_2757,_2758}),(int)0); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2759,    monty::rc_ptr< ::mosek::fusion::Variable > _2760) { return mosek::fusion::p_Var::vstack(_2759,_2760); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _2759,monty::rc_ptr< ::mosek::fusion::Variable > _2760){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2759,_2760}),(int)0); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2761) { return mosek::fusion::p_Var::vstack(_2761); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2761){ return ::mosek::fusion::p_Var::dstack(_2761,(int)0); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2762,    monty::rc_ptr< ::mosek::fusion::Variable > _2763,    monty::rc_ptr< ::mosek::fusion::Variable > _2764) { return mosek::fusion::p_Var::hstack(_2762,_2763,_2764); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _2762,monty::rc_ptr< ::mosek::fusion::Variable > _2763,monty::rc_ptr< ::mosek::fusion::Variable > _2764){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2762,_2763,_2764}),(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2765,    monty::rc_ptr< ::mosek::fusion::Variable > _2766) { return mosek::fusion::p_Var::hstack(_2765,_2766); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _2765,monty::rc_ptr< ::mosek::fusion::Variable > _2766){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2765,_2766}),(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2767) { return mosek::fusion::p_Var::hstack(_2767); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2767){ return ::mosek::fusion::p_Var::dstack(_2767,(int)1); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2768,    monty::rc_ptr< ::mosek::fusion::Variable > _2769,    monty::rc_ptr< ::mosek::fusion::Variable > _2770,    int _2771) { return mosek::fusion::p_Var::stack(_2768,_2769,_2770,_2771); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( monty::rc_ptr< ::mosek::fusion::Variable > _2768,monty::rc_ptr< ::mosek::fusion::Variable > _2769,monty::rc_ptr< ::mosek::fusion::Variable > _2770,int _2771){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2768,_2769,_2770}),_2771); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2772,    monty::rc_ptr< ::mosek::fusion::Variable > _2773,    int _2774) { return mosek::fusion::p_Var::stack(_2772,_2773,_2774); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( monty::rc_ptr< ::mosek::fusion::Variable > _2772,monty::rc_ptr< ::mosek::fusion::Variable > _2773,int _2774){ return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_2772,_2773}),_2774); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2775,    int _2776) { return mosek::fusion::p_Var::stack(_2775,_2776); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2775,int _2776){ return ::mosek::fusion::p_Var::dstack(_2775,_2776); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2777,int _2778){ { monty::rc_ptr< ::mosek::fusion::Model > _2779 = nullptr; int _8261 = (int)0; int _8262 = (int)((_2777)->size(0)); for (int _2780 = _8261;_2780<_8262;++_2780){ if (! _2779){ (_2779 = ((*_2777)(_2780))->getModel()); }else if ((((*_2777)(_2780))->getModel() && (((*_2777)(_2780))->getModel() != _2779))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2781 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); std::string _2782 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(_2779.get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(_2779.get())->getName()); else return (std::string ("?")); })(); std::string _2783 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(((*_2777)(_2780))->getModel().get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(((*_2777)(_2780))->getModel().get())->getName()); else return (std::string ("?")); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2781.get())->a(std::string ("Variables belong to different models: '")).get())->a(_2782).get())->a(std::string ("' and '")).get())->a(_2783).get())->a(std::string ("'")); throw ::mosek::fusion::ModelError(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2781.get())->toString());}else {}}}if (((int)((_2777)->size(0)) == (int)0)){ return ::mosek::fusion::p_NilVariable::_new_NilVariable(); }else if (((int)((_2777)->size(0)) == (int)1)){ return ((*_2777)((int)1)); }else { int _2784 = (int)((_2777)->size(0)); int _2785 = (_2778 + (int)1); int _8263 = (int)0; int _8264 = _2784; for (int _2786 = _8263;_2786<_8264;++_2786){ if ((mosek::fusion::p_Set::_get_impl(((*_2777)(_2786))->getShape())->nd > _2785)){ (_2785 = mosek::fusion::p_Set::_get_impl(((*_2777)(_2786))->getShape())->nd); }else {}}std::shared_ptr< monty::ndarray< int,1 > > _2787 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8265; for (int _2788=(int)0, _8266=_2785; _2788 < _8266;++_2788)_8265.push_back(((*_2777)((int)0))->getShape()->dim(_2788)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8265.size()),_8265.begin(),_8265.end())); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2789 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_2784))); (((*_2789)((int)0)) = ::mosek::fusion::p_Var::reshape(((*_2777)((int)0)),::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2787)))); int _8267 = (int)1; int _8268 = _2784; for (int _2790 = _8267;_2790<_8268;++_2790){ int _8269 = (int)0; int _8270 = _2785; for (int _2791 = _8269;_2791<_8270;++_2791){ if (((_2791 != _2778) && (((*_2777)(_2790))->getShape()->dim(_2791) != ((*_2787)(_2791))))){ throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));}else {}}(((*_2787)(_2778)) = ((*_2777)(_2790))->getShape()->dim(_2778)); (((*_2789)(_2790)) = ::mosek::fusion::p_Var::reshape(((*_2777)(_2790)),::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_2787)))); }return ::mosek::fusion::p_CompoundVariable::_new_CompoundVariable(_2789,_2778); }}void mosek::fusion::p_Var::destroy(){}void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2792,    monty::rc_ptr< ::mosek::fusion::Model > _2793){ return new mosek::fusion::LinearPSDConstraint(_2792,_2793); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2792,    monty::rc_ptr< ::mosek::fusion::Model > _2793) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2792,_2793); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2792,    monty::rc_ptr< ::mosek::fusion::Model > _2793){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_2792,_2793);(coneidx = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2792)->coneidx); (conesize = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2792)->conesize); (psdvardim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2792)->psdvardim); (numcones = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2792)->numcones); (names_flushed = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2792)->names_flushed); }}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2794,    const std::string &  _2795,    monty::rc_ptr< ::mosek::fusion::Set > _2796,    std::shared_ptr< monty::ndarray< int,1 > > _2797,    int _2798,    int _2799,    int _2800,    std::shared_ptr< monty::ndarray< long long,1 > > _2801,    std::shared_ptr< monty::ndarray< int,1 > > _2802,    std::shared_ptr< monty::ndarray< double,1 > > _2803,    std::shared_ptr< monty::ndarray< double,1 > > _2804,    std::shared_ptr< monty::ndarray< int,1 > > _2805,    std::shared_ptr< monty::ndarray< int,1 > > _2806,    std::shared_ptr< monty::ndarray< int,1 > > _2807){ return new mosek::fusion::LinearPSDConstraint(_2794,_2795,_2796,_2797,_2798,_2799,_2800,_2801,_2802,_2803,_2804,_2805,_2806,_2807); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2794,    const std::string &  _2795,    monty::rc_ptr< ::mosek::fusion::Set > _2796,    std::shared_ptr< monty::ndarray< int,1 > > _2797,    int _2798,    int _2799,    int _2800,    std::shared_ptr< monty::ndarray< long long,1 > > _2801,    std::shared_ptr< monty::ndarray< int,1 > > _2802,    std::shared_ptr< monty::ndarray< double,1 > > _2803,    std::shared_ptr< monty::ndarray< double,1 > > _2804,    std::shared_ptr< monty::ndarray< int,1 > > _2805,    std::shared_ptr< monty::ndarray< int,1 > > _2806,    std::shared_ptr< monty::ndarray< int,1 > > _2807) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2794,_2795,_2796,_2797,_2798,_2799,_2800,_2801,_2802,_2803,_2804,_2805,_2806,_2807); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2794,    const std::string &  _2795,    monty::rc_ptr< ::mosek::fusion::Set > _2796,    std::shared_ptr< monty::ndarray< int,1 > > _2797,    int _2798,    int _2799,    int _2800,    std::shared_ptr< monty::ndarray< long long,1 > > _2801,    std::shared_ptr< monty::ndarray< int,1 > > _2802,    std::shared_ptr< monty::ndarray< double,1 > > _2803,    std::shared_ptr< monty::ndarray< double,1 > > _2804,    std::shared_ptr< monty::ndarray< int,1 > > _2805,    std::shared_ptr< monty::ndarray< int,1 > > _2806,    std::shared_ptr< monty::ndarray< int,1 > > _2807){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_2794,_2795,_2796,_2797,_2801,_2802,_2803,_2804,_2805,_2806,_2807);(coneidx = _2799); (conesize = _2798); (numcones = _2800); int _2808 = shape_p->dim((int)0); int _2809 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(((int)1 + ((int)8 * _2808)))) - (int)1) / (int)2); if ((((_2809 * (_2809 + (int)1)) / (int)2) != _2808)){ throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite constraint"));}else {}(psdvardim = _2809); (names_flushed = false); }}void mosek::fusion::p_LinearPSDConstraint::domainToString( long long _2810,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2811){ std::shared_ptr< monty::ndarray< int,1 > > _2812 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_2810); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2811.get())->a(std::string (" : element (")).get())->a(((*_2812)((int)0))); int _8271 = (int)1; int _8272 = (int)((_2812)->size(0)); for (int _2813 = _8271;_2813<_8272;++_2813){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2811.get())->a(std::string (",")).get())->a(((*_2812)(_2813))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2811.get())->a(std::string (") in a positive semi-definite cone of size (")).get())->a(shape_p->dim((int)0)); int _8273 = (int)1; int _8274 = (int)((_2812)->size(0)); for (int _2814 = _8273;_2814<_8274;++_2814){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2811.get())->a(std::string (",")).get())->a(shape_p->dim(_2814)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2811.get())->a(std::string (")")); }std::string mosek::fusion::LinearPSDConstraint::toString  ( ) { return mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDConstraint::toString( ){ long long _2815 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _2816 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_2815))); toStringArray(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8275; for (long long _2817=(int)0, _8276=_2815; _2817 < _8276;++_2817)_8275.push_back(_2817); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8275.size()),_8275.begin(),_8275.end())); })(),(long long)0,_2816,false); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2818 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2818.get())->a(std::string ("LinearPSDConstraint( (")).get())->a(shape_p->dim((int)0)); int _8277 = (int)1; int _8278 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2819 = _8277;_2819<_8278;++_2819){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2818.get())->a(std::string (",")).get())->a(shape_p->dim(_2819)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2818.get())->a(std::string ("),")).get())->lf(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2818.get())->a(std::string ("  ")).get())->a(((*_2816)((int)0))); int _8279 = (int)1; int _8280 = (int)((_2816)->size(0)); for (int _2820 = _8279;_2820<_8280;++_2820){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2818.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_2816)(_2820))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2818.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2818.get())->toString(); }void mosek::fusion::p_LinearPSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _2821,long long _2822,std::shared_ptr< monty::ndarray< std::string,1 > > _2823){ toStringArray(_2821,_2822,_2823,true); }void mosek::fusion::p_LinearPSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _2824,long long _2825,std::shared_ptr< monty::ndarray< std::string,1 > > _2826,bool _2827){ int _8281 = (int)0; int _8282 = (int)((_2824)->size(0)); for (int _2828 = _8281;_2828<_8282;++_2828){ if (((((*_2824)(_2828)) < (int)0) || (((*_2824)(_2828)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Constraint index out of bounds"));}else {}}if ((((long long)((_2824)->size(0)) + _2825) > (long long)((_2826)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Result array is too small to hold the result"));}else {}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2829 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); long long _2830 = mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->order_barentries(); int _2831 = (int)0; int _8283 = (int)0; int _8284 = (int)((_2824)->size(0)); for (int _2832 = _8283;_2832<_8284;++_2832){ long long _2833 = ((*_2824)(_2832)); long long _2834 = (_2833 / conesize); long long _2835 = (_2833 % conesize); long long _2836 = (_2833 + coneidx); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2829.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2834).get())->a(std::string (",")).get())->a(_2835).get())->a(std::string ("] : ")); int _2837 = ((*nativeindexes)(_2833)); int _2838 = (int)0; while (((_2838 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_2838)) < _2836))) { ( ++ _2838 ); }int _2839 = _2838; while (((_2838 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_2838)) == _2836))) { ( ++ _2838 ); }int _2840 = (int)0; while (((_2840 < _2830) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2840)) < _2836))) { ( ++ _2840 ); }int _2841 = _2840; while (((_2840 < _2830) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2840)) == _2836))) { ( ++ _2840 ); }int _8285 = _2839; int _8286 = _2838; for (int _2842 = _8285;_2842<_8286;++_2842){ double _2843 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->cof)(_2842)); if ((_2843 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2829.get())->a(std::string (" + ")).get())->a(_2843).get())->a(std::string (" ")); }else if ((_2843 < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2829.get())->a(std::string (" - ")).get())->a((- _2843)).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_2829.get())->a(std::string (" + 0.0 ")); }mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_2842)),_2829); }int _2844 = _2840; (_2840 = _2841); while (((_2840 < _2844) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2840)) == _2836))) { int _2845 = _2840; int _2846 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2840)); ( ++ _2840 ); while (((_2840 < _2844) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2840)) == _2846))) { ( ++ _2840 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2829.get())->a(std::string (" + < M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_2845))); int _8287 = (_2845 + (int)1); int _8288 = _2840; for (int _2847 = _8287;_2847<_8288;++_2847){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2829.get())->a(std::string (" + M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_2847))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2829.get())->a(std::string (" ; ")).get())->a(([&]() -> std::string { if ( ((int)((mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2845)))))))->name).size()) > (int)0)) return (mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2845)))))))->name); else return (std::string ("_")); })()).get())->a(std::string (" >")); }if (cache_bfix){ if ((((*cache_bfix)(_2836)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2829.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_2836))); }else if ((((*cache_bfix)(_2836)) < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2829.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_2836))); }else {}}else {}if (_2827){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2829.get())->a(std::string (" ")); domainToString(_2833,_2829); }else {}(((*_2826)(((long long)_2832 + _2825))) = mosek::fusion::Utils::p_StringBuffer::_get_impl(_2829.get())->toString()); }}void mosek::fusion::p_LinearPSDConstraint::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2848 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); if ((numcones > (int)1)){ int _2849 = (int)0; int _8289 = (int)0; int _8290 = numcones; for (int _2850 = _8289;_2850<_8290;++_2850){ int _8291 = (int)0; int _8292 = conesize; for (int _2851 = _8291;_2851<_8292;++_2851){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_2849)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2848.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2850).get())->a(std::string (",")).get())->a(_2851).get())->a(std::string ("]")).get())->toString()); ( ++ _2849 ); }}}else { int _2852 = (int)0; int _8293 = (int)0; int _8294 = conesize; for (int _2853 = _8293;_2853<_8294;++_2853){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_2852)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2848.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2853).get())->a(std::string ("]")).get())->toString()); ( ++ _2852 ); }}int _8295 = (int)0; int _8296 = numcones; for (int _2854 = _8295;_2854<_8296;++_2854){ mosek::fusion::p_Model::_get_impl(model.get())->task_barvar_name((coneidx + _2854),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2848.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2854).get())->a(std::string ("].coneslack")).get())->toString()); }(names_flushed = true); }else {}}void mosek::fusion::p_LinearPSDConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _2855,std::shared_ptr< monty::ndarray< double,1 > > _2856,long long _2857,int _2858,int _2859){ std::shared_ptr< monty::ndarray< double,1 > > _2860 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2859))); std::shared_ptr< monty::ndarray< int,1 > > _2861 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2859))); int _8297 = (int)0; int _8298 = _2859; for (int _2862 = _8297;_2862<_8298;++_2862){ (((*_2861)(_2862)) = ((*nativeindexes)((((*_2855)((_2858 + _2862))) - _2857)))); }int _8299 = (int)0; int _8300 = (int)((_2860)->size(0)); for (int _2863 = _8299;_2863<_8300;++_2863){ (((*_2860)(_2863)) = (- ((*_2856)((((*_2855)((_2858 + _2863))) - _2857))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_2861,_2860); }void mosek::fusion::p_LinearPSDConstraint::dual_values( long long _2864,std::shared_ptr< monty::ndarray< int,1 > > _2865,std::shared_ptr< monty::ndarray< long long,1 > > _2866,int _2867,std::shared_ptr< monty::ndarray< double,1 > > _2868){ monty::rc_ptr< ::mosek::fusion::IndexCounter > _2869 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2864,_2865,_2866); int _2870 = (int)1; int _8301 = (int)0; int _8302 = (int)((_2865)->size(0)); for (int _2871 = _8301;_2871<_8302;++_2871){ (_2870 *= ((*_2865)(_2871))); }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2872 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _2873 = conesize; int _8303 = (int)0; int _8304 = _2870; for (int _2874 = _8303;_2874<_8304;++_2874){ long long _2875 = ((_2869->get() / _2873) + coneidx); long long _2876 = (_2869->get() % _2873); (((*_2868)(_2874)) = ((*((*_2872)(coneidx)))(_2876))); _2869->inc(); }}void mosek::fusion::p_LinearPSDConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _2877,int _2878,std::shared_ptr< monty::ndarray< double,1 > > _2879){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2880 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _2881 = conesize; int _8305 = (int)0; int _8306 = (int)((_2877)->size(0)); for (int _2882 = _8305;_2882<_8306;++_2882){ long long _2883 = ((((*_2877)(_2882)) / _2881) + coneidx); long long _2884 = (((*_2877)(_2882)) % _2881); (((*_2879)(_2882)) = ((*((*_2880)(_2883)))(_2884))); }}void mosek::fusion::p_LinearPSDConstraint::level_values( long long _2885,std::shared_ptr< monty::ndarray< int,1 > > _2886,std::shared_ptr< monty::ndarray< long long,1 > > _2887,int _2888,std::shared_ptr< monty::ndarray< double,1 > > _2889){ monty::rc_ptr< ::mosek::fusion::IndexCounter > _2890 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_2885,_2886,_2887); int _2891 = (int)1; int _8307 = (int)0; int _8308 = (int)((_2886)->size(0)); for (int _2892 = _8307;_2892<_8308;++_2892){ (_2891 *= ((*_2886)(_2892))); }std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2893 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _2894 = conesize; int _8309 = (int)0; int _8310 = _2891; for (int _2895 = _8309;_2895<_8310;++_2895){ long long _2896 = ((_2890->get() / _2894) + coneidx); long long _2897 = (_2890->get() % _2894); (((*_2889)(_2895)) = ((*((*_2893)(coneidx)))(_2897))); _2890->inc(); }}void mosek::fusion::p_LinearPSDConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _2898,int _2899,std::shared_ptr< monty::ndarray< double,1 > > _2900){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2901 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _2902 = psdvardim; int _8311 = (int)0; int _8312 = (int)((_2898)->size(0)); for (int _2903 = _8311;_2903<_8312;++_2903){ long long _2904 = ((((*_2898)(_2903)) / _2902) + coneidx); long long _2905 = (((*_2898)(_2903)) % _2902); (((*_2900)(_2903)) = ((*((*_2901)(_2904)))(_2905))); }}monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _2906){ return ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(_pubthis,_2906); }void mosek::fusion::p_LinearPSDConstraint::destroy(){}void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDConstraint::p_PSDConstraint  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2907,    monty::rc_ptr< ::mosek::fusion::Model > _2908){ return new mosek::fusion::PSDConstraint(_2907,_2908); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2907,    monty::rc_ptr< ::mosek::fusion::Model > _2908) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2907,_2908); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2907,    monty::rc_ptr< ::mosek::fusion::Model > _2908){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_2907,_2908);(coneidx = mosek::fusion::p_PSDConstraint::_get_impl(_2907)->coneidx); (conesize = mosek::fusion::p_PSDConstraint::_get_impl(_2907)->conesize); (numcones = mosek::fusion::p_PSDConstraint::_get_impl(_2907)->numcones); (names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_2907)->names_flushed); }}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2909,    const std::string &  _2910,    monty::rc_ptr< ::mosek::fusion::Set > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    int _2913,    int _2914,    int _2915,    std::shared_ptr< monty::ndarray< long long,1 > > _2916,    std::shared_ptr< monty::ndarray< int,1 > > _2917,    std::shared_ptr< monty::ndarray< double,1 > > _2918,    std::shared_ptr< monty::ndarray< double,1 > > _2919,    std::shared_ptr< monty::ndarray< int,1 > > _2920,    std::shared_ptr< monty::ndarray< int,1 > > _2921,    std::shared_ptr< monty::ndarray< int,1 > > _2922){ return new mosek::fusion::PSDConstraint(_2909,_2910,_2911,_2912,_2913,_2914,_2915,_2916,_2917,_2918,_2919,_2920,_2921,_2922); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2909,    const std::string &  _2910,    monty::rc_ptr< ::mosek::fusion::Set > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    int _2913,    int _2914,    int _2915,    std::shared_ptr< monty::ndarray< long long,1 > > _2916,    std::shared_ptr< monty::ndarray< int,1 > > _2917,    std::shared_ptr< monty::ndarray< double,1 > > _2918,    std::shared_ptr< monty::ndarray< double,1 > > _2919,    std::shared_ptr< monty::ndarray< int,1 > > _2920,    std::shared_ptr< monty::ndarray< int,1 > > _2921,    std::shared_ptr< monty::ndarray< int,1 > > _2922) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2909,_2910,_2911,_2912,_2913,_2914,_2915,_2916,_2917,_2918,_2919,_2920,_2921,_2922); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2909,    const std::string &  _2910,    monty::rc_ptr< ::mosek::fusion::Set > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    int _2913,    int _2914,    int _2915,    std::shared_ptr< monty::ndarray< long long,1 > > _2916,    std::shared_ptr< monty::ndarray< int,1 > > _2917,    std::shared_ptr< monty::ndarray< double,1 > > _2918,    std::shared_ptr< monty::ndarray< double,1 > > _2919,    std::shared_ptr< monty::ndarray< int,1 > > _2920,    std::shared_ptr< monty::ndarray< int,1 > > _2921,    std::shared_ptr< monty::ndarray< int,1 > > _2922){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_2909,_2910,_2911,_2912,_2916,_2917,_2918,_2919,_2920,_2921,_2922);(coneidx = _2914); (conesize = _2913); (numcones = _2915); (names_flushed = false); }}void mosek::fusion::p_PSDConstraint::domainToString( long long _2923,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2924){ std::shared_ptr< monty::ndarray< int,1 > > _2925 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(_2923); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2924.get())->a(std::string (" : element (")).get())->a(((*_2925)((int)0))); int _8313 = (int)1; int _8314 = (int)((_2925)->size(0)); for (int _2926 = _8313;_2926<_8314;++_2926){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2924.get())->a(std::string (",")).get())->a(((*_2925)(_2926))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2924.get())->a(std::string (") in a positive semi-definite cone of size (")).get())->a(shape_p->dim((int)0)); int _8315 = (int)1; int _8316 = (int)((_2925)->size(0)); for (int _2927 = _8315;_2927<_8316;++_2927){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2924.get())->a(std::string (",")).get())->a(shape_p->dim(_2927)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2924.get())->a(std::string (")")); }std::string mosek::fusion::PSDConstraint::toString  ( ) { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDConstraint::toString( ){ long long _2928 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _2929 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_2928))); toStringArray(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8317; for (long long _2930=(int)0, _8318=_2928; _2930 < _8318;++_2930)_8317.push_back(_2930); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8317.size()),_8317.begin(),_8317.end())); })(),(long long)0,_2929,false); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2931 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2931.get())->a(std::string ("PSDConstraint( (")).get())->a(shape_p->dim((int)0)); int _8319 = (int)1; int _8320 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _2932 = _8319;_2932<_8320;++_2932){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2931.get())->a(std::string (",")).get())->a(shape_p->dim(_2932)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2931.get())->a(std::string ("),")).get())->lf(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2931.get())->a(std::string ("  ")).get())->a(((*_2929)((int)0))); int _8321 = (int)1; int _8322 = (int)((_2929)->size(0)); for (int _2933 = _8321;_2933<_8322;++_2933){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2931.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_2929)(_2933))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_2931.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_2931.get())->toString(); }void mosek::fusion::p_PSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _2934,long long _2935,std::shared_ptr< monty::ndarray< std::string,1 > > _2936){ toStringArray(_2934,_2935,_2936,true); }void mosek::fusion::p_PSDConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _2937,long long _2938,std::shared_ptr< monty::ndarray< std::string,1 > > _2939,bool _2940){ int _8323 = (int)0; int _8324 = (int)((_2937)->size(0)); for (int _2941 = _8323;_2941<_8324;++_2941){ if (((((*_2937)(_2941)) < (int)0) || (((*_2937)(_2941)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Constraint index out of bounds"));}else {}}if ((((long long)((_2937)->size(0)) + _2938) > (long long)((_2939)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Result array is too small to hold the result"));}else {}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2942 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); long long _2943 = mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->order_barentries(); int _2944 = (int)0; int _8325 = (int)0; int _8326 = (int)((_2937)->size(0)); for (int _2945 = _8325;_2945<_8326;++_2945){ long long _2946 = ((*_2937)(_2945)); long long _2947 = (_2946 / (conesize * conesize)); long long _2948 = (_2946 % (conesize * conesize)); long long _2949 = (_2948 / conesize); long long _2950 = (_2948 % conesize); long long _2951 = ([&]() -> long long { if ( (_2949 >= _2950)) return ((((_2949 * (_2949 + (int)1)) / (int)2) + _2950)); else return ((((_2950 * (_2950 + (int)1)) / (int)2) + _2949)); })(); long long _2952 = (_2951 + (((_2947 * conesize) * (conesize + (int)1)) / (int)2)); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2942.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2947).get())->a(std::string (",")).get())->a(_2949).get())->a(std::string (",")).get())->a(_2950).get())->a(std::string ("] : ")); int _2953 = ((*nativeindexes)(_2952)); int _2954 = (int)0; while (((_2954 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_2954)) < _2952))) { ( ++ _2954 ); }int _2955 = _2954; while (((_2954 < (int)((mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)->size(0))) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_2954)) == _2952))) { ( ++ _2954 ); }int _2956 = (int)0; while (((_2956 < _2943) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2956)) < _2952))) { ( ++ _2956 ); }int _2957 = _2956; while (((_2956 < _2943) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2956)) == _2952))) { ( ++ _2956 ); }int _8327 = _2955; int _8328 = _2954; for (int _2958 = _8327;_2958<_8328;++_2958){ double _2959 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->cof)(_2958)); if ((_2959 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2942.get())->a(std::string (" + ")).get())->a(_2959).get())->a(std::string (" ")); }else if ((_2959 < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2942.get())->a(std::string (" - ")).get())->a((- _2959)).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_2942.get())->a(std::string (" + 0.0 ")); }mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_2958)),_2942); }int _2960 = _2956; (_2956 = _2957); while (((_2956 < _2960) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_2956)) == _2952))) { int _2961 = _2956; int _2962 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2956)); ( ++ _2956 ); while (((_2956 < _2960) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2956)) == _2962))) { ( ++ _2956 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2942.get())->a(std::string (" + < M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_2961))); int _8329 = (_2961 + (int)1); int _8330 = _2956; for (int _2963 = _8329;_2963<_8330;++_2963){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2942.get())->a(std::string (" + M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_2963))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2942.get())->a(std::string (" ; ")).get())->a(([&]() -> std::string { if ( ((int)((mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2961)))))))->name).size()) > (int)0)) return (mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_2961)))))))->name); else return (std::string ("_")); })()).get())->a(std::string (" >")); }if (cache_bfix){ if ((((*cache_bfix)(_2952)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2942.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_2952))); }else if ((((*cache_bfix)(_2952)) < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2942.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_2952))); }else {}}else {}if (_2940){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_2942.get())->a(std::string (" ")); domainToString(_2946,_2942); }else {}(((*_2939)(((long long)_2945 + _2938))) = mosek::fusion::Utils::p_StringBuffer::_get_impl(_2942.get())->toString()); }}void mosek::fusion::p_PSDConstraint::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2964 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); if ((numcones > (int)1)){ int _2965 = (int)0; int _8331 = (int)0; int _8332 = numcones; for (int _2966 = _8331;_2966<_8332;++_2966){ int _8333 = (int)0; int _8334 = conesize; for (int _2967 = _8333;_2967<_8334;++_2967){ int _8335 = (int)0; int _8336 = (_2967 + (int)1); for (int _2968 = _8335;_2968<_8336;++_2968){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_2965)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2964.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2966).get())->a(std::string (",")).get())->a(_2967).get())->a(std::string (",")).get())->a(_2968).get())->a(std::string ("]")).get())->toString()); ( ++ _2965 ); }}}}else { int _2969 = (int)0; int _8337 = (int)0; int _8338 = conesize; for (int _2970 = _8337;_2970<_8338;++_2970){ int _8339 = (int)0; int _8340 = (_2970 + (int)1); for (int _2971 = _8339;_2971<_8340;++_2971){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_2969)),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2964.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2970).get())->a(std::string (",")).get())->a(_2971).get())->a(std::string ("]")).get())->toString()); ( ++ _2969 ); }}}int _8341 = (int)0; int _8342 = numcones; for (int _2972 = _8341;_2972<_8342;++_2972){ mosek::fusion::p_Model::_get_impl(model.get())->task_barvar_name((coneidx + _2972),mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_2964.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(_2972).get())->a(std::string ("].coneslack")).get())->toString()); }(names_flushed = true); }else {}}void mosek::fusion::p_PSDConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _2973,std::shared_ptr< monty::ndarray< double,1 > > _2974,long long _2975,int _2976,int _2977){ std::shared_ptr< monty::ndarray< double,1 > > _2978 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2977))); std::shared_ptr< monty::ndarray< int,1 > > _2979 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2977))); int _8343 = (int)0; int _8344 = _2977; for (int _2980 = _8343;_2980<_8344;++_2980){ (((*_2979)(_2980)) = ((*nativeindexes)((((*_2973)((_2976 + _2980))) - _2975)))); }int _8345 = (int)0; int _8346 = (int)((_2978)->size(0)); for (int _2981 = _8345;_2981<_8346;++_2981){ (((*_2978)(_2981)) = (- ((*_2974)((((*_2973)((_2976 + _2981))) - _2975))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_2979,_2978); }void mosek::fusion::p_PSDConstraint::dual_values( long long _2982,std::shared_ptr< monty::ndarray< int,1 > > _2983,std::shared_ptr< monty::ndarray< long long,1 > > _2984,int _2985,std::shared_ptr< monty::ndarray< double,1 > > _2986){ long long _2987 = (long long)1; int _2988 = (int)((_2984)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _2989 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2988))); std::shared_ptr< monty::ndarray< long long,1 > > _2990 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2988))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _2991 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _2992 = (conesize * conesize); int _8347 = (int)0; int _8348 = _2988; for (int _2993 = _8347;_2993<_8348;++_2993){ (((*_2990)(_2993)) = _2982); }int _8349 = (int)0; int _8350 = _2988; for (int _2994 = _8349;_2994<_8350;++_2994){ (_2987 = (_2987 * ((*_2983)(_2994)))); }long long _8351 = (long long)0; long long _8352 = _2987; for (long long _2995 = _8351;_2995<_8352;++_2995){ { long long _2996 = (((*_2990)((int)0)) / _2992); long long _2997 = (((*_2990)((int)0)) - (_2996 * _2992)); long long _2998 = (_2997 / conesize); long long _2999 = (_2997 - (_2998 * conesize)); if ((_2999 > _2998)){ (((*_2986)(_2995)) = ((*((*_2991)(((long long)coneidx + _2996))))((((_2998 * conesize) + _2999) - ((_2998 * (_2998 + (int)1)) / (int)2))))); }else { (((*_2986)(_2995)) = ((*((*_2991)(((long long)coneidx + _2996))))((((_2999 * conesize) + _2998) - ((_2999 * (_2999 + (int)1)) / (int)2))))); }}{ ( ++ ((*_2989)((int)0)) ); (((*_2990)((int)0)) = (((*_2990)((int)0)) + ((*_2984)((_2988 - (int)1))))); int _3000 = (int)0; { (_3000 = (int)0); for (;((_3000 < (_2988 - (int)1)) && (((*_2989)(_3000)) == ((*_2983)(_3000))));( ++ _3000 )){ (((*_2989)(_3000)) = (int)0); ( ++ ((*_2989)((_3000 + (int)1))) ); (((*_2990)((_3000 + (int)1))) = (((*_2990)((_3000 + (int)1))) + ((*_2984)(((_2988 - (int)2) - _3000))))); }}int _8353 = (int)0; int _8354 = _3000; for (int _3001 = _8353;_3001<_8354;++_3001){ (((*_2990)(_3001)) = ((*_2990)(_3000))); }}}}void mosek::fusion::p_PSDConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3002,int _3003,std::shared_ptr< monty::ndarray< double,1 > > _3004){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3005 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_bars(::mosek::fusion::SolutionType::Default); int _3006 = (conesize * conesize); int _8355 = (int)0; int _8356 = (int)((_3002)->size(0)); for (int _3007 = _8355;_3007<_8356;++_3007){ long long _3008 = ((((*_3002)(_3007)) / _3006) + coneidx); long long _3009 = (((*_3002)(_3007)) - (_3008 * _3006)); long long _3010 = (_3009 / conesize); long long _3011 = (_3009 - (_3010 * conesize)); if ((_3011 > _3010)){ (((*_3004)(_3007)) = ((*((*_3005)(_3008)))((((_3010 * conesize) + _3011) - ((_3010 * (_3010 + (int)1)) / (int)2))))); }else { (((*_3004)(_3007)) = ((*((*_3005)(_3008)))((((_3011 * conesize) + _3010) - ((_3011 * (_3011 + (int)1)) / (int)2))))); }}}void mosek::fusion::p_PSDConstraint::level_values( long long _3012,std::shared_ptr< monty::ndarray< int,1 > > _3013,std::shared_ptr< monty::ndarray< long long,1 > > _3014,int _3015,std::shared_ptr< monty::ndarray< double,1 > > _3016){ long long _3017 = (long long)1; int _3018 = (int)((_3014)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _3019 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3018))); std::shared_ptr< monty::ndarray< long long,1 > > _3020 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3018))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3021 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _3022 = (conesize * conesize); int _8357 = (int)0; int _8358 = _3018; for (int _3023 = _8357;_3023<_8358;++_3023){ (((*_3020)(_3023)) = _3012); }int _8359 = (int)0; int _8360 = _3018; for (int _3024 = _8359;_3024<_8360;++_3024){ (_3017 = (_3017 * ((*_3013)(_3024)))); }long long _8361 = (long long)0; long long _8362 = _3017; for (long long _3025 = _8361;_3025<_8362;++_3025){ { long long _3026 = (((*_3020)((int)0)) / _3022); long long _3027 = (((*_3020)((int)0)) - (_3026 * _3022)); long long _3028 = (_3027 / conesize); long long _3029 = (_3027 - (_3028 * conesize)); if ((_3029 > _3028)){ (((*_3016)(_3025)) = ((*((*_3021)(((long long)coneidx + _3026))))((((_3028 * conesize) + _3029) - ((_3028 * (_3028 + (int)1)) / (int)2))))); }else { (((*_3016)(_3025)) = ((*((*_3021)(((long long)coneidx + _3026))))((((_3029 * conesize) + _3028) - ((_3029 * (_3029 + (int)1)) / (int)2))))); }}{ ( ++ ((*_3019)((int)0)) ); (((*_3020)((int)0)) = (((*_3020)((int)0)) + ((*_3014)((_3018 - (int)1))))); int _3030 = (int)0; { (_3030 = (int)0); for (;((_3030 < (_3018 - (int)1)) && (((*_3019)(_3030)) == ((*_3013)(_3030))));( ++ _3030 )){ (((*_3019)(_3030)) = (int)0); ( ++ ((*_3019)((_3030 + (int)1))) ); (((*_3020)((_3030 + (int)1))) = (((*_3020)((_3030 + (int)1))) + ((*_3014)(((_3018 - (int)2) - _3030))))); }}int _8363 = (int)0; int _8364 = _3030; for (int _3031 = _8363;_3031<_8364;++_3031){ (((*_3020)(_3031)) = ((*_3020)(_3030))); }}}}void mosek::fusion::p_PSDConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3032,int _3033,std::shared_ptr< monty::ndarray< double,1 > > _3034){ std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _3035 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_barx(::mosek::fusion::SolutionType::Default); int _3036 = (conesize * conesize); int _8365 = (int)0; int _8366 = (int)((_3032)->size(0)); for (int _3037 = _8365;_3037<_8366;++_3037){ long long _3038 = ((((*_3032)(_3037)) / _3036) + coneidx); long long _3039 = (((*_3032)(_3037)) - (_3038 * _3036)); long long _3040 = (_3039 / conesize); long long _3041 = (_3039 - (_3040 * conesize)); if ((_3041 > _3040)){ (((*_3034)(_3037)) = ((*((*_3035)(_3038)))((((_3040 * conesize) + _3041) - ((_3040 * (_3040 + (int)1)) / (int)2))))); }else { (((*_3034)(_3037)) = ((*((*_3035)(_3038)))((((_3041 * conesize) + _3040) - ((_3041 * (_3041 + (int)1)) / (int)2))))); }}}monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3042){ return ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(_pubthis,_3042); }void mosek::fusion::p_PSDConstraint::destroy(){}void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConstraintCache::ConstraintCache(mosek::fusion::p_ConstraintCache *_impl) : _impl(_impl) { /*std::cout << "ConstraintCache() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConstraintCache::~ConstraintCache() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConstraintCache::p_ConstraintCache  (::mosek::fusion::ConstraintCache * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _3043){ return new mosek::fusion::ConstraintCache(_3043); }mosek::fusion::ConstraintCache::ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _3043) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_3043); }void mosek::fusion::p_ConstraintCache::_initialize  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _3043){monty::rc_reserve __reserve_this(_pubthis); { { (nrows = mosek::fusion::p_ConstraintCache::_get_impl(_3043)->nrows); (nnz = mosek::fusion::p_ConstraintCache::_get_impl(_3043)->nnz); (subj = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3043)->subj) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3043)->subj)); else return (nullptr); })()); (subi = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3043)->subi) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3043)->subi)); else return (nullptr); })()); (cof = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3043)->cof) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3043)->cof)); else return (nullptr); })()); (bfix = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3043)->bfix) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3043)->bfix)); else return (nullptr); })()); (buffer_cof = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3043)->buffer_cof) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3043)->buffer_cof)); else return (nullptr); })()); (buffer_subj = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3043)->buffer_subj) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3043)->buffer_subj)); else return (nullptr); })()); (buffer_subi = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3043)->buffer_subi) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3043)->buffer_subi)); else return (nullptr); })()); (nunordered = mosek::fusion::p_ConstraintCache::_get_impl(_3043)->nunordered); (nbarnz = mosek::fusion::p_ConstraintCache::_get_impl(_3043)->nbarnz); (barsubi = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3043)->barsubi) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3043)->barsubi)); else return (nullptr); })()); (barsubj = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3043)->barsubj) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3043)->barsubj)); else return (nullptr); })()); (barmatidx = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( mosek::fusion::p_ConstraintCache::_get_impl(_3043)->barmatidx) return (::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_3043)->barmatidx)); else return (nullptr); })()); }}}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _3044,    std::shared_ptr< monty::ndarray< double,1 > > _3045,    std::shared_ptr< monty::ndarray< int,1 > > _3046,    std::shared_ptr< monty::ndarray< double,1 > > _3047,    std::shared_ptr< monty::ndarray< int,1 > > _3048,    std::shared_ptr< monty::ndarray< int,1 > > _3049,    std::shared_ptr< monty::ndarray< int,1 > > _3050){ return new mosek::fusion::ConstraintCache(_3044,_3045,_3046,_3047,_3048,_3049,_3050); }mosek::fusion::ConstraintCache::ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _3044,    std::shared_ptr< monty::ndarray< double,1 > > _3045,    std::shared_ptr< monty::ndarray< int,1 > > _3046,    std::shared_ptr< monty::ndarray< double,1 > > _3047,    std::shared_ptr< monty::ndarray< int,1 > > _3048,    std::shared_ptr< monty::ndarray< int,1 > > _3049,    std::shared_ptr< monty::ndarray< int,1 > > _3050) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_3044,_3045,_3046,_3047,_3048,_3049,_3050); }void mosek::fusion::p_ConstraintCache::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _3044,    std::shared_ptr< monty::ndarray< double,1 > > _3045,    std::shared_ptr< monty::ndarray< int,1 > > _3046,    std::shared_ptr< monty::ndarray< double,1 > > _3047,    std::shared_ptr< monty::ndarray< int,1 > > _3048,    std::shared_ptr< monty::ndarray< int,1 > > _3049,    std::shared_ptr< monty::ndarray< int,1 > > _3050){monty::rc_reserve __reserve_this(_pubthis); { { (nrows = ((int)((_3044)->size(0)) - (int)1)); (nnz = ((*_3044)(((int)((_3044)->size(0)) - (int)1)))); (subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)))); (subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nnz)))); if (_3047){ (bfix = _3047); }else { (bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nrows)))); }if ((_3048 && (_3049 && _3050))){ (nbarnz = (int)((_3048)->size(0))); if ((nbarnz > (int)((_3049)->size(0)))){ (nbarnz = (int)((_3049)->size(0))); }else {}if ((nbarnz > (int)((_3050)->size(0)))){ (nbarnz = (int)((_3050)->size(0))); }else {}(barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)))); (barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)))); (barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)))); ::mosek::fusion::Utils::Tools::arraycopy(_3048,(long long)((int)0),barsubi,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3049,(long long)((int)0),barsubj,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3050,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz); }else { (nbarnz = (int)0); (barsubi = nullptr); (barsubj = nullptr); (barmatidx = nullptr); }::mosek::fusion::Utils::Tools::arraycopy(_3046,(long long)0,subj,(long long)0,nnz); ::mosek::fusion::Utils::Tools::arraycopy(_3045,(long long)0,cof,(long long)0,nnz); int _8367 = (int)0; int _8368 = nrows; for (int _3051 = _8367;_3051<_8368;++_3051){ long long _8369 = ((*_3044)(_3051)); long long _8370 = ((*_3044)((_3051 + (int)1))); for (long long _3052 = _8369;_3052<_8370;++_3052){ (((*subi)(_3052)) = _3051); }}(buffer_cof = nullptr); (buffer_subj = nullptr); (buffer_subi = nullptr); (nunordered = (long long)0); }}}void mosek::fusion::p_ConstraintCache::unchecked_add_fx( std::shared_ptr< monty::ndarray< double,1 > > _3053){ int _8371 = (int)0; int _8372 = nrows; for (int _3054 = _8371;_3054<_8372;++_3054){ (((*bfix)(_3054)) = (((*bfix)(_3054)) + ((*_3053)(_3054)))); }}long long mosek::fusion::p_ConstraintCache::order_barentries( ){ std::shared_ptr< monty::ndarray< long long,1 > > _3055 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8373; for (long long _3056=(long long)0, _8374=nbarnz; _3056 < _8374;++_3056)_8373.push_back(_3056); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8373.size()),_8373.begin(),_8373.end())); })(); if ((! ::mosek::fusion::p_Sort::issorted(_3055,barsubi,barsubj,(long long)((int)0),nbarnz,false))){ ::mosek::fusion::p_Sort::argsort(_3055,barsubi,barsubj,(long long)((int)0),nbarnz,false); std::shared_ptr< monty::ndarray< int,1 > > _3057 = barsubi; std::shared_ptr< monty::ndarray< int,1 > > _3058 = barsubj; std::shared_ptr< monty::ndarray< int,1 > > _3059 = barmatidx; (barsubi = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8375; for (long long _3060=(int)0, _8376=nbarnz; _3060 < _8376;++_3060)_8375.push_back(((*_3057)(((*_3055)(_3060))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8375.size()),_8375.begin(),_8375.end())); })()); (barsubj = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8377; for (long long _3061=(int)0, _8378=nbarnz; _3061 < _8378;++_3061)_8377.push_back(((*_3058)(((*_3055)(_3061))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8377.size()),_8377.begin(),_8377.end())); })()); (barmatidx = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8379; for (long long _3062=(int)0, _8380=nbarnz; _3062 < _8380;++_3062)_8379.push_back(((*_3059)(((*_3055)(_3062))))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8379.size()),_8379.begin(),_8379.end())); })()); }else {}return nbarnz; }void mosek::fusion::p_ConstraintCache::add_bar( std::shared_ptr< monty::ndarray< int,1 > > _3063,std::shared_ptr< monty::ndarray< int,1 > > _3064,std::shared_ptr< monty::ndarray< int,1 > > _3065){ if (_3063){ int _3066 = (int)((_3063)->size(0)); if (((int)((_3063)->size(0)) <= (nbarnz + _3066))){ std::shared_ptr< monty::ndarray< int,1 > > _3067 = barsubi; std::shared_ptr< monty::ndarray< int,1 > > _3068 = barsubj; std::shared_ptr< monty::ndarray< int,1 > > _3069 = barmatidx; long long _3070 = ([&]() -> long long { if ( (((int)2 * nbarnz) > (nbarnz + _3066))) return (((int)2 * nbarnz)); else return ((nbarnz + (_3066 * (int)2))); })(); (barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3070)))); (barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3070)))); (barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3070)))); if ((nbarnz > (int)0)){ ::mosek::fusion::Utils::Tools::arraycopy(_3067,(long long)((int)0),barsubi,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3068,(long long)((int)0),barsubj,(long long)((int)0),nbarnz); ::mosek::fusion::Utils::Tools::arraycopy(_3069,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz); }else {}}else {}::mosek::fusion::Utils::Tools::arraycopy(_3063,(long long)((int)0),barsubi,nbarnz,(long long)(_3066)); ::mosek::fusion::Utils::Tools::arraycopy(_3064,(long long)((int)0),barsubj,nbarnz,(long long)(_3066)); ::mosek::fusion::Utils::Tools::arraycopy(_3065,(long long)((int)0),barmatidx,nbarnz,(long long)(_3066)); (nbarnz += _3066); }else {}}void mosek::fusion::p_ConstraintCache::unchecked_add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3071,std::shared_ptr< monty::ndarray< int,1 > > _3072,std::shared_ptr< monty::ndarray< double,1 > > _3073,std::shared_ptr< monty::ndarray< double,1 > > _3074){ long long _3075 = (nunordered + ((*_3071)(nrows))); long long _3076 = ((*_3071)(nrows)); std::shared_ptr< monty::ndarray< int,1 > > _3077; std::shared_ptr< monty::ndarray< int,1 > > _3078; std::shared_ptr< monty::ndarray< double,1 > > _3079; if ((! buffer_cof || ((int)((buffer_cof)->size(0)) < _3075))){ (_3077 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3075)))); (_3078 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3075)))); (_3079 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3075)))); if (buffer_cof){ ::mosek::fusion::Utils::Tools::arraycopy(buffer_subi,(long long)0,_3077,(long long)0,nunordered); ::mosek::fusion::Utils::Tools::arraycopy(buffer_subj,(long long)0,_3078,(long long)0,nunordered); ::mosek::fusion::Utils::Tools::arraycopy(buffer_cof,(long long)0,_3079,(long long)0,nunordered); }else {}}else { (_3077 = buffer_subi); (_3078 = buffer_subj); (_3079 = buffer_cof); }int _8381 = (int)0; int _8382 = nrows; for (int _3080 = _8381;_3080<_8382;++_3080){ long long _8383 = ((*_3071)(_3080)); long long _8384 = ((*_3071)((_3080 + (int)1))); for (long long _3081 = _8383;_3081<_8384;++_3081){ (((*_3077)((nunordered + _3081))) = _3080); }}::mosek::fusion::Utils::Tools::arraycopy(_3072,(long long)0,_3078,nunordered,_3076); ::mosek::fusion::Utils::Tools::arraycopy(_3073,(long long)0,_3079,nunordered,_3076); (buffer_subi = _3077); (buffer_subj = _3078); (buffer_cof = _3079); if (_3074){ int _8385 = (int)0; int _8386 = nrows; for (int _3082 = _8385;_3082<_8386;++_3082){ (((*bfix)(_3082)) = (((*bfix)(_3082)) + ((*_3074)(_3082)))); }}else {}(nunordered = _3075); (nnz = (nnz + _3076)); }void mosek::fusion::ConstraintCache::add  ( std::shared_ptr< monty::ndarray< long long,1 > > _3083,    std::shared_ptr< monty::ndarray< int,1 > > _3084,    std::shared_ptr< monty::ndarray< double,1 > > _3085,    std::shared_ptr< monty::ndarray< double,1 > > _3086) { mosek::fusion::p_ConstraintCache::_get_impl(this)->add(_3083,_3084,_3085,_3086); }void mosek::fusion::p_ConstraintCache::add( std::shared_ptr< monty::ndarray< long long,1 > > _3083,std::shared_ptr< monty::ndarray< int,1 > > _3084,std::shared_ptr< monty::ndarray< double,1 > > _3085,std::shared_ptr< monty::ndarray< double,1 > > _3086){ if ((((int)((_3083)->size(0)) != (nrows + (int)1)) || (_3086 && ((int)((_3086)->size(0)) != nrows)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching expression lengths"));}else {}unchecked_add_l(_3083,_3084,_3085,_3086); }long long mosek::fusion::ConstraintCache::flush  ( std::shared_ptr< monty::ndarray< int,1 > > _3087,    std::shared_ptr< monty::ndarray< int,1 > > _3088,    std::shared_ptr< monty::ndarray< double,1 > > _3089,    std::shared_ptr< monty::ndarray< double,1 > > _3090) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->flush(_3087,_3088,_3089,_3090); }long long mosek::fusion::p_ConstraintCache::flush( std::shared_ptr< monty::ndarray< int,1 > > _3087,std::shared_ptr< monty::ndarray< int,1 > > _3088,std::shared_ptr< monty::ndarray< double,1 > > _3089,std::shared_ptr< monty::ndarray< double,1 > > _3090){ std::shared_ptr< monty::ndarray< long long,1 > > _3091 = nullptr; if ((bfix && _3090)){ int _8387 = (int)0; int _8388 = nrows; for (int _3092 = _8387;_3092<_8388;++_3092){ (((*_3090)(_3092)) = ((*bfix)(_3092))); }}else {}if ((nunordered == (long long)0)){ return (long long)0; }else {}bool _3093 = false; { int _3094 = (int)1; while (((_3094 < nunordered) && ((((*buffer_subi)((_3094 - (int)1))) < ((*buffer_subi)(_3094))) || ((((*buffer_subi)((_3094 - (int)1))) == ((*buffer_subi)(_3094))) && (((*buffer_subj)((_3094 - (int)1))) <= ((*buffer_subj)(_3094))))))) { ( ++ _3094 ); }(_3093 = (_3094 == nunordered)); }if ((! _3093)){ (_3091 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8389; for (long long _3095=(int)0, _8390=nunordered; _3095 < _8390;++_3095)_8389.push_back(_3095); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8389.size()),_8389.begin(),_8389.end())); })()); ::mosek::fusion::p_CommonTools::argQsort(_3091,buffer_subi,buffer_subj,(long long)0,nunordered); }else {}int _3096 = (int)((subi)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _3097 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((nunordered + _3096)))); std::shared_ptr< monty::ndarray< int,1 > > _3098 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((nunordered + _3096)))); std::shared_ptr< monty::ndarray< double,1 > > _3099 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((nunordered + _3096)))); long long _3100 = (long long)0; if (_3093){ int _3101 = (int)0; int _3102 = (int)0; int _3103 = _3096; long long _3104 = nunordered; int _3105 = (int)0; long long _3106 = (long long)0; while (((_3101 < _3103) && (_3102 < _3104))) { if (((((*subi)(_3101)) < ((*buffer_subi)(_3102))) || ((((*subi)(_3101)) == ((*buffer_subi)(_3102))) && (((*subj)(_3101)) < ((*buffer_subj)(_3102)))))){ (((*_3097)(_3105)) = ((*subi)(_3101))); (((*_3098)(_3105)) = ((*subj)(_3101))); (((*_3099)(_3105)) = ((*cof)(_3101))); ( ++ _3101 ); ( ++ _3105 ); }else if (((((*subi)(_3101)) > ((*buffer_subi)(_3102))) || ((((*subi)(_3101)) == ((*buffer_subi)(_3102))) && (((*subj)(_3101)) > ((*buffer_subj)(_3102)))))){ (((*_3097)(_3105)) = ((*buffer_subi)(_3102))); (((*_3098)(_3105)) = ((*buffer_subj)(_3102))); (((*_3099)(_3105)) = ((*buffer_cof)(_3102))); (((*_3087)(_3100)) = ((*_3097)(_3105))); (((*_3088)(_3100)) = ((*_3098)(_3105))); (((*_3089)(_3100)) = ((*_3099)(_3105))); ( ++ _3100 ); ( ++ _3102 ); ( ++ _3105 ); }else { (((*_3097)(_3105)) = ((*subi)(_3101))); (((*_3098)(_3105)) = ((*subj)(_3101))); (((*_3099)(_3105)) = ((*cof)(_3101))); while (((_3101 < (int)((subi)->size(0))) && ((_3102 < (int)((buffer_subi)->size(0))) && ((((*subi)(_3101)) == ((*buffer_subi)(_3102))) && (((*subj)(_3101)) == ((*buffer_subj)(_3102))))))) { (((*_3099)(_3105)) = (((*_3099)(_3105)) + ((*buffer_cof)(_3102)))); ( ++ _3102 ); }(((*_3087)(_3100)) = ((*_3097)(_3105))); (((*_3088)(_3100)) = ((*_3098)(_3105))); (((*_3089)(_3100)) = ((*_3099)(_3105))); ( ++ _3100 ); ( ++ _3101 ); ( ++ _3105 ); }}while ((_3101 < _3103)) { (((*_3097)(_3105)) = ((*subi)(_3101))); (((*_3098)(_3105)) = ((*subj)(_3101))); (((*_3099)(_3105)) = ((*cof)(_3101))); ( ++ _3101 ); ( ++ _3105 ); }while ((_3102 < _3104)) { (((*_3097)(_3105)) = ((*buffer_subi)(_3102))); (((*_3098)(_3105)) = ((*buffer_subj)(_3102))); (((*_3099)(_3105)) = ((*buffer_cof)(_3102))); (((*_3087)(_3100)) = ((*_3097)(_3105))); (((*_3088)(_3100)) = ((*_3098)(_3105))); (((*_3089)(_3100)) = ((*_3099)(_3105))); ( ++ _3100 ); ( ++ _3102 ); ( ++ _3105 ); }}else { int _3107 = (int)0; int _3108 = (int)0; int _3109 = _3096; long long _3110 = nunordered; int _3111 = (int)0; long long _3112 = (long long)0; while (((_3107 < _3109) && (_3108 < _3110))) { if (((((*subi)(_3107)) < ((*buffer_subi)(((*_3091)(_3108))))) || ((((*subi)(_3107)) == ((*buffer_subi)(((*_3091)(_3108))))) && (((*subj)(_3107)) < ((*buffer_subj)(((*_3091)(_3108)))))))){ (((*_3097)(_3111)) = ((*subi)(_3107))); (((*_3098)(_3111)) = ((*subj)(_3107))); (((*_3099)(_3111)) = ((*cof)(_3107))); ( ++ _3107 ); ( ++ _3111 ); }else if (((((*subi)(_3107)) > ((*buffer_subi)(((*_3091)(_3108))))) || ((((*subi)(_3107)) == ((*buffer_subi)(((*_3091)(_3108))))) && (((*subj)(_3107)) > ((*buffer_subj)(((*_3091)(_3108)))))))){ (((*_3097)(_3111)) = ((*buffer_subi)(((*_3091)(_3108))))); (((*_3098)(_3111)) = ((*buffer_subj)(((*_3091)(_3108))))); (((*_3099)(_3111)) = ((*buffer_cof)(((*_3091)(_3108))))); (((*_3087)(_3100)) = ((*_3097)(_3111))); (((*_3088)(_3100)) = ((*_3098)(_3111))); (((*_3089)(_3100)) = ((*_3099)(_3111))); ( ++ _3100 ); ( ++ _3108 ); ( ++ _3111 ); }else { (((*_3097)(_3111)) = ((*subi)(_3107))); (((*_3098)(_3111)) = ((*subj)(_3107))); (((*_3099)(_3111)) = ((*cof)(_3107))); while (((((*subi)(_3107)) == ((*buffer_subi)(((*_3091)(_3108))))) && (((*subj)(_3107)) == ((*buffer_subj)(((*_3091)(_3108))))))) { (((*_3099)(_3111)) = (((*_3099)(_3111)) + ((*buffer_cof)(((*_3091)(_3108)))))); ( ++ _3108 ); }(((*_3087)(_3100)) = ((*_3097)(_3111))); (((*_3088)(_3100)) = ((*_3098)(_3111))); (((*_3089)(_3100)) = ((*_3099)(_3111))); ( ++ _3100 ); ( ++ _3107 ); ( ++ _3111 ); }}}(subi = _3097); (subj = _3098); (cof = _3099); (nunordered = (long long)0); return _3100; }long long mosek::fusion::ConstraintCache::numUnsorted  ( ) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->numUnsorted(); }long long mosek::fusion::p_ConstraintCache::numUnsorted( ){ return nunordered; }monty::rc_ptr< ::mosek::fusion::ConstraintCache > mosek::fusion::p_ConstraintCache::clone( ){ return ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(_pubthis); }void mosek::fusion::p_ConstraintCache::destroy(){barmatidx.reset();barsubj.reset();barsubi.reset();buffer_subi.reset();buffer_subj.reset();buffer_cof.reset();bfix.reset();cof.reset();subi.reset();subj.reset();}void mosek::fusion::ConstraintCache::destroy() { mosek::fusion::p_ConstraintCache::_get_impl(this)->destroy(); }mosek::fusion::CompoundConstraint::CompoundConstraint(mosek::fusion::p_CompoundConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "CompoundConstraint()" << this << std::endl; */ }mosek::fusion::CompoundConstraint::~CompoundConstraint() {  /* std::cout << "~CompoundConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_CompoundConstraint::p_CompoundConstraint  (::mosek::fusion::CompoundConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::CompoundConstraint::t mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3113){ return new mosek::fusion::CompoundConstraint(_3113); }mosek::fusion::CompoundConstraint::CompoundConstraint  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3113) :    CompoundConstraint(new mosek::fusion::p_CompoundConstraint(this)){ mosek::fusion::p_CompoundConstraint::_get_impl(this)->_initialize(_3113); }void mosek::fusion::p_CompoundConstraint::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3113){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(::mosek::fusion::p_CompoundConstraint::model_from_con(_3113),::mosek::fusion::p_CompoundConstraint::compute_shape(_3113,(int)0));int _3114 = (int)0; int _3115 = (int)0; int _3116 = (int)0; { int _3117 = (int)0; for (;(_3117 < (int)((_3113)->size(0)));( ++ _3117 )){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3113)(_3117)))->shape_p)->size == (int)1)){ ( ++ _3115 ); ( ++ _3116 ); }else if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3113)(_3117)))->shape_p)->size > (int)1)){ ( ++ _3115 ); (_3116 = (_3116 + mosek::fusion::p_Constraint::_get_impl(((*_3113)(_3117)))->shape_p->dim(_3114))); }else {}}}(cons = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >(monty::shape(_3115)))); (consb = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_3115 + (int)1))))); (((*consb)((int)0)) = (int)0); (stackdim = _3114); { int _3118 = (int)0; { int _3119 = (int)0; for (;(_3119 < (int)((_3113)->size(0)));( ++ _3119 )){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3113)(_3119)))->shape_p)->size > (int)0)){ (((*cons)(_3118)) = ((*_3113)(_3119))); ( ++ _3118 ); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3113)(_3119)))->shape_p)->size == (int)1)){ (((*consb)((_3119 + (int)1))) = (((*consb)(_3119)) + (int)1)); }else { (((*consb)((_3119 + (int)1))) = (((*consb)(_3119)) + mosek::fusion::p_Constraint::_get_impl(((*_3113)(_3119)))->shape_p->dim(_3114))); }}else {}}}}}}void mosek::fusion::p_CompoundConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3120,long long _3121,std::shared_ptr< monty::ndarray< std::string,1 > > _3122){ throw ::mosek::fusion::UnimplementedError(std::string ("SliceConstraint.toStringArray() not implemented"));}void mosek::fusion::p_CompoundConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3123,std::shared_ptr< monty::ndarray< long long,1 > > _3124,std::shared_ptr< monty::ndarray< int,1 > > _3125,std::shared_ptr< monty::ndarray< int,1 > > _3126,std::shared_ptr< monty::ndarray< int,1 > > _3127,std::shared_ptr< monty::ndarray< double,1 > > _3128,std::shared_ptr< monty::ndarray< double,1 > > _3129,long long _3130,int _3131,int _3132){ std::shared_ptr< monty::ndarray< long long,1 > > _3133 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8391; for (int _3134=(int)0, _8392=_3132; _3134 < _8392;++_3134)_8391.push_back((((*_3123)((_3131 + _3134))) - _3130)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8391.size()),_8391.begin(),_8391.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _3135 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8393; for (int _3136=(int)0, _8394=_3132; _3136 < _8394;++_3136)_8393.push_back(_3136); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8393.size()),_8393.begin(),_8393.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _3137 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8395; for (int _3138=(int)0, _8396=_3132; _3138 < _8396;++_3138)_8395.push_back(((*mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((((*_3123)((_3131 + _3138))) - _3130)))(stackdim))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8395.size()),_8395.begin(),_8395.end())); })(); ::mosek::fusion::p_CommonTools::argQsort(_3135,_3137,_3133,(long long)0,(long long)_3132); std::shared_ptr< monty::ndarray< int,1 > > _3139 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3132))); { int _3140 = (int)0; while ((((*consb)(_3140)) < ((*_3137)(((*_3135)((int)0)))))) { ( ++ _3140 ); }(((*_3139)((int)0)) = _3140); int _8397 = (int)1; int _8398 = _3132; for (int _3141 = _8397;_3141<_8398;++_3141){ while ((((*consb)(_3140)) < ((*_3137)(((*_3135)(_3141)))))) { ( ++ _3140 ); }(((*_3139)(_3141)) = _3140); }}{ std::shared_ptr< monty::ndarray< long long,1 > > _3142 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3132))); std::shared_ptr< monty::ndarray< long long,1 > > _3143 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_3132 + (int)1)))); long long _3144 = (((*_3124)((_3131 + _3132))) - ((*_3124)(_3131))); std::shared_ptr< monty::ndarray< int,1 > > _3145 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3144))); std::shared_ptr< monty::ndarray< int,1 > > _3146 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3144))); std::shared_ptr< monty::ndarray< int,1 > > _3147 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3144))); std::shared_ptr< monty::ndarray< double,1 > > _3148 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3144))); std::shared_ptr< monty::ndarray< double,1 > > _3149 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _3129) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3132)))); })(); (((*_3143)((int)0)) = (long long)0); int _8399 = (int)0; int _8400 = _3132; for (int _3150 = _8399;_3150<_8400;++_3150){ int _3151 = ((*_3139)(_3150)); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3151)))->shape_p)->size == (int)1)){ (((*_3142)(_3150)) = (long long)0); }else { std::shared_ptr< monty::ndarray< int,1 > > _3152 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3133)(((*_3135)(_3150))))); (((*_3152)(stackdim)) = (((*_3152)(stackdim)) - ((*consb)(_3151)))); (((*_3142)(_3150)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3151)))->shape_p.get())->linearidx(_3152)); }long long _3153 = (((*_3124)((((*_3135)(_3150)) + (int)1))) - ((*_3124)(((*_3135)(_3150))))); (((*_3143)((_3150 + (int)1))) = (((*_3143)(_3150)) + _3153)); ::mosek::fusion::Utils::Tools::arraycopy(_3125,((*_3124)(((*_3135)(_3150)))),_3145,((*_3143)(_3150)),_3153); ::mosek::fusion::Utils::Tools::arraycopy(_3126,((*_3124)(((*_3135)(_3150)))),_3146,((*_3143)(_3150)),_3153); ::mosek::fusion::Utils::Tools::arraycopy(_3127,((*_3124)(((*_3135)(_3150)))),_3147,((*_3143)(_3150)),_3153); ::mosek::fusion::Utils::Tools::arraycopy(_3128,((*_3124)(((*_3135)(_3150)))),_3148,((*_3143)(_3150)),_3153); }if (_3129){ int _8401 = (int)0; int _8402 = _3132; for (int _3154 = _8401;_3154<_8402;++_3154){ (((*_3149)(_3154)) = ((*_3129)(((*_3135)(_3154))))); }}else {}{ int _3155 = (int)0; while ((_3155 < _3132)) { int _3156 = _3155; ( ++ _3155 ); while (((_3155 < _3132) && (((*_3139)(_3155)) == ((*_3139)(_3156))))) { ( ++ _3155 ); }mosek::fusion::p_Constraint::_get_impl(((*cons)(((*_3139)(_3156)))).get())->add_l(_3142,_3143,_3145,_3146,_3147,_3148,_3149,(long long)0,_3156,(_3155 - _3156)); }}}}void mosek::fusion::p_CompoundConstraint::dual_values( long long _3157,std::shared_ptr< monty::ndarray< int,1 > > _3158,std::shared_ptr< monty::ndarray< long long,1 > > _3159,int _3160,std::shared_ptr< monty::ndarray< double,1 > > _3161){ int _3162 = (int)((_3159)->size(0)); int _3163 = ((*_3158)((int)0)); int _8403 = (int)1; int _8404 = (int)((_3158)->size(0)); for (int _3164 = _8403;_3164<_8404;++_3164){ (_3163 = (_3163 * ((*_3158)(_3164)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3165 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8405; for (int _3166=(int)0, _8406=(int)((_3158)->size(0)); _3166 < _8406;++_3166)_8405.push_back(_3157); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8405.size()),_8405.begin(),_8405.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _3167 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3158)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _3168 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _3169 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3169)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); int _8407 = (int)1; int _8408 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3170 = _8407;_3170<_8408;++_3170){ (((*_3169)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3170) - (int)1))) = (((*_3169)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3170))) * shape_p->dim((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3170)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3171 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); int _8409 = (int)0; int _8410 = _3163; for (int _3172 = _8409;_3172<_8410;++_3172){ { long long _3173 = ((*_3165)((int)0)); int _8411 = (int)0; int _8412 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3174 = _8411;_3174<_8412;++_3174){ (((*_3168)(_3174)) = (int)(_3173 / ((*_3169)(_3174)))); (_3173 = (_3173 - ((long long)((*_3168)(_3174)) * ((*_3169)(_3174))))); }}{ int _3175 = (int)0; while ((((*_3168)(stackdim)) >= ((*consb)((_3175 + (int)1))))) { ( ++ _3175 ); }(((*_3168)(stackdim)) = (((*_3168)(stackdim)) - ((*consb)(_3175)))); (((*_3171)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3175)))->shape_p.get())->linearidx(_3168)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3175)).get())->dual_values(_3171,(_3160 + _3172),_3161); }{ ( ++ ((*_3167)((int)0)) ); (((*_3165)((int)0)) = (((*_3165)((int)0)) + ((*_3159)((_3162 - (int)1))))); int _3176 = (int)0; { (_3176 = (int)0); for (;((_3176 < (_3162 - (int)1)) && (((*_3167)(_3176)) == ((*_3158)(_3176))));( ++ _3176 )){ (((*_3167)(_3176)) = (int)0); ( ++ ((*_3167)((_3176 + (int)1))) ); }}int _8413 = (int)0; int _8414 = _3176; for (int _3177 = _8413;_3177<_8414;++_3177){ (((*_3165)(_3177)) = ((*_3165)(_3176))); }}}}void mosek::fusion::p_CompoundConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3178,int _3179,std::shared_ptr< monty::ndarray< double,1 > > _3180){ std::shared_ptr< monty::ndarray< long long,1 > > _3181 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _3182 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8415 = (int)0; int _8416 = (int)((_3178)->size(0)); for (int _3183 = _8415;_3183<_8416;++_3183){ { long long _3184 = (long long)((*_3178)(_3183)); int _8417 = (int)0; int _8418 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3185 = _8417;_3185<_8418;++_3185){ (((*_3182)(_3185)) = (int)(_3184 / shape_p->stride(_3185))); (_3184 = (_3184 - ((long long)((*_3182)(_3185)) * shape_p->stride(_3185)))); }}{ int _3186 = (int)0; while ((((*_3182)(stackdim)) >= ((*consb)((_3186 + (int)1))))) { ( ++ _3186 ); }(((*_3182)(stackdim)) = (((*_3182)(stackdim)) - ((*consb)(_3186)))); (((*_3181)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3186)))->shape_p.get())->linearidx(_3182)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3186)).get())->dual_values(_3181,(_3179 + _3183),_3180); }}}void mosek::fusion::p_CompoundConstraint::level_values( long long _3187,std::shared_ptr< monty::ndarray< int,1 > > _3188,std::shared_ptr< monty::ndarray< long long,1 > > _3189,int _3190,std::shared_ptr< monty::ndarray< double,1 > > _3191){ int _3192 = (int)((_3189)->size(0)); int _3193 = ((*_3188)((int)0)); int _8419 = (int)1; int _8420 = (int)((_3188)->size(0)); for (int _3194 = _8419;_3194<_8420;++_3194){ (_3193 = (_3193 * ((*_3188)(_3194)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3195 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8421; for (int _3196=(int)0, _8422=(int)((_3188)->size(0)); _3196 < _8422;++_3196)_8421.push_back(_3187); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8421.size()),_8421.begin(),_8421.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _3197 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3188)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _3198 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _3199 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3199)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); int _8423 = (int)1; int _8424 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3200 = _8423;_3200<_8424;++_3200){ (((*_3199)(((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3200) - (int)1))) = (((*_3199)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3200))) * shape_p->dim((mosek::fusion::p_Set::_get_impl(shape_p)->nd - _3200)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3201 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); int _8425 = (int)0; int _8426 = _3193; for (int _3202 = _8425;_3202<_8426;++_3202){ { long long _3203 = ((*_3195)((int)0)); int _8427 = (int)0; int _8428 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3204 = _8427;_3204<_8428;++_3204){ (((*_3198)(_3204)) = (int)(_3203 / ((*_3199)(_3204)))); (_3203 = (_3203 - ((long long)((*_3198)(_3204)) * ((*_3199)(_3204))))); }}{ int _3205 = (int)0; while ((((*_3198)(stackdim)) >= ((*consb)((_3205 + (int)1))))) { ( ++ _3205 ); }(((*_3198)(stackdim)) = (((*_3198)(stackdim)) - ((*consb)(_3205)))); (((*_3201)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3205)))->shape_p.get())->linearidx(_3198)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3205)).get())->level_values(_3201,(_3190 + _3202),_3191); }{ ( ++ ((*_3197)((int)0)) ); (((*_3195)((int)0)) = (((*_3195)((int)0)) + ((*_3189)((_3192 - (int)1))))); int _3206 = (int)0; { (_3206 = (int)0); for (;((_3206 < (_3192 - (int)1)) && (((*_3197)(_3206)) == ((*_3188)(_3206))));( ++ _3206 )){ (((*_3197)(_3206)) = (int)0); ( ++ ((*_3197)((_3206 + (int)1))) ); }}int _8429 = (int)0; int _8430 = _3206; for (int _3207 = _8429;_3207<_8430;++_3207){ (((*_3195)(_3207)) = ((*_3195)(_3206))); }}}}void mosek::fusion::p_CompoundConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3208,int _3209,std::shared_ptr< monty::ndarray< double,1 > > _3210){ std::shared_ptr< monty::ndarray< long long,1 > > _3211 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< int,1 > > _3212 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8431 = (int)0; int _8432 = (int)((_3208)->size(0)); for (int _3213 = _8431;_3213<_8432;++_3213){ { long long _3214 = (long long)((*_3208)(_3213)); int _8433 = (int)0; int _8434 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3215 = _8433;_3215<_8434;++_3215){ (((*_3212)(_3215)) = (int)(_3214 / shape_p->stride(_3215))); (_3214 = (_3214 - ((long long)((*_3212)(_3215)) * shape_p->stride(_3215)))); }}{ int _3216 = (int)0; while ((((*_3212)(stackdim)) >= ((*consb)((_3216 + (int)1))))) { ( ++ _3216 ); }(((*_3212)(stackdim)) = (((*_3212)(stackdim)) - ((*consb)(_3216)))); (((*_3211)((int)0)) = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*cons)(_3216)))->shape_p.get())->linearidx(_3212)); mosek::fusion::p_Constraint::_get_impl(((*cons)(_3216)).get())->level_values(_3211,(_3209 + _3213),_3210); }}}void mosek::fusion::p_CompoundConstraint::add( std::shared_ptr< monty::ndarray< long long,1 > > _3217,std::shared_ptr< monty::ndarray< int,1 > > _3218,std::shared_ptr< monty::ndarray< double,1 > > _3219,std::shared_ptr< monty::ndarray< double,1 > > _3220,int _3221,std::shared_ptr< monty::ndarray< int,1 > > _3222,int _3223){ throw ::mosek::fusion::UnimplementedError(std::string ("Functionality not implemented yet."));}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::CompoundConstraint::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3224,    std::shared_ptr< monty::ndarray< int,1 > > _3225) { return mosek::fusion::p_CompoundConstraint::_get_impl(this)->slice(_3224,_3225); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_CompoundConstraint::slice( std::shared_ptr< monty::ndarray< int,1 > > _3224,std::shared_ptr< monty::ndarray< int,1 > > _3225){ throw ::mosek::fusion::UnimplementedError(std::string ("Compound constraints cannot be sliced"));}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::CompoundConstraint::slice  ( int _3226,    int _3227) { return mosek::fusion::p_CompoundConstraint::_get_impl(this)->slice(_3226,_3227); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_CompoundConstraint::slice( int _3226,int _3227){ throw ::mosek::fusion::UnimplementedError(std::string ("Compound constraints cannot be sliced"));}monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_CompoundConstraint::compute_shape( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3228,int _3229){ monty::rc_ptr< ::mosek::fusion::Set > _3230 = ((*_3228)((int)0))->shape(); int _3231 = (int)0; int _8435 = (int)0; int _8436 = (int)((_3228)->size(0)); for (int _3232 = _8435;_3232<_8436;++_3232){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3228)(_3232)))->shape_p)->size > (int)0)){ if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Constraint::_get_impl(((*_3228)(_3232)))->shape_p)->nd != mosek::fusion::p_Set::_get_impl(_3230)->nd)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}{ int _3233 = (int)0; for (;(_3233 < mosek::fusion::p_Set::_get_impl(_3230)->nd);( ++ _3233 )){ if (((_3233 != _3229) && (_3230->dim(_3233) != mosek::fusion::p_Constraint::_get_impl(((*_3228)(_3232)))->shape_p->dim(_3233)))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching variable shape"));}else {}}}(_3231 = (_3231 + mosek::fusion::p_Constraint::_get_impl(((*_3228)(_3232)))->shape_p->dim(_3229))); }else { throw ::mosek::fusion::DimensionError(std::string ("Empty element in compound variable"));}}if ((mosek::fusion::p_Set::_get_impl(_3230)->nd == (int)1)){ return ::mosek::fusion::p_IntSet::_new_IntSet(_3231); }else { std::shared_ptr< monty::ndarray< int,1 > > _3234 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8437; for (int _3235=(int)0, _8438=mosek::fusion::p_Set::_get_impl(_3230)->nd; _3235 < _8438;++_3235)_8437.push_back(_3230->dim(_3235)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8437.size()),_8437.begin(),_8437.end())); })(); (((*_3234)(_3229)) = _3231); return ::mosek::fusion::p_NDSet::_new_NDSet(_3234); }}int mosek::fusion::p_CompoundConstraint::count_numcon( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3236){ int _3237 = (int)0; { int _3238 = (int)0; for (;(_3238 < (int)((_3236)->size(0)));( ++ _3238 )){ monty::rc_ptr< ::mosek::fusion::Constraint > _3239 = ((*_3236)(_3238)); monty::rc_ptr< ::mosek::fusion::Constraint > _8439 = _3239; if (nullptr != dynamic_cast< ::mosek::fusion::CompoundConstraint* >(_8439.get())) {::mosek::fusion::CompoundConstraint::t _3240(dynamic_cast< ::mosek::fusion::CompoundConstraint* >(_8439.get()));{ (_3237 = (_3237 + (int)((mosek::fusion::p_CompoundConstraint::_get_impl(_3240)->cons)->size(0)))); }}else {mosek::fusion::Constraint::t _3241 = _8439;{ ( ++ _3237 ); }}}}return _3237; }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_CompoundConstraint::model_from_con( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3242){ return mosek::fusion::p_Constraint::_get_impl(((*_3242)((int)0)))->model; }void mosek::fusion::p_CompoundConstraint::destroy(){consb.reset();cons.reset();}void mosek::fusion::CompoundConstraint::destroy() { mosek::fusion::p_CompoundConstraint::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint(mosek::fusion::p_BoundInterfaceConstraint *_impl) : mosek::fusion::SliceConstraint(_impl) { /*std::cout << "BoundInterfaceConstraint()" << this << std::endl; */ }mosek::fusion::BoundInterfaceConstraint::~BoundInterfaceConstraint() {  /* std::cout << "~BoundInterfaceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceConstraint::p_BoundInterfaceConstraint  (::mosek::fusion::BoundInterfaceConstraint * _pubthis) :     mosek::fusion::p_SliceConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3243,    monty::rc_ptr< ::mosek::fusion::Set > _3244,    long long _3245,    std::shared_ptr< monty::ndarray< long long,1 > > _3246,    bool _3247){ return new mosek::fusion::BoundInterfaceConstraint(_3243,_3244,_3245,_3246,_3247); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3243,    monty::rc_ptr< ::mosek::fusion::Set > _3244,    long long _3245,    std::shared_ptr< monty::ndarray< long long,1 > > _3246,    bool _3247) :    BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this)){ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_3243,_3244,_3245,_3246,_3247); }void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3243,    monty::rc_ptr< ::mosek::fusion::Set > _3244,    long long _3245,    std::shared_ptr< monty::ndarray< long long,1 > > _3246,    bool _3247){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_SliceConstraint::_initialize(_3243,_3244,_3245,_3246);(origincon = _3243); (islower = _3247); }}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::slice_( monty::rc_ptr< ::mosek::fusion::Set > _3248,long long _3249,std::shared_ptr< monty::ndarray< long long,1 > > _3250){ return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(origincon,_3248,_3249,_3250,islower); }void mosek::fusion::p_BoundInterfaceConstraint::dual_values( long long _3251,std::shared_ptr< monty::ndarray< int,1 > > _3252,std::shared_ptr< monty::ndarray< long long,1 > > _3253,int _3254,std::shared_ptr< monty::ndarray< double,1 > > _3255){ if (islower){ mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_l(_3251,_3252,_3253,_3254,_3255); }else { mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_u(_3251,_3252,_3253,_3254,_3255); }}void mosek::fusion::p_BoundInterfaceConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3256,int _3257,std::shared_ptr< monty::ndarray< double,1 > > _3258){ if (islower){ mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_l(_3256,_3257,_3258); }else { mosek::fusion::p_RangedConstraint::_get_impl(origincon.get())->dual_u(_3256,_3257,_3258); }}void mosek::fusion::p_BoundInterfaceConstraint::destroy(){origincon.reset();}void mosek::fusion::BoundInterfaceConstraint::destroy() { mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->destroy(); }mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceConstraint::p_SliceConstraint  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3259,    monty::rc_ptr< ::mosek::fusion::Set > _3260,    long long _3261,    std::shared_ptr< monty::ndarray< long long,1 > > _3262){ return new mosek::fusion::SliceConstraint(_3259,_3260,_3261,_3262); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3259,    monty::rc_ptr< ::mosek::fusion::Set > _3260,    long long _3261,    std::shared_ptr< monty::ndarray< long long,1 > > _3262) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_3259,_3260,_3261,_3262); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3259,    monty::rc_ptr< ::mosek::fusion::Set > _3260,    long long _3261,    std::shared_ptr< monty::ndarray< long long,1 > > _3262){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(mosek::fusion::p_Constraint::_get_impl(_3259)->model,_3260);(origin = _3259); (first = _3261); (strides = _3262); }}void mosek::fusion::p_SliceConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3263,std::shared_ptr< monty::ndarray< long long,1 > > _3264,std::shared_ptr< monty::ndarray< int,1 > > _3265,std::shared_ptr< monty::ndarray< int,1 > > _3266,std::shared_ptr< monty::ndarray< int,1 > > _3267,std::shared_ptr< monty::ndarray< double,1 > > _3268,std::shared_ptr< monty::ndarray< double,1 > > _3269,long long _3270,int _3271,int _3272){ long long _3273 = (((*_3264)((_3271 + _3272))) - ((*_3264)(_3271))); std::shared_ptr< monty::ndarray< long long,1 > > _3274 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3272))); std::shared_ptr< monty::ndarray< long long,1 > > _3275 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_3272 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _3276 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _3269) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3272)))); })(); int _8440 = (int)0; int _8441 = (_3272 + (int)1); for (int _3277 = _8440;_3277<_8441;++_3277){ (((*_3275)(_3277)) = ((*_3264)((_3271 + _3277)))); }if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd == (int)1)){ int _8442 = (int)0; int _8443 = _3272; for (int _3278 = _8442;_3278<_8443;++_3278){ (((*_3274)(_3278)) = ((((*_3263)((_3278 + _3271))) - _3270) + first)); }}else { int _8444 = (int)0; int _8445 = _3272; for (int _3279 = _8444;_3279<_8445;++_3279){ std::shared_ptr< monty::ndarray< int,1 > > _3280 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey((((*_3263)((_3271 + _3279))) - _3270)); long long _3281 = (long long)0; int _8446 = (int)0; int _8447 = (int)((_3280)->size(0)); for (int _3282 = _8446;_3282<_8447;++_3282){ (_3281 = (_3281 + ((long long)((*_3280)(_3282)) * ((*strides)(_3282))))); }(((*_3274)(_3279)) = _3281); }}if (_3269){ ::mosek::fusion::Utils::Tools::arraycopy(_3269,_3271,_3276,(int)0,_3272); }else {}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->add_l(_3274,_3275,_3265,_3266,_3267,_3268,_3276,(long long)0,(int)0,_3272); }void mosek::fusion::p_SliceConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3283,std::shared_ptr< monty::ndarray< double,1 > > _3284,long long _3285,int _3286,int _3287){ std::shared_ptr< monty::ndarray< long long,1 > > _3288 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3287))); std::shared_ptr< monty::ndarray< double,1 > > _3289 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3287))); ::mosek::fusion::Utils::Tools::arraycopy(_3284,_3286,_3289,(int)0,_3287); int _8448 = (int)0; int _8449 = _3287; for (int _3290 = _8448;_3290<_8449;++_3290){ std::shared_ptr< monty::ndarray< int,1 > > _3291 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3283)((_3286 + _3290)))); long long _3292 = (long long)0; int _8450 = (int)0; int _8451 = (int)((_3291)->size(0)); for (int _3293 = _8450;_3293<_8451;++_3293){ (_3292 = (_3292 + ((long long)((*_3291)(_3293)) * ((*strides)(_3293))))); }(((*_3288)(_3290)) = _3292); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->add_fx(_3288,_3289,(long long)0,(int)0,_3287); }void mosek::fusion::p_SliceConstraint::dual_values( long long _3294,std::shared_ptr< monty::ndarray< int,1 > > _3295,std::shared_ptr< monty::ndarray< long long,1 > > _3296,int _3297,std::shared_ptr< monty::ndarray< double,1 > > _3298){ if (((_3294 == (long long)0) && (((int)((_3295)->size(0)) == (int)1) && ((((*_3295)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_3296)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _3299 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8452; for (int _3300=(int)0, _8453=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3300 < _8453;++_3300)_8452.push_back(shape_p->dim(_3300)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8452.size()),_8452.begin(),_8452.end())); })(); mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(first,_3299,strides,_3297,_3298); }else { int _3301 = (int)((_3295)->size(0)); bool _3302 = (_3301 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _3303 = (int)0; for (;((_3303 < _3301) && _3302);( ++ _3303 )){ (_3302 = (((*_3296)(_3303)) == shape_p->stride(_3303))); }}if (_3302){ long long _3304 = first; { long long _3305 = _3294; int _8454 = (int)0; int _8455 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _3306 = _8454;_3306<_8455;++_3306){ long long _3307 = (_3305 / ((*_3296)(_3306))); (_3305 = (_3305 - (((*_3296)(_3306)) * _3307))); (_3304 = (_3304 + (shape_p->stride(_3306) * _3307))); }}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(_3304,_3295,strides,_3297,_3298); }else { long long _3308 = (long long)1; int _8456 = (int)0; int _8457 = (int)((_3295)->size(0)); for (int _3309 = _8456;_3309<_8457;++_3309){ (_3308 = (_3308 * ((*_3295)(_3309)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3310 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3308))); { std::shared_ptr< monty::ndarray< int,1 > > _3311 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3295)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _3312 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3295)->size(0))))); int _8458 = (int)0; int _8459 = (int)((_3295)->size(0)); for (int _3313 = _8458;_3313<_8459;++_3313){ (((*_3312)(_3313)) = (long long)0); }long long _8460 = (long long)0; long long _8461 = _3308; for (long long _3314 = _8460;_3314<_8461;++_3314){ { long long _3315 = (_3294 + ((*_3312)((int)0))); long long _3316 = (long long)0; int _8462 = (int)0; int _8463 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3317 = _8462;_3317<_8463;++_3317){ long long _3318 = (_3315 / shape_p->stride(_3317)); (_3316 = (_3316 + (((*strides)(_3317)) * _3318))); (_3315 = (_3315 - (_3318 * shape_p->stride(_3317)))); }(((*_3310)(_3314)) = _3316); }{ int _3319 = (int)0; ( ++ ((*_3311)((int)0)) ); (((*_3312)((int)0)) = (((*_3312)((int)0)) + ((*_3296)((_3301 - (int)1))))); while (((_3319 < (_3301 - (int)1)) && (((*_3311)(_3319)) >= ((*_3295)(((_3301 - _3319) - (int)1)))))) { (((*_3312)(_3319)) = (long long)0); (((*_3312)(_3319)) = (((*_3312)(_3319)) + ((*_3296)(((_3301 - _3319) - (int)1))))); (((*_3311)(_3319)) = (int)0); ( ++ ((*_3311)((_3319 + (int)1))) ); ( ++ _3319 ); }int _8464 = (int)0; int _8465 = _3319; for (int _3320 = _8464;_3320<_8465;++_3320){ (((*_3312)(_3320)) = ((*_3312)(_3319))); }}}}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(_3310,_3297,_3298); }}}void mosek::fusion::p_SliceConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3321,int _3322,std::shared_ptr< monty::ndarray< double,1 > > _3323){ std::shared_ptr< monty::ndarray< long long,1 > > _3324 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3321)->size(0))))); int _8466 = (int)0; int _8467 = (int)((_3321)->size(0)); for (int _3325 = _8466;_3325<_8467;++_3325){ std::shared_ptr< monty::ndarray< int,1 > > _3326 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3321)(_3325))); long long _3327 = (long long)0; int _8468 = (int)0; int _8469 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3328 = _8468;_3328<_8469;++_3328){ (_3327 = (_3327 + ((long long)((*_3326)(_3328)) * ((*strides)(_3328))))); }(((*_3324)(_3325)) = _3327); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->dual_values(_3324,_3322,_3323); }void mosek::fusion::p_SliceConstraint::level_values( long long _3329,std::shared_ptr< monty::ndarray< int,1 > > _3330,std::shared_ptr< monty::ndarray< long long,1 > > _3331,int _3332,std::shared_ptr< monty::ndarray< double,1 > > _3333){ if (((_3329 == (long long)0) && (((int)((_3330)->size(0)) == (int)1) && ((((*_3330)((int)0)) == mosek::fusion::p_Set::_get_impl(shape_p)->size) && (((*_3331)((int)0)) == (int)1))))){ std::shared_ptr< monty::ndarray< int,1 > > _3334 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8470; for (int _3335=(int)0, _8471=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3335 < _8471;++_3335)_8470.push_back(shape_p->dim(_3335)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8470.size()),_8470.begin(),_8470.end())); })(); mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(first,_3334,strides,_3332,_3333); }else { int _3336 = (int)((_3330)->size(0)); bool _3337 = (_3336 == mosek::fusion::p_Set::_get_impl(shape_p)->nd); { int _3338 = (int)0; for (;((_3338 < _3336) && _3337);( ++ _3338 )){ (_3337 = (((*_3331)(_3338)) == shape_p->stride(_3338))); }}if (_3337){ long long _3339 = first; { long long _3340 = _3329; int _8472 = (int)0; int _8473 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (int _3341 = _8472;_3341<_8473;++_3341){ long long _3342 = (_3340 / ((*_3331)(_3341))); (_3340 = (_3340 - (((*_3331)(_3341)) * _3342))); (_3339 = (_3339 + (shape_p->stride(_3341) * _3342))); }}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(_3339,_3330,strides,_3332,_3333); }else { long long _3343 = (long long)1; int _8474 = (int)0; int _8475 = (int)((_3330)->size(0)); for (int _3344 = _8474;_3344<_8475;++_3344){ (_3343 = (_3343 * ((*_3330)(_3344)))); }std::shared_ptr< monty::ndarray< long long,1 > > _3345 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3343))); { std::shared_ptr< monty::ndarray< int,1 > > _3346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3330)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _3347 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3330)->size(0))))); long long _8476 = (long long)0; long long _8477 = _3343; for (long long _3348 = _8476;_3348<_8477;++_3348){ { long long _3349 = (_3329 + ((*_3347)((int)0))); long long _3350 = (long long)0; int _8478 = (int)0; int _8479 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3351 = _8478;_3351<_8479;++_3351){ long long _3352 = (_3349 / shape_p->stride(_3351)); (_3350 = (_3350 + (((*strides)(_3351)) * _3352))); (_3349 = (_3349 - (_3352 * shape_p->stride(_3351)))); }(((*_3345)(_3348)) = _3350); }{ int _3353 = (int)0; ( ++ ((*_3346)((int)0)) ); (((*_3347)((int)0)) = (((*_3347)((int)0)) + ((*_3331)((_3336 - (int)1))))); while (((_3353 < (_3336 - (int)1)) && (((*_3346)(_3353)) >= ((*_3330)(((_3336 - _3353) - (int)1)))))) { (((*_3347)(_3353)) = (long long)0); (((*_3347)(_3353)) = (((*_3347)(_3353)) + ((*_3331)(((_3336 - _3353) - (int)1))))); (((*_3346)(_3353)) = (int)0); ( ++ ((*_3346)((_3353 + (int)1))) ); ( ++ _3353 ); }int _8480 = (int)0; int _8481 = _3353; for (int _3354 = _8480;_3354<_8481;++_3354){ (((*_3347)(_3354)) = ((*_3347)(_3353))); }}}}mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(_3345,_3332,_3333); }}}void mosek::fusion::p_SliceConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3355,int _3356,std::shared_ptr< monty::ndarray< double,1 > > _3357){ std::shared_ptr< monty::ndarray< long long,1 > > _3358 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3355)->size(0))))); int _8482 = (int)0; int _8483 = (int)((_3355)->size(0)); for (int _3359 = _8482;_3359<_8483;++_3359){ std::shared_ptr< monty::ndarray< int,1 > > _3360 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3355)(_3359))); long long _3361 = (long long)0; int _8484 = (int)0; int _8485 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3362 = _8484;_3362<_8485;++_3362){ (_3361 = (_3361 + ((long long)((*_3360)(_3362)) * ((*strides)(_3362))))); }(((*_3358)(_3359)) = _3361); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->level_values(_3358,_3356,_3357); }void mosek::fusion::p_SliceConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3363,long long _3364,std::shared_ptr< monty::ndarray< std::string,1 > > _3365){ std::shared_ptr< monty::ndarray< long long,1 > > _3366 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3363)->size(0))))); int _8486 = (int)0; int _8487 = (int)((_3363)->size(0)); for (int _3367 = _8486;_3367<_8487;++_3367){ std::shared_ptr< monty::ndarray< int,1 > > _3368 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*_3363)(_3367))); long long _3369 = (long long)0; int _8488 = (int)0; int _8489 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3370 = _8488;_3370<_8489;++_3370){ (_3369 = (_3369 + ((long long)((*_3368)(_3370)) * ((*strides)(_3370))))); }(((*_3366)(_3367)) = _3369); }mosek::fusion::p_ModelConstraint::_get_impl(origin.get())->toStringArray(_3366,_3364,_3365); }long long mosek::fusion::SliceConstraint::size  ( ) { return mosek::fusion::p_SliceConstraint::_get_impl(this)->size(); }long long mosek::fusion::p_SliceConstraint::size( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->size; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::SliceConstraint::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3371,    std::shared_ptr< monty::ndarray< int,1 > > _3372) { return mosek::fusion::p_SliceConstraint::_get_impl(this)->slice(_3371,_3372); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_SliceConstraint::slice( std::shared_ptr< monty::ndarray< int,1 > > _3371,std::shared_ptr< monty::ndarray< int,1 > > _3372){ monty::rc_ptr< ::mosek::fusion::Set > _3373 = shape_p->slice(_3371,_3372); long long _3374 = first; { int _3375 = (int)0; for (;(_3375 < (int)((_3371)->size(0)));( ++ _3375 )){ (_3374 = (_3374 + ((long long)((*_3371)(_3375)) * ((*strides)(_3375))))); }}return slice_(_3373,_3374,strides); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::SliceConstraint::slice  ( int _3376,    int _3377) { return mosek::fusion::p_SliceConstraint::_get_impl(this)->slice(_3376,_3377); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_SliceConstraint::slice( int _3376,int _3377){ monty::rc_ptr< ::mosek::fusion::Set > _3378 = shape_p->slice(_3376,_3377); return slice_(_3378,(first + _3376),strides); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_SliceConstraint::slice_( monty::rc_ptr< ::mosek::fusion::Set > _3379,long long _3380,std::shared_ptr< monty::ndarray< long long,1 > > _3381){ return ::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(origin,_3379,_3380,_3381); }void mosek::fusion::p_SliceConstraint::destroy(){strides.reset();origin.reset();}void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedConstraint::p_RangedConstraint  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3382,    monty::rc_ptr< ::mosek::fusion::Model > _3383){ return new mosek::fusion::RangedConstraint(_3382,_3383); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3382,    monty::rc_ptr< ::mosek::fusion::Model > _3383) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_3382,_3383); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _3382,    monty::rc_ptr< ::mosek::fusion::Model > _3383){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3382,_3383);(dom = mosek::fusion::p_RangedConstraint::_get_impl(_3382)->dom); (idxmap = nullptr); }}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3384,    const std::string &  _3385,    monty::rc_ptr< ::mosek::fusion::Set > _3386,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _3387,    std::shared_ptr< monty::ndarray< int,1 > > _3388,    std::shared_ptr< monty::ndarray< long long,1 > > _3389,    std::shared_ptr< monty::ndarray< int,1 > > _3390,    std::shared_ptr< monty::ndarray< double,1 > > _3391,    std::shared_ptr< monty::ndarray< double,1 > > _3392,    std::shared_ptr< monty::ndarray< int,1 > > _3393,    std::shared_ptr< monty::ndarray< int,1 > > _3394,    std::shared_ptr< monty::ndarray< int,1 > > _3395){ return new mosek::fusion::RangedConstraint(_3384,_3385,_3386,_3387,_3388,_3389,_3390,_3391,_3392,_3393,_3394,_3395); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3384,    const std::string &  _3385,    monty::rc_ptr< ::mosek::fusion::Set > _3386,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _3387,    std::shared_ptr< monty::ndarray< int,1 > > _3388,    std::shared_ptr< monty::ndarray< long long,1 > > _3389,    std::shared_ptr< monty::ndarray< int,1 > > _3390,    std::shared_ptr< monty::ndarray< double,1 > > _3391,    std::shared_ptr< monty::ndarray< double,1 > > _3392,    std::shared_ptr< monty::ndarray< int,1 > > _3393,    std::shared_ptr< monty::ndarray< int,1 > > _3394,    std::shared_ptr< monty::ndarray< int,1 > > _3395) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_3384,_3385,_3386,_3387,_3388,_3389,_3390,_3391,_3392,_3393,_3394,_3395); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3384,    const std::string &  _3385,    monty::rc_ptr< ::mosek::fusion::Set > _3386,    monty::rc_ptr< ::mosek::fusion::RangeDomain > _3387,    std::shared_ptr< monty::ndarray< int,1 > > _3388,    std::shared_ptr< monty::ndarray< long long,1 > > _3389,    std::shared_ptr< monty::ndarray< int,1 > > _3390,    std::shared_ptr< monty::ndarray< double,1 > > _3391,    std::shared_ptr< monty::ndarray< double,1 > > _3392,    std::shared_ptr< monty::ndarray< int,1 > > _3393,    std::shared_ptr< monty::ndarray< int,1 > > _3394,    std::shared_ptr< monty::ndarray< int,1 > > _3395){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3384,_3385,_3386,_3388,_3389,_3390,_3391,_3392,_3393,_3394,_3395);(dom = _3387); (idxmap = nullptr); }}void mosek::fusion::p_RangedConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3396,std::shared_ptr< monty::ndarray< double,1 > > _3397,long long _3398,int _3399,int _3400){ std::shared_ptr< monty::ndarray< double,1 > > _3401 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3400))); std::shared_ptr< monty::ndarray< double,1 > > _3402 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3400))); std::shared_ptr< monty::ndarray< int,1 > > _3403 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3400))); int _8490 = (int)0; int _8491 = _3400; for (int _3404 = _8490;_3404<_8491;++_3404){ (((*_3403)(_3404)) = ((*nativeindexes)((((*_3396)((_3399 + _3404))) - _3398)))); }int _8492 = (int)0; int _8493 = (int)((_3401)->size(0)); for (int _3405 = _8492;_3405<_8493;++_3405){ (((*_3401)(_3405)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item((((*_3396)((_3399 + _3405))) - _3398)) - ((*_3397)((((*_3396)((_3399 + _3405))) - _3398))))); (((*_3402)(_3405)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item((((*_3396)((_3399 + _3405))) - _3398)) - ((*_3397)((((*_3396)((_3399 + _3405))) - _3398))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_ra(_3403,_3401,_3402); }void mosek::fusion::p_RangedConstraint::dual_u( long long _3406,std::shared_ptr< monty::ndarray< int,1 > > _3407,std::shared_ptr< monty::ndarray< long long,1 > > _3408,int _3409,std::shared_ptr< monty::ndarray< double,1 > > _3410){ long long _3411 = (long long)1; int _3412 = (int)((_3408)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3413 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3406,_3407,_3408); std::shared_ptr< monty::ndarray< double,1 > > _3414 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_suc(::mosek::fusion::SolutionType::Default); int _8494 = (int)0; int _8495 = _3412; for (int _3415 = _8494;_3415<_8495;++_3415){ (_3411 = (_3411 * ((*_3407)(_3415)))); }if (nativeindexes){ long long _8496 = (long long)0; long long _8497 = _3411; for (long long _3416 = _8496;_3416<_8497;++_3416){ (((*_3410)((_3416 + _3409))) = (((*_3414)(((*nativeindexes)(_3413->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3413->get())))); _3413->inc(); }}else { long long _8498 = (long long)0; long long _8499 = _3411; for (long long _3417 = _8498;_3417<_8499;++_3417){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3413->get())){ (((*_3410)(_3417)) = (((*_3414)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3413->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3413->get())))); }else { (((*_3410)(_3417)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3413->get())); }_3413->inc(); }}}void mosek::fusion::p_RangedConstraint::dual_u( std::shared_ptr< monty::ndarray< long long,1 > > _3418,int _3419,std::shared_ptr< monty::ndarray< double,1 > > _3420){ std::shared_ptr< monty::ndarray< double,1 > > _3421 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_suc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8500 = (int)0; int _8501 = (int)((_3418)->size(0)); for (int _3422 = _8500;_3422<_8501;++_3422){ (((*_3420)((_3419 + _3422))) = (((*_3421)(((*nativeindexes)(((*_3418)(_3422)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3418)(_3422)))))); }}else { int _8502 = (int)0; int _8503 = (int)((_3418)->size(0)); for (int _3423 = _8502;_3423<_8503;++_3423){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3418)(_3423)))){ (((*_3420)((_3419 + _3423))) = (((*_3421)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3418)(_3423))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3418)(_3423)))))); }else { (((*_3420)((_3419 + _3423))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3418)(_3423)))); }}}}void mosek::fusion::p_RangedConstraint::dual_l( long long _3424,std::shared_ptr< monty::ndarray< int,1 > > _3425,std::shared_ptr< monty::ndarray< long long,1 > > _3426,int _3427,std::shared_ptr< monty::ndarray< double,1 > > _3428){ long long _3429 = (long long)1; int _3430 = (int)((_3426)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3431 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3424,_3425,_3426); std::shared_ptr< monty::ndarray< double,1 > > _3432 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slc(::mosek::fusion::SolutionType::Default); int _8504 = (int)0; int _8505 = _3430; for (int _3433 = _8504;_3433<_8505;++_3433){ (_3429 = (_3429 * ((*_3425)(_3433)))); }if (nativeindexes){ long long _8506 = (long long)0; long long _8507 = _3429; for (long long _3434 = _8506;_3434<_8507;++_3434){ (((*_3428)((_3434 + _3427))) = (((*_3432)(((*nativeindexes)(_3431->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3431->get())))); _3431->inc(); }}else { long long _8508 = (long long)0; long long _8509 = _3429; for (long long _3435 = _8508;_3435<_8509;++_3435){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3431->get())){ (((*_3428)(_3435)) = (((*_3432)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3431->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3431->get())))); }else { (((*_3428)(_3435)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3431->get())); }_3431->inc(); }}}void mosek::fusion::p_RangedConstraint::dual_l( std::shared_ptr< monty::ndarray< long long,1 > > _3436,int _3437,std::shared_ptr< monty::ndarray< double,1 > > _3438){ std::shared_ptr< monty::ndarray< double,1 > > _3439 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_slc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8510 = (int)0; int _8511 = (int)((_3436)->size(0)); for (int _3440 = _8510;_3440<_8511;++_3440){ (((*_3438)((_3437 + _3440))) = (((*_3439)(((*nativeindexes)(((*_3436)(_3440)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3436)(_3440)))))); }}else { int _8512 = (int)0; int _8513 = (int)((_3436)->size(0)); for (int _3441 = _8512;_3441<_8513;++_3441){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3436)(_3441)))){ (((*_3438)((_3437 + _3441))) = (((*_3439)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3436)(_3441))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3436)(_3441)))))); }else { (((*_3438)((_3437 + _3441))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3436)(_3441)))); }}}}void mosek::fusion::p_RangedConstraint::dual_values( long long _3442,std::shared_ptr< monty::ndarray< int,1 > > _3443,std::shared_ptr< monty::ndarray< long long,1 > > _3444,int _3445,std::shared_ptr< monty::ndarray< double,1 > > _3446){ long long _3447 = (long long)1; int _3448 = (int)((_3444)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3449 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3442,_3443,_3444); std::shared_ptr< monty::ndarray< double,1 > > _3450 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); int _8514 = (int)0; int _8515 = _3448; for (int _3451 = _8514;_3451<_8515;++_3451){ (_3447 = (_3447 * ((*_3443)(_3451)))); }if (nativeindexes){ long long _8516 = (long long)0; long long _8517 = _3447; for (long long _3452 = _8516;_3452<_8517;++_3452){ (((*_3446)((_3452 + _3445))) = (((*_3450)(((*nativeindexes)(_3449->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3449->get())))); _3449->inc(); }}else { long long _8518 = (long long)0; long long _8519 = _3447; for (long long _3453 = _8518;_3453<_8519;++_3453){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3449->get())){ (((*_3446)(_3453)) = (((*_3450)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3449->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3449->get())))); }else { (((*_3446)(_3453)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3449->get())); }_3449->inc(); }}}void mosek::fusion::p_RangedConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3454,int _3455,std::shared_ptr< monty::ndarray< double,1 > > _3456){ std::shared_ptr< monty::ndarray< double,1 > > _3457 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8520 = (int)0; int _8521 = (int)((_3454)->size(0)); for (int _3458 = _8520;_3458<_8521;++_3458){ (((*_3456)((_3455 + _3458))) = (((*_3457)(((*nativeindexes)(((*_3454)(_3458)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3454)(_3458)))))); }}else { int _8522 = (int)0; int _8523 = (int)((_3454)->size(0)); for (int _3459 = _8522;_3459<_8523;++_3459){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3454)(_3459)))){ (((*_3456)((_3455 + _3459))) = (((*_3457)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3454)(_3459))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3454)(_3459)))))); }else { (((*_3456)((_3455 + _3459))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3454)(_3459)))); }}}}void mosek::fusion::p_RangedConstraint::level_values( long long _3460,std::shared_ptr< monty::ndarray< int,1 > > _3461,std::shared_ptr< monty::ndarray< long long,1 > > _3462,int _3463,std::shared_ptr< monty::ndarray< double,1 > > _3464){ long long _3465 = (long long)1; int _3466 = (int)((_3462)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3467 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3460,_3461,_3462); std::shared_ptr< monty::ndarray< double,1 > > _3468 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8524 = (int)0; int _8525 = _3466; for (int _3469 = _8524;_3469<_8525;++_3469){ (_3465 = (_3465 * ((*_3461)(_3469)))); }if (nativeindexes){ long long _8526 = (long long)0; long long _8527 = _3465; for (long long _3470 = _8526;_3470<_8527;++_3470){ (((*_3464)((_3470 + _3463))) = (((*_3468)(((*nativeindexes)(_3467->get())))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3467->get())))); _3467->inc(); }}else { long long _8528 = (long long)0; long long _8529 = _3465; for (long long _3471 = _8528;_3471<_8529;++_3471){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3467->get())){ (((*_3464)(_3471)) = (((*_3468)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3467->get()))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3467->get())))); }else { (((*_3464)(_3471)) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(_3467->get())); }_3467->inc(); }}}void mosek::fusion::p_RangedConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3472,int _3473,std::shared_ptr< monty::ndarray< double,1 > > _3474){ std::shared_ptr< monty::ndarray< double,1 > > _3475 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8530 = (int)0; int _8531 = (int)((_3472)->size(0)); for (int _3476 = _8530;_3476<_8531;++_3476){ (((*_3474)((_3473 + _3476))) = (((*_3475)(((*nativeindexes)(((*_3472)(_3476)))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3472)(_3476)))))); }}else { int _8532 = (int)0; int _8533 = (int)((_3472)->size(0)); for (int _3477 = _8532;_3477<_8533;++_3477){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3472)(_3477)))){ (((*_3474)((_3473 + _3477))) = (((*_3475)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3472)(_3477))))) + ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(((*_3472)(_3477)))))); }else { (((*_3474)((_3473 + _3477))) = mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3472)(_3477)))); }}}}void mosek::fusion::p_RangedConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3478,std::shared_ptr< monty::ndarray< long long,1 > > _3479,std::shared_ptr< monty::ndarray< int,1 > > _3480,std::shared_ptr< monty::ndarray< int,1 > > _3481,std::shared_ptr< monty::ndarray< int,1 > > _3482,std::shared_ptr< monty::ndarray< double,1 > > _3483,std::shared_ptr< monty::ndarray< double,1 > > _3484,int _3485,int _3486,int _3487){ add_l(_3478,_3479,_3480,_3481,_3482,_3483,_3484,_3485,_3486,_3487); if (_3484){ long long _3488 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_RangeDomain::_get_impl(dom)->shape)->size; std::shared_ptr< monty::ndarray< double,1 > > _3489 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3488))); std::shared_ptr< monty::ndarray< double,1 > > _3490 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3488))); std::shared_ptr< monty::ndarray< int,1 > > _3491 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3487))); int _8534 = (int)0; int _8535 = _3487; for (int _3492 = _8534;_3492<_8535;++_3492){ (((*_3489)(_3492)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_lb_item(((*_3478)(_3492))) - ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3492)))); (((*_3490)(_3492)) = (mosek::fusion::p_RangeDomain::_get_impl(dom.get())->get_ub_item(((*_3478)(_3492))) - ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix)(_3492)))); (((*_3491)(_3492)) = ((*nativeindexes)(((*_3478)(_3492))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_ra(_3491,_3489,_3490); }else {}}void mosek::fusion::p_RangedConstraint::domainToString( long long _3493,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3494){ mosek::fusion::p_RangeDomain::_get_impl(dom.get())->domainToString(_3493,_3494); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::RangedConstraint::upperBoundCon  ( ) { return mosek::fusion::p_RangedConstraint::_get_impl(this)->upperBoundCon(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_RangedConstraint::upperBoundCon( ){ std::shared_ptr< monty::ndarray< long long,1 > > _3495 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3495)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _3496 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_3496 > (int)0);( -- _3496 )){ (((*_3495)((_3496 - (int)1))) = (((*_3495)(_3496)) * shape_p->dim(_3496))); }}return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis,shape_p,(long long)0,_3495,false); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::RangedConstraint::lowerBoundCon  ( ) { return mosek::fusion::p_RangedConstraint::_get_impl(this)->lowerBoundCon(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_RangedConstraint::lowerBoundCon( ){ std::shared_ptr< monty::ndarray< long long,1 > > _3497 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3497)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _3498 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_3498 > (int)0);( -- _3498 )){ (((*_3497)((_3498 - (int)1))) = (((*_3497)(_3498)) * shape_p->dim(_3498))); }}return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis,shape_p,(long long)0,_3497,true); }monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3499){ return ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(_pubthis,_3499); }void mosek::fusion::p_RangedConstraint::destroy(){idxmap.reset();dom.reset();}void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicConstraint::p_ConicConstraint  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _3500,    monty::rc_ptr< ::mosek::fusion::Model > _3501){ return new mosek::fusion::ConicConstraint(_3500,_3501); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _3500,    monty::rc_ptr< ::mosek::fusion::Model > _3501) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_3500,_3501); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _3500,    monty::rc_ptr< ::mosek::fusion::Model > _3501){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3500,_3501);(first_slack = mosek::fusion::p_ConicConstraint::_get_impl(_3500)->first_slack); (last_slack = mosek::fusion::p_ConicConstraint::_get_impl(_3500)->last_slack); (first = mosek::fusion::p_ConicConstraint::_get_impl(_3500)->first); (last = mosek::fusion::p_ConicConstraint::_get_impl(_3500)->last); (dom = mosek::fusion::p_ConicConstraint::_get_impl(_3500)->dom); (conesize = mosek::fusion::p_ConicConstraint::_get_impl(_3500)->conesize); (coneidx = mosek::fusion::p_ConicConstraint::_get_impl(_3500)->coneidx); (names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_3500)->names_flushed); }}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3502,    const std::string &  _3503,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _3504,    monty::rc_ptr< ::mosek::fusion::Set > _3505,    std::shared_ptr< monty::ndarray< int,1 > > _3506,    int _3507,    int _3508,    int _3509,    int _3510,    int _3511,    std::shared_ptr< monty::ndarray< long long,1 > > _3512,    std::shared_ptr< monty::ndarray< int,1 > > _3513,    std::shared_ptr< monty::ndarray< double,1 > > _3514,    std::shared_ptr< monty::ndarray< double,1 > > _3515,    std::shared_ptr< monty::ndarray< int,1 > > _3516,    std::shared_ptr< monty::ndarray< int,1 > > _3517,    std::shared_ptr< monty::ndarray< int,1 > > _3518){ return new mosek::fusion::ConicConstraint(_3502,_3503,_3504,_3505,_3506,_3507,_3508,_3509,_3510,_3511,_3512,_3513,_3514,_3515,_3516,_3517,_3518); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3502,    const std::string &  _3503,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _3504,    monty::rc_ptr< ::mosek::fusion::Set > _3505,    std::shared_ptr< monty::ndarray< int,1 > > _3506,    int _3507,    int _3508,    int _3509,    int _3510,    int _3511,    std::shared_ptr< monty::ndarray< long long,1 > > _3512,    std::shared_ptr< monty::ndarray< int,1 > > _3513,    std::shared_ptr< monty::ndarray< double,1 > > _3514,    std::shared_ptr< monty::ndarray< double,1 > > _3515,    std::shared_ptr< monty::ndarray< int,1 > > _3516,    std::shared_ptr< monty::ndarray< int,1 > > _3517,    std::shared_ptr< monty::ndarray< int,1 > > _3518) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_3502,_3503,_3504,_3505,_3506,_3507,_3508,_3509,_3510,_3511,_3512,_3513,_3514,_3515,_3516,_3517,_3518); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3502,    const std::string &  _3503,    monty::rc_ptr< ::mosek::fusion::QConeDomain > _3504,    monty::rc_ptr< ::mosek::fusion::Set > _3505,    std::shared_ptr< monty::ndarray< int,1 > > _3506,    int _3507,    int _3508,    int _3509,    int _3510,    int _3511,    std::shared_ptr< monty::ndarray< long long,1 > > _3512,    std::shared_ptr< monty::ndarray< int,1 > > _3513,    std::shared_ptr< monty::ndarray< double,1 > > _3514,    std::shared_ptr< monty::ndarray< double,1 > > _3515,    std::shared_ptr< monty::ndarray< int,1 > > _3516,    std::shared_ptr< monty::ndarray< int,1 > > _3517,    std::shared_ptr< monty::ndarray< int,1 > > _3518){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3502,_3503,_3505,_3506,_3512,_3513,_3514,_3515,_3516,_3517,_3518);(first_slack = _3507); (last_slack = _3508); (first = _3510); (last = (_3510 + _3511)); (dom = _3504); (conesize = _3509); (coneidx = _3510); (names_flushed = false); }}void mosek::fusion::p_ConicConstraint::flushNames( ){ ::mosek::fusion::p_ModelConstraint::flushNames(); if (((! names_flushed) && ((int)((name).size()) > (int)0))){ int _8536 = first_slack; int _8537 = last_slack; for (int _3519 = _8536;_3519<_8537;++_3519){ mosek::fusion::p_Model::_get_impl(model.get())->task_var_name(_3519,([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)((_3519 - first_slack)))).get())->a(std::string ("].coneslack")).get())->toString()); })()); }int _8538 = first; int _8539 = last; for (int _3520 = _8538;_3520<_8539;++_3520){ mosek::fusion::p_Model::_get_impl(model.get())->task_cone_name(_3520,([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a((_3520 - first)).get())->a(std::string ("]")).get())->toString()); })()); }(names_flushed = true); }else {}}std::string mosek::fusion::ConicConstraint::toString  ( ) { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicConstraint::toString( ){ long long _3521 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _3522 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_3521))); toStringArray(::mosek::fusion::Utils::Tools::range(_3521),(long long)0,_3522); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3523 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3523.get())->a(std::string ("ConicConstraint( (")).get())->a(shape_p->dim((int)0)); int _8540 = (int)1; int _8541 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3524 = _8540;_3524<_8541;++_3524){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3523.get())->a(std::string (",")).get())->a(shape_p->dim(_3524)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3523.get())->a(std::string ("),")); if ((mosek::fusion::p_QConeDomain::_get_impl(dom)->key == ::mosek::fusion::QConeKey::InQCone)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3523.get())->a(std::string (" QuadCone,")).get())->lf(); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3523.get())->a(std::string (" RotatedQuadCone,")).get())->lf(); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3523.get())->a(std::string ("  ")).get())->a(((*_3522)((int)0))); int _8542 = (int)1; int _8543 = (int)((_3522)->size(0)); for (int _3525 = _8542;_3525<_8543;++_3525){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3523.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_3522)(_3525))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3523.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3523.get())->toString(); }void mosek::fusion::p_ConicConstraint::dual_values( long long _3526,std::shared_ptr< monty::ndarray< int,1 > > _3527,std::shared_ptr< monty::ndarray< long long,1 > > _3528,int _3529,std::shared_ptr< monty::ndarray< double,1 > > _3530){ long long _3531 = (long long)1; int _3532 = (int)((_3528)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3533 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3526,_3527,_3528); std::shared_ptr< monty::ndarray< double,1 > > _3534 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default); int _8544 = (int)0; int _8545 = _3532; for (int _3535 = _8544;_3535<_8545;++_3535){ (_3531 = (_3531 * ((*_3527)(_3535)))); }long long _8546 = (long long)0; long long _8547 = _3531; for (long long _3536 = _8546;_3536<_8547;++_3536){ (((*_3530)((_3536 + _3529))) = ((*_3534)(((long long)first_slack + _3533->get())))); _3533->inc(); }}void mosek::fusion::p_ConicConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3537,int _3538,std::shared_ptr< monty::ndarray< double,1 > > _3539){ std::shared_ptr< monty::ndarray< double,1 > > _3540 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default); int _8548 = (int)0; int _8549 = (int)((_3537)->size(0)); for (int _3541 = _8548;_3541<_8549;++_3541){ (((*_3539)((_3538 + _3541))) = ((*_3540)(((long long)first_slack + ((*_3537)(_3541)))))); }}void mosek::fusion::p_ConicConstraint::level_values( long long _3542,std::shared_ptr< monty::ndarray< int,1 > > _3543,std::shared_ptr< monty::ndarray< long long,1 > > _3544,int _3545,std::shared_ptr< monty::ndarray< double,1 > > _3546){ long long _3547 = (long long)1; int _3548 = (int)((_3544)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3549 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3542,_3543,_3544); std::shared_ptr< monty::ndarray< double,1 > > _3550 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _3551 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8550 = (int)0; int _8551 = _3548; for (int _3552 = _8550;_3552<_8551;++_3552){ (_3547 = (_3547 * ((*_3543)(_3552)))); }long long _8552 = (long long)0; long long _8553 = _3547; for (long long _3553 = _8552;_3553<_8553;++_3553){ (((*_3546)((_3553 + _3545))) = (((*_3550)((first_slack + _3549->get()))) + ((*_3551)(((*nativeindexes)(_3549->get())))))); _3549->inc(); }}void mosek::fusion::p_ConicConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3554,int _3555,std::shared_ptr< monty::ndarray< double,1 > > _3556){ std::shared_ptr< monty::ndarray< double,1 > > _3557 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xx(::mosek::fusion::SolutionType::Default); std::shared_ptr< monty::ndarray< double,1 > > _3558 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8554 = (int)0; int _8555 = (int)((_3554)->size(0)); for (int _3559 = _8554;_3559<_8555;++_3559){ (((*_3556)((_3555 + _3559))) = (((*_3558)(((*nativeindexes)(((*_3554)(_3559)))))) + ((*_3557)((first_slack + ((*_3554)(_3559))))))); }}void mosek::fusion::p_ConicConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3560,std::shared_ptr< monty::ndarray< double,1 > > _3561,long long _3562,int _3563,int _3564){ std::shared_ptr< monty::ndarray< double,1 > > _3565 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8556; for (int _3566=(int)0, _8557=_3564; _3566 < _8557;++_3566)_8556.push_back((- ((*_3561)((((*_3560)((_3563 + _3566))) - _3562))))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8556.size()),_8556.begin(),_8556.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _3567 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8558; for (int _3568=(int)0, _8559=_3564; _3568 < _8559;++_3568)_8558.push_back(((*nativeindexes)((((*_3560)((_3563 + _3568))) - _3562)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8558.size()),_8558.begin(),_8558.end())); })(); mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_3567,_3565); }void mosek::fusion::p_ConicConstraint::dual( std::shared_ptr< monty::ndarray< int,1 > > _3569,int _3570,int _3571,int _3572,std::shared_ptr< monty::ndarray< double,1 > > _3573){ if (((_3571 - _3570) > ((int)((_3573)->size(0)) - _3572))){ throw ::mosek::fusion::SliceError(std::string ("Wrong target array length"));}else if (((_3571 < _3570) || (_3571 >= (int)((_3569)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Slice indexes out of bounds"));}else {}std::shared_ptr< monty::ndarray< double,1 > > _3574 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default); { int _3575 = (int)0; for (;(_3575 < (_3571 - _3570));( ++ _3575 )){ (((*_3573)((_3575 + _3572))) = ((*_3574)((first_slack + ((*_3569)((_3570 + _3575))))))); }}}void mosek::fusion::p_ConicConstraint::dual_values( std::shared_ptr< monty::ndarray< int,1 > > _3576,std::shared_ptr< monty::ndarray< int,1 > > _3577,int _3578,std::shared_ptr< monty::ndarray< double,1 > > _3579){ if ((((int)((_3576)->size(0)) != (int)1) || ((int)((_3577)->size(0)) != (int)1))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice dimensions"));}else {}int _3580 = ((*_3576)((int)0)); int _3581 = ((*_3577)((int)0)); if (((_3581 - _3580) > ((int)((_3579)->size(0)) - _3578))){ throw ::mosek::fusion::SliceError(std::string ("Wrong target array length"));}else if (((_3581 < _3580) || (_3581 > (last_slack - first_slack)))){ throw ::mosek::fusion::SliceError(std::string ("Slice indexes out of bounds"));}else {}std::shared_ptr< monty::ndarray< double,1 > > _3582; (_3582 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_snx(::mosek::fusion::SolutionType::Default)); { int _3583 = (int)0; for (;(_3583 < (_3581 - _3580));( ++ _3583 )){ (((*_3579)((_3583 + _3578))) = ((*_3582)(((_3580 + _3583) + first_slack)))); }}}void mosek::fusion::p_ConicConstraint::domainToString( long long _3584,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3585){ mosek::fusion::p_QConeDomain::_get_impl(dom.get())->domainToString(_3584,_3585); }monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3586){ return ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(_pubthis,_3586); }void mosek::fusion::p_ConicConstraint::destroy(){dom.reset();}void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearConstraint::p_LinearConstraint  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _3587,    monty::rc_ptr< ::mosek::fusion::Model > _3588){ return new mosek::fusion::LinearConstraint(_3587,_3588); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _3587,    monty::rc_ptr< ::mosek::fusion::Model > _3588) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_3587,_3588); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _3587,    monty::rc_ptr< ::mosek::fusion::Model > _3588){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3587,_3588);(dom = mosek::fusion::p_LinearConstraint::_get_impl(_3587)->dom); (idxmap = nullptr); }}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3589,    const std::string &  _3590,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _3591,    monty::rc_ptr< ::mosek::fusion::Set > _3592,    std::shared_ptr< monty::ndarray< int,1 > > _3593,    std::shared_ptr< monty::ndarray< long long,1 > > _3594,    std::shared_ptr< monty::ndarray< int,1 > > _3595,    std::shared_ptr< monty::ndarray< double,1 > > _3596,    std::shared_ptr< monty::ndarray< double,1 > > _3597,    std::shared_ptr< monty::ndarray< int,1 > > _3598,    std::shared_ptr< monty::ndarray< int,1 > > _3599,    std::shared_ptr< monty::ndarray< int,1 > > _3600){ return new mosek::fusion::LinearConstraint(_3589,_3590,_3591,_3592,_3593,_3594,_3595,_3596,_3597,_3598,_3599,_3600); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _3589,    const std::string &  _3590,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _3591,    monty::rc_ptr< ::mosek::fusion::Set > _3592,    std::shared_ptr< monty::ndarray< int,1 > > _3593,    std::shared_ptr< monty::ndarray< long long,1 > > _3594,    std::shared_ptr< monty::ndarray< int,1 > > _3595,    std::shared_ptr< monty::ndarray< double,1 > > _3596,    std::shared_ptr< monty::ndarray< double,1 > > _3597,    std::shared_ptr< monty::ndarray< int,1 > > _3598,    std::shared_ptr< monty::ndarray< int,1 > > _3599,    std::shared_ptr< monty::ndarray< int,1 > > _3600) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_3589,_3590,_3591,_3592,_3593,_3594,_3595,_3596,_3597,_3598,_3599,_3600); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3589,    const std::string &  _3590,    monty::rc_ptr< ::mosek::fusion::LinearDomain > _3591,    monty::rc_ptr< ::mosek::fusion::Set > _3592,    std::shared_ptr< monty::ndarray< int,1 > > _3593,    std::shared_ptr< monty::ndarray< long long,1 > > _3594,    std::shared_ptr< monty::ndarray< int,1 > > _3595,    std::shared_ptr< monty::ndarray< double,1 > > _3596,    std::shared_ptr< monty::ndarray< double,1 > > _3597,    std::shared_ptr< monty::ndarray< int,1 > > _3598,    std::shared_ptr< monty::ndarray< int,1 > > _3599,    std::shared_ptr< monty::ndarray< int,1 > > _3600){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_ModelConstraint::_initialize(_3589,_3590,_3592,_3593,_3594,_3595,_3596,_3597,_3598,_3599,_3600);(dom = _3591); (idxmap = nullptr); }}void mosek::fusion::p_LinearConstraint::add_fx( std::shared_ptr< monty::ndarray< long long,1 > > _3601,std::shared_ptr< monty::ndarray< double,1 > > _3602,long long _3603,int _3604,int _3605){ std::shared_ptr< monty::ndarray< double,1 > > _3606; if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::IsFree)){ }else { (_3606 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3605)))); std::shared_ptr< monty::ndarray< int,1 > > _3607 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8560; for (int _3608=(int)0, _8561=_3605; _3608 < _8561;++_3608)_8560.push_back(((*nativeindexes)((((*_3601)((_3604 + _3608))) - _3603)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8560.size()),_8560.begin(),_8560.end())); })(); (_3606 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8562; for (int _3609=(int)0, _8563=_3605; _3609 < _8563;++_3609)_8562.push_back((mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item((((*_3601)((_3604 + _3609))) - _3603)) - ((*_3602)((((*_3601)((_3604 + _3609))) - _3603))))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8562.size()),_8562.begin(),_8562.end())); })()); if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::EqualsTo)){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_fx(_3607,_3606); }else if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::LessThan)){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_up(_3607,_3606); }else if ((mosek::fusion::p_LinearDomain::_get_impl(dom)->key == ::mosek::fusion::RelationKey::GreaterThan)){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_putboundlist_lo(_3607,_3606); }else {}}}void mosek::fusion::p_LinearConstraint::dual_values( long long _3610,std::shared_ptr< monty::ndarray< int,1 > > _3611,std::shared_ptr< monty::ndarray< long long,1 > > _3612,int _3613,std::shared_ptr< monty::ndarray< double,1 > > _3614){ long long _3615 = (long long)1; int _3616 = (int)((_3612)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3617 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3610,_3611,_3612); std::shared_ptr< monty::ndarray< double,1 > > _3618 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); int _8564 = (int)0; int _8565 = _3616; for (int _3619 = _8564;_3619<_8565;++_3619){ (_3615 = (_3615 * ((*_3611)(_3619)))); }if (nativeindexes){ long long _8566 = (long long)0; long long _8567 = _3615; for (long long _3620 = _8566;_3620<_8567;++_3620){ (((*_3614)((_3620 + _3613))) = ((*_3618)(((*nativeindexes)(_3617->get()))))); _3617->inc(); }}else { long long _8568 = (long long)0; long long _8569 = _3615; for (long long _3621 = _8568;_3621<_8569;++_3621){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3617->get())){ (((*_3614)(_3621)) = ((*_3618)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3617->get())))); }else { (((*_3614)(_3621)) = 0.0); }_3617->inc(); }}}void mosek::fusion::p_LinearConstraint::dual_values( std::shared_ptr< monty::ndarray< long long,1 > > _3622,int _3623,std::shared_ptr< monty::ndarray< double,1 > > _3624){ std::shared_ptr< monty::ndarray< double,1 > > _3625 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_y(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8570 = (int)0; int _8571 = (int)((_3622)->size(0)); for (int _3626 = _8570;_3626<_8571;++_3626){ (((*_3624)((_3623 + _3626))) = ((*_3625)(((*nativeindexes)(((*_3622)(_3626))))))); }}else { int _8572 = (int)0; int _8573 = (int)((_3622)->size(0)); for (int _3627 = _8572;_3627<_8573;++_3627){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3622)(_3627)))){ (((*_3624)((_3623 + _3627))) = ((*_3625)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3622)(_3627)))))); }else { (((*_3624)((_3623 + _3627))) = 0.0); }}}}void mosek::fusion::p_LinearConstraint::level_values( long long _3628,std::shared_ptr< monty::ndarray< int,1 > > _3629,std::shared_ptr< monty::ndarray< long long,1 > > _3630,int _3631,std::shared_ptr< monty::ndarray< double,1 > > _3632){ long long _3633 = (long long)1; int _3634 = (int)((_3630)->size(0)); monty::rc_ptr< ::mosek::fusion::IndexCounter > _3635 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_3628,_3629,_3630); std::shared_ptr< monty::ndarray< double,1 > > _3636 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); int _8574 = (int)0; int _8575 = _3634; for (int _3637 = _8574;_3637<_8575;++_3637){ (_3633 = (_3633 * ((*_3629)(_3637)))); }if (nativeindexes){ long long _8576 = (long long)0; long long _8577 = _3633; for (long long _3638 = _8576;_3638<_8577;++_3638){ (((*_3632)((_3638 + _3631))) = ((*_3636)(((*nativeindexes)(_3635->get()))))); _3635->inc(); }}else { long long _8578 = (long long)0; long long _8579 = _3633; for (long long _3639 = _8578;_3639<_8579;++_3639){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_3635->get())){ (((*_3632)(_3639)) = ((*_3636)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_3635->get())))); }else { (((*_3632)(_3639)) = 0.0); }_3635->inc(); }}}void mosek::fusion::p_LinearConstraint::level_values( std::shared_ptr< monty::ndarray< long long,1 > > _3640,int _3641,std::shared_ptr< monty::ndarray< double,1 > > _3642){ std::shared_ptr< monty::ndarray< double,1 > > _3643 = mosek::fusion::p_Model::_get_impl(model.get())->getSolution_xc(::mosek::fusion::SolutionType::Default); if (nativeindexes){ int _8580 = (int)0; int _8581 = (int)((_3640)->size(0)); for (int _3644 = _8580;_3644<_8581;++_3644){ (((*_3642)((_3641 + _3644))) = ((*_3643)(((*nativeindexes)(((*_3640)(_3644))))))); }}else { int _8582 = (int)0; int _8583 = (int)((_3640)->size(0)); for (int _3645 = _8582;_3645<_8583;++_3645){ if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(((*_3640)(_3645)))){ (((*_3642)((_3641 + _3645))) = ((*_3643)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(((*_3640)(_3645)))))); }else { (((*_3642)((_3641 + _3645))) = 0.0); }}}}void mosek::fusion::p_LinearConstraint::domainToString( long long _3646,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3647){ mosek::fusion::p_LinearDomain::_get_impl(dom.get())->domainToString(_3646,_3647); }monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::clone( monty::rc_ptr< ::mosek::fusion::Model > _3648){ return ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(_pubthis,_3648); }void mosek::fusion::p_LinearConstraint::destroy(){dom.reset();idxmap.reset();}void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelConstraint::p_ModelConstraint  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _3649,    monty::rc_ptr< ::mosek::fusion::Model > _3650){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(_3649,_3650);(cache = mosek::fusion::p_ConstraintCache::_get_impl(mosek::fusion::p_ModelConstraint::_get_impl(_3649)->cache.get())->clone()); (nativeindexes = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8584; for (int _3651=(int)0, _8585=(int)((mosek::fusion::p_ModelConstraint::_get_impl(_3649)->nativeindexes)->size(0)); _3651 < _8585;++_3651)_8584.push_back(((*mosek::fusion::p_ModelConstraint::_get_impl(_3649)->nativeindexes)(_3651))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8584.size()),_8584.begin(),_8584.end())); })()); (name = mosek::fusion::p_ModelConstraint::_get_impl(_3649)->name); (cache_bfix = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8586; for (int _3652=(int)0, _8587=(int)((mosek::fusion::p_ModelConstraint::_get_impl(_3649)->cache_bfix)->size(0)); _3652 < _8587;++_3652)_8586.push_back(((*mosek::fusion::p_ModelConstraint::_get_impl(_3649)->cache_bfix)(_3652))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8586.size()),_8586.begin(),_8586.end())); })()); (names_flushed = mosek::fusion::p_ModelConstraint::_get_impl(_3649)->names_flushed); }}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3653,    const std::string &  _3654,    monty::rc_ptr< ::mosek::fusion::Set > _3655,    std::shared_ptr< monty::ndarray< int,1 > > _3656,    std::shared_ptr< monty::ndarray< long long,1 > > _3657,    std::shared_ptr< monty::ndarray< int,1 > > _3658,    std::shared_ptr< monty::ndarray< double,1 > > _3659,    std::shared_ptr< monty::ndarray< double,1 > > _3660,    std::shared_ptr< monty::ndarray< int,1 > > _3661,    std::shared_ptr< monty::ndarray< int,1 > > _3662,    std::shared_ptr< monty::ndarray< int,1 > > _3663){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Constraint::_initialize(_3653,_3655);(cache = ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(_3657,_3659,_3658,_3660,_3661,_3662,_3663)); (nativeindexes = _3656); (name = _3654); if (_3660){ (cache_bfix = ::mosek::fusion::Utils::Tools::arraycopy(_3660)); }else { (cache_bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_3656)->size(0)))))); }(names_flushed = false); }}void mosek::fusion::p_ModelConstraint::flushNames( ){ if (((! names_flushed) && ((int)((name).size()) > (int)0))){ int _8588 = (int)0; int _8589 = (int)((nativeindexes)->size(0)); for (int _3664 = _8588;_3664<_8589;++_3664){ mosek::fusion::p_Model::_get_impl(model.get())->task_con_name(((*nativeindexes)(_3664)),([&]() -> std::string { if ( ((int)((name).size()) == (int)0)) return (std::string ("")); else return (mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->getname((long long)(_3664))).get())->a(std::string ("]")).get())->toString()); })()); }(names_flushed = true); }else {}}std::string mosek::fusion::ModelConstraint::toString  ( ) { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ModelConstraint::toString( ){ long long _3665 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _3666 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_3665))); toStringArray(::mosek::fusion::Utils::Tools::range(_3665),(long long)0,_3666); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3667 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_3667.get())->a(std::string ("Constraint( ")); if (((int)((name).size()) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3667.get())->a(std::string ("'")).get())->a(name).get())->a(std::string ("', ")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3667.get())->a(std::string ("(")).get())->a(shape_p->dim((int)0)); int _8590 = (int)1; int _8591 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3668 = _8590;_3668<_8591;++_3668){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3667.get())->a(std::string (",")).get())->a(shape_p->dim(_3668)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3667.get())->a(std::string ("),")).get())->lf(); if (((int)((_3666)->size(0)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3667.get())->a(std::string ("  ")).get())->a(((*_3666)((int)0))); int _8592 = (int)1; int _8593 = (int)((_3666)->size(0)); for (int _3669 = _8592;_3669<_8593;++_3669){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3667.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_3666)(_3669))); }}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_3667.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3667.get())->toString(); }void mosek::fusion::p_ModelConstraint::toStringArray( std::shared_ptr< monty::ndarray< long long,1 > > _3670,long long _3671,std::shared_ptr< monty::ndarray< std::string,1 > > _3672){ int _8594 = (int)0; int _8595 = (int)((_3670)->size(0)); for (int _3673 = _8594;_3673<_8595;++_3673){ if (((((*_3670)(_3673)) < (int)0) || (((*_3670)(_3673)) >= mosek::fusion::p_Set::_get_impl(shape_p)->size))){ throw ::mosek::fusion::IndexError(std::string ("Constraint index out of bounds"));}else {}}if ((((long long)((_3670)->size(0)) + _3671) > (long long)((_3672)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Result array is too small to hold the result"));}else {}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3674 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); int _3675 = (int)0; long long _3676 = mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->order_barentries(); int _3677 = (int)0; int _8596 = (int)0; int _8597 = (int)((_3670)->size(0)); for (int _3678 = _8596;_3678<_8597;++_3678){ long long _3679 = ((*_3670)(_3678)); int _3680 = ((*nativeindexes)(_3679)); int _3681 = _3675; while (((_3675 < mosek::fusion::p_ConstraintCache::_get_impl(cache)->nnz) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subi)(_3675)) == _3679))) { ( ++ _3675 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3674.get())->clear().get())->a(name).get())->a(std::string ("[")).get())->a(shape_p->indexToString(_3679)).get())->a(std::string ("] : ")); int _8598 = _3681; int _8599 = _3675; for (int _3682 = _8598;_3682<_8599;++_3682){ double _3683 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->cof)(_3682)); if ((_3683 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3674.get())->a(std::string (" + ")).get())->a(_3683).get())->a(std::string (" ")); mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_3682)),_3674); }else if ((_3683 < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3674.get())->a(std::string (" - ")).get())->a((- _3683)).get())->a(std::string (" ")); mosek::fusion::p_Model::_get_impl(model.get())->nativeVarToStr(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->subj)(_3682)),_3674); }else {}}while (((_3677 < _3676) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3677)) < _3679))) { ( ++ _3677 ); }int _3684 = _3677; while (((_3684 < _3676) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3684)) == _3679))) { ( ++ _3684 ); }while (((_3677 < _3684) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubi)(_3677)) == _3679))) { int _3685 = _3677; int _3686 = ((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3677)); ( ++ _3677 ); while (((_3677 < _3684) && (((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3677)) == _3686))) { ( ++ _3677 ); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3674.get())->a(std::string (" + < M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_3685))); int _8600 = (_3685 + (int)1); int _8601 = _3677; for (int _3687 = _8600;_3687<_8601;++_3687){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3674.get())->a(std::string (" + M")).get())->a(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barmatidx)(_3687))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3674.get())->a(std::string (" ; ")).get())->a(([&]() -> std::string { if ( ((int)((mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3685)))))))->name).size()) > (int)0)) return (mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(model)->vars)(((*mosek::fusion::p_Model::_get_impl(model)->natbarvarmap_Var)(((*mosek::fusion::p_ConstraintCache::_get_impl(cache)->barsubj)(_3685)))))))->name); else return (std::string ("_")); })()).get())->a(std::string (" >")); }if (cache_bfix){ if ((((*cache_bfix)(_3679)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3674.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_3679))); }else if ((((*cache_bfix)(_3679)) < (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3674.get())->a(std::string (" + ")).get())->a(((*cache_bfix)(_3679))); }else {}}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_3674.get())->a(std::string (" ")); domainToString(_3679,_3674); (((*_3672)(((long long)_3678 + _3671))) = mosek::fusion::Utils::p_StringBuffer::_get_impl(_3674.get())->toString()); }}void mosek::fusion::p_ModelConstraint::add_l( std::shared_ptr< monty::ndarray< long long,1 > > _3690,std::shared_ptr< monty::ndarray< long long,1 > > _3691,std::shared_ptr< monty::ndarray< int,1 > > _3692,std::shared_ptr< monty::ndarray< int,1 > > _3693,std::shared_ptr< monty::ndarray< int,1 > > _3694,std::shared_ptr< monty::ndarray< double,1 > > _3695,std::shared_ptr< monty::ndarray< double,1 > > _3696,long long _3697,int _3698,int _3699){ int _8602 = (int)1; int _8603 = (int)((_3690)->size(0)); for (int _3700 = _8602;_3700<_8603;++_3700){ if ((((*_3690)((_3700 - (int)1))) >= ((*_3690)(_3700)))){ throw ::mosek::fusion::UnimplementedError(std::string ("Not supported: Non-contiguous index ranges in ModelConstraint.add_l"));}else {}}if (((((*_3691)((_3698 + _3699))) <= ((*_3691)(_3698))) && ! _3696)){ return ; }else {}std::shared_ptr< monty::ndarray< long long,1 > > _3701 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((((*_3691)((_3698 + _3699))) - ((*_3691)(_3698)))))); long long _8604 = (long long)0; long long _8605 = (((*_3691)((_3698 + _3699))) - ((*_3691)(_3698))); for (long long _3702 = _8604;_3702<_8605;++_3702){ (((*_3701)(_3702)) = (((*_3691)(_3698)) + _3702)); }int _8606 = (int)0; int _8607 = _3699; for (int _3703 = _8606;_3703<_8607;++_3703){ ::mosek::fusion::p_CommonTools::argQsort(_3701,_3692,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),((*_3691)((_3698 + _3703))),((*_3691)(((_3698 + _3703) + (int)1)))); }int _3704 = (int)0; int _3705 = (int)0; long long _8608 = ((*_3691)(_3698)); long long _8609 = ((*_3691)((_3698 + _3699))); for (long long _3706 = _8608;_3706<_8609;++_3706){ if ((((*_3692)(_3706)) >= (int)0)){ ( ++ _3704 ); }else { ( ++ _3705 ); }}if (((_3704 > (int)0) || _3696)){ std::shared_ptr< monty::ndarray< long long,1 > > _3707 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows + (int)1)))); std::shared_ptr< monty::ndarray< int,1 > > _3708 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3704))); std::shared_ptr< monty::ndarray< double,1 > > _3709 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3704))); std::shared_ptr< monty::ndarray< double,1 > > _3710 = nullptr; if (_3696){ (_3710 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows)))); int _8610 = (int)0; int _8611 = _3699; for (int _3711 = _8610;_3711<_8611;++_3711){ (((*_3710)((((*_3690)((_3711 + _3698))) - _3697))) = ((*_3696)((_3698 + _3711)))); }}else {}(((*_3707)((int)0)) = (long long)0); int _3712 = _3698; int _8612 = (int)0; int _8613 = mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows; for (int _3713 = _8612;_3713<_8613;++_3713){ if (((_3712 < _3699) && ((((*_3690)(_3712)) - _3697) == _3713))){ long long _3714 = ((*_3707)(_3713)); long long _8614 = ((*_3691)(_3712)); long long _8615 = ((*_3691)((_3712 + (int)1))); for (long long _3715 = _8614;_3715<_8615;++_3715){ if ((((*_3692)(_3715)) >= (int)0)){ (((*_3708)(_3714)) = ((*_3692)(_3715))); (((*_3709)(_3714)) = ((*_3695)(_3715))); ( ++ _3714 ); }else {}}(((*_3707)((_3713 + (int)1))) = _3714); ( ++ _3712 ); }else { (((*_3707)((_3713 + (int)1))) = ((*_3707)(_3713))); }}cache->add(_3707,_3708,_3709,_3710); { int _3716 = mosek::fusion::p_ConstraintCache::_get_impl(cache)->nrows; int _3717 = (int)cache->numUnsorted(); std::shared_ptr< monty::ndarray< int,1 > > _3718 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3717))); std::shared_ptr< monty::ndarray< int,1 > > _3719 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3717))); std::shared_ptr< monty::ndarray< double,1 > > _3720 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3717))); long long _3721 = cache->flush(_3718,_3719,_3720,std::shared_ptr< monty::ndarray< double,1 > >(nullptr)); long long _8616 = (long long)0; long long _8617 = _3721; for (long long _3722 = _8616;_3722<_8617;++_3722){ (((*_3718)(_3722)) = ((*nativeindexes)(((*_3718)(_3722))))); }mosek::fusion::p_Model::_get_impl(model.get())->task_putaijlist(_3718,_3719,_3720,_3721); if (_3696){ add_fx(_3690,mosek::fusion::p_ConstraintCache::_get_impl(cache)->bfix,_3697,_3698,_3699); }else {}}}else {}if ((_3705 > (int)0)){ int _3723 = (int)0; { long long _3724 = ((*_3691)(_3698)); int _8618 = (int)0; int _8619 = _3699; for (int _3725 = _8618;_3725<_8619;++_3725){ if ((((*_3692)(((*_3701)((((*_3691)(_3698)) - _3724))))) < (int)0)){ int _3726 = (int)1; long long _8620 = ((((*_3691)((_3698 + _3725))) - _3724) + (int)1); long long _8621 = (((*_3691)(((_3698 + _3725) + (int)1))) - _3724); for (long long _3727 = _8620;_3727<_8621;++_3727){ if (((((*_3692)(((*_3701)(_3727)))) < (int)0) && (((*_3692)(((*_3701)(_3727)))) != ((*_3692)(((*_3701)((_3727 - (int)1)))))))){ ( ++ _3726 ); }else {}}(_3723 += _3726); }else {}}}std::shared_ptr< monty::ndarray< int,1 > > _3728 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3723))); std::shared_ptr< monty::ndarray< int,1 > > _3729 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3723))); std::shared_ptr< monty::ndarray< int,1 > > _3730 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3723))); std::shared_ptr< monty::ndarray< int,1 > > _3731 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3723))); { long long _3732 = ((*_3691)(_3698)); int _3733 = (int)0; int _8622 = (int)0; int _8623 = _3699; for (int _3734 = _8622;_3734<_8623;++_3734){ long long _3735 = (((*_3691)((_3698 + _3734))) - _3732); long long _3736 = (((*_3691)(((_3698 + _3734) + (int)1))) - _3732); if ((((*_3692)(((*_3701)(_3735)))) < (int)0)){ while (((_3735 < _3736) && (((*_3692)(((*_3701)(_3735)))) < (int)0))) { (((*_3729)(_3733)) = (int)((*_3690)((_3698 + _3734)))); (((*_3728)(_3733)) = ((*nativeindexes)((int)((*_3690)((_3698 + _3734)))))); (((*_3730)(_3733)) = ((- ((*_3692)(((*_3701)(_3735))))) - (int)1)); long long _3737 = _3735; while (((_3735 < _3736) && ((((*_3692)(((*_3701)(_3735)))) < (int)0) && (((*_3692)(((*_3701)(_3735)))) == ((*_3692)(((*_3701)(_3737)))))))) { ( ++ _3735 ); }std::shared_ptr< monty::ndarray< int,1 > > _3738; std::shared_ptr< monty::ndarray< int,1 > > _3739; std::shared_ptr< monty::ndarray< double,1 > > _3740; int _3741 = (int)1; if (((_3735 - _3737) > (int)1)){ ::mosek::fusion::p_CommonTools::argQsort(_3701,_3693,_3694,(long long)_3737,(long long)(_3735 - _3737)); int _3742 = (int)1; long long _8624 = (long long)1; long long _8625 = (_3735 - _3737); for (long long _3743 = _8624;_3743<_8625;++_3743){ if (((((*_3693)(((*_3701)(((_3735 + _3743) - (int)1))))) != ((*_3693)(((*_3701)((_3735 + _3743)))))) || (((*_3694)(((*_3701)(((_3735 + _3743) - (int)1))))) != ((*_3694)(((*_3701)((_3735 + _3743)))))))){ ( ++ _3742 ); }else {}}(_3738 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3742)))); (_3739 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3742)))); (_3740 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3742)))); (((*_3738)((int)0)) = ((*_3693)(((*_3701)((int)0))))); (((*_3739)((int)0)) = ((*_3694)(((*_3701)((int)0))))); (((*_3740)((int)0)) = ((*_3695)(((*_3701)((int)0))))); int _3744 = (int)0; long long _8626 = (long long)1; long long _8627 = (_3735 - _3737); for (long long _3745 = _8626;_3745<_8627;++_3745){ if (((((*_3738)(((*_3701)(((_3735 + _3745) - (int)1))))) != ((*_3738)(((*_3701)((_3735 + _3745)))))) || (((*_3739)(((*_3701)(((_3735 + _3745) - (int)1))))) != ((*_3739)(((*_3701)((_3735 + _3745)))))))){ ( ++ _3744 ); (((*_3738)(_3744)) = ((*_3693)(((*_3701)((_3735 + _3745)))))); (((*_3739)(_3744)) = ((*_3694)(((*_3701)((_3735 + _3745)))))); }else {}(((*_3740)(_3744)) = (((*_3740)(_3744)) + ((*_3695)(((*_3701)((_3735 + _3745))))))); }}else { (_3738 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_3693)(((*_3701)(_3737))))})); (_3739 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{((*_3694)(((*_3701)(_3737))))})); (_3740 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{((*_3695)(((*_3701)(_3737))))})); }int _3746 = mosek::fusion::p_Model::_get_impl(model.get())->task_append_barmatrix(mosek::fusion::p_Model::_get_impl(model.get())->task_barvardim(((*_3730)(_3733))),_3738,_3739,_3740); (((*_3731)(_3733)) = _3746); ( ++ _3733 ); }}else {}}}mosek::fusion::p_ConstraintCache::_get_impl(cache.get())->add_bar(_3729,_3730,_3731); }else {}}monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::ModelConstraint::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3752,    std::shared_ptr< monty::ndarray< int,1 > > _3753) { return mosek::fusion::p_ModelConstraint::_get_impl(this)->slice(_3752,_3753); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_ModelConstraint::slice( std::shared_ptr< monty::ndarray< int,1 > > _3752,std::shared_ptr< monty::ndarray< int,1 > > _3753){ if (((int)((_3752)->size(0)) != (int)((_3753)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _3754 = shape_p->slice(_3752,_3753); std::shared_ptr< monty::ndarray< long long,1 > > _3755 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); (((*_3755)((mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1))) = (long long)1); { int _3756 = (mosek::fusion::p_Set::_get_impl(shape_p)->nd - (int)1); for (;(_3756 > (int)0);(_3756 = (_3756 - (int)1))){ (((*_3755)((_3756 - (int)1))) = (((*_3755)(_3756)) * shape_p->dim(_3756))); }}long long _3757 = (long long)0; int _8628 = (int)0; int _8629 = (int)((_3755)->size(0)); for (int _3758 = _8628;_3758<_8629;++_3758){ (_3757 = (_3757 + (((*_3755)(_3758)) * ((*_3752)(_3758))))); }return ::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis,_3754,_3757,_3755); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::ModelConstraint::slice  ( int _3759,    int _3760) { return mosek::fusion::p_ModelConstraint::_get_impl(this)->slice(_3759,_3760); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_ModelConstraint::slice( int _3759,int _3760){ std::shared_ptr< monty::ndarray< long long,1 > > _3761 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}); return ::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis,shape_p->slice(_3759,_3760),(long long)_3759,_3761); }void mosek::fusion::p_ModelConstraint::destroy(){nativeindexes.reset();cache_bfix.reset();cache.reset();}void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }mosek::fusion::p_Constraint::p_Constraint  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _3763,    monty::rc_ptr< ::mosek::fusion::Model > _3764){monty::rc_reserve __reserve_this(_pubthis); { { (model = _3764); (shape_p = mosek::fusion::p_Constraint::_get_impl(_3763)->shape_p); }}}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _3765,    monty::rc_ptr< ::mosek::fusion::Set > _3766){monty::rc_reserve __reserve_this(_pubthis); { { (model = _3765); (shape_p = _3766); }}}std::string mosek::fusion::Constraint::toString  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_Constraint::toString( ){ long long _3767 = mosek::fusion::p_Set::_get_impl(shape_p)->size; std::shared_ptr< monty::ndarray< std::string,1 > > _3768 = std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_3767))); toStringArray(::mosek::fusion::Utils::Tools::range(_3767),(long long)0,_3768); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3769 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3769.get())->a(std::string ("Constraint( (")).get())->a(shape_p->dim((int)0)); int _8630 = (int)1; int _8631 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3770 = _8630;_3770<_8631;++_3770){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3769.get())->a(std::string (",")).get())->a(shape_p->dim(_3770)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3769.get())->a(std::string ("),")).get())->lf(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3769.get())->a(std::string ("  ")).get())->a(((*_3768)((int)0))); int _8632 = (int)1; int _8633 = (int)((_3768)->size(0)); for (int _3771 = _8632;_3771<_8633;++_3771){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3769.get())->a(std::string (",")).get())->lf().get())->a(std::string ("  ")).get())->a(((*_3768)(_3771))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3769.get())->a(std::string (" )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3769.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( double _3775) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3775); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( double _3775){ long long _3776 = mosek::fusion::p_Set::_get_impl(shape_p)->size; add_l(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8634; for (long long _3777=(int)0, _8635=_3776; _3777 < _8635;++_3777)_8634.push_back(_3777); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8634.size()),_8634.begin(),_8634.end())); })(),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8636; for (long long _3778=(int)0, _8637=(_3776 + (int)1); _3778 < _8637;++_3778)_8636.push_back((int)0); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8636.size()),_8636.begin(),_8636.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8638; for (long long _3779=(int)0, _8639=_3776; _3779 < _8639;++_3779)_8638.push_back(_3775); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8638.size()),_8638.begin(),_8638.end())); })(),(long long)0,(int)0,(int)_3776); return _pubthis; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( std::shared_ptr< monty::ndarray< double,1 > > _3780) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3780); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( std::shared_ptr< monty::ndarray< double,1 > > _3780){ long long _3781 = mosek::fusion::p_Set::_get_impl(shape_p)->size; if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((int)((_3780)->size(0)) != shape_p->dim((int)0)))){ throw ::mosek::fusion::DimensionError(std::string ("The added constant array does not have the same shape as the constraint"));}else {}add_l(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8640; for (long long _3782=(int)0, _8641=_3781; _3782 < _8641;++_3782)_8640.push_back(_3782); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8640.size()),_8640.begin(),_8640.end())); })(),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8642; for (long long _3783=(int)0, _8643=(_3781 + (int)1); _3783 < _8643;++_3783)_8642.push_back((int)0); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8642.size()),_8642.begin(),_8642.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),_3780,(long long)0,(int)0,(int)_3781); return _pubthis; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _3784) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3784); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( monty::rc_ptr< ::mosek::fusion::Variable > _3784){ if ((! _3784->shape()->compare(shape_p))){ throw ::mosek::fusion::DimensionError(std::string ("The added variable does not have the same shape as the constraint"));}else {}long long _3785 = mosek::fusion::p_Set::_get_impl(_3784->getShape())->size; std::shared_ptr< monty::ndarray< int,1 > > _3786 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3785))); std::shared_ptr< monty::ndarray< int,1 > > _3787 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3785))); std::shared_ptr< monty::ndarray< int,1 > > _3788 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3785))); std::shared_ptr< monty::ndarray< long long,1 > > _3789 = ::mosek::fusion::Utils::Tools::range((long long)0,(_3785 + (int)1)); std::shared_ptr< monty::ndarray< double,1 > > _3790 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3785))); long long _8644 = (long long)0; long long _8645 = _3785; for (long long _3791 = _8644;_3791<_8645;++_3791){ _3784->inst(_3791,_3791,_3786,_3787,_3788); (((*_3790)(_3791)) = 1.0); }std::shared_ptr< monty::ndarray< long long,1 > > _3792 = ::mosek::fusion::Utils::Tools::range((long long)0,_3785); add_l(_3792,_3789,_3786,_3787,_3787,_3790,std::shared_ptr< monty::ndarray< double,1 > >(nullptr),(long long)0,(int)0,(int)_3785); return _pubthis; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _3793) { return mosek::fusion::p_Constraint::_get_impl(this)->add(_3793); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::add( monty::rc_ptr< ::mosek::fusion::Expression > _3793){ if ((! _3793->shape()->compare(shape_p))){ throw ::mosek::fusion::DimensionError(std::string ("The added expression does not have the same shape as the constraint"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _3794 = _3793->eval(); int _3795 = ((int)((mosek::fusion::p_FlatExpr::_get_impl(_3794)->ptrb)->size(0)) - (int)1); std::shared_ptr< monty::ndarray< int,1 > > _3796 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_3794)->nnz))); std::shared_ptr< monty::ndarray< int,1 > > _3797 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_3794)->nnz))); std::shared_ptr< monty::ndarray< int,1 > > _3798 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_3794)->nnz))); ::mosek::fusion::p_Constraint::inst(mosek::fusion::p_FlatExpr::_get_impl(_3794)->x,mosek::fusion::p_FlatExpr::_get_impl(_3794)->subj,_3796,_3796,_3796); std::shared_ptr< monty::ndarray< long long,1 > > _3799 = mosek::fusion::p_FlatExpr::_get_impl(_3794)->inst; if (! _3799){ (_3799 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)_3795)); }else {}add_l(_3799,mosek::fusion::p_FlatExpr::_get_impl(_3794)->ptrb,_3796,_3797,_3798,mosek::fusion::p_FlatExpr::_get_impl(_3794)->cof,mosek::fusion::p_FlatExpr::_get_impl(_3794)->bfix,(long long)0,(int)0,_3795); return _pubthis; }void mosek::fusion::p_Constraint::inst( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _3800,std::shared_ptr< monty::ndarray< long long,1 > > _3801,std::shared_ptr< monty::ndarray< int,1 > > _3802,std::shared_ptr< monty::ndarray< int,1 > > _3803,std::shared_ptr< monty::ndarray< int,1 > > _3804){ std::shared_ptr< monty::ndarray< long long,1 > > _3805 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_3800)->size(0)) + (int)1)))); int _8646 = (int)0; int _8647 = (int)((_3800)->size(0)); for (int _3806 = _8646;_3806<_8647;++_3806){ (((*_3805)((_3806 + (int)1))) = (((*_3805)(_3806)) + ((*_3800)(_3806))->size())); }int _8648 = (int)0; int _8649 = (int)((_3801)->size(0)); for (int _3807 = _8648;_3807<_8649;++_3807){ int _3808 = ((int)((_3805)->size(0)) / (int)2); { int _3809 = (int)0; int _3810 = ((int)((_3805)->size(0)) - (int)1); int _3811 = (int)0; while ((_3809 < _3810)) { (_3811 = ((_3809 + _3810) / (int)2)); if ((((*_3801)(_3807)) < ((*_3805)(_3811)))){ (_3810 = _3811); }else if ((((*_3801)(_3807)) >= ((*_3805)((_3811 + (int)1))))){ (_3809 = _3811); }else { (_3809 = _3811); (_3810 = _3811); }}(_3808 = _3811); }((*_3800)(_3808))->inst((((*_3801)(_3807)) - ((*_3805)(_3808))),(long long)_3807,_3802,_3803,_3804); }}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::dual  ( std::shared_ptr< monty::ndarray< int,1 > > _3822,    std::shared_ptr< monty::ndarray< int,1 > > _3823) { return mosek::fusion::p_Constraint::_get_impl(this)->dual(_3822,_3823); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual( std::shared_ptr< monty::ndarray< int,1 > > _3822,std::shared_ptr< monty::ndarray< int,1 > > _3823){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3822)->size(0))) || (mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3823)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _3824 = (int)1; { int _3825 = (int)0; for (;(_3825 < mosek::fusion::p_Set::_get_impl(shape_p)->nd);( ++ _3825 )){ if (((((*_3822)(_3825)) > ((*_3823)(_3825))) || ((((*_3822)(_3825)) < (int)0) || (((*_3823)(_3825)) >= shape_p->dim(_3825))))){ throw ::mosek::fusion::SliceError(std::string ("Slice index out of bound"));}else {}(_3824 = (_3824 * (((*_3823)(_3825)) * ((*_3822)(_3825))))); }}std::shared_ptr< monty::ndarray< double,1 > > _3826 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3824))); std::shared_ptr< monty::ndarray< int,1 > > _3827 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _3828 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); long long _3829 = (long long)0; int _8650 = (int)0; int _8651 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3830 = _8650;_3830<_8651;++_3830){ (((*_3827)(_3830)) = (((*_3823)(_3830)) - ((*_3822)(_3830)))); (((*_3828)(_3830)) = shape_p->stride(_3830)); (_3829 = (_3829 + (((*_3828)(_3830)) * ((*_3822)(_3830))))); }dual_values(_3829,_3827,_3828,(int)0,_3826); return _3826; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::dual  ( int _3831,    int _3832) { return mosek::fusion::p_Constraint::_get_impl(this)->dual(_3831,_3832); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual( int _3831,int _3832){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((_3831 > _3832) || ((_3831 < (int)0) || (_3832 >= shape_p->dim((int)0)))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _3833 = (_3832 - _3831); std::shared_ptr< monty::ndarray< double,1 > > _3834 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3833))); dual_values((long long)(_3831),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_3833}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}),(int)0,_3834); return _3834; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::dual  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual( ){ std::shared_ptr< monty::ndarray< double,1 > > _3835 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); dual_values((int)0,_3835); return _3835; }void mosek::fusion::p_Constraint::dual_values( int _3836,std::shared_ptr< monty::ndarray< double,1 > > _3837){ std::shared_ptr< monty::ndarray< int,1 > > _3838 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8652; for (int _3839=(int)0, _8653=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3839 < _8653;++_3839)_8652.push_back(shape_p->dim(_3839)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8652.size()),_8652.begin(),_8652.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _3840 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8654; for (int _3841=(int)0, _8655=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3841 < _8655;++_3841)_8654.push_back(shape_p->stride(_3841)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8654.size()),_8654.begin(),_8654.end())); })(); dual_values((long long)0,_3838,_3840,_3836,_3837); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint::level  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level( ){ std::shared_ptr< monty::ndarray< double,1 > > _3850 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->size))); level_values((int)0,_3850); return _3850; }double mosek::fusion::p_Constraint::level( int _3851){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((_3851 < (int)0) || (_3851 >= shape_p->dim((int)0))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid index."));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _3852 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)_3851}); std::shared_ptr< monty::ndarray< double,1 > > _3853 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); level_values(_3852,(int)0,_3853); return ((*_3853)((int)0)); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level( std::shared_ptr< monty::ndarray< int,1 > > _3854,std::shared_ptr< monty::ndarray< int,1 > > _3855){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3854)->size(0))) || (mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_3855)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _3856 = (int)1; { int _3857 = (int)0; for (;(_3857 < mosek::fusion::p_Set::_get_impl(shape_p)->nd);( ++ _3857 )){ if (((((*_3854)(_3857)) > ((*_3855)(_3857))) || ((((*_3854)(_3857)) < (int)0) || (((*_3855)(_3857)) > shape_p->dim(_3857))))){ throw ::mosek::fusion::SliceError(std::string ("Slice index out of bound"));}else {}(_3856 = (_3856 * (((*_3855)(_3857)) - ((*_3854)(_3857))))); }}std::shared_ptr< monty::ndarray< double,1 > > _3858 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3856))); if ((_3856 > (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _3859 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); std::shared_ptr< monty::ndarray< long long,1 > > _3860 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(shape_p)->nd))); int _8656 = (int)0; int _8657 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3861 = _8656;_3861<_8657;++_3861){ (((*_3860)(_3861)) = shape_p->stride(_3861)); }int _8658 = (int)0; int _8659 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3862 = _8658;_3862<_8659;++_3862){ (((*_3859)(_3862)) = (((*_3855)(_3862)) - ((*_3854)(_3862)))); }long long _3863 = (long long)0; int _8660 = (int)0; int _8661 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _3864 = _8660;_3864<_8661;++_3864){ (_3863 = (_3863 + ((long long)((*_3854)(_3864)) * ((*_3860)(_3864))))); }level_values(_3863,_3859,_3860,(int)0,_3858); }else {}return _3858; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level( int _3865,int _3866){ if (((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1) || ((_3865 < (int)0) || ((_3865 > _3866) || (_3866 > shape_p->dim((int)0)))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}int _3867 = (_3866 - _3865); std::shared_ptr< monty::ndarray< double,1 > > _3868 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3867))); std::shared_ptr< monty::ndarray< int,1 > > _3869 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(_3866 - _3865)}); std::shared_ptr< monty::ndarray< long long,1 > > _3870 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)1}); level_values((long long)_3865,_3869,_3870,(int)0,_3868); return _3868; }void mosek::fusion::p_Constraint::level_values( int _3871,std::shared_ptr< monty::ndarray< double,1 > > _3872){ std::shared_ptr< monty::ndarray< long long,1 > > _3873 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8662; for (int _3874=(int)0, _8663=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3874 < _8663;++_3874)_8662.push_back(shape_p->stride(_3874)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8662.size()),_8662.begin(),_8662.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _3875 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8664; for (int _3876=(int)0, _8665=mosek::fusion::p_Set::_get_impl(shape_p)->nd; _3876 < _8665;++_3876)_8664.push_back(shape_p->dim(_3876)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8664.size()),_8664.begin(),_8664.end())); })(); level_values((long long)0,_3875,_3873,_3871,_3872); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->get_model(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::get_model( ){ return model; }int mosek::fusion::Constraint::get_nd  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }int mosek::fusion::p_Constraint::get_nd( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->nd_p; }long long mosek::fusion::Constraint::size  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }long long mosek::fusion::p_Constraint::size( ){ return mosek::fusion::p_Set::_get_impl(shape_p)->size; }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3885) { return mosek::fusion::p_Constraint::stack(_3885); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3885){ return ::mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint(_3885); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _3886,    monty::rc_ptr< ::mosek::fusion::Constraint > _3887,    monty::rc_ptr< ::mosek::fusion::Constraint > _3888) { return mosek::fusion::p_Constraint::stack(_3886,_3887,_3888); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack( monty::rc_ptr< ::mosek::fusion::Constraint > _3886,monty::rc_ptr< ::mosek::fusion::Constraint > _3887,monty::rc_ptr< ::mosek::fusion::Constraint > _3888){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3889 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{_3886,_3887}); return ::mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint(_3889); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _3890,    monty::rc_ptr< ::mosek::fusion::Constraint > _3891) { return mosek::fusion::p_Constraint::stack(_3890,_3891); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack( monty::rc_ptr< ::mosek::fusion::Constraint > _3890,monty::rc_ptr< ::mosek::fusion::Constraint > _3891){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _3892 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{_3890,_3891}); return ::mosek::fusion::p_CompoundConstraint::_new_CompoundConstraint(_3892); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index  ( std::shared_ptr< monty::ndarray< int,1 > > _3893) { return mosek::fusion::p_Constraint::_get_impl(this)->index(_3893); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::index( std::shared_ptr< monty::ndarray< int,1 > > _3893){ return mosek::fusion::p_Constraint::_get_impl(_pubthis->slice(_3893,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8666; for (int _3894=(int)0, _8667=(int)((_3893)->size(0)); _3894 < _8667;++_3894)_8666.push_back((((*_3893)(_3894)) + (int)1)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8666.size()),_8666.begin(),_8666.end())); })()).get())->reduceDims(); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index  ( int _3895) { return mosek::fusion::p_Constraint::_get_impl(this)->index(_3895); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::index( int _3895){ return _pubthis->slice(_3895,(_3895 + (int)1)); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::reduceDims( ){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd > (int)1)){ int _3900 = shape_p->realnd(); std::shared_ptr< monty::ndarray< int,1 > > _3901 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3900))); { int _3902 = (int)0; { int _3903 = (int)0; for (;(_3903 < _3900);( ++ _3903 )){ if ((shape_p->dim(_3903) > (int)1)){ (((*_3901)(_3902)) = shape_p->dim(_3903)); ( ++ _3902 ); }else {}}}}(shape_p = ::mosek::fusion::p_NDSet::_new_NDSet(_3901)); }else {}return _pubthis; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Constraint::shape  ( ) { return mosek::fusion::p_Constraint::_get_impl(this)->shape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Constraint::shape( ){ return shape_p; }void mosek::fusion::p_Constraint::destroy(){shape_p.reset();model.reset();}void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }mosek::fusion::ProductSet::ProductSet(mosek::fusion::p_ProductSet *_impl) : mosek::fusion::NDSet(_impl) { /*std::cout << "ProductSet()" << this << std::endl; */ }mosek::fusion::ProductSet::~ProductSet() {  /* std::cout << "~ProductSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_ProductSet::p_ProductSet  (::mosek::fusion::ProductSet * _pubthis) :     mosek::fusion::p_NDSet(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ProductSet::t mosek::fusion::p_ProductSet::_new_ProductSet  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _3904){ return new mosek::fusion::ProductSet(_3904); }mosek::fusion::ProductSet::ProductSet  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _3904) :    ProductSet(new mosek::fusion::p_ProductSet(this)){ mosek::fusion::p_ProductSet::_get_impl(this)->_initialize(_3904); }void mosek::fusion::p_ProductSet::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _3904){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_NDSet::_initialize(::mosek::fusion::p_ProductSet::computedims(_3904));(sets = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Set > > _8668; for (int _3905=(int)0, _8669=(int)((_3904)->size(0)); _3905 < _8669;++_3905)_8668.push_back(((*_3904)(_3905))); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 >(monty::shape(_8668.size()),_8668.begin(),_8668.end())); })()); }}std::string mosek::fusion::ProductSet::indexToString  ( long long _3906) { return mosek::fusion::p_ProductSet::_get_impl(this)->indexToString(_3906); }std::string mosek::fusion::p_ProductSet::indexToString( long long _3906){ std::shared_ptr< monty::ndarray< int,1 > > _3907 = idxtokey(_3906); monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3908 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); { std::shared_ptr< monty::ndarray< int,1 > > _3909 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8670; for (int _3910=(int)0, _8671=mosek::fusion::p_Set::_get_impl(((*sets)((int)0)))->nd; _3910 < _8671;++_3910)_8670.push_back(((*_3907)(_3910))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8670.size()),_8670.begin(),_8670.end())); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_3908.get())->a(((*sets)((int)0))->indexToString(mosek::fusion::p_Set::_get_impl(((*sets)((int)0)).get())->linearidx(_3909))); }int _3911 = mosek::fusion::p_Set::_get_impl(((*sets)((int)0)))->nd; int _8672 = (int)1; int _8673 = (int)((sets)->size(0)); for (int _3912 = _8672;_3912<_8673;++_3912){ int _3913 = _3911; (_3911 = (_3911 + mosek::fusion::p_Set::_get_impl(((*sets)(_3912)))->nd)); std::shared_ptr< monty::ndarray< int,1 > > _3914 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8674; for (int _3915=(int)0, _8675=(_3911 - _3913); _3915 < _8675;++_3915)_8674.push_back(((*_3907)((_3915 + _3913)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8674.size()),_8674.begin(),_8674.end())); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3908.get())->a(std::string (",")).get())->a(((*sets)(_3912))->indexToString(mosek::fusion::p_Set::_get_impl(((*sets)(_3912)).get())->linearidx(_3914))); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3908.get())->toString(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ProductSet::computedims( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _3916){ int _3917 = (int)0; int _8676 = (int)0; int _8677 = (int)((_3916)->size(0)); for (int _3918 = _8676;_3918<_8677;++_3918){ (_3917 = (_3917 + mosek::fusion::p_Set::_get_impl(((*_3916)(_3918)))->nd)); }std::shared_ptr< monty::ndarray< int,1 > > _3919 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8678; for (int _3920=(int)0, _8679=(int)((_3916)->size(0)); _3920 < _8679;++_3920) for (int _3921=(int)0, _8680=mosek::fusion::p_Set::_get_impl(((*_3916)(_3920)))->nd; _3921 < _8680;++_3921)_8678.push_back(((*_3916)(_3920))->dim(_3921)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8678.size()),_8678.begin(),_8678.end())); })(); return _3919; }void mosek::fusion::p_ProductSet::destroy(){sets.reset();}void mosek::fusion::ProductSet::destroy() { mosek::fusion::p_ProductSet::_get_impl(this)->destroy(); }mosek::fusion::IntSet::IntSet(mosek::fusion::p_IntSet *_impl) : mosek::fusion::BaseSet(_impl) { /*std::cout << "IntSet()" << this << std::endl; */ }mosek::fusion::IntSet::~IntSet() {  /* std::cout << "~IntSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_IntSet::p_IntSet  (::mosek::fusion::IntSet * _pubthis) :     mosek::fusion::p_BaseSet(_pubthis),    _pubthis(_pubthis){}mosek::fusion::IntSet::t mosek::fusion::p_IntSet::_new_IntSet  (int _3922){ return new mosek::fusion::IntSet(_3922); }mosek::fusion::IntSet::IntSet  (int _3922) :    IntSet(new mosek::fusion::p_IntSet(this)){ mosek::fusion::p_IntSet::_get_impl(this)->_initialize(_3922); }void mosek::fusion::p_IntSet::_initialize  (int _3922){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseSet::_initialize((long long)_3922);(first = (int)0); (last = _3922); }}mosek::fusion::IntSet::t mosek::fusion::p_IntSet::_new_IntSet  (int _3923,    int _3924){ return new mosek::fusion::IntSet(_3923,_3924); }mosek::fusion::IntSet::IntSet  (int _3923,    int _3924) :    IntSet(new mosek::fusion::p_IntSet(this)){ mosek::fusion::p_IntSet::_get_impl(this)->_initialize(_3923,_3924); }void mosek::fusion::p_IntSet::_initialize  (int _3923,    int _3924){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseSet::_initialize((long long)(_3924 - _3923));(first = _3923); (last = _3924); }}std::string mosek::fusion::IntSet::indexToString  ( long long _3925) { return mosek::fusion::p_IntSet::_get_impl(this)->indexToString(_3925); }std::string mosek::fusion::p_IntSet::indexToString( long long _3925){ return mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer().get())->a((int)_3925).get())->toString(); }std::string mosek::fusion::IntSet::getname  ( std::shared_ptr< monty::ndarray< int,1 > > _3926) { return mosek::fusion::p_IntSet::_get_impl(this)->getname(_3926); }std::string mosek::fusion::p_IntSet::getname( std::shared_ptr< monty::ndarray< int,1 > > _3926){ if (((int)((_3926)->size(0)) != (int)1)){ throw ::mosek::fusion::IndexError(std::string ("Invalid key specification"));}else {}return ::mosek::fusion::Utils::Tools::stringvalue(((*_3926)((int)0))); }std::string mosek::fusion::IntSet::getname  ( long long _3927) { return mosek::fusion::p_IntSet::_get_impl(this)->getname(_3927); }std::string mosek::fusion::p_IntSet::getname( long long _3927){ return ::mosek::fusion::Utils::Tools::stringvalue(_3927); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::IntSet::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3928,    std::shared_ptr< monty::ndarray< int,1 > > _3929) { return mosek::fusion::p_IntSet::_get_impl(this)->slice(_3928,_3929); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_IntSet::slice( std::shared_ptr< monty::ndarray< int,1 > > _3928,std::shared_ptr< monty::ndarray< int,1 > > _3929){ if ((((int)((_3928)->size(0)) != (int)1) || ((int)((_3929)->size(0)) != (int)1))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return _pubthis->slice(((*_3928)((int)0)),((*_3929)((int)0))); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::IntSet::slice  ( int _3930,    int _3931) { return mosek::fusion::p_IntSet::_get_impl(this)->slice(_3930,_3931); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_IntSet::slice( int _3930,int _3931){ if (((_3930 < (int)0) || ((_3930 > _3931) || (_3931 > (last - first))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return ::mosek::fusion::p_IntSet::_new_IntSet((first + _3930),(first + _3931)); }int mosek::fusion::IntSet::getidx  ( int _3932) { return mosek::fusion::p_IntSet::_get_impl(this)->getidx(_3932); }int mosek::fusion::p_IntSet::getidx( int _3932){ if (((_3932 < first) || (_3932 > last))){ throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));}else {}return (_3932 - first); }long long mosek::fusion::IntSet::stride  ( int _3933) { return mosek::fusion::p_IntSet::_get_impl(this)->stride(_3933); }long long mosek::fusion::p_IntSet::stride( int _3933){ return (long long)1; }void mosek::fusion::p_IntSet::destroy(){}void mosek::fusion::IntSet::destroy() { mosek::fusion::p_IntSet::_get_impl(this)->destroy(); }mosek::fusion::StringSet::StringSet(mosek::fusion::p_StringSet *_impl) : mosek::fusion::BaseSet(_impl) { /*std::cout << "StringSet()" << this << std::endl; */ }mosek::fusion::StringSet::~StringSet() {  /* std::cout << "~StringSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_StringSet::p_StringSet  (::mosek::fusion::StringSet * _pubthis) :     mosek::fusion::p_BaseSet(_pubthis),    _pubthis(_pubthis){}mosek::fusion::StringSet::t mosek::fusion::p_StringSet::_new_StringSet  (std::shared_ptr< monty::ndarray< std::string,1 > > _3934){ return new mosek::fusion::StringSet(_3934); }mosek::fusion::StringSet::StringSet  (std::shared_ptr< monty::ndarray< std::string,1 > > _3934) :    StringSet(new mosek::fusion::p_StringSet(this)){ mosek::fusion::p_StringSet::_get_impl(this)->_initialize(_3934); }void mosek::fusion::p_StringSet::_initialize  (std::shared_ptr< monty::ndarray< std::string,1 > > _3934){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_BaseSet::_initialize((long long)(int)((_3934)->size(0)));(keys = ::mosek::fusion::Utils::Tools::arraycopy(_3934)); }}std::string mosek::fusion::StringSet::indexToString  ( long long _3935) { return mosek::fusion::p_StringSet::_get_impl(this)->indexToString(_3935); }std::string mosek::fusion::p_StringSet::indexToString( long long _3935){ return ((*keys)(_3935)); }std::string mosek::fusion::StringSet::getname  ( std::shared_ptr< monty::ndarray< int,1 > > _3936) { return mosek::fusion::p_StringSet::_get_impl(this)->getname(_3936); }std::string mosek::fusion::p_StringSet::getname( std::shared_ptr< monty::ndarray< int,1 > > _3936){ if (((int)((_3936)->size(0)) != (int)1)){ throw ::mosek::fusion::IndexError(std::string ("Invalid key specification"));}else {}return ((*keys)(((*_3936)((int)0)))); }std::string mosek::fusion::StringSet::getname  ( long long _3937) { return mosek::fusion::p_StringSet::_get_impl(this)->getname(_3937); }std::string mosek::fusion::p_StringSet::getname( long long _3937){ return ((*keys)(_3937)); }monty::rc_ptr< ::mosek::fusion::BaseSet > mosek::fusion::p_StringSet::slice_( std::shared_ptr< monty::ndarray< int,1 > > _3938,std::shared_ptr< monty::ndarray< int,1 > > _3939){ if ((((int)((_3938)->size(0)) != (int)1) || (((int)((_3939)->size(0)) != (int)1) || ((((*_3938)((int)0)) < (int)0) || ((((*_3938)((int)0)) > ((*_3939)((int)0))) || (((*_3939)((int)0)) >= (int)((keys)->size(0)))))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return slice_(((*_3938)((int)0)),((*_3939)((int)0))); }monty::rc_ptr< ::mosek::fusion::BaseSet > mosek::fusion::p_StringSet::slice_( int _3940,int _3941){ if (((_3940 < (int)0) || ((_3940 > _3941) || (_3941 > (int)((keys)->size(0)))))){ throw ::mosek::fusion::SliceError(std::string ("Invalid slice specification"));}else {}return ::mosek::fusion::p_StringSet::_new_StringSet(([=]()->std::shared_ptr< monty::ndarray< std::string,1 > > { std::vector< std::string > _8681; for (int _3942=(int)0, _8682=(_3941 - _3940); _3942 < _8682;++_3942)_8681.push_back(((*keys)((_3942 + _3940)))); return std::shared_ptr< monty::ndarray< std::string,1 > >(new monty::ndarray< std::string,1 >(monty::shape(_8681.size()),_8681.begin(),_8681.end())); })()); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::StringSet::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3943,    std::shared_ptr< monty::ndarray< int,1 > > _3944) { return mosek::fusion::p_StringSet::_get_impl(this)->slice(_3943,_3944); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_StringSet::slice( std::shared_ptr< monty::ndarray< int,1 > > _3943,std::shared_ptr< monty::ndarray< int,1 > > _3944){ return slice_(_3943,_3944); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::StringSet::slice  ( int _3945,    int _3946) { return mosek::fusion::p_StringSet::_get_impl(this)->slice(_3945,_3946); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_StringSet::slice( int _3945,int _3946){ return slice_(_3945,_3946); }std::string mosek::fusion::StringSet::toString  ( ) { return mosek::fusion::p_StringSet::_get_impl(this)->toString(); }std::string mosek::fusion::p_StringSet::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3947 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3947.get())->a(std::string ("{'")).get())->a(((*keys)((int)0))).get())->a(std::string ("'")); { int _3948 = (int)1; for (;(_3948 < (int)((keys)->size(0)));( ++ _3948 )){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3947.get())->a(std::string (",'")).get())->a(((*keys)(_3948))).get())->a(std::string ("'")); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_3947.get())->a(std::string ("}")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3947.get())->toString(); }long long mosek::fusion::StringSet::stride  ( int _3949) { return mosek::fusion::p_StringSet::_get_impl(this)->stride(_3949); }long long mosek::fusion::p_StringSet::stride( int _3949){ return (long long)1; }void mosek::fusion::p_StringSet::destroy(){keys.reset();}void mosek::fusion::StringSet::destroy() { mosek::fusion::p_StringSet::_get_impl(this)->destroy(); }mosek::fusion::BaseSet::BaseSet(mosek::fusion::p_BaseSet *_impl) : mosek::fusion::Set(_impl) { /*std::cout << "BaseSet()" << this << std::endl; */ }mosek::fusion::BaseSet::~BaseSet() {  /* std::cout << "~BaseSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_BaseSet::p_BaseSet  (::mosek::fusion::BaseSet * _pubthis) :     mosek::fusion::p_Set(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_BaseSet::_initialize  (long long _3950){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)1,_3950);}}int mosek::fusion::BaseSet::dim  ( int _3951) { return mosek::fusion::p_BaseSet::_get_impl(this)->dim(_3951); }int mosek::fusion::p_BaseSet::dim( int _3951){ if ((_3951 < (int)0)){ throw ::mosek::fusion::IndexError(std::string ("Invalid dimension"));}else if ((_3951 > (int)0)){ return (int)1; }else { return (int)size; }}void mosek::fusion::p_BaseSet::destroy(){}void mosek::fusion::BaseSet::destroy() { mosek::fusion::p_BaseSet::_get_impl(this)->destroy(); }mosek::fusion::NDSet::NDSet(mosek::fusion::p_NDSet *_impl) : mosek::fusion::Set(_impl) { /*std::cout << "NDSet()" << this << std::endl; */ }mosek::fusion::NDSet::~NDSet() {  /* std::cout << "~NDSet()" << this << std::endl << std::flush; */ }mosek::fusion::p_NDSet::p_NDSet  (::mosek::fusion::NDSet * _pubthis) :     mosek::fusion::p_Set(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NDSet::t mosek::fusion::p_NDSet::_new_NDSet  (int _3952,    int _3953,    int _3954){ return new mosek::fusion::NDSet(_3952,_3953,_3954); }mosek::fusion::NDSet::NDSet  (int _3952,    int _3953,    int _3954) :    NDSet(new mosek::fusion::p_NDSet(this)){ mosek::fusion::p_NDSet::_get_impl(this)->_initialize(_3952,_3953,_3954); }void mosek::fusion::p_NDSet::_initialize  (int _3952,    int _3953,    int _3954){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)3,(long long)((_3952 * _3953) * _3954));(dimdef = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_3952,_3953,_3954})); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)(_3953 * _3954),(long long)_3954,(long long)1})); }}mosek::fusion::NDSet::t mosek::fusion::p_NDSet::_new_NDSet  (int _3955,    int _3956){ return new mosek::fusion::NDSet(_3955,_3956); }mosek::fusion::NDSet::NDSet  (int _3955,    int _3956) :    NDSet(new mosek::fusion::p_NDSet(this)){ mosek::fusion::p_NDSet::_get_impl(this)->_initialize(_3955,_3956); }void mosek::fusion::p_NDSet::_initialize  (int _3955,    int _3956){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)2,(long long)(_3955 * _3956));(dimdef = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_3955,_3956})); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)_3956,(long long)1})); }}mosek::fusion::NDSet::t mosek::fusion::p_NDSet::_new_NDSet  (std::shared_ptr< monty::ndarray< int,1 > > _3957){ return new mosek::fusion::NDSet(_3957); }mosek::fusion::NDSet::NDSet  (std::shared_ptr< monty::ndarray< int,1 > > _3957) :    NDSet(new mosek::fusion::p_NDSet(this)){ mosek::fusion::p_NDSet::_get_impl(this)->_initialize(_3957); }void mosek::fusion::p_NDSet::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _3957){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Set::_initialize((int)((_3957)->size(0)),::mosek::fusion::p_NDSet::sumdims(_3957));int _8683 = (int)0; int _8684 = nd; for (int _3958 = _8683;_3958<_8684;++_3958){ if ((((*_3957)(_3958)) < (int)0)){ throw ::mosek::fusion::SliceError(std::string ("Negative dimension size"));}else {}}(dimdef = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8685; for (int _3959=(int)0, _8686=(int)((_3957)->size(0)); _3959 < _8686;++_3959)_8685.push_back(((*_3957)(_3959))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8685.size()),_8685.begin(),_8685.end())); })()); (strides = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(nd)))); (((*strides)((nd - (int)1))) = (long long)1); { int _3960 = (nd - (int)1); for (;(_3960 > (int)0);( -- _3960 )){ (((*strides)((_3960 - (int)1))) = (((*strides)(_3960)) * ((*dimdef)(_3960)))); }}}}std::string mosek::fusion::NDSet::indexToString  ( long long _3961) { return mosek::fusion::p_NDSet::_get_impl(this)->indexToString(_3961); }std::string mosek::fusion::p_NDSet::indexToString( long long _3961){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3962 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); std::shared_ptr< monty::ndarray< int,1 > > _3963 = idxtokey(_3961); mosek::fusion::Utils::p_StringBuffer::_get_impl(_3962.get())->a(((*_3963)((int)0))); int _8687 = (int)1; int _8688 = (int)((_3963)->size(0)); for (int _3964 = _8687;_3964<_8688;++_3964){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3962.get())->a(std::string (",")).get())->a(((*_3963)(_3964))); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3962.get())->toString(); }std::string mosek::fusion::NDSet::getname  ( std::shared_ptr< monty::ndarray< int,1 > > _3965) { return mosek::fusion::p_NDSet::_get_impl(this)->getname(_3965); }std::string mosek::fusion::p_NDSet::getname( std::shared_ptr< monty::ndarray< int,1 > > _3965){ if ((nd != (int)((_3965)->size(0)))){ throw ::mosek::fusion::DimensionError(std::string ("Key dimensions do not match set dimensions."));}else {}{ int _3966 = (int)0; for (;(_3966 < nd);( ++ _3966 )){ if (((((*_3965)(_3966)) < (int)0) || (((*_3965)(_3966)) >= (((*dimdef)(_3966)) + (int)1)))){ throw ::mosek::fusion::IndexError(std::string ("Key dimensions do not match set dimensions."));}else {}}}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3967 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_3967.get())->a(((*_3965)((int)0))); int _8689 = (int)1; int _8690 = nd; for (int _3968 = _8689;_3968<_8690;++_3968){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3967.get())->a(std::string (",")).get())->a(((*_3965)(_3968))); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3967.get())->toString(); }std::string mosek::fusion::NDSet::getname  ( long long _3969) { return mosek::fusion::p_NDSet::_get_impl(this)->getname(_3969); }std::string mosek::fusion::p_NDSet::getname( long long _3969){ if ((nd == (int)1)){ std::shared_ptr< monty::ndarray< long long,1 > > _3970 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(nd))); long long _3971 = _3969; int _8691 = (int)0; int _8692 = nd; for (int _3972 = _8691;_3972<_8692;++_3972){ (((*_3970)(_3972)) = (_3971 / ((*strides)(_3972)))); (_3971 = (_3971 - (((*_3970)(_3972)) * ((*strides)(_3972))))); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3973 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_3973.get())->a(_3969); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3973.get())->toString(); }else { return _pubthis->getname(idxtokey(_3969)); }}int mosek::fusion::NDSet::dim  ( int _3974) { return mosek::fusion::p_NDSet::_get_impl(this)->dim(_3974); }int mosek::fusion::p_NDSet::dim( int _3974){ return ([&]() -> int { if ( (_3974 >= nd)) return ((int)1); else return (((*dimdef)(_3974))); })(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NDSet::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _3975,    std::shared_ptr< monty::ndarray< int,1 > > _3976) { return mosek::fusion::p_NDSet::_get_impl(this)->slice(_3975,_3976); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_NDSet::slice( std::shared_ptr< monty::ndarray< int,1 > > _3975,std::shared_ptr< monty::ndarray< int,1 > > _3976){ if (((nd != (int)((_3975)->size(0))) || (nd != (int)((_3976)->size(0))))){ throw ::mosek::fusion::SliceError(std::string ("Slice dimensions do not match set dimensions."));}else {}{ int _3977 = (int)0; for (;(_3977 < nd);( ++ _3977 )){ if (((((*_3975)(_3977)) < (int)0) || ((((*_3976)(_3977)) < ((*_3975)(_3977))) || (((*_3976)(_3977)) > ((*dimdef)(_3977)))))){ throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds."));}else {}}}std::shared_ptr< monty::ndarray< int,1 > > _3978 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8693; for (int _3979=(int)0, _8694=nd; _3979 < _8694;++_3979)_8693.push_back((((*_3976)(_3979)) - ((*_3975)(_3979)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8693.size()),_8693.begin(),_8693.end())); })(); return ::mosek::fusion::p_NDSet::_new_NDSet(_3978); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::NDSet::slice  ( int _3980,    int _3981) { return mosek::fusion::p_NDSet::_get_impl(this)->slice(_3980,_3981); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_NDSet::slice( int _3980,int _3981){ if ((nd != (int)1)){ throw ::mosek::fusion::SliceError(std::string ("Slice dimensions do not match set dimensions."));}else if (((_3980 < (int)0) || ((_3981 < _3980) || (_3981 > size)))){ throw ::mosek::fusion::SliceError(std::string ("Slice dimensions do not match set dimensions."));}else {}return ::mosek::fusion::p_IntSet::_new_IntSet(_3980,_3981); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_NDSet::selectidxs( std::shared_ptr< monty::ndarray< std::string,1 > > _3982){ throw ::mosek::fusion::IndexError(std::string ("invalid key type"));}int mosek::fusion::p_NDSet::linear_index_in_dim( int _3983,std::shared_ptr< monty::ndarray< int,1 > > _3984){ throw ::mosek::fusion::IndexError(std::string ("invalid key type"));}int mosek::fusion::p_NDSet::linear_index_in_dim( int _3985,int _3986){ if (((_3985 < (int)0) || (_3985 >= (int)((dimdef)->size(0))))){ throw ::mosek::fusion::IndexError(std::string ("dimension index out of bounds"));}else {}if (((_3986 < (int)0) || (_3986 >= ((*dimdef)(_3985))))){ throw ::mosek::fusion::IndexError(std::string ("key out of bounds"));}else { return _3986; }}long long mosek::fusion::p_NDSet::sumdims( std::shared_ptr< monty::ndarray< int,1 > > _3987){ long long _3988 = (long long)1; int _8695 = (int)0; int _8696 = (int)((_3987)->size(0)); for (int _3989 = _8695;_3989<_8696;++_3989){ (_3988 *= ((*_3987)(_3989))); }return _3988; }long long mosek::fusion::NDSet::stride  ( int _3990) { return mosek::fusion::p_NDSet::_get_impl(this)->stride(_3990); }long long mosek::fusion::p_NDSet::stride( int _3990){ return ((*strides)(_3990)); }void mosek::fusion::p_NDSet::destroy(){strides.reset();dimdef.reset();}void mosek::fusion::NDSet::destroy() { mosek::fusion::p_NDSet::_get_impl(this)->destroy(); }mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }mosek::fusion::p_Set::p_Set  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Set::_initialize  (int _3991,    long long _3992){monty::rc_reserve __reserve_this(_pubthis); { { (nd = _3991); (nd_p = _3991); (size = _3992); }}}std::string mosek::fusion::Set::toString  ( ) { return mosek::fusion::p_Set::_get_impl(this)->toString(); }std::string mosek::fusion::p_Set::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _3993 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3993.get())->a(std::string ("Set(shape=(")).get())->a(_pubthis->dim((int)0)); int _8697 = (int)1; int _8698 = nd; for (int _3994 = _8697;_3994<_8698;++_3994){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_3993.get())->a(std::string (",")).get())->a(_pubthis->dim(_3994)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_3993.get())->a(std::string ("))")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_3993.get())->toString(); }long long mosek::fusion::p_Set::linearidx( int _4000,int _4001,int _4002){ return (long long)((((_4000 * _pubthis->dim((int)1)) + _4001) * _pubthis->dim((int)2)) + _4002); }long long mosek::fusion::p_Set::linearidx( int _4003,int _4004){ return ((_4003 * _pubthis->dim((int)1)) + _4004); }long long mosek::fusion::p_Set::linearidx( std::shared_ptr< monty::ndarray< int,1 > > _4005){ long long _4006 = ((*_4005)((int)0)); int _8699 = (int)1; int _8700 = (int)((_4005)->size(0)); for (int _4007 = _8699;_4007<_8700;++_4007){ (_4006 = ((_4006 * _pubthis->dim(_4007)) + ((*_4005)(_4007)))); }return _4006; }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::idxtokey  ( long long _4008) { return mosek::fusion::p_Set::_get_impl(this)->idxtokey(_4008); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::idxtokey( long long _4008){ std::shared_ptr< monty::ndarray< int,1 > > _4009 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nd_p))); long long _4010 = _4008; int _8701 = (int)0; int _8702 = nd_p; for (int _4011 = _8701;_4011<_8702;++_4011){ (((*_4009)(_4011)) = (int)(_4010 / _pubthis->stride(_4011))); (_4010 = (_4010 % _pubthis->stride(_4011))); }return _4009; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4016) { return mosek::fusion::p_Set::make(_4016); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > > _4016){ return ::mosek::fusion::p_ProductSet::_new_ProductSet(_4016); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( monty::rc_ptr< ::mosek::fusion::Set > _4017,    monty::rc_ptr< ::mosek::fusion::Set > _4018) { return mosek::fusion::p_Set::make(_4017,_4018); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( monty::rc_ptr< ::mosek::fusion::Set > _4017,monty::rc_ptr< ::mosek::fusion::Set > _4018){ return ::mosek::fusion::p_ProductSet::_new_ProductSet(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Set >,1 >{_4017,_4018})); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _4019) { return mosek::fusion::p_Set::make(_4019); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( std::shared_ptr< monty::ndarray< int,1 > > _4019){ return ::mosek::fusion::p_NDSet::_new_NDSet(_4019); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( int _4020,    int _4021,    int _4022) { return mosek::fusion::p_Set::make(_4020,_4021,_4022); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( int _4020,int _4021,int _4022){ return ::mosek::fusion::p_NDSet::_new_NDSet(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4020,_4021,_4022})); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( int _4023,    int _4024) { return mosek::fusion::p_Set::make(_4023,_4024); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( int _4023,int _4024){ return ::mosek::fusion::p_NDSet::_new_NDSet(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4023,_4024})); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( int _4025) { return mosek::fusion::p_Set::make(_4025); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( int _4025){ return ::mosek::fusion::p_IntSet::_new_IntSet(_4025); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::scalar  ( ) { return mosek::fusion::p_Set::scalar(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::scalar( ){ return ::mosek::fusion::p_Set::make((int)1); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< std::string,1 > > _4026) { return mosek::fusion::p_Set::make(_4026); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Set::make( std::shared_ptr< monty::ndarray< std::string,1 > > _4026){ return ::mosek::fusion::p_StringSet::_new_StringSet(_4026); }int mosek::fusion::Set::realnd  ( ) { return mosek::fusion::p_Set::_get_impl(this)->realnd(); }int mosek::fusion::p_Set::realnd( ){ if ((nd == (int)1)){ return (int)1; }else { int _4027 = (int)0; { int _4028 = (int)0; for (;(_4028 < nd);( ++ _4028 )){ if ((_pubthis->dim(_4028) != (int)1)){ ( ++ _4027 ); }else {}}}if ((_4027 == (int)0)){ ( ++ _4027 ); }else {}return _4027; }}long long mosek::fusion::Set::getSize  ( ) { return mosek::fusion::p_Set::_get_impl(this)->getSize(); }long long mosek::fusion::p_Set::getSize( ){ return size; }bool mosek::fusion::Set::compare  ( monty::rc_ptr< ::mosek::fusion::Set > _4029) { return mosek::fusion::p_Set::_get_impl(this)->compare(_4029); }bool mosek::fusion::p_Set::compare( monty::rc_ptr< ::mosek::fusion::Set > _4029){ if (((size != mosek::fusion::p_Set::_get_impl(_4029)->size) || (_pubthis->realnd() != _4029->realnd()))){ return false; }else {}int _4030 = (int)0; int _4031 = (int)0; while (((_4030 < nd) && (_4031 < mosek::fusion::p_Set::_get_impl(_4029)->nd))) { if ((_pubthis->dim(_4030) == (int)1)){ ( ++ _4030 ); }else if ((_4029->dim(_4031) == (int)1)){ ( ++ _4031 ); }else if ((_pubthis->dim(_4030) != _4029->dim(_4031))){ return false; }else { ( ++ _4030 ); ( ++ _4031 ); }}return true; }void mosek::fusion::p_Set::destroy(){}void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }mosek::fusion::QConeDomain::QConeDomain(mosek::fusion::p_QConeDomain *_impl) : _impl(_impl) { /*std::cout << "QConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::QConeDomain::~QConeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_QConeDomain::p_QConeDomain  (::mosek::fusion::QConeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::QConeDomain::t mosek::fusion::p_QConeDomain::_new_QConeDomain  (mosek::fusion::QConeKey _4032,    std::shared_ptr< monty::ndarray< int,1 > > _4033,    int _4034){ return new mosek::fusion::QConeDomain(_4032,_4033,_4034); }mosek::fusion::QConeDomain::QConeDomain  (mosek::fusion::QConeKey _4032,    std::shared_ptr< monty::ndarray< int,1 > > _4033,    int _4034) :    QConeDomain(new mosek::fusion::p_QConeDomain(this)){ mosek::fusion::p_QConeDomain::_get_impl(this)->_initialize(_4032,_4033,_4034); }void mosek::fusion::p_QConeDomain::_initialize  (mosek::fusion::QConeKey _4032,    std::shared_ptr< monty::ndarray< int,1 > > _4033,    int _4034){monty::rc_reserve __reserve_this(_pubthis); { { (shape = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _4033) return (::mosek::fusion::p_Set::make(_4033)); else return (nullptr); })()); (key = _4032); (axisidx = _4034); (int_flag = false); }}}std::string mosek::fusion::p_QConeDomain::domainToString( long long _4035,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4036){ if ((key == ::mosek::fusion::QConeKey::InQCone)){ if (shape){ std::shared_ptr< monty::ndarray< int,1 > > _4037 = mosek::fusion::p_Set::_get_impl(shape.get())->idxtokey(_4035); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (" : element (")).get())->a(((*_4037)((int)0))); int _8703 = (int)1; int _8704 = (int)((_4037)->size(0)); for (int _4038 = _8703;_4038<_8704;++_4038){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (",")).get())->a(((*_4037)(_4038))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (") in a quadratic cone of size (")).get())->a(shape->dim((int)0)); int _8705 = (int)1; int _8706 = (int)((_4037)->size(0)); for (int _4039 = _8705;_4039<_8706;++_4039){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (",")).get())->a(shape->dim(_4039)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (")")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (" : element in a quadratic cone")); }}else if ((key == ::mosek::fusion::QConeKey::InRotatedQCone)){ if (shape){ std::shared_ptr< monty::ndarray< int,1 > > _4040 = mosek::fusion::p_Set::_get_impl(shape.get())->idxtokey(_4035); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (" : element (")).get())->a(((*_4040)((int)0))); int _8707 = (int)1; int _8708 = (int)((_4040)->size(0)); for (int _4041 = _8707;_4041<_8708;++_4041){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (",")).get())->a(((*_4040)(_4041))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (") in a rotated quadratic cone of size (")).get())->a(shape->dim((int)0)); int _8709 = (int)1; int _8710 = (int)((_4040)->size(0)); for (int _4042 = _8709;_4042<_8710;++_4042){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (",")).get())->a(shape->dim(_4042)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (")")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->a(std::string (" : element in a rotated quadratic cone")); }}else {}return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4036.get())->toString(); }bool mosek::fusion::p_QConeDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4043){ return (! shape || shape->compare(_4043)); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::QConeDomain::integral  ( ) { return mosek::fusion::p_QConeDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_QConeDomain::integral( ){ (int_flag = true); return _pubthis; }int mosek::fusion::QConeDomain::getAxis  ( ) { return mosek::fusion::p_QConeDomain::_get_impl(this)->getAxis(); }int mosek::fusion::p_QConeDomain::getAxis( ){ return axisidx; }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::QConeDomain::axis  ( int _4044) { return mosek::fusion::p_QConeDomain::_get_impl(this)->axis(_4044); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_QConeDomain::axis( int _4044){ (axisidx = _4044); return _pubthis; }void mosek::fusion::p_QConeDomain::destroy(){shape.reset();}void mosek::fusion::QConeDomain::destroy() { mosek::fusion::p_QConeDomain::_get_impl(this)->destroy(); }mosek::fusion::LinPSDDomain::LinPSDDomain(mosek::fusion::p_LinPSDDomain *_impl) : _impl(_impl) { /*std::cout << "LinPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinPSDDomain::~LinPSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinPSDDomain::p_LinPSDDomain  (::mosek::fusion::LinPSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (monty::rc_ptr< ::mosek::fusion::Set > _4045){ return new mosek::fusion::LinPSDDomain(_4045); }mosek::fusion::LinPSDDomain::LinPSDDomain  (monty::rc_ptr< ::mosek::fusion::Set > _4045) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_4045); }void mosek::fusion::p_LinPSDDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::Set > _4045){monty::rc_reserve __reserve_this(_pubthis); { { (shape = _4045); }}}void mosek::fusion::p_LinPSDDomain::destroy(){shape.reset();}void mosek::fusion::LinPSDDomain::destroy() { mosek::fusion::p_LinPSDDomain::_get_impl(this)->destroy(); }mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_PSDDomain::p_PSDDomain  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _4046,    monty::rc_ptr< ::mosek::fusion::Set > _4047){ return new mosek::fusion::PSDDomain(_4046,_4047); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _4046,    monty::rc_ptr< ::mosek::fusion::Set > _4047) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_4046,_4047); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _4046,    monty::rc_ptr< ::mosek::fusion::Set > _4047){monty::rc_reserve __reserve_this(_pubthis); { { (shape = _4047); (key = _4046); }}}std::string mosek::fusion::p_PSDDomain::domainToString( long long _4048,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4049){ if (shape){ std::shared_ptr< monty::ndarray< int,1 > > _4050 = mosek::fusion::p_Set::_get_impl(shape.get())->idxtokey(_4048); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4049.get())->a(std::string (" : element (")).get())->a(((*_4050)((int)0))); int _8711 = (int)1; int _8712 = (int)((_4050)->size(0)); for (int _4051 = _8711;_4051<_8712;++_4051){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4049.get())->a(std::string (",")).get())->a(((*_4050)(_4051))); }mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4049.get())->a(std::string (") in a semidefinite cone of size (")).get())->a(shape->dim((int)0)); int _8713 = (int)1; int _8714 = (int)((_4050)->size(0)); for (int _4052 = _8713;_4052<_8714;++_4052){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4049.get())->a(std::string (",")).get())->a(shape->dim(_4052)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4049.get())->a(std::string (")")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(_4049.get())->a(std::string (" : element in a semidefinite cone")); }return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4049.get())->toString(); }void mosek::fusion::p_PSDDomain::destroy(){shape.reset();}void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4053){ return new mosek::fusion::SymmetricRangeDomain(_4053); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4053) :    SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this)){ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_4053); }void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4053){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_RangeDomain::_initialize(_4053);if ((shape && ((mosek::fusion::p_Set::_get_impl(shape)->nd != (int)2) || (shape->dim((int)0) != mosek::fusion::p_RangeDomain::_get_impl(_4053)->shape->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));}else {}(dim = ([&]() -> int { if ( ! shape) return ((int)0); else return (shape->dim((int)0)); })()); }}void mosek::fusion::p_SymmetricRangeDomain::destroy(){}void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_RangeDomain::p_RangeDomain  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (std::shared_ptr< monty::ndarray< double,1 > > _4054,    std::shared_ptr< monty::ndarray< double,1 > > _4055,    std::shared_ptr< monty::ndarray< int,1 > > _4056,    std::shared_ptr< monty::ndarray< long long,1 > > _4057){ return new mosek::fusion::RangeDomain(_4054,_4055,_4056,_4057); }mosek::fusion::RangeDomain::RangeDomain  (std::shared_ptr< monty::ndarray< double,1 > > _4054,    std::shared_ptr< monty::ndarray< double,1 > > _4055,    std::shared_ptr< monty::ndarray< int,1 > > _4056,    std::shared_ptr< monty::ndarray< long long,1 > > _4057) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_4054,_4055,_4056,_4057); }void mosek::fusion::p_RangeDomain::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _4054,    std::shared_ptr< monty::ndarray< double,1 > > _4055,    std::shared_ptr< monty::ndarray< int,1 > > _4056,    std::shared_ptr< monty::ndarray< long long,1 > > _4057){monty::rc_reserve __reserve_this(_pubthis); { { (cardinal_flag = false); (sparse_flag = false); if (! _4056){ (shape = nullptr); }else { (shape = ::mosek::fusion::p_Set::make(_4056)); }if (_4057){ (idxmap = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); int _8715 = (int)0; int _8716 = (int)((_4054)->size(0)); for (int _4058 = _8715;_4058<_8716;++_4058){ mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->setItem(((*_4057)(_4058)),_4058); }}else { (idxmap = nullptr); }(ub = _4055); (lb = _4054); }}}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4059){ return new mosek::fusion::RangeDomain(_4059); }mosek::fusion::RangeDomain::RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4059) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_4059); }void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _4059){monty::rc_reserve __reserve_this(_pubthis); { { (cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_4059)->cardinal_flag); (sparse_flag = mosek::fusion::p_RangeDomain::_get_impl(_4059)->sparse_flag); (shape = mosek::fusion::p_RangeDomain::_get_impl(_4059)->shape); (idxmap = mosek::fusion::p_RangeDomain::_get_impl(_4059)->idxmap); (ub = mosek::fusion::p_RangeDomain::_get_impl(_4059)->ub); (lb = mosek::fusion::p_RangeDomain::_get_impl(_4059)->lb); }}}monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric  ( ) { return mosek::fusion::p_RangeDomain::_get_impl(this)->symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::symmetric( ){ return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(_pubthis); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse  ( ) { return mosek::fusion::p_RangeDomain::_get_impl(this)->sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::sparse( ){ (sparse_flag = true); return _pubthis; }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral  ( ) { return mosek::fusion::p_RangeDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::integral( ){ (cardinal_flag = true); return _pubthis; }std::string mosek::fusion::p_RangeDomain::domainToString( long long _4060,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4061){ return mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4061.get())->a(std::string (" in [ ")).get())->a(get_lb_item(_4060)).get())->a(std::string (",")).get())->a(get_ub_item(_4060)).get())->a(std::string ("]")).get())->toString(); }bool mosek::fusion::p_RangeDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4062){ if (! shape){ return true; }else { return shape->compare(_4062); }}double mosek::fusion::p_RangeDomain::get_ub_item( long long _4063){ if (idxmap){ if (! ub){ return 0.0; }else { if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_4063)){ return ((*ub)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_4063))); }else { return 0.0; }}}else { if (((int)((ub)->size(0)) == (int)1)){ return ((*ub)((int)0)); }else if (ub){ return ((*ub)(_4063)); }else { return 0.0; }}}double mosek::fusion::p_RangeDomain::get_lb_item( long long _4064){ if (idxmap){ if (! lb){ return 0.0; }else if (mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->hasItem(_4064)){ return ((*lb)(mosek::fusion::Utils::p_IntMap::_get_impl(idxmap.get())->getItem(_4064))); }else { return 0.0; }}else { if (((int)((lb)->size(0)) == (int)1)){ return ((*lb)((int)0)); }else if (lb){ return ((*lb)(_4064)); }else { return 0.0; }}}void mosek::fusion::p_RangeDomain::destroy(){ub.reset();lb.reset();idxmap.reset();shape.reset();}void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4065){ return new mosek::fusion::SymmetricLinearDomain(_4065); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4065) :    SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this)){ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_4065); }void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4065){monty::rc_reserve __reserve_this(_pubthis); { { (dom = _4065); (shape = mosek::fusion::p_LinearDomain::_get_impl(_4065)->shape); (key = mosek::fusion::p_LinearDomain::_get_impl(_4065)->key); (cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_4065)->cardinal_flag); (sparse_flag = mosek::fusion::p_LinearDomain::_get_impl(_4065)->sparse_flag); if ((shape && ((mosek::fusion::p_Set::_get_impl(shape)->nd != (int)2) || (shape->dim((int)0) != mosek::fusion::p_LinearDomain::_get_impl(_4065)->shape->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));}else {}(dim = ([&]() -> int { if ( ! shape) return ((int)0); else return (shape->dim((int)0)); })()); }}}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse  ( ) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->sparse(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::sparse( ){ (sparse_flag = true); return _pubthis; }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral  ( ) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::integral( ){ (cardinal_flag = true); return _pubthis; }std::string mosek::fusion::p_SymmetricLinearDomain::domainToString( long long _4066,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4067){ return mosek::fusion::p_LinearDomain::_get_impl(dom.get())->domainToString(_4066,_4067); }bool mosek::fusion::p_SymmetricLinearDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4068){ return mosek::fusion::p_LinearDomain::_get_impl(dom.get())->match_shape(_4068); }double mosek::fusion::p_SymmetricLinearDomain::get_rhs_item( long long _4069){ return mosek::fusion::p_LinearDomain::_get_impl(dom.get())->get_rhs_item(_4069); }void mosek::fusion::p_SymmetricLinearDomain::destroy(){shape.reset();dom.reset();}void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinearDomain::p_LinearDomain  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _4070,    std::shared_ptr< monty::ndarray< double,1 > > _4071,    std::shared_ptr< monty::ndarray< long long,1 > > _4072,    std::shared_ptr< monty::ndarray< int,1 > > _4073){ return new mosek::fusion::LinearDomain(_4070,_4071,_4072,_4073); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _4070,    std::shared_ptr< monty::ndarray< double,1 > > _4071,    std::shared_ptr< monty::ndarray< long long,1 > > _4072,    std::shared_ptr< monty::ndarray< int,1 > > _4073) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_4070,_4071,_4072,_4073); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _4070,    std::shared_ptr< monty::ndarray< double,1 > > _4071,    std::shared_ptr< monty::ndarray< long long,1 > > _4072,    std::shared_ptr< monty::ndarray< int,1 > > _4073){monty::rc_reserve __reserve_this(_pubthis); { { (shape = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( _4073) return (::mosek::fusion::p_Set::make(_4073)); else return (nullptr); })()); (key = _4070); (bnd = _4071); if (_4072){ (inst = ::mosek::fusion::Utils::p_IntMap::_new_IntMap()); int _8717 = (int)0; int _8718 = (int)((_4072)->size(0)); for (int _4074 = _8717;_4074<_8718;++_4074){ mosek::fusion::Utils::p_IntMap::_get_impl(inst.get())->setItem(((*_4072)(_4074)),_4074); }}else { (inst = nullptr); }(cardinal_flag = false); (sparse_flag = false); }}}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4075){ return new mosek::fusion::LinearDomain(_4075); }mosek::fusion::LinearDomain::LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4075) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_4075); }void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _4075){monty::rc_reserve __reserve_this(_pubthis); { { (shape = mosek::fusion::p_LinearDomain::_get_impl(_4075)->shape); (inst = mosek::fusion::p_LinearDomain::_get_impl(_4075)->inst); (bnd = mosek::fusion::p_LinearDomain::_get_impl(_4075)->bnd); (key = mosek::fusion::p_LinearDomain::_get_impl(_4075)->key); (cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_4075)->cardinal_flag); (sparse_flag = mosek::fusion::p_LinearDomain::_get_impl(_4075)->sparse_flag); }}}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric  ( ) { return mosek::fusion::p_LinearDomain::_get_impl(this)->symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::symmetric( ){ return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(_pubthis); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse  ( ) { return mosek::fusion::p_LinearDomain::_get_impl(this)->sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::sparse( ){ (sparse_flag = true); return _pubthis; }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral  ( ) { return mosek::fusion::p_LinearDomain::_get_impl(this)->integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::integral( ){ (cardinal_flag = true); return _pubthis; }std::string mosek::fusion::p_LinearDomain::domainToString( long long _4076,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4077){ if ((key == ::mosek::fusion::RelationKey::EqualsTo)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4077.get())->a(std::string (" = ")).get())->a(get_rhs_item(_4076)); }else if ((key == ::mosek::fusion::RelationKey::LessThan)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4077.get())->a(std::string (" <= ")).get())->a(get_rhs_item(_4076)); }else if ((key == ::mosek::fusion::RelationKey::GreaterThan)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4077.get())->a(std::string (" >= ")).get())->a(get_rhs_item(_4076)); }else if ((key == ::mosek::fusion::RelationKey::IsFree)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_4077.get())->a(std::string (" is unbounded")); }else {}return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4077.get())->toString(); }bool mosek::fusion::p_LinearDomain::match_shape( monty::rc_ptr< ::mosek::fusion::Set > _4078){ if (! shape){ return true; }else { return shape->compare(_4078); }}double mosek::fusion::p_LinearDomain::get_rhs_item( long long _4079){ if (inst){ if (mosek::fusion::Utils::p_IntMap::_get_impl(inst.get())->hasItem(_4079)){ return ((*bnd)(mosek::fusion::Utils::p_IntMap::_get_impl(inst.get())->getItem(_4079))); }else { return 0.0; }}else { if (scalable()){ return ([&]() -> double { if ( bnd) return (((*bnd)((int)0))); else return (0.0); })(); }else { return ([&]() -> double { if ( bnd) return (((*bnd)(_4079))); else return (0.0); })(); }}}bool mosek::fusion::p_LinearDomain::scalable( ){ return (! bnd || (((int)((bnd)->size(0)) == (int)1) && ! inst)); }void mosek::fusion::p_LinearDomain::destroy(){bnd.reset();inst.reset();shape.reset();}void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }mosek::fusion::p_Domain::p_Domain  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::p_Domain::dimsize( std::shared_ptr< monty::ndarray< int,1 > > _4080){ long long _4081 = (long long)1; int _8719 = (int)0; int _8720 = (int)((_4080)->size(0)); for (int _4082 = _8719;_4082<_8720;++_4082){ (_4081 *= ((*_4080)(_4082))); }return _4081; }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4083,monty::rc_ptr< ::mosek::fusion::Matrix > _4084){ if (_4084->isSparse()){ std::shared_ptr< monty::ndarray< int,1 > > _4085 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4084->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _4086 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4084->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _4087 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4084->numNonzeros()))); _4084->getDataAsTriplets(_4085,_4086,_4087); std::shared_ptr< monty::ndarray< long long,1 > > _4088 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8721; for (int _4089=(int)0, _8722=(int)((_4085)->size(0)); _4089 < _8722;++_4089)_8721.push_back(((((*_4085)(_4089)) * mosek::fusion::p_Matrix::_get_impl(_4084)->dimj) + ((*_4086)(_4089)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8721.size()),_8721.begin(),_8721.end())); })(); return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4083,_4087,_4088,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4084)->dimi,mosek::fusion::p_Matrix::_get_impl(_4084)->dimj})); }else { return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4083,_4084->getDataAsArray(),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4084)->dimi,mosek::fusion::p_Matrix::_get_impl(_4084)->dimj})); }}monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4090,std::shared_ptr< monty::ndarray< double,2 > > _4091){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4090,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8723; for (int _4092=(int)0, _8724=(int)((_4091)->size(0)); _4092 < _8724;++_4092) for (int _4093=(int)0, _8725=(int)((_4091)->size(1)); _4093 < _8725;++_4093)_8723.push_back(((*_4091)(_4092,_4093))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8723.size()),_8723.begin(),_8723.end())); })(),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4091)->size(0)),(int)((_4091)->size(1))})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4094,std::shared_ptr< monty::ndarray< double,1 > > _4095,std::shared_ptr< monty::ndarray< int,1 > > _4096){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4094,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8726; for (int _4097=(int)0, _8727=(int)((_4095)->size(0)); _4097 < _8727;++_4097)_8726.push_back(((*_4095)(_4097))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8726.size()),_8726.begin(),_8726.end())); })(),nullptr,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8728; for (int _4098=(int)0, _8729=(int)((_4096)->size(0)); _4098 < _8729;++_4098)_8728.push_back(((*_4096)(_4098))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8728.size()),_8728.begin(),_8728.end())); })()); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4099,std::shared_ptr< monty::ndarray< double,1 > > _4100){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4099,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8730; for (int _4101=(int)0, _8731=(int)((_4100)->size(0)); _4101 < _8731;++_4101)_8730.push_back(((*_4100)(_4101))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8730.size()),_8730.begin(),_8730.end())); })(),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4100)->size(0))})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4102,double _4103,std::shared_ptr< monty::ndarray< int,1 > > _4104){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4102,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8732; for (long long _4105=(int)0, _8733=::mosek::fusion::p_Domain::dimsize(_4104); _4105 < _8733;++_4105)_8732.push_back(_4103); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8732.size()),_8732.begin(),_8732.end())); })(),nullptr,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8734; for (int _4106=(int)0, _8735=(int)((_4104)->size(0)); _4106 < _8735;++_4106)_8734.push_back(((*_4104)(_4106))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8734.size()),_8734.begin(),_8734.end())); })()); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain( mosek::fusion::RelationKey _4107,double _4108){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_4107,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4108}),nullptr,nullptr); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( std::shared_ptr< monty::ndarray< double,1 > > _4109,std::shared_ptr< monty::ndarray< double,1 > > _4110,std::shared_ptr< monty::ndarray< int,1 > > _4111){ if (((int)((_4109)->size(0)) != (int)((_4110)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));}else {}int _8736 = (int)0; int _8737 = (int)((_4110)->size(0)); for (int _4112 = _8736;_4112<_8737;++_4112){ if ((((*_4109)(_4112)) > ((*_4110)(_4112)))){ throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));}else {}}if ((_4111 && (::mosek::fusion::p_Domain::dimsize(_4111) != (int)((_4109)->size(0))))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));}else {}return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_4109,_4110,_4111,nullptr); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4113) { return mosek::fusion::p_Domain::symmetric(_4113); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4113){ return _4113->symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4114) { return mosek::fusion::p_Domain::symmetric(_4114); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4114){ return _4114->symmetric(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4115) { return mosek::fusion::p_Domain::sparse(_4115); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4115){ return _4115->sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4116) { return mosek::fusion::p_Domain::sparse(_4116); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4116){ return _4116->sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4117) { return mosek::fusion::p_Domain::integral(_4117); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral( monty::rc_ptr< ::mosek::fusion::RangeDomain > _4117){ return _4117->integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4118) { return mosek::fusion::p_Domain::integral(_4118); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral( monty::rc_ptr< ::mosek::fusion::LinearDomain > _4118){ return _4118->integral(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4119) { return mosek::fusion::p_Domain::integral(_4119); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::integral( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4119){ return _4119->integral(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::axis  ( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4120,    int _4121) { return mosek::fusion::p_Domain::axis(_4120,_4121); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::axis( monty::rc_ptr< ::mosek::fusion::QConeDomain > _4120,int _4121){ return _4120->axis(_4121); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _4122) { return mosek::fusion::p_Domain::inRotatedQCone(_4122); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( std::shared_ptr< monty::ndarray< int,1 > > _4122){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8738; for (int _4123=(int)0, _8739=(int)((_4122)->size(0)); _4123 < _8739;++_4123)_8738.push_back(((*_4122)(_4123))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8738.size()),_8738.begin(),_8738.end())); })(),((int)((_4122)->size(0)) - (int)1)); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _4124,    int _4125) { return mosek::fusion::p_Domain::inRotatedQCone(_4124,_4125); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( int _4124,int _4125){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4124,_4125}),(int)1); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _4126) { return mosek::fusion::p_Domain::inRotatedQCone(_4126); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( int _4126){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4126}),(int)0); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inRotatedQCone  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inRotatedQCone( ){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,nullptr,(int)0); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _4127) { return mosek::fusion::p_Domain::inQCone(_4127); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( std::shared_ptr< monty::ndarray< int,1 > > _4127){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8740; for (int _4128=(int)0, _8741=(int)((_4127)->size(0)); _4128 < _8741;++_4128)_8740.push_back(((*_4127)(_4128))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8740.size()),_8740.begin(),_8740.end())); })(),((int)((_4127)->size(0)) - (int)1)); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( int _4129,    int _4130) { return mosek::fusion::p_Domain::inQCone(_4129,_4130); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( int _4129,int _4130){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4129,_4130}),(int)1); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( int _4131) { return mosek::fusion::p_Domain::inQCone(_4131); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( int _4131){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4131}),(int)0); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::Domain::inQCone  ( ) { return mosek::fusion::p_Domain::inQCone(); }monty::rc_ptr< ::mosek::fusion::QConeDomain > mosek::fusion::p_Domain::inQCone( ){ return ::mosek::fusion::p_QConeDomain::_new_QConeDomain(::mosek::fusion::QConeKey::InQCone,nullptr,(int)0); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _4132,    int _4133) { return mosek::fusion::p_Domain::isLinPSD(_4132,_4133); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD( int _4132,int _4133){ return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(((_4132 * (_4132 + (int)1)) / (int)2),_4133))); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _4134) { return mosek::fusion::p_Domain::isLinPSD(_4134); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD( int _4134){ return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet(((_4134 * (_4134 + (int)1)) / (int)2)))); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( ) { return mosek::fusion::p_Domain::isLinPSD(); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD( ){ return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::Set::t(nullptr)); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _4135,    int _4136) { return mosek::fusion::p_Domain::isTrilPSD(_4135,_4136); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD( int _4135,int _4136){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4135,_4135,_4136))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _4137) { return mosek::fusion::p_Domain::isTrilPSD(_4137); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD( int _4137){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4137,_4137,(int)1))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD( ){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,::mosek::fusion::Set::t(nullptr)); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _4138,    int _4139) { return mosek::fusion::p_Domain::inPSDCone(_4138,_4139); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone( int _4138,int _4139){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4138,_4138,_4139))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _4140) { return mosek::fusion::p_Domain::inPSDCone(_4140); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone( int _4140){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4140,_4140,(int)1))); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone( ){ return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,::mosek::fusion::Set::t(nullptr)); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( ) { return mosek::fusion::p_Domain::binary(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( ){ return ::mosek::fusion::p_Domain::inRange(0.0,1.0)->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( std::shared_ptr< monty::ndarray< int,1 > > _4141) { return mosek::fusion::p_Domain::binary(_4141); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( std::shared_ptr< monty::ndarray< int,1 > > _4141){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8742; for (long long _4142=(int)0, _8743=::mosek::fusion::p_Domain::dimsize(_4141); _4142 < _8743;++_4142)_8742.push_back(0.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8742.size()),_8742.begin(),_8742.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8744; for (long long _4143=(int)0, _8745=::mosek::fusion::p_Domain::dimsize(_4141); _4143 < _8745;++_4143)_8744.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8744.size()),_8744.begin(),_8744.end())); })(),_4141)->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _4144,    int _4145) { return mosek::fusion::p_Domain::binary(_4144,_4145); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( int _4144,int _4145){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8746; for (int _4146=(int)0, _8747=(_4145 * _4144); _4146 < _8747;++_4146)_8746.push_back(0.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8746.size()),_8746.begin(),_8746.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8748; for (int _4147=(int)0, _8749=(_4145 * _4144); _4147 < _8749;++_4147)_8748.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8748.size()),_8748.begin(),_8748.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4144,_4145}))->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _4148) { return mosek::fusion::p_Domain::binary(_4148); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary( int _4148){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8750; for (int _4149=(int)0, _8751=_4148; _4149 < _8751;++_4149)_8750.push_back(0.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8750.size()),_8750.begin(),_8750.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8752; for (int _4150=(int)0, _8753=_4148; _4150 < _8753;++_4150)_8752.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8752.size()),_8752.begin(),_8752.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4148}))->integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4151,    monty::rc_ptr< ::mosek::fusion::Matrix > _4152) { return mosek::fusion::p_Domain::inRange(_4151,_4152); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( monty::rc_ptr< ::mosek::fusion::Matrix > _4151,monty::rc_ptr< ::mosek::fusion::Matrix > _4152){ return ::mosek::fusion::p_Domain::inRange(_4151->getDataAsArray(),_4152->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4151)->dimi,mosek::fusion::p_Matrix::_get_impl(_4151)->dimj})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4153,    double _4154) { return mosek::fusion::p_Domain::inRange(_4153,_4154); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( monty::rc_ptr< ::mosek::fusion::Matrix > _4153,double _4154){ return ::mosek::fusion::p_Domain::inRange(_4153->getDataAsArray(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8754; for (int _4155=(int)0, _8755=(mosek::fusion::p_Matrix::_get_impl(_4153)->dimi * mosek::fusion::p_Matrix::_get_impl(_4153)->dimj); _4155 < _8755;++_4155)_8754.push_back(_4154); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8754.size()),_8754.begin(),_8754.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4153)->dimi,mosek::fusion::p_Matrix::_get_impl(_4153)->dimj})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _4156,    monty::rc_ptr< ::mosek::fusion::Matrix > _4157) { return mosek::fusion::p_Domain::inRange(_4156,_4157); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( double _4156,monty::rc_ptr< ::mosek::fusion::Matrix > _4157){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8756; for (int _4158=(int)0, _8757=(mosek::fusion::p_Matrix::_get_impl(_4157)->dimi * mosek::fusion::p_Matrix::_get_impl(_4157)->dimj); _4158 < _8757;++_4158)_8756.push_back(_4156); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8756.size()),_8756.begin(),_8756.end())); })(),_4157->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{mosek::fusion::p_Matrix::_get_impl(_4157)->dimi,mosek::fusion::p_Matrix::_get_impl(_4157)->dimj})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _4159,    std::shared_ptr< monty::ndarray< double,1 > > _4160) { return mosek::fusion::p_Domain::inRange(_4159,_4160); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( std::shared_ptr< monty::ndarray< double,1 > > _4159,std::shared_ptr< monty::ndarray< double,1 > > _4160){ return ::mosek::fusion::p_Domain::inRange(_4159,_4160,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4159)->size(0))})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _4161,    double _4162) { return mosek::fusion::p_Domain::inRange(_4161,_4162); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( std::shared_ptr< monty::ndarray< double,1 > > _4161,double _4162){ return ::mosek::fusion::p_Domain::inRange(_4161,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8758; for (int _4163=(int)0, _8759=(int)((_4161)->size(0)); _4163 < _8759;++_4163)_8758.push_back(_4162); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8758.size()),_8758.begin(),_8758.end())); })(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4161)->size(0))})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _4164,    std::shared_ptr< monty::ndarray< double,1 > > _4165) { return mosek::fusion::p_Domain::inRange(_4164,_4165); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( double _4164,std::shared_ptr< monty::ndarray< double,1 > > _4165){ return ::mosek::fusion::p_Domain::inRange(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8760; for (int _4166=(int)0, _8761=(int)((_4165)->size(0)); _4166 < _8761;++_4166)_8760.push_back(_4164); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8760.size()),_8760.begin(),_8760.end())); })(),_4165,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_4165)->size(0))})); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _4167,    double _4168) { return mosek::fusion::p_Domain::inRange(_4167,_4168); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange( double _4167,double _4168){ return ::mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4167}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4168}),nullptr); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4169) { return mosek::fusion::p_Domain::greaterThan(_4169); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( monty::rc_ptr< ::mosek::fusion::Matrix > _4169){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4169); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4170,    std::shared_ptr< monty::ndarray< int,1 > > _4171) { return mosek::fusion::p_Domain::greaterThan(_4170,_4171); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( std::shared_ptr< monty::ndarray< double,1 > > _4170,std::shared_ptr< monty::ndarray< int,1 > > _4171){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4170); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,2 > > _4172) { return mosek::fusion::p_Domain::greaterThan(_4172); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( std::shared_ptr< monty::ndarray< double,2 > > _4172){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4172); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4173) { return mosek::fusion::p_Domain::greaterThan(_4173); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( std::shared_ptr< monty::ndarray< double,1 > > _4173){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4173); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4174,    std::shared_ptr< monty::ndarray< int,1 > > _4175) { return mosek::fusion::p_Domain::greaterThan(_4174,_4175); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4174,std::shared_ptr< monty::ndarray< int,1 > > _4175){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4174,_4175); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4176,    int _4177,    int _4178) { return mosek::fusion::p_Domain::greaterThan(_4176,_4177,_4178); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4176,int _4177,int _4178){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4176,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4177,_4178})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4179,    int _4180) { return mosek::fusion::p_Domain::greaterThan(_4179,_4180); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4179,int _4180){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4179,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4180})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _4181) { return mosek::fusion::p_Domain::greaterThan(_4181); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan( double _4181){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_4181); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4182) { return mosek::fusion::p_Domain::lessThan(_4182); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( monty::rc_ptr< ::mosek::fusion::Matrix > _4182){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4182); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4183,    std::shared_ptr< monty::ndarray< int,1 > > _4184) { return mosek::fusion::p_Domain::lessThan(_4183,_4184); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( std::shared_ptr< monty::ndarray< double,1 > > _4183,std::shared_ptr< monty::ndarray< int,1 > > _4184){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4183,_4184); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,2 > > _4185) { return mosek::fusion::p_Domain::lessThan(_4185); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( std::shared_ptr< monty::ndarray< double,2 > > _4185){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4185); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _4186) { return mosek::fusion::p_Domain::lessThan(_4186); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( std::shared_ptr< monty::ndarray< double,1 > > _4186){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4186); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4187,    std::shared_ptr< monty::ndarray< int,1 > > _4188) { return mosek::fusion::p_Domain::lessThan(_4187,_4188); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4187,std::shared_ptr< monty::ndarray< int,1 > > _4188){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4187,_4188); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4189,    int _4190,    int _4191) { return mosek::fusion::p_Domain::lessThan(_4189,_4190,_4191); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4189,int _4190,int _4191){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4189,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4190,_4191})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4192,    int _4193) { return mosek::fusion::p_Domain::lessThan(_4192,_4193); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4192,int _4193){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4192,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4193})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _4194) { return mosek::fusion::p_Domain::lessThan(_4194); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan( double _4194){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_4194); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4195) { return mosek::fusion::p_Domain::equalsTo(_4195); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( monty::rc_ptr< ::mosek::fusion::Matrix > _4195){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4195); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _4196,    std::shared_ptr< monty::ndarray< int,1 > > _4197) { return mosek::fusion::p_Domain::equalsTo(_4196,_4197); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( std::shared_ptr< monty::ndarray< double,1 > > _4196,std::shared_ptr< monty::ndarray< int,1 > > _4197){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4196,_4197); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,2 > > _4198) { return mosek::fusion::p_Domain::equalsTo(_4198); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( std::shared_ptr< monty::ndarray< double,2 > > _4198){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4198); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _4199) { return mosek::fusion::p_Domain::equalsTo(_4199); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( std::shared_ptr< monty::ndarray< double,1 > > _4199){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4199); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4200,    std::shared_ptr< monty::ndarray< int,1 > > _4201) { return mosek::fusion::p_Domain::equalsTo(_4200,_4201); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4200,std::shared_ptr< monty::ndarray< int,1 > > _4201){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4200,_4201); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4202,    int _4203,    int _4204) { return mosek::fusion::p_Domain::equalsTo(_4202,_4203,_4204); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4202,int _4203,int _4204){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4202,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4203,_4204})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4205,    int _4206) { return mosek::fusion::p_Domain::equalsTo(_4205,_4206); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4205,int _4206){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4205,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4206})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _4207) { return mosek::fusion::p_Domain::equalsTo(_4207); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo( double _4207){ return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_4207); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( std::shared_ptr< monty::ndarray< int,1 > > _4208) { return mosek::fusion::p_Domain::unbounded(_4208); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( std::shared_ptr< monty::ndarray< int,1 > > _4208){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8762; for (int _4209=(int)0, _8763=(int)((_4208)->size(0)); _4209 < _8763;++_4209)_8762.push_back(((*_4208)(_4209))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8762.size()),_8762.begin(),_8762.end())); })()); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _4210,    int _4211) { return mosek::fusion::p_Domain::unbounded(_4210,_4211); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( int _4210,int _4211){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4211,_4210})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _4212) { return mosek::fusion::p_Domain::unbounded(_4212); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( int _4212){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_4212})); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( ) { return mosek::fusion::p_Domain::unbounded(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded( ){ return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,nullptr,nullptr,nullptr); }void mosek::fusion::p_Domain::destroy(){}void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricExpr::SymmetricExpr(mosek::fusion::p_SymmetricExpr *_impl) : _impl(_impl) { /*std::cout << "SymmetricExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricExpr::~SymmetricExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricExpr::p_SymmetricExpr  (::mosek::fusion::SymmetricExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricExpr::t mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr  (int _4221,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4222,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4223,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4224){ return new mosek::fusion::SymmetricExpr(_4221,_4222,_4223,_4224); }mosek::fusion::SymmetricExpr::SymmetricExpr  (int _4221,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4222,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4223,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4224) :    SymmetricExpr(new mosek::fusion::p_SymmetricExpr(this)){ mosek::fusion::p_SymmetricExpr::_get_impl(this)->_initialize(_4221,_4222,_4223,_4224); }void mosek::fusion::p_SymmetricExpr::_initialize  (int _4221,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4222,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4223,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4224){monty::rc_reserve __reserve_this(_pubthis); { { (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->n = _4221); (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->Ms = _4222); (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->xs = _4223); (mosek::fusion::p_SymmetricExpr::_get_impl(_pubthis)->b = _4224); }}}monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add( monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4225,monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4226){ if ((mosek::fusion::p_SymmetricExpr::_get_impl(_4225)->n != _4226->getdim())){ throw ::mosek::fusion::DimensionError(std::string ("Dimension does not match"));}else {}return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4225)->n,mosek::fusion::p_SymmetricExpr::_get_impl(_4225)->Ms,mosek::fusion::p_SymmetricExpr::_get_impl(_4225)->xs,([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( mosek::fusion::p_SymmetricExpr::_get_impl(_4225)->b) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4225)->b->add(_4226)); else return (_4226); })()); }monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::mul( monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4227,double _4228){ return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4227)->n,([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > > _8764; for (int _4229=(int)0, _8765=(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4227)->Ms)->size(0)); _4229 < _8765;++_4229)_8764.push_back(((*mosek::fusion::p_SymmetricExpr::_get_impl(_4227)->Ms)(_4229))->mul(_4228)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(_8764.size()),_8764.begin(),_8764.end())); })(),mosek::fusion::p_SymmetricExpr::_get_impl(_4227)->xs,([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( mosek::fusion::p_SymmetricExpr::_get_impl(_4227)->b) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4227)->b->mul(_4228)); else return (nullptr); })()); }monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add( monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4230,monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _4231){ if ((mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->n != mosek::fusion::p_SymmetricExpr::_get_impl(_4231)->n)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _4232 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(((int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->Ms)->size(0)) + (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4231)->Ms)->size(0)))))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4233 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->xs)->size(0)) + (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4231)->xs)->size(0)))))); int _4234 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->Ms)->size(0)); int _8766 = (int)0; int _8767 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->Ms)->size(0)); for (int _4235 = _8766;_4235<_8767;++_4235){ (((*_4232)(_4235)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->Ms)(_4235))); }int _8768 = (int)0; int _8769 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4231)->Ms)->size(0)); for (int _4236 = _8768;_4236<_8769;++_4236){ (((*_4232)((_4236 + _4234))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4231)->Ms)(_4236))); }int _4237 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->xs)->size(0)); int _8770 = (int)0; int _8771 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->xs)->size(0)); for (int _4238 = _8770;_4238<_8771;++_4238){ (((*_4233)(_4238)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->xs)(_4238))); }int _8772 = (int)0; int _8773 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_4231)->xs)->size(0)); for (int _4239 = _8772;_4239<_8773;++_4239){ (((*_4233)((_4239 + _4237))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_4231)->xs)(_4239))); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _4240 = ([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( (! mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->b && ! mosek::fusion::p_SymmetricExpr::_get_impl(_4231)->b)) return (nullptr); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( (mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->b && mosek::fusion::p_SymmetricExpr::_get_impl(_4231)->b)) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->b->add(mosek::fusion::p_SymmetricExpr::_get_impl(_4231)->b)); else return (([&]() -> monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > { if ( mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->b) return (mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->b); else return (mosek::fusion::p_SymmetricExpr::_get_impl(_4231)->b); })()); })()); })(); return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_4230)->n,_4232,_4233,_4240); }std::string mosek::fusion::SymmetricExpr::toString  ( ) { return mosek::fusion::p_SymmetricExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymmetricExpr::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4241 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4241.get())->a(std::string ("SymmetricExpr( (")).get())->a(n).get())->a(std::string (",")).get())->a(n).get())->a(std::string (") )")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4241.get())->toString(); }void mosek::fusion::p_SymmetricExpr::destroy(){xs.reset();b.reset();Ms.reset();}void mosek::fusion::SymmetricExpr::destroy() { mosek::fusion::p_SymmetricExpr::_get_impl(this)->destroy(); }mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : _impl(_impl) { /*std::cout << "Expr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Expr::~Expr() { delete _impl; _impl = nullptr; }mosek::fusion::p_Expr::p_Expr  (::mosek::fusion::Expr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4242,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4243,    std::shared_ptr< monty::ndarray< long long,1 > > _4244,    std::shared_ptr< monty::ndarray< double,1 > > _4245,    std::shared_ptr< monty::ndarray< double,1 > > _4246,    monty::rc_ptr< ::mosek::fusion::Set > _4247,    std::shared_ptr< monty::ndarray< long long,1 > > _4248){ return new mosek::fusion::Expr(_4242,_4243,_4244,_4245,_4246,_4247,_4248); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4242,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4243,    std::shared_ptr< monty::ndarray< long long,1 > > _4244,    std::shared_ptr< monty::ndarray< double,1 > > _4245,    std::shared_ptr< monty::ndarray< double,1 > > _4246,    monty::rc_ptr< ::mosek::fusion::Set > _4247,    std::shared_ptr< monty::ndarray< long long,1 > > _4248) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4242,_4243,_4244,_4245,_4246,_4247,_4248); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _4242,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4243,    std::shared_ptr< monty::ndarray< long long,1 > > _4244,    std::shared_ptr< monty::ndarray< double,1 > > _4245,    std::shared_ptr< monty::ndarray< double,1 > > _4246,    monty::rc_ptr< ::mosek::fusion::Set > _4247,    std::shared_ptr< monty::ndarray< long long,1 > > _4248){monty::rc_reserve __reserve_this(_pubthis); { { (model = ::mosek::fusion::p_Expr::extractModel(_4243)); (shape_p = _4247); (x = _4243); (varsb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((x)->size(0)) + (int)1))))); int _8774 = (int)0; int _8775 = (int)((x)->size(0)); for (int _4249 = _8774;_4249<_8775;++_4249){ (((*varsb)((_4249 + (int)1))) = (((*varsb)(_4249)) + mosek::fusion::p_Set::_get_impl(((*x)(_4249))->shape())->size)); }int _4250 = ((int)((_4242)->size(0)) - (int)1); long long _4251 = ((*_4242)(((int)((_4242)->size(0)) - (int)1))); ::mosek::fusion::p_Expr::validateData(_4242,_4243,_4244,_4245,_4246,shape_p,_4248); if (_4248){ (inst = ::mosek::fusion::Utils::Tools::arraycopy(_4248)); }else { (inst = nullptr); }(shape_p = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( ! _4247) return (::mosek::fusion::p_Set::make(((int)((_4242)->size(0)) - (int)1))); else return (_4247); })()); (subj = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4251)))); (cof_v = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4251)))); (ptrb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4242)->size(0)))))); (bfix = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _4246) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_4246)->size(0)))))); })()); { ::mosek::fusion::Utils::Tools::arraycopy(_4242,(int)0,ptrb,(int)0,(int)((ptrb)->size(0))); ::mosek::fusion::Utils::Tools::arraycopy(_4244,(long long)((int)0),subj,(long long)((int)0),_4251); ::mosek::fusion::Utils::Tools::arraycopy(_4245,(long long)((int)0),cof_v,(long long)((int)0),_4251); if (bfix){ ::mosek::fusion::Utils::Tools::arraycopy(_4246,(int)0,bfix,(int)0,(int)((bfix)->size(0))); }else {}}}}}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4252,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4253,    std::shared_ptr< monty::ndarray< long long,1 > > _4254,    std::shared_ptr< monty::ndarray< double,1 > > _4255,    std::shared_ptr< monty::ndarray< double,1 > > _4256,    monty::rc_ptr< ::mosek::fusion::Set > _4257,    std::shared_ptr< monty::ndarray< long long,1 > > _4258,    int _4259){ return new mosek::fusion::Expr(_4252,_4253,_4254,_4255,_4256,_4257,_4258,_4259); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _4252,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4253,    std::shared_ptr< monty::ndarray< long long,1 > > _4254,    std::shared_ptr< monty::ndarray< double,1 > > _4255,    std::shared_ptr< monty::ndarray< double,1 > > _4256,    monty::rc_ptr< ::mosek::fusion::Set > _4257,    std::shared_ptr< monty::ndarray< long long,1 > > _4258,    int _4259) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4252,_4253,_4254,_4255,_4256,_4257,_4258,_4259); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _4252,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4253,    std::shared_ptr< monty::ndarray< long long,1 > > _4254,    std::shared_ptr< monty::ndarray< double,1 > > _4255,    std::shared_ptr< monty::ndarray< double,1 > > _4256,    monty::rc_ptr< ::mosek::fusion::Set > _4257,    std::shared_ptr< monty::ndarray< long long,1 > > _4258,    int _4259){monty::rc_reserve __reserve_this(_pubthis); { { (model = ::mosek::fusion::p_Expr::extractModel(_4253)); (mosek::fusion::p_Expr::_get_impl(_pubthis)->shape_p = _4257); (x = _4253); (ptrb = _4252); (subj = _4254); (cof_v = _4255); if (((int)((subj)->size(0)) != (int)((cof_v)->size(0)))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching subj and cof"));}else {}(varsb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((x)->size(0)) + (int)1))))); int _8776 = (int)0; int _8777 = (int)((x)->size(0)); for (int _4260 = _8776;_4260<_8777;++_4260){ (((*varsb)((_4260 + (int)1))) = (((*varsb)(_4260)) + mosek::fusion::p_Set::_get_impl(((*x)(_4260))->shape())->size)); }(bfix = _4256); (shape_p = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( ! _4257) return (::mosek::fusion::p_IntSet::_new_IntSet(((int)((_4252)->size(0)) - (int)1))); else return (_4257); })()); (inst = _4258); }}}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _4261){ return new mosek::fusion::Expr(_4261); }mosek::fusion::Expr::Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _4261) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_4261); }void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4261){monty::rc_reserve __reserve_this(_pubthis); { { monty::rc_ptr< ::mosek::fusion::Expression > _8778 = _4261; if (nullptr != dynamic_cast< ::mosek::fusion::Expr* >(_8778.get())) {::mosek::fusion::Expr::t _4262(dynamic_cast< ::mosek::fusion::Expr* >(_8778.get()));{ (model = mosek::fusion::p_Expr::_get_impl(_4262)->model); (shape_p = mosek::fusion::p_Expr::_get_impl(_4262)->shape_p); (ptrb = mosek::fusion::p_Expr::_get_impl(_4262)->ptrb); (subj = mosek::fusion::p_Expr::_get_impl(_4262)->subj); (x = mosek::fusion::p_Expr::_get_impl(_4262)->x); (cof_v = mosek::fusion::p_Expr::_get_impl(_4262)->cof_v); (bfix = mosek::fusion::p_Expr::_get_impl(_4262)->bfix); (varsb = mosek::fusion::p_Expr::_get_impl(_4262)->varsb); (inst = mosek::fusion::p_Expr::_get_impl(_4262)->inst); }}else {mosek::fusion::Expression::t _4263 = _8778;{ monty::rc_ptr< ::mosek::fusion::FlatExpr > _4264 = _4263->eval(); (model = _4261->getModel()); (shape_p = mosek::fusion::p_FlatExpr::_get_impl(_4264)->shape); (ptrb = mosek::fusion::p_FlatExpr::_get_impl(_4264)->ptrb); (subj = mosek::fusion::p_FlatExpr::_get_impl(_4264)->subj); (x = mosek::fusion::p_FlatExpr::_get_impl(_4264)->x); (cof_v = mosek::fusion::p_FlatExpr::_get_impl(_4264)->cof); (bfix = mosek::fusion::p_FlatExpr::_get_impl(_4264)->bfix); (varsb = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((x)->size(0)) + (int)1))))); int _8779 = (int)0; int _8780 = (int)((x)->size(0)); for (int _4265 = _8779;_4265<_8780;++_4265){ (((*varsb)((_4265 + (int)1))) = (((*varsb)(_4265)) + mosek::fusion::p_Set::_get_impl(((*x)(_4265))->shape())->size)); }(inst = mosek::fusion::p_FlatExpr::_get_impl(_4264)->inst); }}}}}std::string mosek::fusion::Expr::toString  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->toString(); }std::string mosek::fusion::p_Expr::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4266 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4266.get())->a(std::string ("Expr(ndim=(")).get())->a(shape_p->dim((int)0)); int _8781 = (int)1; int _8782 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _4267 = _8781;_4267<_8782;++_4267){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4266.get())->a(std::string (",")).get())->a(shape_p->dim(_4267)); }mosek::fusion::Utils::p_StringBuffer::_get_impl(_4266.get())->a(std::string ("),\n     [ ")); if (((int)((ptrb)->size(0)) > (int)1)){ if (! inst){ tostr(_4266,(int)0); int _8783 = (int)1; int _8784 = ((int)((ptrb)->size(0)) - (int)1); for (int _4268 = _8783;_4268<_8784;++_4268){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_4266.get())->a(std::string (",\n       ")); tostr(_4266,_4268); }}else { if (((int)((inst)->size(0)) > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4266.get())->a(std::string ("(")).get())->a(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)((int)0)))).get())->a(std::string (") -> ")); tostr(_4266,(int)0); int _8785 = (int)1; int _8786 = ((int)((ptrb)->size(0)) - (int)1); for (int _4269 = _8785;_4269<_8786;++_4269){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4266.get())->a(std::string (",\n       (")).get())->a(mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_4269)))).get())->a(std::string (") -> ")); tostr(_4266,_4269); }}else {}}}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_4266.get())->a(std::string (" ])")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_4266.get())->toString(); }void mosek::fusion::p_Expr::tostr( monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4270,int _4271){ long long _8787 = ((*ptrb)(_4271)); long long _8788 = ((*ptrb)((_4271 + (int)1))); for (long long _4272 = _8787;_4272<_8788;++_4272){ long long _4273 = ((*subj)(_4272)); double _4274 = ((*cof_v)(_4272)); if ((_4274 < (int)0)){ int _4275 = (int)0; while ((((*varsb)((_4275 + (int)1))) <= _4273)) { ( ++ _4275 ); }if (((_4274 < (- 1.0)) || (_4274 > (- 1.0)))){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4270.get())->a(std::string (" - ")).get())->a((- _4274)).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4270.get())->a(std::string (" - ")).get())->a(std::string (" ")); }((*x)(_4275))->elementName((_4273 - ((*varsb)(_4275))),_4270); }else { int _4276 = (int)0; while ((((*varsb)((_4276 + (int)1))) <= _4273)) { ( ++ _4276 ); }if (((_4274 < 1.0) || (_4274 > 1.0))){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4270.get())->a(std::string (" + ")).get())->a(_4274).get())->a(std::string (" ")); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4270.get())->a(std::string (" + ")).get())->a(std::string (" ")); }((*x)(_4276))->elementName((_4273 - ((*varsb)(_4276))),_4270); }}if (bfix){ if ((((*bfix)(_4271)) < 0.0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4270.get())->a(std::string (" - ")).get())->a((- ((*bfix)(_4271)))); }else { mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_4270.get())->a(std::string (" + ")).get())->a(((*bfix)(_4271))); }}else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _4277){ return ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Variable > > _8789; for (int _4278=(int)0, _8790=(int)((_4277)->size(0)); _4278 < _8790;++_4278) for (int _4279=(int)0, _8791=(int)((((*_4277)(_4278)))->size(0)); _4279 < _8791;++_4279)_8789.push_back(((*((*_4277)(_4278)))(_4279))); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_8789.size()),_8789.begin(),_8789.end())); })(); }std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4280,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4281){ if (! _4280){ return _4281; }else if (! _4281){ return _4280; }else { std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4282 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(((int)((_4280)->size(0)) + (int)((_4281)->size(0)))))); int _8792 = (int)0; int _8793 = (int)((_4280)->size(0)); for (int _4283 = _8792;_4283<_8793;++_4283){ (((*_4282)(_4283)) = ((*_4280)(_4283))); }int _8794 = (int)0; int _8795 = (int)((_4281)->size(0)); for (int _4284 = _8794;_4284<_8795;++_4284){ (((*_4282)((_4284 + (int)((_4280)->size(0))))) = ((*_4281)(_4284))); }return _4282; }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten  ( monty::rc_ptr< ::mosek::fusion::Expression > _4285) { return mosek::fusion::p_Expr::flatten(_4285); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten( monty::rc_ptr< ::mosek::fusion::Expression > _4285){ if (! _4285){ throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));}else {}return ::mosek::fusion::p_Expr::reshape(_4285,(int)mosek::fusion::p_Set::_get_impl(_4285->shape())->size); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _4286,    int _4287,    int _4288) { return mosek::fusion::p_Expr::reshape(_4286,_4287,_4288); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape( monty::rc_ptr< ::mosek::fusion::Expression > _4286,int _4287,int _4288){ if (! _4286){ throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));}else {}return ::mosek::fusion::p_Expr::reshape(_4286,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_4287,_4288))); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _4289,    int _4290) { return mosek::fusion::p_Expr::reshape(_4289,_4290); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape( monty::rc_ptr< ::mosek::fusion::Expression > _4289,int _4290){ if (! _4289){ throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));}else {}return ::mosek::fusion::p_Expr::reshape(_4289,::mosek::fusion::Set::t(::mosek::fusion::p_IntSet::_new_IntSet(_4290))); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _4291,    monty::rc_ptr< ::mosek::fusion::Set > _4292) { return mosek::fusion::p_Expr::reshape(_4291,_4292); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape( monty::rc_ptr< ::mosek::fusion::Expression > _4291,monty::rc_ptr< ::mosek::fusion::Set > _4292){ if ((! _4291 || ! _4292)){ throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));}else {}if ((mosek::fusion::p_Set::_get_impl(_4292)->size != mosek::fusion::p_Set::_get_impl(_4291->shape())->size)){ throw ::mosek::fusion::DimensionError(std::string ("New shape has wrong number of elements"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _8796 = _4291; if (nullptr != dynamic_cast< ::mosek::fusion::Expr* >(_8796.get())) {::mosek::fusion::Expr::t _4293(dynamic_cast< ::mosek::fusion::Expr* >(_8796.get()));{ return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_Expr::_get_impl(_4293)->ptrb,mosek::fusion::p_Expr::_get_impl(_4293)->x,mosek::fusion::p_Expr::_get_impl(_4293)->subj,mosek::fusion::p_Expr::_get_impl(_4293)->cof_v,mosek::fusion::p_Expr::_get_impl(_4293)->bfix,_4292,mosek::fusion::p_Expr::_get_impl(_4293)->inst,(int)1); }}else {mosek::fusion::Expression::t _4294 = _8796;{ monty::rc_ptr< ::mosek::fusion::FlatExpr > _4295 = _4291->eval(); return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_FlatExpr::_get_impl(_4295)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4295)->x,mosek::fusion::p_FlatExpr::_get_impl(_4295)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4295)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4295)->bfix,_4292,mosek::fusion::p_FlatExpr::_get_impl(_4295)->inst,(int)1); }}}long long mosek::fusion::Expr::size  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->size(); }long long mosek::fusion::p_Expr::size( ){ return ((long long)((ptrb)->size(0)) - (int)1); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::Expr::eval  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->eval(); }monty::rc_ptr< ::mosek::fusion::FlatExpr > mosek::fusion::p_Expr::eval( ){ std::shared_ptr< monty::ndarray< double,1 > > _4296 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! bfix) return (nullptr); else return (::mosek::fusion::Utils::Tools::arraycopy(bfix)); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4297 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ! inst) return (nullptr); else return (::mosek::fusion::Utils::Tools::arraycopy(inst)); })(); return ::mosek::fusion::p_FlatExpr::_new_FlatExpr(_4296,::mosek::fusion::Utils::Tools::arraycopy(ptrb),::mosek::fusion::Utils::Tools::arraycopy(subj),x,::mosek::fusion::Utils::Tools::arraycopy(cof_v),shape_p,inst); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( int _4298) { return mosek::fusion::p_Expr::zeros(_4298); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros( int _4298){ std::shared_ptr< monty::ndarray< long long,1 > > _4299 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)1 + _4298)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4300 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4301 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4302 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4303 = ::mosek::fusion::Utils::Tools::zeros(_4298); return ::mosek::fusion::p_Expr::_new_Expr(_4299,_4300,_4301,_4302,_4303,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( int _4304) { return mosek::fusion::p_Expr::ones(_4304); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones( int _4304){ std::shared_ptr< monty::ndarray< long long,1 > > _4305 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)1 + _4304)); std::shared_ptr< monty::ndarray< long long,1 > > _4306 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4307 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4308 = ::mosek::fusion::Utils::Tools::ones(_4304); return ::mosek::fusion::p_Expr::_new_Expr(_4305,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),_4306,_4307,_4308,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _4309) { return mosek::fusion::p_Expr::constTerm(_4309); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _4309){ monty::rc_ptr< ::mosek::fusion::Set > _4310 = ::mosek::fusion::p_Set::make(mosek::fusion::p_NDSparseArray::_get_impl(_4309)->dims); std::shared_ptr< monty::ndarray< long long,1 > > _4311 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((mosek::fusion::p_NDSparseArray::_get_impl(_4309)->inst)->size(0)) + (int)1)))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4312 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4313 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4314 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4315 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_NDSparseArray::_get_impl(_4309)->cof); std::shared_ptr< monty::ndarray< long long,1 > > _4316 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_NDSparseArray::_get_impl(_4309)->inst); return ::mosek::fusion::p_Expr::_new_Expr(_4311,_4312,_4313,_4314,_4315,_4310,_4316); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4317) { return mosek::fusion::p_Expr::constTerm(_4317); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( monty::rc_ptr< ::mosek::fusion::Matrix > _4317){ monty::rc_ptr< ::mosek::fusion::Set > _4318 = ::mosek::fusion::p_Set::make(_4317->numRows(),_4317->numColumns()); std::shared_ptr< monty::ndarray< long long,1 > > _4319 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4317->numNonzeros() + (int)1)))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4320 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4321 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4322 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4323 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _4324 = nullptr; if (_4317->isSparse()){ std::shared_ptr< monty::ndarray< int,1 > > _4325 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4317->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _4326 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4317->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _4327 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4317->numNonzeros()))); _4317->getDataAsTriplets(_4325,_4326,_4327); (_4323 = _4327); (_4324 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8797; for (long long _4328=(int)0, _8798=_4317->numNonzeros(); _4328 < _8798;++_4328)_8797.push_back((((long long)((*_4325)(_4328)) * _4317->numColumns()) + ((*_4326)(_4328)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8797.size()),_8797.begin(),_8797.end())); })()); }else { (_4323 = _4317->getDataAsArray()); }return ::mosek::fusion::p_Expr::_new_Expr(_4319,_4320,_4321,_4322,_4323,_4318,_4324); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( double _4329) { return mosek::fusion::p_Expr::constTerm(_4329); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( double _4329){ std::shared_ptr< monty::ndarray< long long,1 > > _4330 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4331 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4332 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4333 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4334 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4329}); return ::mosek::fusion::p_Expr::_new_Expr(_4330,_4331,_4332,_4333,_4334,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Set > _4335,    double _4336) { return mosek::fusion::p_Expr::constTerm(_4335,_4336); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( monty::rc_ptr< ::mosek::fusion::Set > _4335,double _4336){ std::shared_ptr< monty::ndarray< long long,1 > > _4337 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)mosek::fusion::p_Set::_get_impl(_4335)->size + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4338 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4339 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4340 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4341 = ::mosek::fusion::Utils::Tools::makevector(_4336,(int)mosek::fusion::p_Set::_get_impl(_4335)->size); return ::mosek::fusion::p_Expr::_new_Expr(_4337,_4338,_4339,_4340,_4341,_4335,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( int _4342,    double _4343) { return mosek::fusion::p_Expr::constTerm(_4342,_4343); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( int _4342,double _4343){ std::shared_ptr< monty::ndarray< long long,1 > > _4344 = ::mosek::fusion::Utils::Tools::makevector((long long)0,(_4342 + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4345 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4346 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4347 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4348 = ::mosek::fusion::Utils::Tools::makevector(_4343,_4342); return ::mosek::fusion::p_Expr::_new_Expr(_4344,_4345,_4346,_4347,_4348,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,2 > > _4349) { return mosek::fusion::p_Expr::constTerm(_4349); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( std::shared_ptr< monty::ndarray< double,2 > > _4349){ if (! _4349){ throw monty::NullPointerException(std::string ("Arguments for constTerm may not be null"));}else {}int _4350 = ((int)((_4349)->size(0)) * (int)((_4349)->size(1))); std::shared_ptr< monty::ndarray< long long,1 > > _4351 = ::mosek::fusion::Utils::Tools::makevector((long long)0,(_4350 + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4352 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4353 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4354 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4355 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4350))); int _4356 = (int)0; int _8799 = (int)0; int _8800 = (int)((_4349)->size(0)); for (int _4357 = _8799;_4357<_8800;++_4357){ int _8801 = (int)0; int _8802 = (int)((_4349)->size(1)); for (int _4358 = _8801;_4358<_8802;++_4358){ (((*_4355)(_4356)) = ((*_4349)(_4357,_4358))); ( ++ _4356 ); }}return ::mosek::fusion::p_Expr::_new_Expr(_4351,_4352,_4353,_4354,_4355,::mosek::fusion::p_Set::make((int)((_4349)->size(0)),(int)((_4349)->size(1))),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,1 > > _4359) { return mosek::fusion::p_Expr::constTerm(_4359); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm( std::shared_ptr< monty::ndarray< double,1 > > _4359){ if (! _4359){ throw monty::NullPointerException(std::string ("Arguments for constTerm may not be null"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _4360 = ::mosek::fusion::Utils::Tools::makevector((long long)0,((int)((_4359)->size(0)) + (int)1)); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4361 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< long long,1 > > _4362 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4363 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _4364 = ::mosek::fusion::Utils::Tools::arraycopy(_4359); return ::mosek::fusion::p_Expr::_new_Expr(_4360,_4361,_4362,_4363,_4364,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }long long mosek::fusion::Expr::numNonzeros  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_Expr::numNonzeros( ){ return (long long)((cof_v)->size(0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum_expr( monty::rc_ptr< ::mosek::fusion::Expression > _4365,int _4366,int _4367){ if (((_4366 < (int)0) || ((_4367 <= _4366) || (mosek::fusion::p_Set::_get_impl(_4365->shape())->nd < _4367)))){ throw ::mosek::fusion::DimensionError(std::string ("The sum-dimension is invalid or out of bounds"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4368 = _4365->eval(); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape)->size == (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _4369 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape)->nd - (_4367 - _4366))))); long long _4370 = (long long)1; long long _4371 = (long long)1; long long _4372 = (long long)1; int _8803 = (int)0; int _8804 = _4366; for (int _4373 = _8803;_4373<_8804;++_4373){ (_4370 *= mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape->dim(_4373)); (((*_4369)(_4373)) = mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape->dim(_4373)); }int _8805 = _4366; int _8806 = _4367; for (int _4374 = _8805;_4374<_8806;++_4374){ (_4371 *= mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape->dim(_4374)); }int _8807 = _4367; int _8808 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape)->nd; for (int _4375 = _8807;_4375<_8808;++_4375){ (_4372 *= mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape->dim(_4375)); (((*_4369)((_4375 - _4367))) = mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape->dim(_4375)); }if (((_4370 == (int)0) || (_4372 == (int)0))){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),mosek::fusion::p_FlatExpr::_get_impl(_4368)->x,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),::mosek::fusion::p_Set::make(_4369),nullptr); }else { return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),mosek::fusion::p_FlatExpr::_get_impl(_4368)->x,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),::mosek::fusion::p_Set::make(_4369),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)))); }}else { std::shared_ptr< monty::ndarray< long long,1 > > _4376 = mosek::fusion::p_FlatExpr::_get_impl(_4368)->inst; if (! _4376){ (_4376 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4368)->ptrb)->size(0)) - (long long)1))); }else {}std::shared_ptr< monty::ndarray< long long,1 > > _4377 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4376)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _4378 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4376)->size(0))))); { long long _4379 = (long long)1; long long _4380 = (long long)1; long long _4381 = (long long)1; int _8809 = (int)0; int _8810 = _4366; for (int _4382 = _8809;_4382<_8810;++_4382){ (_4379 *= mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape->dim(_4382)); }int _8811 = _4366; int _8812 = _4367; for (int _4383 = _8811;_4383<_8812;++_4383){ (_4380 *= mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape->dim(_4383)); }int _8813 = _4367; int _8814 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape)->nd; for (int _4384 = _8813;_4384<_8814;++_4384){ (_4381 *= mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape->dim(_4384)); }int _8815 = (int)0; int _8816 = (int)((_4376)->size(0)); for (int _4385 = _8815;_4385<_8816;++_4385){ long long _4386 = ((*_4376)(_4385)); (((*_4377)(_4385)) = ((_4386 % _4381) + ((_4386 / (_4381 * _4380)) * _4381))); (((*_4378)(_4385)) = ((_4386 / _4381) % _4380)); }}std::shared_ptr< monty::ndarray< long long,1 > > _4387 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_4376)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_4387,_4377,_4378,(long long)0,(long long)((_4376)->size(0))); long long _4388 = (long long)1; int _8817 = (int)1; int _8818 = (int)((_4377)->size(0)); for (int _4389 = _8817;_4389<_8818;++_4389){ if ((((*_4377)(((*_4387)(_4389)))) > ((*_4377)(((*_4387)((_4389 - (int)1))))))){ ( ++ _4388 ); }else {}}std::shared_ptr< monty::ndarray< long long,1 > > _4390 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4388 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4391 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_4368)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _4392 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_4368)->cof)->size(0))))); { int _4393 = (int)0; long long _8819 = (long long)0; long long _8820 = _4388; for (long long _4394 = _8819;_4394<_8820;++_4394){ int _4395 = _4393; long long _4396 = ((*_4377)(((*_4387)(_4393)))); while (((_4393 < (int)((_4377)->size(0))) && (_4396 == ((*_4377)(((*_4387)(_4393))))))) { ( ++ _4393 ); }(((*_4390)((_4394 + (int)1))) = ((*_4390)(_4394))); int _8821 = _4395; int _8822 = _4393; for (int _4397 = _8821;_4397<_8822;++_4397){ long long _4398 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4368)->ptrb)((((*_4387)(_4397)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4368)->ptrb)(((*_4387)(_4397))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4368)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4368)->ptrb)(((*_4387)(_4397)))),_4391,((*_4390)((_4394 + (int)1))),_4398); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4368)->cof,((*mosek::fusion::p_FlatExpr::_get_impl(_4368)->ptrb)(((*_4387)(_4397)))),_4392,((*_4390)((_4394 + (int)1))),_4398); (((*_4390)((_4394 + (int)1))) = (((*_4390)((_4394 + (int)1))) + _4398)); }}}std::shared_ptr< monty::ndarray< double,1 > > _4399 = nullptr; if (mosek::fusion::p_FlatExpr::_get_impl(_4368)->bfix){ (_4399 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4388)))); int _4400 = (int)0; long long _8823 = (long long)0; long long _8824 = _4388; for (long long _4401 = _8823;_4401<_8824;++_4401){ int _4402 = _4400; long long _4403 = ((*_4377)(((*_4387)(_4400)))); while (((_4400 < (int)((_4377)->size(0))) && (_4403 == ((*_4377)(((*_4387)(_4400))))))) { ( ++ _4400 ); }int _8825 = _4402; int _8826 = _4400; for (int _4404 = _8825;_4404<_8826;++_4404){ (((*_4399)(_4401)) += ((*mosek::fusion::p_FlatExpr::_get_impl(_4368)->bfix)(((*_4387)(_4404))))); }}}else {}monty::rc_ptr< ::mosek::fusion::Set > _4405; { std::shared_ptr< monty::ndarray< int,1 > > _4406 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape)->nd - (_4367 - _4366))))); int _4407 = (int)0; int _8827 = (int)0; int _8828 = _4366; for (int _4408 = _8827;_4408<_8828;++_4408){ (((*_4406)(_4407)) = mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape->dim(_4408)); ( ++ _4407 ); }int _8829 = _4367; int _8830 = mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape)->nd; for (int _4409 = _8829;_4409<_8830;++_4409){ (((*_4406)(_4407)) = mosek::fusion::p_FlatExpr::_get_impl(_4368)->shape->dim(_4409)); ( ++ _4407 ); }(_4405 = ::mosek::fusion::p_NDSet::_new_NDSet(_4406)); }std::shared_ptr< monty::ndarray< long long,1 > > _4410 = nullptr; if ((_4388 < mosek::fusion::p_Set::_get_impl(_4405)->size)){ (_4410 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4388)))); (((*_4410)((int)0)) = ((*_4377)(((*_4387)((int)0))))); int _4411 = (int)0; long long _8831 = (long long)1; long long _8832 = _4388; for (long long _4412 = _8831;_4412<_8832;++_4412){ while ((((*_4377)(((*_4387)(_4411)))) <= ((*_4410)((_4412 - (int)1))))) { ( ++ _4411 ); }(((*_4410)(_4412)) = ((*_4377)(((*_4387)(_4411))))); }}else {}return ::mosek::fusion::p_Expr::_new_Expr(_4390,mosek::fusion::p_FlatExpr::_get_impl(_4368)->x,_4391,_4392,_4399,_4405,_4410); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum_var( monty::rc_ptr< ::mosek::fusion::Variable > _4413,int _4414,int _4415){ if (((_4414 < (int)0) || ((_4415 <= _4414) || (_4415 > mosek::fusion::p_Set::_get_impl(_4413->shape())->nd)))){ throw ::mosek::fusion::DimensionError(std::string ("The sum-dimension is invalid or out of bounds"));}else {}if ((mosek::fusion::p_Set::_get_impl(_4413->shape())->size == (int)0)){ int _4416 = (mosek::fusion::p_Set::_get_impl(_4413->shape())->nd - (_4415 - _4414)); if ((_4416 < (int)1)){ (_4416 = (int)1); }else {}std::shared_ptr< monty::ndarray< int,1 > > _4417 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4416))); long long _4418 = (long long)1; long long _4419 = (long long)1; long long _4420 = (long long)1; int _8833 = (int)0; int _8834 = _4414; for (int _4421 = _8833;_4421<_8834;++_4421){ (_4418 *= _4413->shape()->dim(_4421)); (((*_4417)(_4421)) = _4413->shape()->dim(_4421)); }int _8835 = _4414; int _8836 = _4415; for (int _4422 = _8835;_4422<_8836;++_4422){ (_4419 *= _4413->shape()->dim(_4422)); }int _8837 = _4415; int _8838 = mosek::fusion::p_Set::_get_impl(_4413->shape())->nd; for (int _4423 = _8837;_4423<_8838;++_4423){ (_4420 *= _4413->shape()->dim(_4423)); (((*_4417)((_4423 - _4415))) = _4413->shape()->dim(_4423)); }if (((_4414 == (int)0) && ((_4415 == mosek::fusion::p_Set::_get_impl(_4413->shape())->nd) && (_4419 == (int)0)))){ (((*_4417)((int)0)) = (int)1); }else {}if (((_4418 == (int)0) || (_4420 == (int)0))){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),::mosek::fusion::p_Set::make(_4417),nullptr); }else { return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make(_4417),nullptr); }}else { int _4424 = (mosek::fusion::p_Set::_get_impl(_4413->shape())->nd - (_4415 - _4414)); monty::rc_ptr< ::mosek::fusion::Set > _4425; if ((_4424 == (int)0)){ (_4424 = (int)1); (_4425 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else { std::shared_ptr< monty::ndarray< int,1 > > _4426 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4424))); int _4427 = (int)0; int _8839 = (int)0; int _8840 = _4414; for (int _4428 = _8839;_4428<_8840;++_4428){ (((*_4426)(_4427)) = _4413->shape()->dim(_4428)); ( ++ _4427 ); }int _8841 = _4415; int _8842 = mosek::fusion::p_Set::_get_impl(_4413->shape())->nd; for (int _4429 = _8841;_4429<_8842;++_4429){ (((*_4426)(_4427)) = _4413->shape()->dim(_4429)); ( ++ _4427 ); }if ((_4424 > (int)1)){ (_4425 = ::mosek::fusion::p_NDSet::_new_NDSet(_4426)); }else { (_4425 = ::mosek::fusion::p_IntSet::_new_IntSet(((*_4426)((int)0)))); }}long long _4430 = (long long)1; int _8843 = _4414; int _8844 = _4415; for (int _4431 = _8843;_4431<_8844;++_4431){ (_4430 *= _4413->shape()->dim(_4431)); }std::shared_ptr< monty::ndarray< long long,1 > > _4432 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4430 > (int)0)) return (::mosek::fusion::Utils::Tools::range((long long)0,(mosek::fusion::p_Set::_get_impl(_4413->shape())->size + (int)1),_4430)); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0})); })(); std::shared_ptr< monty::ndarray< double,1 > > _4433 = ::mosek::fusion::Utils::Tools::ones((int)mosek::fusion::p_Set::_get_impl(_4413->shape())->size); std::shared_ptr< monty::ndarray< double,1 > > _4434 = nullptr; long long _4435 = (long long)1; long long _4436 = (long long)1; long long _4437 = (long long)1; int _8845 = (int)0; int _8846 = _4414; for (int _4438 = _8845;_4438<_8846;++_4438){ (_4435 *= _4413->shape()->dim(_4438)); }int _8847 = _4414; int _8848 = _4415; for (int _4439 = _8847;_4439<_8848;++_4439){ (_4436 *= _4413->shape()->dim(_4439)); }int _8849 = _4415; int _8850 = mosek::fusion::p_Set::_get_impl(_4413->shape())->nd; for (int _4440 = _8849;_4440<_8850;++_4440){ (_4437 *= _4413->shape()->dim(_4440)); }std::shared_ptr< monty::ndarray< long long,1 > > _4441 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8851; for (long long _4442=(int)0, _8852=_4435; _4442 < _8852;++_4442) for (long long _4443=(int)0, _8853=_4437; _4443 < _8853;++_4443) for (long long _4444=(int)0, _8854=_4436; _4444 < _8854;++_4444)_8851.push_back(((((_4442 * _4436) * _4437) + (_4444 * _4437)) + _4443)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8851.size()),_8851.begin(),_8851.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_4432,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4413}),_4441,_4433,_4434,_4425,nullptr); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _4445,    int _4446,    int _4447) { return mosek::fusion::p_Expr::sum(_4445,_4446,_4447); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Expression > _4445,int _4446,int _4447){ return ::mosek::fusion::p_Expr::sum_expr(_4445,_4446,_4447); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _4448,    int _4449) { return mosek::fusion::p_Expr::sum(_4448,_4449); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Expression > _4448,int _4449){ if (((_4449 < (int)0) || (mosek::fusion::p_Set::_get_impl(_4448->shape())->nd <= _4449))){ throw ::mosek::fusion::DimensionError(std::string ("The sum-dimension is invalid or out of bounds"));}else {}return ::mosek::fusion::p_Expr::sum_expr(_4448,_4449,(_4449 + (int)1)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Variable > _4450,    int _4451,    int _4452) { return mosek::fusion::p_Expr::sum(_4450,_4451,_4452); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Variable > _4450,int _4451,int _4452){ return ::mosek::fusion::p_Expr::sum_var(_4450,_4451,_4452); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Variable > _4453,    int _4454) { return mosek::fusion::p_Expr::sum(_4453,_4454); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Variable > _4453,int _4454){ if (! _4453){ throw monty::NullPointerException(std::string ("Arguments for sum may not be null"));}else {}return ::mosek::fusion::p_Expr::sum_var(_4453,_4454,(_4454 + (int)1)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Variable > _4455) { return mosek::fusion::p_Expr::sum(_4455); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Variable > _4455){ if (! _4455){ throw monty::NullPointerException(std::string ("Arguments for sum may not be null"));}else {}return ::mosek::fusion::p_Expr::sum_var(_4455,(int)0,mosek::fusion::p_Set::_get_impl(_4455->shape())->nd); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _4456) { return mosek::fusion::p_Expr::sum(_4456); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum( monty::rc_ptr< ::mosek::fusion::Expression > _4456){ if (! _4456){ throw monty::NullPointerException(std::string ("Arguments for neg may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4457 = _4456->eval(); std::shared_ptr< monty::ndarray< long long,1 > > _4458 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)((mosek::fusion::p_FlatExpr::_get_impl(_4457)->cof)->size(0))}); std::shared_ptr< monty::ndarray< long long,1 > > _4459 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4457)->subj); std::shared_ptr< monty::ndarray< double,1 > > _4460 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4457)->cof); std::shared_ptr< monty::ndarray< double,1 > > _4461; if (mosek::fusion::p_FlatExpr::_get_impl(_4457)->bfix){ double _4462 = 0.0; { int _4463 = (int)0; for (;(_4463 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4457)->bfix)->size(0)));( ++ _4463 )){ (_4462 = (_4462 + ((*mosek::fusion::p_FlatExpr::_get_impl(_4457)->bfix)(_4463)))); }}(_4461 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{_4462})); }else { (_4461 = nullptr); }return ::mosek::fusion::p_Expr::_new_Expr(_4458,mosek::fusion::p_FlatExpr::_get_impl(_4457)->x,_4459,_4460,_4461,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Variable > _4464) { return mosek::fusion::p_Expr::neg(_4464); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg( monty::rc_ptr< ::mosek::fusion::Variable > _4464){ if (! _4464){ throw monty::NullPointerException(std::string ("Arguments for neg may not be null"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _4465 = ::mosek::fusion::Utils::Tools::range((mosek::fusion::p_Set::_get_impl(_4464->shape())->size + (int)1)); std::shared_ptr< monty::ndarray< long long,1 > > _4466 = ::mosek::fusion::Utils::Tools::range(mosek::fusion::p_Set::_get_impl(_4464->shape())->size); std::shared_ptr< monty::ndarray< double,1 > > _4467 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8855; for (long long _4468=(int)0, _8856=mosek::fusion::p_Set::_get_impl(_4464->shape())->size; _4468 < _8856;++_4468)_8855.push_back((- 1.0)); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8855.size()),_8855.begin(),_8855.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_4465,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4464}),_4466,_4467,nullptr,_4464->shape(),nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Expression > _4469) { return mosek::fusion::p_Expr::neg(_4469); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg( monty::rc_ptr< ::mosek::fusion::Expression > _4469){ if (! _4469){ throw monty::NullPointerException(std::string ("Arguments for neg may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4470 = _4469->eval(); std::shared_ptr< monty::ndarray< double,1 > > _4471 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8857; for (int _4472=(int)0, _8858=(int)((mosek::fusion::p_FlatExpr::_get_impl(_4470)->cof)->size(0)); _4472 < _8858;++_4472)_8857.push_back((- ((*mosek::fusion::p_FlatExpr::_get_impl(_4470)->cof)(_4472)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8857.size()),_8857.begin(),_8857.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _4473 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4470)->bfix) return (nullptr); else return (([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8859; for (int _4474=(int)0, _8860=(int)((mosek::fusion::p_FlatExpr::_get_impl(_4470)->bfix)->size(0)); _4474 < _8860;++_4474)_8859.push_back((- ((*mosek::fusion::p_FlatExpr::_get_impl(_4470)->bfix)(_4474)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8859.size()),_8859.begin(),_8859.end())); })()); })(); return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_FlatExpr::_get_impl(_4470)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4470)->x,mosek::fusion::p_FlatExpr::_get_impl(_4470)->subj,_4471,_4473,mosek::fusion::p_FlatExpr::_get_impl(_4470)->shape,mosek::fusion::p_FlatExpr::_get_impl(_4470)->inst,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul__( monty::rc_ptr< ::mosek::fusion::Matrix > _4475,monty::rc_ptr< ::mosek::fusion::Expression > _4476){ monty::rc_ptr< ::mosek::fusion::Matrix > _4477 = _4475; monty::rc_ptr< ::mosek::fusion::Expression > _4478 = _4476; if ((mosek::fusion::p_Set::_get_impl(_4476->shape())->nd > (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Expression operand must have 1 or 2 dimensions"));}else {}if ((_4476->shape()->dim((int)0) != mosek::fusion::p_Matrix::_get_impl(_4477)->dimj)){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4479 = _4476->eval(); monty::rc_ptr< ::mosek::fusion::Set > _4480; int _4481 = mosek::fusion::p_FlatExpr::_get_impl(_4479)->shape->dim((int)0); int _4482 = (int)1; int _4483 = (int)1; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4479)->shape)->nd == (int)2)){ (_4482 = mosek::fusion::p_FlatExpr::_get_impl(_4479)->shape->dim((int)1)); (_4483 = (int)2); (_4480 = ::mosek::fusion::p_NDSet::_new_NDSet(mosek::fusion::p_Matrix::_get_impl(_4477)->dimi,_4482)); }else { (_4480 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_Matrix::_get_impl(_4477)->dimi)); }monty::rc_ptr< ::mosek::fusion::Expression > _4484; monty::rc_ptr< ::mosek::fusion::Matrix > _8861 = _4477; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_8861.get())) {::mosek::fusion::DenseMatrix::t _4485(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_8861.get()));{ if (! mosek::fusion::p_FlatExpr::_get_impl(_4479)->inst){ int _4487 = (mosek::fusion::p_Matrix::_get_impl(_4485)->dimi * _4482); std::shared_ptr< monty::ndarray< long long,1 > > _4488 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4487 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4489 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4479)->nnz * mosek::fusion::p_Matrix::_get_impl(_4485)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4490 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4479)->nnz * mosek::fusion::p_Matrix::_get_impl(_4485)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4491 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4479)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4487)))); })(); int _4492 = (int)1; { int _4493 = (int)0; for (;(_4493 < mosek::fusion::p_Matrix::_get_impl(_4485)->dimi);( ++ _4493 )){ { int _4494 = (int)0; for (;(_4494 < _4482);( ++ _4494 )){ long long _4495 = ((*_4488)((_4492 - (int)1))); { int _4496 = (int)0; for (;(_4496 < _4481);( ++ _4496 )){ int _4497 = ((_4496 * _4482) + _4494); long long _4498 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)((_4497 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)(_4497))); double _4499 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4485)->data)(((_4493 * mosek::fusion::p_Matrix::_get_impl(_4485)->dimj) + _4496))); { int _4500 = (int)0; for (;(_4500 < _4498);( ++ _4500 )){ (((*_4490)((_4495 + _4500))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)(_4497)) + _4500))) * _4499)); (((*_4489)((_4495 + _4500))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)(_4497)) + _4500)))); }}(_4495 = (_4495 + _4498)); if (mosek::fusion::p_FlatExpr::_get_impl(_4479)->bfix){ (((*_4491)((_4492 - (int)1))) = (((*_4491)((_4492 - (int)1))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->bfix)(_4497)) * _4499))); }else {}}}(((*_4488)(_4492)) = _4495); ( ++ _4492 ); }}}}(_4484 = ::mosek::fusion::p_Expr::_new_Expr(_4488,mosek::fusion::p_FlatExpr::_get_impl(_4479)->x,_4489,_4490,_4491,_4480,nullptr)); }else { int _4501 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_4479)->inst)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _4502 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4501))); std::shared_ptr< monty::ndarray< int,1 > > _4503 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4501))); std::shared_ptr< monty::ndarray< long long,1 > > _4504 = ::mosek::fusion::Utils::Tools::range((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4479)->inst)->size(0))); { int _4505 = (int)0; for (;(_4505 < _4501);( ++ _4505 )){ (((*_4502)(_4505)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->inst)(_4505)) / _4482)); (((*_4503)(_4505)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->inst)(_4505)) - ((*_4502)(_4505)))); }}::mosek::fusion::Utils::Tools::argsort(_4504,_4503,_4502,(long long)((int)0),(long long)(_4501)); int _4506 = (int)0; if (((int)((_4503)->size(0)) > (int)0)){ (_4506 = (int)1); { int _4507 = (int)1; for (;(_4507 < _4501);( ++ _4507 )){ if ((((*_4503)(((*_4504)(_4507)))) > ((*_4503)(((*_4504)((_4507 - (int)1))))))){ ( ++ _4506 ); }else {}}}}else {}int _4508 = (_4506 * mosek::fusion::p_Matrix::_get_impl(_4485)->dimi); std::shared_ptr< monty::ndarray< long long,1 > > _4509 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4508 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4510 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4479)->nnz * mosek::fusion::p_Matrix::_get_impl(_4485)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4511 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((mosek::fusion::p_FlatExpr::_get_impl(_4479)->nnz * mosek::fusion::p_Matrix::_get_impl(_4485)->dimi)))); std::shared_ptr< monty::ndarray< double,1 > > _4512 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4479)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4508)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4513 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4506 >= _4482)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4508)))); })(); int _4514 = (int)0; { int _4515 = (int)0; for (;(_4515 < mosek::fusion::p_Matrix::_get_impl(_4485)->dimi);( ++ _4515 )){ long long _4516 = (long long)(mosek::fusion::p_Matrix::_get_impl(_4485)->dimj * _4515); { int _4517 = (int)0; for (;(_4517 < _4501);( ++ _4517 )){ if (((_4517 == (int)0) || (((*_4503)(((*_4504)(_4517)))) > ((*_4503)(((*_4504)((_4517 - (int)1)))))))){ ( ++ _4514 ); (((*_4509)(_4514)) = ((*_4509)((_4514 - (int)1)))); if (_4513){ (((*_4513)((_4514 - (int)1))) = (((long long)_4515 * _4482) + ((*_4503)(((*_4504)(_4517)))))); }else {}}else {}long long _4518 = ((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)(((*_4504)(_4517)))); long long _4519 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)((((*_4504)(_4517)) + (int)1))) - _4518); double _4520 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4485)->data)((_4516 + ((*_4502)(((*_4504)(_4517))))))); { int _4521 = (int)0; for (;(_4521 < _4519);( ++ _4521 )){ (((*_4510)((((*_4509)(_4514)) + _4521))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->subj)((_4518 + _4521)))); (((*_4511)((((*_4509)(_4514)) + _4521))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->cof)((_4518 + _4521))) * _4520)); }}if (_4512){ (((*_4512)((_4514 - (int)1))) = (((*_4512)((_4514 - (int)1))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->bfix)(((*_4504)(_4517)))) * _4520))); }else {}if (_4513){ (((*_4513)((_4514 - (int)1))) = (long long)((*_4503)(((*_4504)(_4517))))); }else {}(((*_4509)(_4514)) = (((*_4509)(_4514)) + _4519)); }}}}(_4484 = ::mosek::fusion::p_Expr::_new_Expr(_4509,mosek::fusion::p_FlatExpr::_get_impl(_4479)->x,_4510,_4511,_4512,_4480,_4513)); }}}else {mosek::fusion::Matrix::t _4486 = _8861;{ long long _4522 = _4486->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4523 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4522))); std::shared_ptr< monty::ndarray< int,1 > > _4524 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4522))); std::shared_ptr< monty::ndarray< double,1 > > _4525 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4522))); _4486->getDataAsTriplets(_4523,_4524,_4525); if (! mosek::fusion::p_FlatExpr::_get_impl(_4479)->inst){ long long _4526 = (long long)1; long long _8862 = (long long)1; long long _8863 = _4522; for (long long _4527 = _8862;_4527<_8863;++_4527){ if ((((*_4523)(_4527)) > ((*_4523)((_4527 - (int)1))))){ ( ++ _4526 ); }else {}}long long _4528 = (_4526 * _4482); std::shared_ptr< monty::ndarray< long long,1 > > _4529 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4528 + (int)1)))); long long _4530 = (long long)0; { int _4531 = ((*_4523)((int)0)); long long _4532 = (long long)0; long long _8864 = (long long)0; long long _8865 = _4522; for (long long _4533 = _8864;_4533<_8865;++_4533){ if ((_4531 < ((*_4523)(_4533)))){ (_4532 = (_4532 + _4482)); (_4531 = ((*_4523)(_4533))); }else {}int _8866 = (int)0; int _8867 = _4482; for (int _4534 = _8866;_4534<_8867;++_4534){ int _4535 = ((((*_4524)(_4533)) * _4482) + _4534); long long _4536 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)((_4535 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)(_4535))); (_4530 = (_4530 + _4536)); (((*_4529)(((_4532 + _4534) + (int)1))) = (((*_4529)(((_4532 + _4534) + (int)1))) + _4536)); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4537 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4530))); std::shared_ptr< monty::ndarray< double,1 > > _4538 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4530))); std::shared_ptr< monty::ndarray< double,1 > > _4539 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4479)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4528)))); })(); { int _4540 = (int)0; for (;(_4540 < _4528);( ++ _4540 )){ (((*_4529)((_4540 + (int)1))) = (((*_4529)(_4540)) + ((*_4529)((_4540 + (int)1))))); }}std::shared_ptr< monty::ndarray< long long,1 > > _4541 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4526 >= mosek::fusion::p_Matrix::_get_impl(_4486)->dimi)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4528)))); })(); { long long _4542 = (long long)0; int _4543 = ((*_4523)((int)0)); { int _4544 = (int)0; for (;(_4544 < _4522);( ++ _4544 )){ double _4545 = ((*_4525)(_4544)); if ((_4543 < ((*_4523)(_4544)))){ (_4542 = (_4542 + _4482)); (_4543 = ((*_4523)(_4544))); }else {}{ int _4546 = (int)0; for (;(_4546 < _4482);( ++ _4546 )){ int _4547 = ((((*_4524)(_4544)) * _4482) + _4546); long long _4548 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)((_4547 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)(_4547))); { int _4549 = (int)0; for (;(_4549 < _4548);( ++ _4549 )){ (((*_4538)((((*_4529)((_4542 + _4546))) + _4549))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)(_4547)) + _4549))) * _4545)); (((*_4537)((((*_4529)((_4542 + _4546))) + _4549))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)(_4547)) + _4549)))); }}if (_4539){ (((*_4539)((_4542 + _4546))) = (((*_4539)((_4542 + _4546))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->bfix)(_4547)) * _4545))); }else {}(((*_4529)((_4542 + _4546))) = (((*_4529)((_4542 + _4546))) + _4548)); if (_4541){ (((*_4541)((_4542 + _4546))) = (long long)((((*_4523)(_4544)) * _4482) + _4546)); }else {}}}}}}{ int _4550 = ((int)((_4529)->size(0)) - (int)1); for (;(_4550 > (int)0);( -- _4550 )){ (((*_4529)(_4550)) = ((*_4529)((_4550 - (int)1)))); }}(((*_4529)((int)0)) = (long long)0); (_4484 = ::mosek::fusion::p_Expr::_new_Expr(_4529,mosek::fusion::p_FlatExpr::_get_impl(_4479)->x,_4537,_4538,_4539,_4480,_4541)); }else { long long _4551 = _4477->numNonzeros(); int _4552 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_4479)->inst)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _4553 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4552))); std::shared_ptr< monty::ndarray< int,1 > > _4554 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4552))); std::shared_ptr< monty::ndarray< long long,1 > > _4555 = ::mosek::fusion::Utils::Tools::range((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4479)->inst)->size(0))); { int _4556 = (int)0; for (;(_4556 < _4552);( ++ _4556 )){ (((*_4553)(_4556)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->inst)(_4556)) / _4482)); (((*_4554)(_4556)) = (int)(((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->inst)(_4556)) - ((*_4553)(_4556)))); }}::mosek::fusion::Utils::Tools::argsort(_4555,_4554,_4553,(long long)((int)0),(long long)(_4552)); long long _4557 = (long long)0; long long _4558 = (long long)0; { { int _4559 = (int)0; for (;(_4559 < _4551);){ int _4560 = _4559; { for (;((_4560 < _4551) && (((*_4523)(_4560)) == ((*_4523)(_4559))));( ++ _4560 )){ }}int _4561 = ((*_4523)(_4559)); int _4562 = ((*_4554)(((*_4555)((int)0)))); { { int _4563 = (int)0; for (;(_4563 < _4552);){ int _4564; { (_4564 = (_4563 + (int)1)); for (;((_4564 < _4552) && (((*_4554)(((*_4555)(_4564)))) == ((*_4554)(((*_4555)((_4564 - (int)1)))))));( ++ _4564 )){ }}int _4565 = _4559; int _4566 = _4563; long long _4567 = _4558; while (((_4565 < _4560) && (_4566 < _4564))) { if ((((*_4524)(_4565)) < ((*_4553)(((*_4555)(_4566)))))){ ( ++ _4565 ); }else if ((((*_4524)(_4565)) > ((*_4553)(((*_4555)(_4566)))))){ ( ++ _4566 ); }else { (_4558 = (_4558 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)((((*_4555)(_4566)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)(((*_4555)(_4566))))))); ( ++ _4566 ); ( ++ _4565 ); }}if ((_4567 < _4558)){ ( ++ _4557 ); }else {}(_4563 = _4564); }}}(_4559 = _4560); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4568 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4557 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4569 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4558))); std::shared_ptr< monty::ndarray< double,1 > > _4570 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4558))); std::shared_ptr< monty::ndarray< long long,1 > > _4571 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4557))); std::shared_ptr< monty::ndarray< double,1 > > _4572 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4479)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4557)))); })(); { int _4573 = (int)0; long long _4574 = (long long)0; int _4575 = (int)0; { int _4576 = (int)0; for (;(_4576 < _4551);){ int _4577 = _4576; { for (;((_4577 < _4551) && (((*_4523)(_4577)) == ((*_4523)(_4576))));( ++ _4577 )){ }}int _4578 = ((*_4523)(_4576)); int _4579 = ((*_4554)(((*_4555)((int)0)))); { { int _4580 = (int)0; for (;(_4580 < _4552);){ int _4581; { (_4581 = (_4580 + (int)1)); for (;((_4581 < _4552) && (((*_4554)(((*_4555)(_4581)))) == ((*_4554)(((*_4555)((_4581 - (int)1)))))));( ++ _4581 )){ }}int _4582 = _4576; int _4583 = _4580; long long _4584 = _4574; while (((_4582 < _4577) && (_4583 < _4581))) { if ((((*_4524)(_4582)) < ((*_4553)(((*_4555)(_4583)))))){ ( ++ _4582 ); }else if ((((*_4524)(_4582)) > ((*_4553)(((*_4555)(_4583)))))){ ( ++ _4583 ); }else { long long _4585 = ((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)(((*_4555)(_4583)))); long long _4586 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)((((*_4555)(_4583)) + (int)1))) - _4585); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4479)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->ptrb)(((*_4555)(_4583)))),_4569,_4574,_4586); { int _4587 = (int)0; for (;(_4587 < _4586);( ++ _4587 )){ (((*_4570)((_4574 + _4587))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->cof)((_4585 + _4587))) * ((*_4525)(_4582)))); }}if (_4572){ (((*_4572)(_4575)) = (((*_4572)(_4575)) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4479)->bfix)(((*_4555)(_4583)))) * ((*_4525)(_4582))))); }else {}(_4574 = (_4574 + _4586)); ( ++ _4583 ); ( ++ _4582 ); }}if ((_4584 < _4574)){ (((*_4571)(_4575)) = ((long long)(((*_4523)(_4576)) * _4482) + ((*_4554)(((*_4555)(_4580)))))); ( ++ _4575 ); (((*_4568)(_4575)) = _4574); }else {}(_4580 = _4581); }}}(_4576 = _4577); }}}(_4484 = ::mosek::fusion::p_Expr::_new_Expr(_4568,mosek::fusion::p_FlatExpr::_get_impl(_4479)->x,_4569,_4570,_4572,_4480,_4571)); }}}return _4484; }void mosek::fusion::p_Expr::sparseMatrixVector( std::shared_ptr< monty::ndarray< long long,1 > > _4588,std::shared_ptr< monty::ndarray< int,1 > > _4589,std::shared_ptr< monty::ndarray< double,1 > > _4590,std::shared_ptr< monty::ndarray< double,1 > > _4591,std::shared_ptr< monty::ndarray< double,1 > > _4592,int _4593){ { int _4594 = (int)0; for (;(_4594 < _4593);( ++ _4594 )){ (((*_4592)(_4594)) = 0.0); }}{ int _4595 = (int)0; for (;(_4595 < _4593);( ++ _4595 )){ { long long _4596 = ((*_4588)(_4595)); for (;(_4596 < ((*_4588)((_4595 + (int)1))));( ++ _4596 )){ int _4597 = ((*_4589)(_4596)); (((*_4592)(_4595)) = (((*_4592)(_4595)) + (((*_4591)(_4597)) * ((*_4590)(_4597))))); }}}}}void mosek::fusion::p_Expr::sparseMatmul( std::shared_ptr< monty::ndarray< long long,1 > > _4598,std::shared_ptr< monty::ndarray< int,1 > > _4599,std::shared_ptr< monty::ndarray< double,1 > > _4600,std::shared_ptr< monty::ndarray< long long,1 > > _4601,std::shared_ptr< monty::ndarray< int,1 > > _4602,std::shared_ptr< monty::ndarray< double,1 > > _4603,std::shared_ptr< monty::ndarray< long long,1 > > _4604,std::shared_ptr< monty::ndarray< int,1 > > _4605,std::shared_ptr< monty::ndarray< double,1 > > _4606,int _4607,int _4608,std::shared_ptr< monty::ndarray< int,1 > > _4609){ int _4610 = (int)0; int _4611 = (int)0; std::shared_ptr< monty::ndarray< double,1 > > _4612 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4608))); { int _4613 = (int)0; for (;(_4613 < _4608);( ++ _4613 )){ (((*_4609)(_4613)) = (- (int)1)); (((*_4612)(_4613)) = 0.0); }}{ int _4614 = (int)0; for (;(_4614 < _4607);( ++ _4614 )){ (_4611 = _4610); { long long _4615 = ((*_4601)(_4614)); for (;(_4615 < ((*_4601)((_4614 + (int)1))));( ++ _4615 )){ int _4616 = ((*_4602)(_4615)); double _4617 = ((*_4603)(_4615)); { long long _4618 = ((*_4604)(_4616)); for (;(_4618 < ((*_4604)((_4616 + (int)1))));( ++ _4618 )){ int _4619 = ((*_4605)(_4618)); if ((((*_4609)(_4619)) < _4611)){ (((*_4609)(_4619)) = _4610); (((*_4612)(_4619)) = (_4617 * ((*_4606)(_4618)))); (((*_4599)(_4610)) = _4619); ( ++ _4610 ); }else { (((*_4612)(_4619)) = (((*_4612)(_4619)) + (_4617 * ((*_4606)(_4618))))); }}}}}::mosek::fusion::Utils::Tools::sort(_4599,_4611,_4610); { int _4620 = _4611; for (;(_4620 < _4610);( ++ _4620 )){ (((*_4600)(_4620)) = ((*_4612)(((*_4599)(_4620))))); (((*_4612)(((*_4599)(_4620)))) = 0.0); }}}}}long long mosek::fusion::p_Expr::computeNz( std::shared_ptr< monty::ndarray< long long,1 > > _4621,std::shared_ptr< monty::ndarray< int,1 > > _4622,std::shared_ptr< monty::ndarray< long long,1 > > _4623,std::shared_ptr< monty::ndarray< int,1 > > _4624,int _4625,int _4626,std::shared_ptr< monty::ndarray< int,1 > > _4627,std::shared_ptr< monty::ndarray< long long,1 > > _4628){ long long _4629 = (long long)0; int _4630 = (int)0; { int _4631 = (int)0; for (;(_4631 < _4626);( ++ _4631 )){ (((*_4627)(_4631)) = (int)0); }}{ int _4632 = (int)0; for (;(_4632 < _4625);( ++ _4632 )){ ( ++ _4630 ); (((*_4628)(_4632)) = _4629); { long long _4633 = ((*_4621)(_4632)); for (;(_4633 < ((*_4621)((_4632 + (int)1))));( ++ _4633 )){ int _4634 = ((*_4622)(_4633)); { long long _4635 = ((*_4623)(_4634)); for (;(_4635 < ((*_4623)((_4634 + (int)1))));( ++ _4635 )){ int _4636 = ((*_4624)(_4635)); if ((((*_4627)(_4636)) != _4630)){ ( ++ _4629 ); (((*_4627)(_4636)) = _4630); }else {}}}}}}}(((*_4628)(_4625)) = _4629); return _4629; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _4637,    monty::rc_ptr< ::mosek::fusion::Matrix > _4638) { return mosek::fusion::p_Expr::mulDiag(_4637,_4638); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Variable > _4637,monty::rc_ptr< ::mosek::fusion::Matrix > _4638){ if ((! _4637 || ! _4638)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Variable > _4639 = _4637; monty::rc_ptr< ::mosek::fusion::Matrix > _4640 = _4638; if (((mosek::fusion::p_Set::_get_impl(_4639->shape())->nd != (int)2) || ((mosek::fusion::p_Matrix::_get_impl(_4640)->dimj != _4639->shape()->dim((int)0)) || (mosek::fusion::p_Matrix::_get_impl(_4640)->dimi != _4639->shape()->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}long long _4641 = (long long)mosek::fusion::p_Matrix::_get_impl(_4640)->dimj; monty::rc_ptr< ::mosek::fusion::Matrix > _8868 = _4640; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_8868.get())) {::mosek::fusion::DenseMatrix::t _4642(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_8868.get()));{ long long _4644 = (_4641 * mosek::fusion::p_Matrix::_get_impl(_4642)->dimi); std::shared_ptr< monty::ndarray< long long,1 > > _4645 = ::mosek::fusion::Utils::Tools::range((long long)0,(_4641 * ((long long)1 + _4641)),_4641); std::shared_ptr< monty::ndarray< long long,1 > > _4646 = ::mosek::fusion::Utils::Tools::range((long long)0,_4644); std::shared_ptr< monty::ndarray< double,1 > > _4647 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4644))); int _4648 = (int)0; { long long _4649 = (long long)0; for (;(_4649 < mosek::fusion::p_Matrix::_get_impl(_4642)->dimj);( ++ _4649 )){ { long long _4650 = (long long)0; for (;(_4650 < mosek::fusion::p_Matrix::_get_impl(_4642)->dimi);( ++ _4650 )){ (((*_4647)(_4648)) = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4642)->data)(((_4650 * _4641) + _4649)))); ( ++ _4648 ); }}}}return ::mosek::fusion::p_Expr::_new_Expr(_4645,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4637}),_4646,_4647,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}else {mosek::fusion::Matrix::t _4643 = _8868;{ long long _4651 = _4643->numNonzeros(); std::shared_ptr< monty::ndarray< long long,1 > > _4652 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4641 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4653 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4651))); std::shared_ptr< monty::ndarray< double,1 > > _4654 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4651))); std::shared_ptr< monty::ndarray< int,1 > > _4655 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4651))); std::shared_ptr< monty::ndarray< int,1 > > _4656 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4651))); std::shared_ptr< monty::ndarray< double,1 > > _4657 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4651))); _4643->getDataAsTriplets(_4655,_4656,_4657); { int _4658 = (int)0; for (;(_4658 < _4651);( ++ _4658 )){ ( ++ ((*_4652)((((*_4656)(_4658)) + (int)1))) ); }}{ int _4659 = (int)0; for (;(_4659 < _4641);( ++ _4659 )){ (((*_4652)((_4659 + (int)1))) = (((*_4652)(_4659)) + ((*_4652)((_4659 + (int)1))))); }}{ int _4660 = (int)0; for (;(_4660 < _4651);( ++ _4660 )){ long long _4661 = ((*_4652)(((*_4656)(_4660)))); (((*_4654)(_4661)) = ((*_4657)(_4660))); (((*_4653)(_4661)) = (long long)((((*_4656)(_4660)) * mosek::fusion::p_Matrix::_get_impl(_4643)->dimi) + ((*_4655)(_4660)))); ( ++ ((*_4652)(((*_4656)(_4660)))) ); }}{ long long _4662 = _4641; for (;(_4662 > (int)0);( -- _4662 )){ (((*_4652)(_4662)) = ((*_4652)((_4662 - (int)1)))); }}(((*_4652)((int)0)) = (long long)0); return ::mosek::fusion::p_Expr::_new_Expr(_4652,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4637}),_4653,_4654,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4663,    monty::rc_ptr< ::mosek::fusion::Variable > _4664) { return mosek::fusion::p_Expr::mulDiag(_4663,_4664); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Matrix > _4663,monty::rc_ptr< ::mosek::fusion::Variable > _4664){ if ((! _4664 || ! _4663)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _4665 = _4663; monty::rc_ptr< ::mosek::fusion::Variable > _4666 = _4664; if (((mosek::fusion::p_Set::_get_impl(_4666->shape())->nd != (int)2) || ((mosek::fusion::p_Matrix::_get_impl(_4665)->dimj != _4666->shape()->dim((int)0)) || (mosek::fusion::p_Matrix::_get_impl(_4665)->dimi != _4666->shape()->dim((int)1))))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _8869 = _4665; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_8869.get())) {::mosek::fusion::DenseMatrix::t _4667(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_8869.get()));{ std::shared_ptr< monty::ndarray< long long,1 > > _4670 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)(mosek::fusion::p_Matrix::_get_impl(_4667)->dimj * ((int)1 + mosek::fusion::p_Matrix::_get_impl(_4667)->dimi)),(long long)mosek::fusion::p_Matrix::_get_impl(_4667)->dimj); std::shared_ptr< monty::ndarray< long long,1 > > _4671 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_Matrix::_get_impl(_4667)->dimi * mosek::fusion::p_Matrix::_get_impl(_4667)->dimj)))); std::shared_ptr< monty::ndarray< long long,1 > > _4672 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8870; for (int _4673=(int)0, _8871=mosek::fusion::p_Matrix::_get_impl(_4667)->dimi; _4673 < _8871;++_4673) for (int _4674=(int)0, _8872=mosek::fusion::p_Matrix::_get_impl(_4667)->dimj; _4674 < _8872;++_4674)_8870.push_back(((long long)_4673 + (mosek::fusion::p_Matrix::_get_impl(_4667)->dimi * _4674))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8870.size()),_8870.begin(),_8870.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _4675 = mosek::fusion::p_DenseMatrix::_get_impl(_4667)->data; return ::mosek::fusion::p_Expr::_new_Expr(_4670,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4664}),_4672,_4675,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}else if (nullptr != dynamic_cast< ::mosek::fusion::SparseMatrix* >(_8869.get())) {::mosek::fusion::SparseMatrix::t _4668(dynamic_cast< ::mosek::fusion::SparseMatrix* >(_8869.get()));{ std::shared_ptr< monty::ndarray< long long,1 > > _4676 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_Matrix::_get_impl(_4668)->dimi + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4677 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8873; for (long long _4678=(int)0, _8874=mosek::fusion::p_SparseMatrix::_get_impl(_4668)->nnz; _4678 < _8874;++_4678)_8873.push_back((long long)((((*mosek::fusion::p_SparseMatrix::_get_impl(_4668)->subj)(_4678)) * mosek::fusion::p_Matrix::_get_impl(_4668)->dimi) + ((*mosek::fusion::p_SparseMatrix::_get_impl(_4668)->subi)(_4678)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8873.size()),_8873.begin(),_8873.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _4679 = mosek::fusion::p_SparseMatrix::_get_impl(_4668)->val; long long _4680 = mosek::fusion::p_SparseMatrix::_get_impl(_4668)->nnz; int _8875 = (int)0; long long _8876 = _4680; for (long long _4681 = _8875;_4681<_8876;++_4681){ ( ++ ((*_4676)((((*mosek::fusion::p_SparseMatrix::_get_impl(_4668)->subi)(_4681)) + (int)1))) ); }int _8877 = (int)0; int _8878 = mosek::fusion::p_Matrix::_get_impl(_4668)->dimi; for (int _4682 = _8877;_4682<_8878;++_4682){ (((*_4676)((_4682 + (int)1))) = (((*_4676)(_4682)) + ((*_4676)((_4682 + (int)1))))); }return ::mosek::fusion::p_Expr::_new_Expr(_4676,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4664}),_4677,_4679,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }}else {mosek::fusion::Matrix::t _4669 = _8869;{ throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type used."));}}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _4683,    monty::rc_ptr< ::mosek::fusion::Matrix > _4684) { return mosek::fusion::p_Expr::mulDiag(_4683,_4684); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Expression > _4683,monty::rc_ptr< ::mosek::fusion::Matrix > _4684){ if ((! _4684 || ! _4683)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _4685 = _4683; monty::rc_ptr< ::mosek::fusion::Matrix > _4686 = _4684; monty::rc_ptr< ::mosek::fusion::Expression > _4687; monty::rc_ptr< ::mosek::fusion::FlatExpr > _4688 = _4685->eval(); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4688)->shape)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Expression operand must have 2 dimensions"));}else {}if (((mosek::fusion::p_FlatExpr::_get_impl(_4688)->shape->dim((int)0) != mosek::fusion::p_Matrix::_get_impl(_4686)->dimj) || (mosek::fusion::p_FlatExpr::_get_impl(_4688)->shape->dim((int)1) != mosek::fusion::p_Matrix::_get_impl(_4686)->dimi))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}int _4689 = mosek::fusion::p_FlatExpr::_get_impl(_4688)->shape->dim((int)0); int _4690 = mosek::fusion::p_FlatExpr::_get_impl(_4688)->shape->dim((int)1); monty::rc_ptr< ::mosek::fusion::Matrix > _8879 = _4686; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_8879.get())) {::mosek::fusion::DenseMatrix::t _4691(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_8879.get()));{ if (! mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst){ std::shared_ptr< monty::ndarray< long long,1 > > _4693 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4689 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4694 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4688)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4695 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4688)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4696 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4688)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4689)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4697 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _4698 = nullptr; int _4699 = (int)0; int _8880 = (int)0; int _8881 = _4689; for (int _4700 = _8880;_4700<_8881;++_4700){ (((*_4693)((_4700 + (int)1))) = ((*_4693)(_4700))); int _8882 = (int)0; int _8883 = _4690; for (int _4701 = _8882;_4701<_8883;++_4701){ long long _4702 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)((_4699 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4699))); double _4703 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4691)->data)(((_4701 * _4689) + _4700))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4688)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4699)),_4694,((*_4693)((_4700 + (int)1))),_4702); int _8884 = (int)0; long long _8885 = _4702; for (long long _4704 = _8884;_4704<_8885;++_4704){ (((*_4695)((((*_4693)((_4700 + (int)1))) + _4704))) = (_4703 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4699)) + _4704))))); }if (_4696){ (((*_4696)(_4700)) += (_4703 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->bfix)(_4699)))); }else {}(((*_4693)((_4700 + (int)1))) = (((*_4693)((_4700 + (int)1))) + _4702)); ( ++ _4699 ); }}(_4687 = ::mosek::fusion::p_Expr::_new_Expr(_4693,mosek::fusion::p_FlatExpr::_get_impl(_4688)->x,_4694,_4695,_4696,_4698,_4697)); }else { int _4705 = (int)0; { long long _4706 = (- (long long)1); int _8886 = (int)0; int _8887 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst)->size(0)); for (int _4707 = _8886;_4707<_8887;++_4707){ long long _4708 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst)(_4707)) / (long long)_4690); if ((_4706 < _4708)){ (_4706 = _4708); ( ++ _4705 ); }else {}}}std::shared_ptr< monty::ndarray< long long,1 > > _4709 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4705 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4710 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4688)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4711 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_FlatExpr::_get_impl(_4688)->nnz))); std::shared_ptr< monty::ndarray< double,1 > > _4712 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4688)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4705)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4713 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4705 >= _4689)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4705)))); })(); monty::rc_ptr< ::mosek::fusion::IntSet > _4714 = ::mosek::fusion::p_IntSet::_new_IntSet(_4689); { long long _4715 = (- (long long)1); int _4716 = (int)0; { int _4717 = (int)0; for (;(_4717 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst)->size(0)));( ++ _4717 )){ long long _4718 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst)(_4717)) / (long long)_4690); long long _4719 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst)(_4717)) - (_4718 * (long long)_4690)); if ((_4715 < _4718)){ (_4715 = _4718); if (_4713){ (((*_4713)(_4716)) = _4718); }else {}( ++ _4716 ); (((*_4709)(_4716)) = ((*_4709)((_4716 - (int)1)))); }else {}long long _4720 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)((_4717 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4717))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4688)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4717)),_4710,((*_4709)(_4716)),_4720); double _4721 = ((*mosek::fusion::p_DenseMatrix::_get_impl(_4691)->data)(((_4719 * _4689) + _4718))); int _8888 = (int)0; long long _8889 = _4720; for (long long _4722 = _8888;_4722<_8889;++_4722){ (((*_4711)((((*_4709)(_4716)) + _4722))) = (_4721 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4717)) + _4722))))); }if (_4712){ (((*_4712)((_4716 - (int)1))) += (_4721 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->bfix)(_4717)))); }else {}(((*_4709)(_4716)) = (((*_4709)(_4716)) + _4720)); }}}(_4687 = ::mosek::fusion::p_Expr::_new_Expr(_4709,mosek::fusion::p_FlatExpr::_get_impl(_4688)->x,_4710,_4711,_4712,::mosek::fusion::Set::t(_4714),_4713)); }}}else {mosek::fusion::Matrix::t _4692 = _8879;{ long long _4723 = _4692->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4724 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4723))); std::shared_ptr< monty::ndarray< int,1 > > _4725 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4723))); std::shared_ptr< monty::ndarray< double,1 > > _4726 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4723))); std::shared_ptr< monty::ndarray< long long,1 > > _4727 = ::mosek::fusion::Utils::Tools::range((long long)_4723); _4692->getDataAsTriplets(_4724,_4725,_4726); ::mosek::fusion::Utils::Tools::argsort(_4727,_4725,_4724,(long long)((int)0),_4723); if (! mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst){ int _4728 = (int)0; long long _4729 = (long long)0; { int _4730 = (- (int)1); { int _4731 = (int)0; for (;(_4731 < _4723);( ++ _4731 )){ if ((_4730 < ((*_4725)(((*_4727)(_4731)))))){ ( ++ _4728 ); (_4730 = ((*_4725)(((*_4727)(_4731))))); }else {}int _4732 = ((((*_4725)(((*_4727)(_4731)))) * mosek::fusion::p_Matrix::_get_impl(_4692)->dimi) + ((*_4724)(((*_4727)(_4731))))); (_4729 = (_4729 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)((_4732 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4732))))); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4733 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4728 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4734 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4729))); std::shared_ptr< monty::ndarray< double,1 > > _4735 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4729))); std::shared_ptr< monty::ndarray< double,1 > > _4736 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4688)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4728)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4737 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4728 >= mosek::fusion::p_Matrix::_get_impl(_4692)->dimj)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4728)))); })(); monty::rc_ptr< ::mosek::fusion::IntSet > _4738 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_Matrix::_get_impl(_4692)->dimj); { long long _4739 = (- (long long)1); int _4740 = (int)0; int _8890 = (int)0; long long _8891 = _4723; for (long long _4741 = _8890;_4741<_8891;++_4741){ if ((_4739 < ((*_4725)(((*_4727)(_4741)))))){ (_4739 = ((*_4725)(((*_4727)(_4741))))); if (_4737){ (((*_4737)(_4740)) = _4739); }else {}( ++ _4740 ); (((*_4733)(_4740)) = ((*_4733)((_4740 - (int)1)))); }else {}int _4742 = ((((*_4725)(((*_4727)(_4741)))) * mosek::fusion::p_Matrix::_get_impl(_4692)->dimi) + ((*_4724)(((*_4727)(_4741))))); long long _4743 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)((_4742 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4742))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4688)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4742)),_4734,((*_4733)(_4740)),_4743); int _8892 = (int)0; long long _8893 = _4743; for (long long _4744 = _8892;_4744<_8893;++_4744){ (((*_4735)((((*_4733)(_4740)) + _4744))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4742)) + _4744))) * ((*_4726)(((*_4727)(_4741)))))); }if (_4736){ (((*_4736)(_4739)) += (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->bfix)(_4742)) * ((*_4726)(((*_4727)(_4741)))))); }else {}(((*_4733)(_4740)) = (((*_4733)(_4740)) + _4743)); }}(_4687 = ::mosek::fusion::p_Expr::_new_Expr(_4733,mosek::fusion::p_FlatExpr::_get_impl(_4688)->x,_4734,_4735,_4736,::mosek::fusion::Set::t(_4738),_4737)); }else { int _4745 = (int)0; long long _4746 = (long long)0; { int _4747 = (int)0; int _4748 = (int)0; long long _4749 = (- (long long)1); while (((_4747 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst)->size(0))) && (_4748 < _4723))) { long long _4750 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst)(_4747)) / _4690); long long _4751 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst)(_4747)) - (_4750 * _4690)); if ((_4750 < ((*_4725)(((*_4727)(_4748)))))){ ( ++ _4747 ); }else if ((_4750 > ((*_4725)(((*_4727)(_4748)))))){ ( ++ _4748 ); }else if ((_4751 < ((*_4724)(((*_4727)(_4748)))))){ ( ++ _4747 ); }else if ((_4751 > ((*_4724)(((*_4727)(_4748)))))){ ( ++ _4748 ); }else { if ((_4749 < _4750)){ ( ++ _4745 ); (_4749 = _4750); }else {}(_4746 = (_4746 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)((_4747 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4747))))); ( ++ _4747 ); ( ++ _4748 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4752 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4745 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4753 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4746))); std::shared_ptr< monty::ndarray< double,1 > > _4754 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4746))); std::shared_ptr< monty::ndarray< double,1 > > _4755 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_4688)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4745)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4756 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( (_4745 >= _4689)) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4745)))); })(); monty::rc_ptr< ::mosek::fusion::IntSet > _4757 = ::mosek::fusion::p_IntSet::_new_IntSet(_4689); { int _4758 = (int)0; int _4759 = (int)0; long long _4760 = (- (long long)1); int _4761 = (int)0; while (((_4758 < (int)((mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst)->size(0))) && (_4759 < _4723))) { long long _4762 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst)(_4758)) / (long long)_4690); long long _4763 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->inst)(_4758)) - (_4762 * (long long)_4690)); if ((_4762 < ((*_4725)(((*_4727)(_4759)))))){ ( ++ _4758 ); }else if ((_4762 > ((*_4725)(((*_4727)(_4759)))))){ ( ++ _4759 ); }else if ((_4763 < ((*_4724)(((*_4727)(_4759)))))){ ( ++ _4758 ); }else if ((_4763 > ((*_4724)(((*_4727)(_4759)))))){ ( ++ _4759 ); }else { if ((_4760 < _4762)){ if (_4756){ (((*_4756)(_4761)) = _4762); }else {}( ++ _4761 ); (((*_4752)(_4761)) = ((*_4752)((_4761 - (int)1)))); (_4760 = _4762); }else {}long long _4764 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)((_4758 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4758))); double _4765 = ((*_4726)(((*_4727)(_4759)))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_4688)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4758)),_4753,((*_4752)(_4761)),_4764); { int _4766 = (int)0; for (;(_4766 < _4764);( ++ _4766 )){ (((*_4754)((((*_4752)(_4761)) + _4766))) = (_4765 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->ptrb)(_4758)) + _4766))))); }}if (_4755){ (((*_4755)((_4761 - (int)1))) = (((*_4755)((_4761 - (int)1))) + (_4765 * ((*mosek::fusion::p_FlatExpr::_get_impl(_4688)->bfix)(_4758))))); }else {}(((*_4752)(_4761)) = (((*_4752)(_4761)) + _4764)); ( ++ _4758 ); ( ++ _4759 ); }}}(_4687 = ::mosek::fusion::p_Expr::_new_Expr(_4752,mosek::fusion::p_FlatExpr::_get_impl(_4688)->x,_4753,_4754,_4755,::mosek::fusion::Set::t(_4757),_4756)); }}}return _4687; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4767,    monty::rc_ptr< ::mosek::fusion::Expression > _4768) { return mosek::fusion::p_Expr::mulDiag(_4767,_4768); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Matrix > _4767,monty::rc_ptr< ::mosek::fusion::Expression > _4768){ if ((! _4767 || ! _4768)){ throw monty::NullPointerException(std::string ("Arguments for mulDiag may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Matrix > _4769 = _4767; monty::rc_ptr< ::mosek::fusion::Expression > _4770 = _4768; monty::rc_ptr< ::mosek::fusion::Expression > _4771; monty::rc_ptr< ::mosek::fusion::FlatExpr > _4772 = _4770->eval(); if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4772)->shape)->nd != (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Expression operand must have 2 dimensions"));}else {}if (((mosek::fusion::p_FlatExpr::_get_impl(_4772)->shape->dim((int)0) != mosek::fusion::p_Matrix::_get_impl(_4769)->dimj) || (mosek::fusion::p_FlatExpr::_get_impl(_4772)->shape->dim((int)1) != mosek::fusion::p_Matrix::_get_impl(_4769)->dimi))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}int _4773 = mosek::fusion::p_FlatExpr::_get_impl(_4772)->shape->dim((int)0); int _4774 = mosek::fusion::p_FlatExpr::_get_impl(_4772)->shape->dim((int)1); std::shared_ptr< monty::ndarray< long long,1 > > _4775; std::shared_ptr< monty::ndarray< long long,1 > > _4776; if (mosek::fusion::p_FlatExpr::_get_impl(_4772)->inst){ (_4775 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)->size(0)) - (int)1))))); (_4776 = ::mosek::fusion::Utils::Tools::range((long long)((_4775)->size(0)))); int _8894 = (int)0; int _8895 = (int)((_4775)->size(0)); for (int _4777 = _8894;_4777<_8895;++_4777){ long long _4778 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->inst)(_4777)) / (long long)_4774); long long _4779 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->inst)(_4777)) % (long long)_4774); (((*_4775)(_4777)) = ((_4779 * _4773) + _4778)); }::mosek::fusion::p_CommonTools::argQsort(_4776,_4775,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_4776)->size(0))); }else { (_4775 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8896; for (int _4780=(int)0, _8897=((int)((mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)->size(0)) - (int)1); _4780 < _8897;++_4780)_8896.push_back((((long long)(_4780 % _4774) * _4773) + (_4780 / _4774))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8896.size()),_8896.begin(),_8896.end())); })()); (_4776 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8898; for (int _4781=(int)0, _8899=((int)((mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)->size(0)) - (int)1); _4781 < _8899;++_4781)_8898.push_back((((long long)(_4781 % _4773) * _4774) + (_4781 / _4773))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8898.size()),_8898.begin(),_8898.end())); })()); }monty::rc_ptr< ::mosek::fusion::Matrix > _8900 = _4769; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_8900.get())) {::mosek::fusion::DenseMatrix::t _4782(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_8900.get()));{ long long _4784 = (long long)0; if (! mosek::fusion::p_FlatExpr::_get_impl(_4772)->inst){ (_4784 = (long long)_4774); }else { int _4785 = (- (int)1); int _8901 = (int)0; int _8902 = (int)((_4775)->size(0)); for (int _4786 = _8901;_4786<_8902;++_4786){ int _4787 = (int)(((*_4775)(((*_4776)(_4786)))) / (long long)mosek::fusion::p_Matrix::_get_impl(_4782)->dimj); if ((_4787 > _4785)){ ( ++ _4784 ); (_4785 = _4787); }else {}}}long long _4788 = (long long)((mosek::fusion::p_FlatExpr::_get_impl(_4772)->subj)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _4789 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4784 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4790 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4788))); std::shared_ptr< monty::ndarray< double,1 > > _4791 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4788))); std::shared_ptr< monty::ndarray< double,1 > > _4792 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _4793 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4784))); { int _4794 = (- (int)1); long long _4795 = (long long)0; int _8903 = (int)0; int _8904 = (int)((_4775)->size(0)); for (int _4796 = _8903;_4796<_8904;++_4796){ int _4797 = (int)(((*_4775)(((*_4776)(_4796)))) / (long long)_4773); if ((_4797 > _4794)){ ( ++ _4795 ); (_4794 = _4797); (((*_4789)(_4795)) = ((*_4789)((_4795 - (long long)1)))); (((*_4793)((_4795 - (long long)1))) = (long long)_4797); }else {}long long _4798 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)((((*_4776)(_4796)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)(((*_4776)(_4796))))); long long _8905 = (long long)0; long long _8906 = _4798; for (long long _4799 = _8905;_4799<_8906;++_4799){ (((*_4790)((((*_4789)(_4795)) + _4799))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)(((*_4776)(_4796)))) + _4799)))); (((*_4791)((((*_4789)(_4795)) + _4799))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)(((*_4776)(_4796)))) + _4799))) * ((*mosek::fusion::p_DenseMatrix::_get_impl(_4782)->data)(((*_4775)(((*_4776)(_4796)))))))); }(((*_4789)(_4795)) = (((*_4789)(_4795)) + _4798)); }}if (mosek::fusion::p_FlatExpr::_get_impl(_4772)->bfix){ int _4800 = (- (int)1); int _4801 = (int)0; (_4792 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4784)))); int _8907 = (int)0; int _8908 = (int)((_4775)->size(0)); for (int _4802 = _8907;_4802<_8908;++_4802){ int _4803 = (int)(((*_4775)(((*_4776)(_4802)))) / (long long)mosek::fusion::p_Matrix::_get_impl(_4782)->dimj); if ((_4803 > _4800)){ ( ++ _4801 ); (_4800 = _4803); }else {}(((*_4792)((_4801 - (int)1))) += (((*mosek::fusion::p_DenseMatrix::_get_impl(_4782)->data)(((*_4775)(((*_4776)(_4802)))))) * ((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->bfix)(((*_4776)(_4802)))))); }}else {}(_4771 = ::mosek::fusion::p_Expr::_new_Expr(_4789,mosek::fusion::p_FlatExpr::_get_impl(_4772)->x,_4790,_4791,_4792,::mosek::fusion::Set::t(nullptr),([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ((int)((_4793)->size(0)) < mosek::fusion::p_Matrix::_get_impl(_4782)->dimi)) return (_4793); else return (nullptr); })())); }}else {mosek::fusion::Matrix::t _4783 = _8900;{ std::shared_ptr< monty::ndarray< int,1 > > _4804 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4783->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _4805 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4783->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _4806 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4783->numNonzeros()))); long long _4807 = _4783->numNonzeros(); int _4808 = _4783->numRows(); int _4809 = _4783->numColumns(); _4783->getDataAsTriplets(_4804,_4805,_4806); int _4810 = (int)0; long long _4811 = (long long)0; { int _4812 = (- (int)1); int _4813 = (int)0; int _4814 = (int)0; while (((_4813 < _4807) && (_4814 < (int)((_4775)->size(0))))) { int _4815 = ((((*_4804)(_4813)) * _4809) + ((*_4805)(_4813))); if ((_4815 < ((*_4775)(((*_4776)(_4814)))))){ ( ++ _4813 ); }else if ((_4815 > ((*_4775)(((*_4776)(_4814)))))){ ( ++ _4814 ); }else { if ((_4812 < ((*_4804)(_4813)))){ (_4812 = ((*_4804)(_4813))); ( ++ _4810 ); }else {}(_4811 = (_4811 + (((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)((((*_4776)(_4814)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)(((*_4776)(_4814))))))); ( ++ _4814 ); ( ++ _4813 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4816 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4810 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4817 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4811))); std::shared_ptr< monty::ndarray< double,1 > > _4818 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4811))); std::shared_ptr< monty::ndarray< double,1 > > _4819 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _4820 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4810))); { int _4821 = (- (int)1); int _4822 = (int)0; int _4823 = (int)0; long long _4824 = (long long)0; while (((_4822 < _4807) && (_4823 < (int)((_4775)->size(0))))) { int _4825 = ((((*_4804)(_4822)) * _4809) + ((*_4805)(_4822))); if ((_4825 < ((*_4775)(((*_4776)(_4823)))))){ ( ++ _4822 ); }else if ((_4825 > ((*_4775)(((*_4776)(_4823)))))){ ( ++ _4823 ); }else { if ((_4821 < ((*_4804)(_4822)))){ (_4821 = ((*_4804)(_4822))); ( ++ _4824 ); (((*_4820)((_4824 - (int)1))) = (long long)_4821); (((*_4816)(_4824)) = ((*_4816)((_4824 - (long long)1)))); }else {}long long _4826 = (((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)((((*_4776)(_4823)) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)(((*_4776)(_4823))))); long long _8909 = (long long)0; long long _8910 = _4826; for (long long _4827 = _8909;_4827<_8910;++_4827){ (((*_4817)((((*_4816)(_4824)) + _4827))) = ((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)(((*_4776)(_4823)))) + _4827)))); (((*_4818)(((*_4816)((_4824 + _4827))))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->ptrb)(((*_4776)(_4823)))) + _4827))) * ((*_4806)(_4822)))); }(((*_4816)(_4824)) = (((*_4816)(_4824)) + _4826)); ( ++ _4823 ); ( ++ _4822 ); }}}if (mosek::fusion::p_FlatExpr::_get_impl(_4772)->bfix){ int _4828 = (- (int)1); int _4829 = (int)0; int _4830 = (int)0; long long _4831 = (long long)0; (_4819 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4810)))); while (((_4829 < _4807) && (_4830 < (int)((_4775)->size(0))))) { int _4832 = ((((*_4804)(_4829)) * _4809) + ((*_4805)(_4829))); if ((_4832 < ((*_4775)(((*_4776)(_4830)))))){ ( ++ _4829 ); }else if ((_4832 > ((*_4775)(((*_4776)(_4830)))))){ ( ++ _4830 ); }else { if ((_4828 < ((*_4804)(_4829)))){ (_4828 = ((*_4804)(_4829))); ( ++ _4831 ); }else {}(((*_4819)((_4831 - (int)1))) = (((*_4819)((_4831 - (int)1))) + (((*mosek::fusion::p_FlatExpr::_get_impl(_4772)->bfix)(((*_4776)(_4830)))) * ((*_4806)(_4829))))); ( ++ _4830 ); ( ++ _4829 ); }}}else {}if (((int)((_4820)->size(0)) == mosek::fusion::p_Matrix::_get_impl(_4783)->dimi)){ (_4820 = nullptr); }else {}(_4771 = ::mosek::fusion::p_Expr::_new_Expr(_4816,mosek::fusion::p_FlatExpr::_get_impl(_4772)->x,_4817,_4818,_4819,::mosek::fusion::p_Set::make(mosek::fusion::p_Matrix::_get_impl(_4783)->dimi),_4820)); }}return _4771; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _4833,    std::shared_ptr< monty::ndarray< double,2 > > _4834) { return mosek::fusion::p_Expr::mulDiag(_4833,_4834); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Variable > _4833,std::shared_ptr< monty::ndarray< double,2 > > _4834){ return ::mosek::fusion::p_Expr::mulDiag(_4833,::mosek::fusion::p_Matrix::dense(_4834)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _4835,    monty::rc_ptr< ::mosek::fusion::Variable > _4836) { return mosek::fusion::p_Expr::mulDiag(_4835,_4836); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( std::shared_ptr< monty::ndarray< double,2 > > _4835,monty::rc_ptr< ::mosek::fusion::Variable > _4836){ return ::mosek::fusion::p_Expr::mulDiag(::mosek::fusion::p_Matrix::dense(_4835),_4836); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _4837,    std::shared_ptr< monty::ndarray< double,2 > > _4838) { return mosek::fusion::p_Expr::mulDiag(_4837,_4838); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( monty::rc_ptr< ::mosek::fusion::Expression > _4837,std::shared_ptr< monty::ndarray< double,2 > > _4838){ return ::mosek::fusion::p_Expr::mulDiag(_4837,::mosek::fusion::p_Matrix::dense(_4838)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _4839,    monty::rc_ptr< ::mosek::fusion::Expression > _4840) { return mosek::fusion::p_Expr::mulDiag(_4839,_4840); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag( std::shared_ptr< monty::ndarray< double,2 > > _4839,monty::rc_ptr< ::mosek::fusion::Expression > _4840){ return ::mosek::fusion::p_Expr::mulDiag(::mosek::fusion::p_Matrix::dense(_4839),_4840); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::Matrix > _4841,monty::rc_ptr< ::mosek::fusion::Expression > _4842){ if (((_4841->numRows() != _4842->shape()->dim((int)0)) || ((_4841->numColumns() != _4842->shape()->dim((int)1)) || ((_4841->numRows() * _4841->numColumns()) != _4842->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _4843 = _4841->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4844 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4843))); std::shared_ptr< monty::ndarray< int,1 > > _4845 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4843))); std::shared_ptr< monty::ndarray< double,1 > > _4846 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4843))); _4841->getDataAsTriplets(_4844,_4845,_4846); std::shared_ptr< monty::ndarray< long long,1 > > _4847 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8911; for (long long _4848=(int)0, _8912=_4843; _4848 < _8912;++_4848)_8911.push_back(((((*_4844)(_4848)) * _4841->numColumns()) + ((*_4845)(_4848)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8911.size()),_8911.begin(),_8911.end())); })(); monty::rc_ptr< ::mosek::fusion::FlatExpr > _4849 = _4842->eval(); return ::mosek::fusion::p_Expr::dotmul_(_4847,_4846,mosek::fusion::p_FlatExpr::_get_impl(_4849)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4849)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4849)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4849)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4849)->inst,mosek::fusion::p_FlatExpr::_get_impl(_4849)->x,mosek::fusion::p_FlatExpr::_get_impl(_4849)->shape); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::Matrix > _4850,monty::rc_ptr< ::mosek::fusion::Variable > _4851){ if (((_4850->numRows() != _4851->shape()->dim((int)0)) || ((_4850->numColumns() != _4851->shape()->dim((int)1)) || ((_4850->numRows() * _4850->numColumns()) != _4851->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _4852 = _4850->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4853 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4852))); std::shared_ptr< monty::ndarray< int,1 > > _4854 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4852))); std::shared_ptr< monty::ndarray< double,1 > > _4855 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4852))); _4850->getDataAsTriplets(_4853,_4854,_4855); std::shared_ptr< monty::ndarray< long long,1 > > _4856 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8913; for (long long _4857=(int)0, _8914=_4852; _4857 < _8914;++_4857)_8913.push_back(((((*_4853)(_4857)) * _4850->numColumns()) + ((*_4854)(_4857)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8913.size()),_8913.begin(),_8913.end())); })(); return ::mosek::fusion::p_Expr::dotmul_(_4856,_4855,_4851,_4851->shape()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( std::shared_ptr< monty::ndarray< double,1 > > _4858,monty::rc_ptr< ::mosek::fusion::Variable > _4859){ if ((! _4859 || ! _4858)){ throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));}else {}if (((_4859->shape()->dim((int)0) != (int)((_4858)->size(0))) || (_4859->shape()->getSize() != (long long)((_4858)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}return ::mosek::fusion::p_Expr::dotmul_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_4858)->size(0))),_4858,_4859,_4859->shape()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( std::shared_ptr< monty::ndarray< double,1 > > _4860,monty::rc_ptr< ::mosek::fusion::Expression > _4861){ if ((! _4860 || ! _4861)){ throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));}else {}if (((_4861->shape()->dim((int)0) != (int)((_4860)->size(0))) || (_4861->shape()->getSize() != (long long)((_4860)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4862 = _4861->eval(); return ::mosek::fusion::p_Expr::dotmul_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_4860)->size(0))),_4860,mosek::fusion::p_FlatExpr::_get_impl(_4862)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4862)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4862)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4862)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4862)->inst,mosek::fusion::p_FlatExpr::_get_impl(_4862)->x,mosek::fusion::p_FlatExpr::_get_impl(_4862)->shape); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _4863,monty::rc_ptr< ::mosek::fusion::Expression > _4864){ if ((! _4863 || ! _4864)){ throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));}else {}int _8915 = (int)0; int _8916 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_4863)->dims)->size(0)); for (int _4865 = _8915;_4865<_8916;++_4865){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_4863)->dims)(_4865)) != _4864->shape()->dim(_4865))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _8917 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_4863)->dims)->size(0)); int _8918 = mosek::fusion::p_Set::_get_impl(_4864->shape())->nd; for (int _4866 = _8917;_4866<_8918;++_4866){ if (((int)1 != _4864->shape()->dim(_4866))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _8919 = (int)0; int _8920 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_4863)->dims)->size(0)); for (int _4867 = _8919;_4867<_8920;++_4867){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_4863)->dims)(_4867)) != _4864->shape()->dim(_4867))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4868 = _4864->eval(); return ::mosek::fusion::p_Expr::dotmul_(mosek::fusion::p_NDSparseArray::_get_impl(_4863)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_4863)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4868)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4868)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4868)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4868)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4868)->inst,mosek::fusion::p_FlatExpr::_get_impl(_4868)->x,mosek::fusion::p_FlatExpr::_get_impl(_4868)->shape); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _4869,monty::rc_ptr< ::mosek::fusion::Variable > _4870){ if ((mosek::fusion::p_Set::_get_impl(_4870->shape())->nd != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_4869)->dims)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}int _8921 = (int)0; int _8922 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_4869)->dims)->size(0)); for (int _4871 = _8921;_4871<_8922;++_4871){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_4869)->dims)(_4871)) != _4870->shape()->dim(_4871))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}return ::mosek::fusion::p_Expr::dotmul_(mosek::fusion::p_NDSparseArray::_get_impl(_4869)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_4869)->cof,_4870,_4870->shape()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dotmul_( std::shared_ptr< monty::ndarray< long long,1 > > _4872,std::shared_ptr< monty::ndarray< double,1 > > _4873,monty::rc_ptr< ::mosek::fusion::Variable > _4874,monty::rc_ptr< ::mosek::fusion::Set > _4875){ int _4876 = (int)((_4872)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _4877 = ::mosek::fusion::Utils::Tools::range(((long long)((_4872)->size(0)) + (int)1)); std::shared_ptr< monty::ndarray< long long,1 > > _4878 = ::mosek::fusion::Utils::Tools::arraycopy(_4872); std::shared_ptr< monty::ndarray< double,1 > > _4879 = ::mosek::fusion::Utils::Tools::arraycopy(_4873); std::shared_ptr< monty::ndarray< double,1 > > _4880 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_4877,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_4874}),_4878,_4879,_4880,_4875,_4872); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dotmul_( std::shared_ptr< monty::ndarray< long long,1 > > _4881,std::shared_ptr< monty::ndarray< double,1 > > _4882,std::shared_ptr< monty::ndarray< long long,1 > > _4883,std::shared_ptr< monty::ndarray< long long,1 > > _4884,std::shared_ptr< monty::ndarray< double,1 > > _4885,std::shared_ptr< monty::ndarray< double,1 > > _4886,std::shared_ptr< monty::ndarray< long long,1 > > _4887,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4888,monty::rc_ptr< ::mosek::fusion::Set > _4889){ int _4890 = (int)((_4881)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _4891 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _4887) return (_4887); else return (::mosek::fusion::Utils::Tools::range((long long)((int)0),((long long)((_4883)->size(0)) - (int)1))); })(); int _4892 = (int)((_4891)->size(0)); long long _4893 = (long long)0; int _4894 = (int)0; { int _4895 = (int)0; int _4896 = (int)0; while (((_4895 < _4890) && (_4896 < _4892))) { if ((((*_4881)(_4895)) < ((*_4891)(_4896)))){ ( ++ _4895 ); }else if ((((*_4881)(_4895)) > ((*_4891)(_4896)))){ ( ++ _4896 ); }else { (_4893 += (((*_4883)((_4896 + (int)1))) - ((*_4883)(_4896)))); ( ++ _4894 ); ( ++ _4895 ); ( ++ _4896 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4897 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4893))); std::shared_ptr< monty::ndarray< double,1 > > _4898 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4893))); std::shared_ptr< monty::ndarray< long long,1 > > _4899 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4894 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _4900 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4894))); std::shared_ptr< monty::ndarray< double,1 > > _4901 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! _4886) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4894)))); })(); { { int _4902 = (int)0; int _4903 = (int)0; int _4904 = (int)0; int _4905 = (int)0; while (((_4902 < _4890) && (_4903 < _4892))) { if ((((*_4881)(_4902)) < ((*_4891)(_4903)))){ ( ++ _4902 ); }else if ((((*_4881)(_4902)) > ((*_4891)(_4903)))){ ( ++ _4903 ); }else { long long _8923 = ((*_4883)(_4903)); long long _8924 = ((*_4883)((_4903 + (int)1))); for (long long _4906 = _8923;_4906<_8924;++_4906){ (((*_4897)(_4904)) = ((*_4884)(_4906))); (((*_4898)(_4904)) = (((*_4885)(_4906)) * ((*_4882)(_4902)))); ( ++ _4904 ); }(((*_4899)((_4905 + (int)1))) = ((((*_4899)(_4905)) + ((*_4883)((_4903 + (int)1)))) - ((*_4883)(_4903)))); (((*_4900)(_4905)) = ((*_4891)(_4903))); ( ++ _4905 ); ( ++ _4902 ); ( ++ _4903 ); }}}if (_4886){ int _4907 = (int)0; int _4908 = (int)0; int _4909 = (int)0; while (((_4907 < _4890) && (_4908 < _4892))) { if ((((*_4881)(_4907)) < ((*_4891)(_4908)))){ ( ++ _4907 ); }else if ((((*_4881)(_4907)) > ((*_4891)(_4908)))){ ( ++ _4908 ); }else { (((*_4901)(_4909)) += (((*_4882)(_4907)) * ((*_4886)(_4908)))); ( ++ _4907 ); ( ++ _4908 ); ( ++ _4909 ); }}}else {}}return ::mosek::fusion::p_Expr::_new_Expr(_4899,_4888,_4897,_4898,_4901,_4889,([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ((int)((_4900)->size(0)) < mosek::fusion::p_Set::_get_impl(_4889)->size)) return (_4900); else return (nullptr); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _4910,    monty::rc_ptr< ::mosek::fusion::Expression > _4911) { return mosek::fusion::p_Expr::mul(_4910,_4911); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Matrix > _4910,monty::rc_ptr< ::mosek::fusion::Expression > _4911){ if ((! _4910 || ! _4911)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _4912 = nullptr; monty::rc_ptr< ::mosek::fusion::FlatExpr > _4913 = _4911->eval(); int _4914 = _4910->numRows(); int _4915 = _4910->numColumns(); monty::rc_ptr< ::mosek::fusion::Set > _4916 = nullptr; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4913)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_4913)->shape->dim((int)0) == (int)1))){ (_4912 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_4913)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4913)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4913)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4913)->x,_4910)); }else { int _4917; int _4918; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4913)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_4913)->shape->dim((int)0) == _4915))){ (_4918 = (int)1); (_4917 = mosek::fusion::p_FlatExpr::_get_impl(_4913)->shape->dim((int)0)); (_4916 = ::mosek::fusion::p_IntSet::_new_IntSet(_4914)); }else if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4913)->shape)->nd == (int)2) && (mosek::fusion::p_FlatExpr::_get_impl(_4913)->shape->dim((int)0) == _4915))){ (_4917 = mosek::fusion::p_FlatExpr::_get_impl(_4913)->shape->dim((int)0)); (_4918 = mosek::fusion::p_FlatExpr::_get_impl(_4913)->shape->dim((int)1)); (_4916 = ::mosek::fusion::p_NDSet::_new_NDSet(_4914,_4918)); }else { throw ::mosek::fusion::DimensionError(std::string ("Expression operand must be one- or two-dimensional, and dimensions must match for multiplication"));}if ((! mosek::fusion::p_FlatExpr::_get_impl(_4913)->inst && (! _4910->isSparse()))){ (_4912 = ::mosek::fusion::p_Expr::mul_DMatrix_2DDExpr(mosek::fusion::p_FlatExpr::_get_impl(_4913)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4913)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4913)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4913)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4913)->x,_4916,_4917,_4918,_4910->getDataAsArray(),_4914,_4915)); }else { long long _4919 = _4910->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4920 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4919))); std::shared_ptr< monty::ndarray< int,1 > > _4921 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4919))); std::shared_ptr< monty::ndarray< double,1 > > _4922 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4919))); _4910->getDataAsTriplets(_4920,_4921,_4922); std::shared_ptr< monty::ndarray< long long,1 > > _4923 = mosek::fusion::p_FlatExpr::_get_impl(_4913)->inst; if (! _4923){ (_4923 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4913)->ptrb)->size(0)) - (int)1))); }else {}(_4912 = ::mosek::fusion::p_Expr::mul_SMatrix_2DSExpr(mosek::fusion::p_FlatExpr::_get_impl(_4913)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4913)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4913)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4913)->bfix,_4923,mosek::fusion::p_FlatExpr::_get_impl(_4913)->x,_4916,_4917,_4918,_4920,_4921,_4922,_4914,_4915)); }}return _4912; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _4924,    monty::rc_ptr< ::mosek::fusion::Matrix > _4925) { return mosek::fusion::p_Expr::mul(_4924,_4925); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Expression > _4924,monty::rc_ptr< ::mosek::fusion::Matrix > _4925){ if ((! _4925 || ! _4924)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _4926 = nullptr; monty::rc_ptr< ::mosek::fusion::FlatExpr > _4927 = _4924->eval(); int _4928 = _4925->numRows(); int _4929 = _4925->numColumns(); if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4927)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_4927)->shape->dim((int)0) == (int)1))){ (_4926 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_4927)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4927)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4927)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4927)->x,_4925)); }else { monty::rc_ptr< ::mosek::fusion::Set > _4930 = nullptr; int _4931; int _4932; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4927)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_4927)->shape->dim((int)0) == _4928))){ (_4931 = (int)1); (_4932 = mosek::fusion::p_FlatExpr::_get_impl(_4927)->shape->dim((int)0)); (_4930 = ::mosek::fusion::p_IntSet::_new_IntSet(_4929)); }else if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4927)->shape)->nd == (int)2) && (mosek::fusion::p_FlatExpr::_get_impl(_4927)->shape->dim((int)1) == _4928))){ (_4931 = mosek::fusion::p_FlatExpr::_get_impl(_4927)->shape->dim((int)0)); (_4932 = mosek::fusion::p_FlatExpr::_get_impl(_4927)->shape->dim((int)1)); (_4930 = ::mosek::fusion::p_NDSet::_new_NDSet(_4931,_4929)); }else { throw ::mosek::fusion::DimensionError(std::string ("Expression operand must be one- or two-dimensional, and dimensions must match for multiplication"));}if ((! mosek::fusion::p_FlatExpr::_get_impl(_4927)->inst && (! _4925->isSparse()))){ (_4926 = ::mosek::fusion::p_Expr::mul_2DDExpr_DMatrix(mosek::fusion::p_FlatExpr::_get_impl(_4927)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4927)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4927)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4927)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4927)->x,_4930,_4931,_4932,_4925->getDataAsArray(),_4928,_4929)); }else { long long _4933 = _4925->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _4934 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4933))); std::shared_ptr< monty::ndarray< int,1 > > _4935 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4933))); std::shared_ptr< monty::ndarray< double,1 > > _4936 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4933))); _4925->getDataAsTriplets(_4934,_4935,_4936); std::shared_ptr< monty::ndarray< long long,1 > > _4937 = mosek::fusion::p_FlatExpr::_get_impl(_4927)->inst; if (! _4937){ (_4937 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((mosek::fusion::p_FlatExpr::_get_impl(_4927)->ptrb)->size(0)) - (int)1))); }else {}(_4926 = ::mosek::fusion::p_Expr::mul_2DSExpr_SMatrix(mosek::fusion::p_FlatExpr::_get_impl(_4927)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4927)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4927)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4927)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4927)->inst,mosek::fusion::p_FlatExpr::_get_impl(_4927)->x,_4930,_4931,_4932,_4934,_4935,_4936,_4928,_4929)); }}return _4926; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _4938,    std::shared_ptr< monty::ndarray< double,1 > > _4939) { return mosek::fusion::p_Expr::mul(_4938,_4939); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Expression > _4938,std::shared_ptr< monty::ndarray< double,1 > > _4939){ if ((! _4939 || ! _4938)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Expression > _4940 = nullptr; int _4941 = (int)((_4939)->size(0)); int _4942 = (int)1; monty::rc_ptr< ::mosek::fusion::FlatExpr > _4943 = _4938->eval(); int _4944; int _4945; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4943)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_4943)->shape->dim((int)0) == (int)1))){ (_4940 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_4943)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4943)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4943)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4943)->x,::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix((int)((_4939)->size(0)),(int)1,_4939)))); }else { monty::rc_ptr< ::mosek::fusion::Set > _4946 = nullptr; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4943)->shape)->nd == (int)1)){ (_4946 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); (_4945 = mosek::fusion::p_FlatExpr::_get_impl(_4943)->shape->dim((int)0)); (_4944 = (int)1); }else if ((mosek::fusion::p_FlatExpr::_get_impl(_4943)->shape->realnd() == (int)2)){ (_4946 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_FlatExpr::_get_impl(_4943)->shape->dim((int)0))); (_4944 = mosek::fusion::p_FlatExpr::_get_impl(_4943)->shape->dim((int)0)); (_4945 = mosek::fusion::p_FlatExpr::_get_impl(_4943)->shape->dim((int)1)); }else { throw ::mosek::fusion::DimensionError(std::string ("Expression operand must be one- or two-dimensional"));}if ((_4945 != _4941)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}if (! mosek::fusion::p_FlatExpr::_get_impl(_4943)->inst){ (_4940 = ::mosek::fusion::p_Expr::mul_2DDExpr_DMatrix(mosek::fusion::p_FlatExpr::_get_impl(_4943)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4943)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4943)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4943)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4943)->x,_4946,_4944,_4945,_4939,_4941,_4942)); }else { (_4940 = ::mosek::fusion::p_Expr::mul_2DSExpr_SMatrix(mosek::fusion::p_FlatExpr::_get_impl(_4943)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4943)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4943)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4943)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4943)->inst,mosek::fusion::p_FlatExpr::_get_impl(_4943)->x,_4946,_4944,_4945,::mosek::fusion::Utils::Tools::range((int)0,_4941),::mosek::fusion::Utils::Tools::makevector((int)0,_4941),_4939,_4941,_4942)); }}return _4940; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _4947,    monty::rc_ptr< ::mosek::fusion::Expression > _4948) { return mosek::fusion::p_Expr::mul(_4947,_4948); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( std::shared_ptr< monty::ndarray< double,1 > > _4947,monty::rc_ptr< ::mosek::fusion::Expression > _4948){ if ((! _4947 || ! _4948)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}int _4949 = (int)1; int _4950 = (int)((_4947)->size(0)); monty::rc_ptr< ::mosek::fusion::Expression > _4951 = nullptr; monty::rc_ptr< ::mosek::fusion::FlatExpr > _4952 = _4948->eval(); int _4953; int _4954; if (((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4952)->shape)->nd == (int)1) && (mosek::fusion::p_FlatExpr::_get_impl(_4952)->shape->dim((int)0) == (int)1))){ (_4951 = ::mosek::fusion::p_Expr::mul_0DExpr_Matrix(mosek::fusion::p_FlatExpr::_get_impl(_4952)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4952)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4952)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4952)->x,::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix((int)1,(int)((_4947)->size(0)),_4947)))); }else { monty::rc_ptr< ::mosek::fusion::Set > _4955 = nullptr; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4952)->shape)->nd == (int)1)){ (_4954 = (int)1); (_4953 = mosek::fusion::p_FlatExpr::_get_impl(_4952)->shape->dim((int)0)); (_4955 = ::mosek::fusion::p_IntSet::_new_IntSet((int)1)); }else if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(_4952)->shape)->nd == (int)2)){ (_4955 = ::mosek::fusion::p_IntSet::_new_IntSet(mosek::fusion::p_FlatExpr::_get_impl(_4952)->shape->dim((int)1))); (_4953 = mosek::fusion::p_FlatExpr::_get_impl(_4952)->shape->dim((int)0)); (_4954 = mosek::fusion::p_FlatExpr::_get_impl(_4952)->shape->dim((int)1)); }else { throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}if ((_4953 != _4950)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));}else {}if (! mosek::fusion::p_FlatExpr::_get_impl(_4952)->inst){ (_4951 = ::mosek::fusion::p_Expr::mul_DMatrix_2DDExpr(mosek::fusion::p_FlatExpr::_get_impl(_4952)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4952)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4952)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4952)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4952)->x,_4955,_4953,_4954,_4947,_4949,_4950)); }else { (_4951 = ::mosek::fusion::p_Expr::mul_SMatrix_2DSExpr(mosek::fusion::p_FlatExpr::_get_impl(_4952)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4952)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4952)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4952)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4952)->inst,mosek::fusion::p_FlatExpr::_get_impl(_4952)->x,_4955,_4953,_4954,::mosek::fusion::Utils::Tools::makevector((int)0,_4950),::mosek::fusion::Utils::Tools::range((int)0,_4950),_4947,_4949,_4950)); }}return _4951; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _4956,    monty::rc_ptr< ::mosek::fusion::Expression > _4957) { return mosek::fusion::p_Expr::mul(_4956,_4957); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( double _4956,monty::rc_ptr< ::mosek::fusion::Expression > _4957){ if (! _4957){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _4958 = _4957->eval(); int _8925 = (int)0; int _8926 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_4958)->cof)->size(0)); for (int _4959 = _8925;_4959<_8926;++_4959){ (((*mosek::fusion::p_FlatExpr::_get_impl(_4958)->cof)(_4959)) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4958)->cof)(_4959)) * _4956)); }if (mosek::fusion::p_FlatExpr::_get_impl(_4958)->bfix){ int _8927 = (int)0; int _8928 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_4958)->bfix)->size(0)); for (int _4960 = _8927;_4960<_8928;++_4960){ (((*mosek::fusion::p_FlatExpr::_get_impl(_4958)->bfix)(_4960)) = (((*mosek::fusion::p_FlatExpr::_get_impl(_4958)->bfix)(_4960)) * _4956)); }}else {}return ::mosek::fusion::p_Expr::_new_Expr(mosek::fusion::p_FlatExpr::_get_impl(_4958)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_4958)->x,mosek::fusion::p_FlatExpr::_get_impl(_4958)->subj,mosek::fusion::p_FlatExpr::_get_impl(_4958)->cof,mosek::fusion::p_FlatExpr::_get_impl(_4958)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_4958)->shape,mosek::fusion::p_FlatExpr::_get_impl(_4958)->inst,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _4961,    double _4962) { return mosek::fusion::p_Expr::mul(_4961,_4962); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Expression > _4961,double _4962){ if (! _4961){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}return ::mosek::fusion::p_Expr::mul(_4962,_4961); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_SMatrix_2DSExpr( std::shared_ptr< monty::ndarray< long long,1 > > _4963,std::shared_ptr< monty::ndarray< long long,1 > > _4964,std::shared_ptr< monty::ndarray< double,1 > > _4965,std::shared_ptr< monty::ndarray< double,1 > > _4966,std::shared_ptr< monty::ndarray< long long,1 > > _4967,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _4968,monty::rc_ptr< ::mosek::fusion::Set > _4969,int _4970,int _4971,std::shared_ptr< monty::ndarray< int,1 > > _4972,std::shared_ptr< monty::ndarray< int,1 > > _4973,std::shared_ptr< monty::ndarray< double,1 > > _4974,int _4975,int _4976){ monty::rc_ptr< ::mosek::fusion::Expression > _4977 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _4978 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8929; for (int _4981=(int)0, _8930=(int)((_4967)->size(0)); _4981 < _8930;++_4981)_8929.push_back((int)(((*_4967)(_4981)) / _4971)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8929.size()),_8929.begin(),_8929.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _4979 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _8931; for (int _4982=(int)0, _8932=(int)((_4967)->size(0)); _4982 < _8932;++_4982)_8931.push_back((int)(((*_4967)(_4982)) % _4971)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8931.size()),_8931.begin(),_8931.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _4980 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_4967)->size(0))); int _4983 = (int)((_4972)->size(0)); int _4984 = (int)((_4967)->size(0)); int _4985 = _4975; int _4986 = _4971; ::mosek::fusion::p_CommonTools::argQsort(_4980,_4979,_4978,(long long)0,(long long)((_4967)->size(0))); int _4987 = (int)0; long long _4988 = (long long)0; { { int _4989 = (int)0; for (;(_4989 < _4983);){ int _4990 = ((*_4972)(_4989)); int _4991 = (_4989 + (int)1); while (((_4991 < _4983) && (_4990 == ((*_4972)(_4991))))) { ( ++ _4991 ); }{ int _4992 = (int)0; for (;(_4992 < _4984);){ int _4993 = ((*_4979)(((*_4980)(_4992)))); int _4994 = (_4992 + (int)1); while (((_4994 < _4984) && (((*_4979)(((*_4980)(_4994)))) == _4993))) { ( ++ _4994 ); }long long _4995 = _4988; int _4996 = (int)0; int _4997 = _4989; int _4998 = _4992; while (((_4997 < _4991) && (_4998 < _4994))) { if ((((*_4973)(_4997)) < ((*_4978)(((*_4980)(_4998)))))){ ( ++ _4997 ); }else if ((((*_4973)(_4997)) > ((*_4978)(((*_4980)(_4998)))))){ ( ++ _4998 ); }else { (_4995 = (_4995 + (((*_4963)((((*_4980)(_4998)) + (int)1))) - ((*_4963)(((*_4980)(_4998))))))); ( ++ _4997 ); ( ++ _4998 ); ( ++ _4996 ); }}if ((_4996 > (int)0)){ ( ++ _4987 ); (_4988 = _4995); }else {}(_4992 = _4994); }}(_4989 = _4991); }}}std::shared_ptr< monty::ndarray< long long,1 > > _4999 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4987))); std::shared_ptr< monty::ndarray< long long,1 > > _5000 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_4987 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5001 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4988))); std::shared_ptr< monty::ndarray< double,1 > > _5002 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4988))); std::shared_ptr< monty::ndarray< double,1 > > _5003 = nullptr; { int _5004 = (int)0; long long _5005 = (long long)0; { int _5006 = (int)0; for (;(_5006 < _4983);){ int _5007 = ((*_4972)(_5006)); int _5008 = (_5006 + (int)1); while (((_5008 < _4983) && (_5007 == ((*_4972)(_5008))))) { ( ++ _5008 ); }{ int _5009 = (int)0; for (;(_5009 < _4984);){ int _5010 = ((*_4979)(((*_4980)(_5009)))); int _5011 = (_5009 + (int)1); while (((_5011 < _4984) && (((*_4979)(((*_4980)(_5011)))) == _5010))) { ( ++ _5011 ); }long long _5012 = _5005; int _5013 = (int)0; int _5014 = _5006; int _5015 = _5009; while (((_5014 < _5008) && (_5015 < _5011))) { if ((((*_4973)(_5014)) < ((*_4978)(((*_4980)(_5015)))))){ ( ++ _5014 ); }else if ((((*_4973)(_5014)) > ((*_4978)(((*_4980)(_5015)))))){ ( ++ _5015 ); }else { ( ++ _5013 ); long long _8933 = ((*_4963)(((*_4980)(_5015)))); long long _8934 = ((*_4963)((((*_4980)(_5015)) + (int)1))); for (long long _5016 = _8933;_5016<_8934;++_5016){ (((*_5001)(_5012)) = ((*_4964)(_5016))); (((*_5002)(_5012)) = (((*_4965)(_5016)) * ((*_4974)(_5014)))); ( ++ _5012 ); }( ++ _5014 ); ( ++ _5015 ); }}if ((_5013 > (int)0)){ (((*_4999)(_5004)) = (((long long)_5007 * _4971) + (long long)_5010)); (((*_5000)((_5004 + (int)1))) = _5012); ( ++ _5004 ); (_5005 = _5012); }else {}(_5009 = _5011); }}(_5006 = _5008); }}}if (_4966){ (_5003 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_4987)))); int _5017 = (int)0; { int _5018 = (int)0; for (;(_5018 < _4983);){ int _5019 = ((*_4972)(_5018)); int _5020 = (_5018 + (int)1); while (((_5020 < _4983) && (_5019 == ((*_4972)(_5020))))) { ( ++ _5020 ); }{ int _5021 = (int)0; for (;(_5021 < _4984);){ int _5022 = ((*_4979)(((*_4980)(_5021)))); int _5023 = (_5021 + (int)1); while (((_5023 < _4984) && (((*_4979)(((*_4980)(_5023)))) == _5022))) { ( ++ _5023 ); }int _5024 = (int)0; double _5025 = 0.0; int _5026 = _5018; int _5027 = _5021; while (((_5026 < _5020) && (_5027 < _5023))) { if ((((*_4973)(_5026)) < ((*_4978)(((*_4980)(_5027)))))){ ( ++ _5026 ); }else if ((((*_4973)(_5026)) > ((*_4978)(((*_4980)(_5027)))))){ ( ++ _5027 ); }else { (_5025 = (_5025 + (((*_4966)(((*_4980)(_5027)))) * ((*_4974)(_5026))))); ( ++ _5024 ); ( ++ _5026 ); ( ++ _5027 ); }}if ((_5024 > (int)0)){ (((*_5003)(_5017)) = _5025); ( ++ _5017 ); }else {}(_5021 = _5023); }}(_5018 = _5020); }}}else {}if (((int)((_4999)->size(0)) == (_4985 * _4986))){ (_4999 = nullptr); }else {}(_4977 = ::mosek::fusion::p_Expr::_new_Expr(_5000,_4968,_5001,_5002,_5003,_4969,_4999)); return _4977; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_2DSExpr_SMatrix( std::shared_ptr< monty::ndarray< long long,1 > > _5028,std::shared_ptr< monty::ndarray< long long,1 > > _5029,std::shared_ptr< monty::ndarray< double,1 > > _5030,std::shared_ptr< monty::ndarray< double,1 > > _5031,std::shared_ptr< monty::ndarray< long long,1 > > _5032,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5033,monty::rc_ptr< ::mosek::fusion::Set > _5034,int _5035,int _5036,std::shared_ptr< monty::ndarray< int,1 > > _5037,std::shared_ptr< monty::ndarray< int,1 > > _5038,std::shared_ptr< monty::ndarray< double,1 > > _5039,int _5040,int _5041){ monty::rc_ptr< ::mosek::fusion::Expression > _5042 = nullptr; int _5043 = _5035; int _5044 = _5041; long long _5045 = (long long)((_5039)->size(0)); long long _5046 = (long long)((_5032)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5047 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5037)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_5047,_5038,_5037,(long long)0,(long long)((_5037)->size(0))); int _5048 = (int)0; long long _5049 = (long long)0; { { int _5050 = (int)0; for (;(_5050 < _5046);){ int _5051 = _5050; long long _5052 = (((*_5032)(_5050)) / _5036); while (((_5051 < (int)((_5032)->size(0))) && (_5052 == (((*_5032)(_5051)) / _5036)))) { ( ++ _5051 ); }{ int _5053 = (int)0; for (;(_5053 < _5045);){ int _5054 = _5053; int _5055 = ((*_5038)(((*_5047)(_5053)))); while (((_5054 < _5045) && (((*_5038)(((*_5047)(_5054)))) == _5055))) { ( ++ _5054 ); }int _5056 = _5050; int _5057 = _5053; long long _5058 = _5049; while (((_5056 < _5051) && (_5057 < _5054))) { if (((((*_5032)(_5056)) % _5036) < ((*_5037)(((*_5047)(_5057)))))){ ( ++ _5056 ); }else if (((((*_5032)(_5056)) % _5036) > ((*_5037)(((*_5047)(_5057)))))){ ( ++ _5057 ); }else { (_5058 = (_5058 + (((*_5028)((_5056 + (int)1))) - ((*_5028)(_5056))))); ( ++ _5056 ); ( ++ _5057 ); }}if ((_5058 > _5049)){ (_5049 = _5058); ( ++ _5048 ); }else {}(_5053 = _5054); }}(_5050 = _5051); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5059 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5048 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5060 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5048))); std::shared_ptr< monty::ndarray< long long,1 > > _5061 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5049))); std::shared_ptr< monty::ndarray< double,1 > > _5062 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5049))); std::shared_ptr< monty::ndarray< double,1 > > _5063 = nullptr; { int _5064 = (int)0; long long _5065 = (long long)0; { int _5066 = (int)0; for (;(_5066 < _5046);){ int _5067 = _5066; long long _5068 = (((*_5032)(_5066)) / _5036); while (((_5067 < (int)((_5032)->size(0))) && (_5068 == (((*_5032)(_5067)) / _5036)))) { ( ++ _5067 ); }{ int _5069 = (int)0; for (;(_5069 < _5045);){ int _5070 = _5069; int _5071 = ((*_5038)(((*_5047)(_5069)))); while (((_5070 < _5045) && (((*_5038)(((*_5047)(_5070)))) == _5071))) { ( ++ _5070 ); }int _5072 = _5066; int _5073 = _5069; long long _5074 = _5065; int _5075 = (int)0; while (((_5072 < _5067) && (_5073 < _5070))) { if (((((*_5032)(_5072)) % _5036) < ((*_5037)(((*_5047)(_5073)))))){ ( ++ _5072 ); }else if (((((*_5032)(_5072)) % _5036) > ((*_5037)(((*_5047)(_5073)))))){ ( ++ _5073 ); }else { double _5076 = ((*_5039)(((*_5047)(_5073)))); long long _8935 = ((*_5028)(_5072)); long long _8936 = ((*_5028)((_5072 + (int)1))); for (long long _5077 = _8935;_5077<_8936;++_5077){ (((*_5061)(_5074)) = ((*_5029)(_5077))); (((*_5062)(_5074)) = (_5076 * ((*_5030)(_5077)))); ( ++ _5074 ); ( ++ _5075 ); }( ++ _5072 ); ( ++ _5073 ); }}if ((_5075 > (int)0)){ (_5065 = _5074); (((*_5059)((_5064 + (int)1))) = _5074); (((*_5060)(_5064)) = (((long long)_5068 * _5044) + _5071)); ( ++ _5064 ); }else {}(_5069 = _5070); }}(_5066 = _5067); }}}if (_5031){ (_5063 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5048)))); int _5078 = (int)0; { int _5079 = (int)0; for (;(_5079 < _5046);){ int _5080 = _5079; long long _5081 = (((*_5032)(_5079)) / _5036); while (((_5080 < (int)((_5032)->size(0))) && (_5081 == (((*_5032)(_5080)) / _5036)))) { ( ++ _5080 ); }{ int _5082 = (int)0; for (;(_5082 < _5045);){ int _5083 = _5082; int _5084 = ((*_5038)(((*_5047)(_5082)))); while (((_5083 < _5045) && (((*_5038)(((*_5047)(_5083)))) == _5084))) { ( ++ _5083 ); }int _5085 = _5079; int _5086 = _5082; int _5087 = (int)0; double _5088 = 0.0; while (((_5085 < _5080) && (_5086 < _5083))) { if (((((*_5032)(_5085)) % _5036) < ((*_5037)(((*_5047)(_5086)))))){ ( ++ _5085 ); }else if (((((*_5032)(_5085)) % _5036) > ((*_5037)(((*_5047)(_5086)))))){ ( ++ _5086 ); }else { (_5088 = (_5088 + (((*_5031)(_5085)) * ((*_5039)(((*_5047)(_5086))))))); ( ++ _5087 ); ( ++ _5085 ); ( ++ _5086 ); }}if ((_5087 > (int)0)){ (((*_5063)(_5078)) = _5088); ( ++ _5078 ); }else {}(_5082 = _5083); }}(_5079 = _5080); }}}else {}if (((int)((_5060)->size(0)) == (_5043 * _5044))){ (_5060 = nullptr); }else {}(_5042 = ::mosek::fusion::p_Expr::_new_Expr(_5059,_5033,_5061,_5062,_5063,_5034,_5060)); return _5042; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_DMatrix_2DDExpr( std::shared_ptr< monty::ndarray< long long,1 > > _5089,std::shared_ptr< monty::ndarray< long long,1 > > _5090,std::shared_ptr< monty::ndarray< double,1 > > _5091,std::shared_ptr< monty::ndarray< double,1 > > _5092,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5093,monty::rc_ptr< ::mosek::fusion::Set > _5094,int _5095,int _5096,std::shared_ptr< monty::ndarray< double,1 > > _5097,int _5098,int _5099){ monty::rc_ptr< ::mosek::fusion::Expression > _5100; int _5101 = _5098; int _5102 = _5096; long long _5103 = ((long long)_5101 * (long long)_5102); std::shared_ptr< monty::ndarray< long long,1 > > _5104 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5103 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5105 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5090)->size(0)) * _5098)))); std::shared_ptr< monty::ndarray< double,1 > > _5106 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((_5090)->size(0)) * _5098)))); std::shared_ptr< monty::ndarray< double,1 > > _5107 = nullptr; { long long _5108 = (long long)0; int _5109 = (int)0; int _8937 = (int)0; int _8938 = _5098; for (int _5110 = _8937;_5110<_8938;++_5110){ int _8939 = (int)0; int _8940 = _5096; for (int _5111 = _8939;_5111<_8940;++_5111){ int _8941 = (int)0; int _8942 = _5095; for (int _5112 = _8941;_5112<_8942;++_5112){ double _5113 = ((*_5097)(((_5099 * _5110) + _5112))); long long _8943 = ((*_5089)(((_5112 * _5096) + _5111))); long long _8944 = ((*_5089)((((_5112 * _5096) + _5111) + (int)1))); for (long long _5114 = _8943;_5114<_8944;++_5114){ (((*_5106)(_5108)) = (_5113 * ((*_5091)(_5114)))); (((*_5105)(_5108)) = ((*_5090)(_5114))); ( ++ _5108 ); }}(((*_5104)((_5109 + (int)1))) = _5108); ( ++ _5109 ); }}}if (_5092){ int _5115 = (int)0; (_5107 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5103)))); int _8945 = (int)0; int _8946 = _5098; for (int _5116 = _8945;_5116<_8946;++_5116){ int _8947 = (int)0; int _8948 = _5096; for (int _5117 = _8947;_5117<_8948;++_5117){ int _8949 = (int)0; int _8950 = _5095; for (int _5118 = _8949;_5118<_8950;++_5118){ (((*_5107)(_5115)) += (((*_5092)(((_5118 * _5096) + _5117))) * ((*_5097)(((_5099 * _5116) + _5118))))); }( ++ _5115 ); }}}else {}(_5100 = ::mosek::fusion::p_Expr::_new_Expr(_5104,_5093,_5105,_5106,_5107,_5094,nullptr)); return _5100; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_2DDExpr_DMatrix( std::shared_ptr< monty::ndarray< long long,1 > > _5119,std::shared_ptr< monty::ndarray< long long,1 > > _5120,std::shared_ptr< monty::ndarray< double,1 > > _5121,std::shared_ptr< monty::ndarray< double,1 > > _5122,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5123,monty::rc_ptr< ::mosek::fusion::Set > _5124,int _5125,int _5126,std::shared_ptr< monty::ndarray< double,1 > > _5127,int _5128,int _5129){ monty::rc_ptr< ::mosek::fusion::Expression > _5130; int _5131 = _5125; int _5132 = _5129; std::shared_ptr< monty::ndarray< long long,1 > > _5133 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((_5125 * _5129) + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5134 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5135 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5120)->size(0)) * _5129)))); std::shared_ptr< monty::ndarray< double,1 > > _5136 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((_5120)->size(0)) * _5129)))); std::shared_ptr< monty::ndarray< double,1 > > _5137 = nullptr; { int _5138 = (int)0; int _5139 = (int)0; int _8951 = (int)0; int _8952 = _5131; for (int _5140 = _8951;_5140<_8952;++_5140){ int _8953 = (int)0; int _8954 = _5132; for (int _5141 = _8953;_5141<_8954;++_5141){ int _5142 = (_5140 * _5126); (((*_5133)((_5139 + (int)1))) = ((*_5133)(_5139))); int _8955 = (int)0; int _8956 = _5128; for (int _5143 = _8955;_5143<_8956;++_5143){ (((*_5133)((_5139 + (int)1))) = (((*_5133)((_5139 + (int)1))) + (((*_5119)(((_5142 + _5143) + (int)1))) - ((*_5119)((_5142 + _5143)))))); double _5144 = ((*_5127)(((_5129 * _5143) + _5141))); long long _8957 = ((*_5119)((_5142 + _5143))); long long _8958 = ((*_5119)(((_5142 + _5143) + (int)1))); for (long long _5145 = _8957;_5145<_8958;++_5145){ (((*_5135)(_5138)) = ((*_5120)(_5145))); (((*_5136)(_5138)) = (((*_5121)(_5145)) * _5144)); ( ++ _5138 ); }}( ++ _5139 ); }}}if (_5122){ (_5137 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_5131 * _5132))))); int _5146 = (int)0; int _8959 = (int)0; int _8960 = _5131; for (int _5147 = _8959;_5147<_8960;++_5147){ int _8961 = (int)0; int _8962 = _5132; for (int _5148 = _8961;_5148<_8962;++_5148){ int _5149 = (_5147 * _5126); int _8963 = (int)0; int _8964 = _5128; for (int _5150 = _8963;_5150<_8964;++_5150){ (((*_5137)(_5146)) = (((*_5137)(_5146)) + (((*_5122)((_5149 + _5150))) * ((*_5127)(((_5129 * _5150) + _5148)))))); }( ++ _5146 ); }}}else {}(_5130 = ::mosek::fusion::p_Expr::_new_Expr(_5133,_5123,_5135,_5136,_5137,_5124,_5134)); return _5130; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul_0DExpr_Matrix( std::shared_ptr< monty::ndarray< long long,1 > > _5151,std::shared_ptr< monty::ndarray< double,1 > > _5152,std::shared_ptr< monty::ndarray< double,1 > > _5153,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5154,monty::rc_ptr< ::mosek::fusion::Matrix > _5155){ monty::rc_ptr< ::mosek::fusion::Expression > _5156 = nullptr; int _5157 = _5155->numRows(); int _5158 = _5155->numColumns(); long long _5159 = _5155->numNonzeros(); std::shared_ptr< monty::ndarray< double,1 > > _5160; std::shared_ptr< monty::ndarray< int,1 > > _5161 = nullptr; std::shared_ptr< monty::ndarray< int,1 > > _5162 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5163 = ::mosek::fusion::Utils::Tools::range((long long)0,((_5159 * (long long)((_5151)->size(0))) + (int)1),(long long)((_5151)->size(0))); std::shared_ptr< monty::ndarray< long long,1 > > _5164 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5159 * (int)((_5151)->size(0)))))); std::shared_ptr< monty::ndarray< double,1 > > _5165 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_5159 * (int)((_5151)->size(0)))))); std::shared_ptr< monty::ndarray< double,1 > > _5166 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5167 = nullptr; if ((! _5155->isSparse())){ (_5160 = _5155->getDataAsArray()); }else { (_5161 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5159)))); (_5162 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5159)))); (_5160 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5159)))); (_5167 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5159)))); _5155->getDataAsTriplets(_5161,_5162,_5160); int _8965 = (int)0; int _8966 = (int)((_5161)->size(0)); for (int _5168 = _8965;_5168<_8966;++_5168){ (((*_5167)(_5168)) = (((long long)((*_5161)(_5168)) * _5158) + ((*_5162)(_5168)))); }}{ int _5169 = (int)0; long long _8967 = (long long)0; long long _8968 = _5159; for (long long _5170 = _8967;_5170<_8968;++_5170){ int _8969 = (int)0; int _8970 = (int)((_5151)->size(0)); for (int _5171 = _8969;_5171<_8970;++_5171){ (((*_5164)(_5169)) = ((*_5151)(_5171))); (((*_5165)(_5169)) = (((*_5160)(_5170)) * ((*_5160)(_5170)))); ( ++ _5169 ); }}}if (_5153){ (_5166 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5159)))); long long _8971 = (long long)0; long long _8972 = _5159; for (long long _5172 = _8971;_5172<_8972;++_5172){ (((*_5166)(_5172)) = (((*_5160)(_5172)) * ((*_5153)((int)0)))); }}else {}(_5156 = ::mosek::fusion::p_Expr::_new_Expr(_5163,_5154,_5164,_5165,_5166,::mosek::fusion::Set::t(::mosek::fusion::p_NDSet::_new_NDSet(_5157,_5158)),nullptr)); return _5156; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5173,    std::shared_ptr< monty::ndarray< double,2 > > _5174) { return mosek::fusion::p_Expr::mul(_5173,_5174); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5173,std::shared_ptr< monty::ndarray< double,2 > > _5174){ if ((! _5174 || ! _5173)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}if (((int)((_5174)->size(0)) == (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _5175 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}); std::shared_ptr< monty::ndarray< long long,1 > > _5176 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _5177 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); return ::mosek::fusion::p_Expr::_new_Expr(_5175,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5173}),_5176,_5177,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else { return ::mosek::fusion::p_Expr::mul(_5173,::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5174))); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,2 > > _5178,    monty::rc_ptr< ::mosek::fusion::Variable > _5179) { return mosek::fusion::p_Expr::mul(_5178,_5179); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( std::shared_ptr< monty::ndarray< double,2 > > _5178,monty::rc_ptr< ::mosek::fusion::Variable > _5179){ if ((! _5178 || ! _5179)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}return ::mosek::fusion::p_Expr::mul(::mosek::fusion::Matrix::t(::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_5178)),_5179); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5180,    double _5181) { return mosek::fusion::p_Expr::mul(_5180,_5181); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5180,double _5181){ if (! _5180){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}return ::mosek::fusion::p_Expr::mul(_5181,_5180); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _5182,    monty::rc_ptr< ::mosek::fusion::Variable > _5183) { return mosek::fusion::p_Expr::mul(_5182,_5183); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( double _5182,monty::rc_ptr< ::mosek::fusion::Variable > _5183){ if (! _5183){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}double _5184 = _5182; monty::rc_ptr< ::mosek::fusion::Variable > _5185 = _5183; std::shared_ptr< monty::ndarray< long long,1 > > _5186 = ::mosek::fusion::Utils::Tools::range((long long)0,(mosek::fusion::p_Set::_get_impl(_5185->shape())->size + (long long)1)); std::shared_ptr< monty::ndarray< double,1 > > _5187 = ::mosek::fusion::Utils::Tools::makevector(_5184,(int)mosek::fusion::p_Set::_get_impl(_5185->shape())->size); std::shared_ptr< monty::ndarray< long long,1 > > _5188 = ::mosek::fusion::Utils::Tools::range((long long)0,mosek::fusion::p_Set::_get_impl(_5185->shape())->size); std::shared_ptr< monty::ndarray< double,1 > > _5189 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5186,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5183}),_5188,_5187,_5189,_5185->shape(),nullptr); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _5190,    monty::rc_ptr< ::mosek::fusion::Variable > _5191) { return mosek::fusion::p_Expr::mul(_5190,_5191); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( std::shared_ptr< monty::ndarray< double,1 > > _5190,monty::rc_ptr< ::mosek::fusion::Variable > _5191){ if ((! _5191 || ! _5190)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}std::shared_ptr< monty::ndarray< double,1 > > _5192 = _5190; monty::rc_ptr< ::mosek::fusion::Variable > _5193 = _5191; if (((mosek::fusion::p_Set::_get_impl(_5193->shape())->size == (int)1) || (mosek::fusion::p_Set::_get_impl(_5193->shape())->nd == (int)1))){ return ::mosek::fusion::p_Expr::mul(_5193,_5192); }else if (((mosek::fusion::p_Set::_get_impl(_5191->shape())->nd == (int)1) && (_5191->shape()->dim((int)0) == (int)((_5190)->size(0))))){ return ::mosek::fusion::p_Expr::dot(_5191,_5190); }else if ((mosek::fusion::p_Set::_get_impl(_5193->shape())->nd == (int)2)){ if ((_5193->shape()->dim((int)0) != (int)((_5192)->size(0)))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _5194 = _5193->shape()->dim((int)0); long long _5195 = _5193->shape()->dim((int)1); std::shared_ptr< monty::ndarray< long long,1 > > _5196 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8973; for (long long _5197=(long long)0, _8974=((_5195 + (int)1) * _5194), _8975=_5194; _5197 < _8974;_5197 += _8975)_8973.push_back(_5197); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8973.size()),_8973.begin(),_8973.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _5198 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(_5193->shape())->size))); long long _8976 = (long long)0; long long _8977 = _5195; for (long long _5199 = _8976;_5199<_8977;++_5199){ ::mosek::fusion::Utils::Tools::arraycopy(_5192,(long long)0,_5198,(_5199 * _5194),_5194); }std::shared_ptr< monty::ndarray< long long,1 > > _5200 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8978; for (long long _5201=(int)0, _8979=_5195; _5201 < _8979;++_5201) for (long long _5202=(int)0, _8980=_5194; _5202 < _8980;++_5202)_8978.push_back(((_5202 * _5195) + _5201)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8978.size()),_8978.begin(),_8978.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_5196,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5193}),_5200,_5198,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else { throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5203,    std::shared_ptr< monty::ndarray< double,1 > > _5204) { return mosek::fusion::p_Expr::mul(_5203,_5204); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5203,std::shared_ptr< monty::ndarray< double,1 > > _5204){ if ((! _5203 || ! _5204)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Variable > _5205 = _5203; std::shared_ptr< monty::ndarray< double,1 > > _5206 = _5204; if ((mosek::fusion::p_Set::_get_impl(_5205->shape())->size == (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _5207 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,(long long)0}); std::shared_ptr< monty::ndarray< long long,1 > > _5208 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))); std::shared_ptr< monty::ndarray< double,1 > > _5209 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))); return ::mosek::fusion::p_Expr::_new_Expr(_5207,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5203}),_5208,_5209,nullptr,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else if ((mosek::fusion::p_Set::_get_impl(_5205->shape())->size == (int)1)){ std::shared_ptr< monty::ndarray< long long,1 > > _5210 = ::mosek::fusion::Utils::Tools::range((long long)0,((long long)((_5206)->size(0)) + (int)1)); std::shared_ptr< monty::ndarray< long long,1 > > _5211 = ::mosek::fusion::Utils::Tools::makevector((long long)0,(int)((_5206)->size(0))); std::shared_ptr< monty::ndarray< double,1 > > _5212 = ::mosek::fusion::Utils::Tools::arraycopy(_5206); std::shared_ptr< monty::ndarray< double,1 > > _5213 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5210,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5203}),_5211,_5212,_5213,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else if (((mosek::fusion::p_Set::_get_impl(_5203->shape())->nd == (int)1) && (_5203->shape()->dim((int)0) == (int)((_5204)->size(0))))){ return ::mosek::fusion::p_Expr::dot(_5203,_5204); }else if ((mosek::fusion::p_Set::_get_impl(_5205->shape())->nd == (int)2)){ if ((_5205->shape()->dim((int)1) != (int)((_5206)->size(0)))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}std::shared_ptr< monty::ndarray< long long,1 > > _5214 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8981; for (long long _5215=(int)0, _8982=(mosek::fusion::p_Set::_get_impl(_5205->shape())->size + _5205->shape()->dim((int)1)), _8983=_5205->shape()->dim((int)1); _5215 < _8982;_5215 += _8983)_8981.push_back(_5215); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8981.size()),_8981.begin(),_8981.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5216 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8984; for (long long _5217=(int)0, _8985=mosek::fusion::p_Set::_get_impl(_5205->shape())->size; _5217 < _8985;++_5217)_8984.push_back(_5217); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8984.size()),_8984.begin(),_8984.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _5218 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(_5205->shape())->size))); long long _5219 = (long long)_5205->shape()->dim((int)1); long long _8986 = (long long)0; int _8987 = _5205->shape()->dim((int)0); for (long long _5220 = _8986;_5220<_8987;++_5220){ ::mosek::fusion::Utils::Tools::arraycopy(_5206,(long long)0,_5218,(_5220 * _5219),_5219); }std::shared_ptr< monty::ndarray< double,1 > > _5221 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5214,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5203}),_5216,_5218,_5221,::mosek::fusion::Set::t(nullptr),nullptr,(int)1); }else { throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _5222,    monty::rc_ptr< ::mosek::fusion::Matrix > _5223) { return mosek::fusion::p_Expr::mul(_5222,_5223); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Variable > _5222,monty::rc_ptr< ::mosek::fusion::Matrix > _5223){ if ((! _5222 || ! _5223)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Variable > _5224 = _5222; monty::rc_ptr< ::mosek::fusion::Matrix > _5225 = _5223; int _5226 = _5223->numRows(); int _5227 = _5223->numColumns(); int _5228; int _5229; long long _5230 = _5223->numNonzeros(); if (((mosek::fusion::p_Set::_get_impl(_5222->shape())->nd == (int)1) && (_5222->shape()->dim((int)0) == (int)1))){ return ::mosek::fusion::p_Expr::mul(_5223,_5222); }else { if ((mosek::fusion::p_Set::_get_impl(_5224->shape())->nd == (int)1)){ if ((mosek::fusion::p_Matrix::_get_impl(_5225)->dimi != mosek::fusion::p_Set::_get_impl(_5224->shape())->size)){ throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}else {}(_5229 = (int)1); (_5228 = _5224->shape()->dim((int)0)); }else if ((mosek::fusion::p_Set::_get_impl(_5224->shape())->nd == (int)2)){ if ((mosek::fusion::p_Matrix::_get_impl(_5223)->dimi != _5222->shape()->dim((int)1))){ throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}else {}(_5229 = _5224->shape()->dim((int)0)); (_5228 = _5224->shape()->dim((int)1)); }else { throw ::mosek::fusion::LengthError(std::string ("Variable must be one- or two-dimensional."));}int _5231 = _5229; int _5232 = _5227; monty::rc_ptr< ::mosek::fusion::Set > _5233 = nullptr; if ((mosek::fusion::p_Set::_get_impl(_5222->shape())->nd == (int)1)){ (_5233 = ::mosek::fusion::p_IntSet::_new_IntSet(_5232)); }else { (_5233 = ::mosek::fusion::p_NDSet::_new_NDSet(_5231,_5232)); }if ((! _5223->isSparse())){ long long _5234 = ((long long)_5231 * (long long)_5232); std::shared_ptr< monty::ndarray< double,1 > > _5235 = _5223->getDataAsArray(); std::shared_ptr< monty::ndarray< long long,1 > > _5236 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8988; for (long long _5237=(long long)0, _8989=((((long long)_5231 * _5232) * _5228) + (int)1), _8990=_5228; _5237 < _8989;_5237 += _8990)_8988.push_back(_5237); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8988.size()),_8988.begin(),_8988.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5238 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8991; for (int _5239=(int)0, _8992=_5231; _5239 < _8992;++_5239) for (int _5240=(int)0, _8993=_5232; _5240 < _8993;++_5240) for (int _5241=(int)0, _8994=_5228; _5241 < _8994;++_5241)_8991.push_back((((long long)_5239 * _5228) + _5241)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8991.size()),_8991.begin(),_8991.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _5242 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _8995; for (int _5243=(int)0, _8996=_5231; _5243 < _8996;++_5243) for (int _5244=(int)0, _8997=_5232; _5244 < _8997;++_5244) for (int _5245=(int)0, _8998=_5228; _5245 < _8998;++_5245)_8995.push_back(((*_5235)(((_5245 * _5227) + _5244)))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8995.size()),_8995.begin(),_8995.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_5236,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5222}),_5238,_5242,nullptr,_5233,nullptr); }else if ((_5230 > (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _5246 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5230))); std::shared_ptr< monty::ndarray< int,1 > > _5247 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5230))); std::shared_ptr< monty::ndarray< double,1 > > _5248 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5230))); std::shared_ptr< monty::ndarray< long long,1 > > _5249 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _8999; for (long long _5250=(long long)0, _9000=_5230; _5250 < _9000;++_5250)_8999.push_back(_5250); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8999.size()),_8999.begin(),_8999.end())); })(); _5223->getDataAsTriplets(_5246,_5247,_5248); if ((_5230 > _5227)){ ::mosek::fusion::p_Sort::argbucketsort(_5249,_5247,(long long)((int)0),_5230,(int)0,_5227); }else { ::mosek::fusion::p_Sort::argsort(_5249,_5247,(long long)0,_5230,false); }long long _5251 = (long long)0; if ((_5230 > (int)0)){ (_5251 = (long long)1); { long long _5252 = (long long)1; for (;(_5252 < _5230);( ++ _5252 )){ if ((((*_5247)(((*_5249)(_5252)))) > ((*_5247)(((*_5249)((_5252 - (int)1))))))){ ( ++ _5251 ); }else {}}}}else {}long long _5253 = (_5251 * (long long)_5229); std::shared_ptr< monty::ndarray< long long,1 > > _5254 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5253 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5255 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5253))); std::shared_ptr< monty::ndarray< long long,1 > > _5256 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5230 * _5229)))); std::shared_ptr< monty::ndarray< double,1 > > _5257 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_5230 * _5229)))); { int _5258 = (int)0; long long _5259 = (long long)0; int _9001 = (int)0; int _9002 = _5231; for (int _5260 = _9001;_5260<_9002;++_5260){ { long long _5261 = (long long)0; for (;(_5261 < _5230);){ int _5262 = ((*_5247)(((*_5249)(_5261)))); long long _5263 = _5261; long long _5264 = _5261; while (((_5264 < _5230) && (((*_5247)(((*_5249)(_5264)))) == ((*_5247)(((*_5249)(_5261))))))) { ( ++ _5264 ); }long long _9003 = _5263; long long _9004 = _5264; for (long long _5265 = _9003;_5265<_9004;++_5265){ (((*_5256)(_5259)) = (((long long)_5260 * _5228) + ((*_5246)(((*_5249)(_5265)))))); (((*_5257)(_5259)) = ((*_5248)(((*_5249)(_5265))))); ( ++ _5259 ); }(((*_5254)((_5258 + (int)1))) = _5259); (((*_5255)(_5258)) = (((long long)_5260 * _5232) + _5262)); ( ++ _5258 ); (_5261 = _5264); }}}}return ::mosek::fusion::p_Expr::_new_Expr(_5254,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5222}),_5256,_5257,nullptr,_5233,_5255); }else { return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5222}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,_5233,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)))); }}}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _5266,    monty::rc_ptr< ::mosek::fusion::Variable > _5267) { return mosek::fusion::p_Expr::mul(_5266,_5267); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul( monty::rc_ptr< ::mosek::fusion::Matrix > _5266,monty::rc_ptr< ::mosek::fusion::Variable > _5267){ if ((! _5267 || ! _5266)){ throw monty::NullPointerException(std::string ("Arguments for mul may not be null"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _5268 = _5267->shape(); int _5269 = _5266->numRows(); int _5270 = _5266->numColumns(); int _5271; int _5272; if ((mosek::fusion::p_Set::_get_impl(_5268)->nd == (int)1)){ (_5271 = _5268->dim((int)0)); (_5272 = (int)1); }else if ((mosek::fusion::p_Set::_get_impl(_5268)->nd == (int)2)){ (_5271 = _5268->dim((int)0)); (_5272 = _5268->dim((int)1)); }else { throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}int _5273 = _5269; int _5274 = _5272; monty::rc_ptr< ::mosek::fusion::Expression > _5275; monty::rc_ptr< ::mosek::fusion::Set > _5276 = nullptr; if (((mosek::fusion::p_Set::_get_impl(_5267->shape())->nd == (int)1) && (_5267->shape()->dim((int)0) == (int)1))){ (_5276 = ::mosek::fusion::p_NDSet::_new_NDSet(_5269,_5270)); }else if ((mosek::fusion::p_Set::_get_impl(_5267->shape())->nd == (int)1)){ (_5276 = ::mosek::fusion::p_IntSet::_new_IntSet(_5273)); }else { (_5276 = ::mosek::fusion::p_NDSet::_new_NDSet(_5273,_5274)); }if (((mosek::fusion::p_Set::_get_impl(_5268)->nd == (int)1) && (_5268->dim((int)0) == (int)1))){ if (_5266->isSparse()){ std::shared_ptr< monty::ndarray< int,1 > > _5277 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5266->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _5278 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5266->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _5279 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5266->numNonzeros()))); _5266->getDataAsTriplets(_5277,_5278,_5279); std::shared_ptr< monty::ndarray< long long,1 > > _5280 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9005; for (int _5281=(int)0, _9006=(int)((_5278)->size(0)); _5281 < _9006;++_5281)_9005.push_back((((long long)((*_5277)(_5281)) * _5270) + ((*_5278)(_5281)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9005.size()),_9005.begin(),_9005.end())); })(); (_5275 = ::mosek::fusion::p_Expr::_new_Expr(::mosek::fusion::Utils::Tools::range((long long)0,(_5266->numNonzeros() + (int)1)),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5267}),::mosek::fusion::Utils::Tools::makevector((long long)0,(int)_5266->numNonzeros()),_5279,nullptr,_5276,_5280)); }else { (_5275 = ::mosek::fusion::p_Expr::_new_Expr(::mosek::fusion::Utils::Tools::range((long long)0,(_5266->numNonzeros() + (int)1)),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5267}),([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9007; for (long long _5282=(int)0, _9008=_5266->numNonzeros(); _5282 < _9008;++_5282)_9007.push_back((long long)0); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9007.size()),_9007.begin(),_9007.end())); })(),_5266->getDataAsArray(),nullptr,_5276,nullptr)); }}else if ((_5270 == _5271)){ if (_5266->isSparse()){ if ((_5266->numNonzeros() > (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _5283 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5266->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _5284 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5266->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _5285 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5266->numNonzeros()))); int _5286 = (int)((_5285)->size(0)); _5266->getDataAsTriplets(_5283,_5284,_5285); int _5287 = ((int)((_5285)->size(0)) * _5272); int _5288 = (int)0; { int _5289 = (int)0; for (;(_5289 < _5286);){ int _5290 = ((*_5283)(_5289)); int _5291 = (_5289 + (int)1); while (((_5291 < _5286) && (_5290 == ((*_5283)(_5291))))) { ( ++ _5291 ); }( ++ _5288 ); (_5289 = _5291); }}int _5292 = (_5288 * _5272); std::shared_ptr< monty::ndarray< long long,1 > > _5293 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5292 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5294 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5292))); std::shared_ptr< monty::ndarray< long long,1 > > _5295 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5287))); std::shared_ptr< monty::ndarray< double,1 > > _5296 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5287))); if ((_5288 > (int)0)){ int _5297 = (int)0; int _5298 = (int)0; { int _5299 = (int)0; for (;(_5299 < _5286);){ int _5300 = ((*_5283)(_5299)); int _5301 = (_5299 + (int)1); while (((_5301 < _5286) && (_5300 == ((*_5283)(_5301))))) { ( ++ _5301 ); }int _9009 = (int)0; int _9010 = _5272; for (int _5302 = _9009;_5302<_9010;++_5302){ (((*_5293)((_5297 + (int)1))) = (((*_5293)(_5297)) + (_5301 - _5299))); (((*_5294)(_5297)) = (((long long)_5300 * _5272) + _5302)); int _9011 = _5299; int _9012 = _5301; for (int _5303 = _9011;_5303<_9012;++_5303){ (((*_5295)(_5298)) = (((long long)((*_5284)(_5303)) * _5272) + _5302)); (((*_5296)(_5298)) = ((*_5285)(_5303))); ( ++ _5298 ); }( ++ _5297 ); }(_5299 = _5301); }}}else {}if (((int)((_5294)->size(0)) == (_5273 * _5274))){ (_5294 = nullptr); }else {}(_5275 = ::mosek::fusion::p_Expr::_new_Expr(_5293,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5267}),_5295,_5296,nullptr,_5276,_5294)); }else { (_5275 = ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5267}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,_5276,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))))); }}else { int _5304 = ((_5269 * _5270) * _5272); std::shared_ptr< monty::ndarray< double,1 > > _5305 = _5266->getDataAsArray(); std::shared_ptr< monty::ndarray< long long,1 > > _5306 = ::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5304 + (int)1)),(long long)(([&]() -> int { if ( (_5270 > (int)0)) return (_5270); else return ((int)1); })())); std::shared_ptr< monty::ndarray< long long,1 > > _5307 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5304))); std::shared_ptr< monty::ndarray< double,1 > > _5308 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5304))); { int _5309 = (int)0; int _9013 = (int)0; int _9014 = _5273; for (int _5310 = _9013;_5310<_9014;++_5310){ int _9015 = (int)0; int _9016 = _5274; for (int _5311 = _9015;_5311<_9016;++_5311){ int _9017 = (int)0; int _9018 = _5270; for (int _5312 = _9017;_5312<_9018;++_5312){ (((*_5307)(_5309)) = (long long)((_5312 * _5272) + _5311)); (((*_5308)(_5309)) = ((*_5305)(((_5310 * _5270) + _5312)))); ( ++ _5309 ); }}}}(_5275 = ::mosek::fusion::p_Expr::_new_Expr(_5306,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5267}),_5307,_5308,nullptr,_5276,nullptr)); }}else { throw ::mosek::fusion::LengthError(std::string ("Operand shapes do not match."));}return _5275; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::Matrix > _5313,monty::rc_ptr< ::mosek::fusion::Expression > _5314){ if (((_5313->numRows() != _5314->shape()->dim((int)0)) || ((_5313->numColumns() != _5314->shape()->dim((int)1)) || ((_5313->numRows() * _5313->numColumns()) != _5314->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _5315 = _5313->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _5316 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5315))); std::shared_ptr< monty::ndarray< int,1 > > _5317 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5315))); std::shared_ptr< monty::ndarray< double,1 > > _5318 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5315))); _5313->getDataAsTriplets(_5316,_5317,_5318); std::shared_ptr< monty::ndarray< long long,1 > > _5319 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9019; for (long long _5320=(int)0, _9020=_5315; _5320 < _9020;++_5320)_9019.push_back(((((*_5316)(_5320)) * _5313->numColumns()) + ((*_5317)(_5320)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9019.size()),_9019.begin(),_9019.end())); })(); monty::rc_ptr< ::mosek::fusion::FlatExpr > _5321 = _5314->eval(); return ::mosek::fusion::p_Expr::inner_(_5319,_5318,mosek::fusion::p_FlatExpr::_get_impl(_5321)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5321)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5321)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5321)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5321)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5321)->x); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::Matrix > _5322,monty::rc_ptr< ::mosek::fusion::Variable > _5323){ if (((_5322->numRows() != _5323->shape()->dim((int)0)) || ((_5322->numColumns() != _5323->shape()->dim((int)1)) || ((_5322->numRows() * _5322->numColumns()) != _5323->shape()->getSize())))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}long long _5324 = _5322->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _5325 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5324))); std::shared_ptr< monty::ndarray< int,1 > > _5326 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5324))); std::shared_ptr< monty::ndarray< double,1 > > _5327 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5324))); _5322->getDataAsTriplets(_5325,_5326,_5327); std::shared_ptr< monty::ndarray< long long,1 > > _5328 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9021; for (long long _5329=(int)0, _9022=_5324; _5329 < _9022;++_5329)_9021.push_back(((((*_5325)(_5329)) * _5322->numColumns()) + ((*_5326)(_5329)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9021.size()),_9021.begin(),_9021.end())); })(); return ::mosek::fusion::p_Expr::inner_(_5328,_5327,_5323); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( std::shared_ptr< monty::ndarray< double,1 > > _5330,monty::rc_ptr< ::mosek::fusion::Variable > _5331){ if ((! _5331 || ! _5330)){ throw monty::NullPointerException(std::string ("Arguments for dot may not be null"));}else {}if (((_5331->shape()->dim((int)0) != (int)((_5330)->size(0))) || (mosek::fusion::p_Set::_get_impl(_5331->shape())->size != (long long)((_5330)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}return ::mosek::fusion::p_Expr::inner_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5330)->size(0))),_5330,_5331); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( std::shared_ptr< monty::ndarray< double,1 > > _5332,monty::rc_ptr< ::mosek::fusion::Expression > _5333){ if ((! _5332 || ! _5333)){ throw monty::NullPointerException(std::string ("Arguments for dot may not be null"));}else {}if (((_5333->shape()->dim((int)0) != (int)((_5332)->size(0))) || (mosek::fusion::p_Set::_get_impl(_5333->shape())->size != (long long)((_5332)->size(0))))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5334 = _5333->eval(); return ::mosek::fusion::p_Expr::inner_(::mosek::fusion::Utils::Tools::range((long long)0,(long long)((_5332)->size(0))),_5332,mosek::fusion::p_FlatExpr::_get_impl(_5334)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5334)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5334)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5334)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5334)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5334)->x); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5335,monty::rc_ptr< ::mosek::fusion::Expression > _5336){ if ((! _5335 || ! _5336)){ throw monty::NullPointerException(std::string ("Arguments for dot may not be null"));}else {}int _9023 = (int)0; int _9024 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5335)->dims)->size(0)); for (int _5337 = _9023;_5337<_9024;++_5337){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5335)->dims)(_5337)) != _5336->shape()->dim(_5337))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _9025 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5335)->dims)->size(0)); int _9026 = mosek::fusion::p_Set::_get_impl(_5336->shape())->nd; for (int _5338 = _9025;_5338<_9026;++_5338){ if (((int)1 != _5336->shape()->dim(_5338))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));}else {}}int _9027 = (int)0; int _9028 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5335)->dims)->size(0)); for (int _5339 = _9027;_5339<_9028;++_5339){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5335)->dims)(_5339)) != _5336->shape()->dim(_5339))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5340 = _5336->eval(); return ::mosek::fusion::p_Expr::inner_(mosek::fusion::p_NDSparseArray::_get_impl(_5335)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5335)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5340)->ptrb,mosek::fusion::p_FlatExpr::_get_impl(_5340)->subj,mosek::fusion::p_FlatExpr::_get_impl(_5340)->cof,mosek::fusion::p_FlatExpr::_get_impl(_5340)->bfix,mosek::fusion::p_FlatExpr::_get_impl(_5340)->inst,mosek::fusion::p_FlatExpr::_get_impl(_5340)->x); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot_( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _5341,monty::rc_ptr< ::mosek::fusion::Variable > _5342){ if ((mosek::fusion::p_Set::_get_impl(_5342->shape())->nd != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5341)->dims)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}int _9029 = (int)0; int _9030 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_5341)->dims)->size(0)); for (int _5343 = _9029;_5343<_9030;++_5343){ if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_5341)->dims)(_5343)) != _5342->shape()->dim(_5343))){ throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));}else {}}return ::mosek::fusion::p_Expr::inner_(mosek::fusion::p_NDSparseArray::_get_impl(_5341)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_5341)->cof,_5342); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::inner_( std::shared_ptr< monty::ndarray< long long,1 > > _5344,std::shared_ptr< monty::ndarray< double,1 > > _5345,monty::rc_ptr< ::mosek::fusion::Variable > _5346){ int _5347 = (int)((_5344)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5348 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0,(long long)((_5345)->size(0))}); std::shared_ptr< monty::ndarray< long long,1 > > _5349 = ::mosek::fusion::Utils::Tools::arraycopy(_5344); std::shared_ptr< monty::ndarray< double,1 > > _5350 = ::mosek::fusion::Utils::Tools::arraycopy(_5345); std::shared_ptr< monty::ndarray< double,1 > > _5351 = nullptr; return ::mosek::fusion::p_Expr::_new_Expr(_5348,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5346}),_5349,_5350,_5351,::mosek::fusion::p_Set::scalar(),nullptr); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::inner_( std::shared_ptr< monty::ndarray< long long,1 > > _5352,std::shared_ptr< monty::ndarray< double,1 > > _5353,std::shared_ptr< monty::ndarray< long long,1 > > _5354,std::shared_ptr< monty::ndarray< long long,1 > > _5355,std::shared_ptr< monty::ndarray< double,1 > > _5356,std::shared_ptr< monty::ndarray< double,1 > > _5357,std::shared_ptr< monty::ndarray< long long,1 > > _5358,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5359){ int _5360 = (int)((_5352)->size(0)); std::shared_ptr< monty::ndarray< long long,1 > > _5361 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _5358) return (_5358); else return (::mosek::fusion::Utils::Tools::range((long long)((int)0),((long long)((_5354)->size(0)) - (int)1))); })(); int _5362 = (int)((_5361)->size(0)); long long _5363 = (long long)0; { int _5364 = (int)0; int _5365 = (int)0; while (((_5364 < _5360) && (_5365 < _5362))) { if ((((*_5352)(_5364)) < ((*_5361)(_5365)))){ ( ++ _5364 ); }else if ((((*_5352)(_5364)) > ((*_5361)(_5365)))){ ( ++ _5365 ); }else { (_5363 += (((*_5354)((_5365 + (int)1))) - ((*_5354)(_5365)))); ( ++ _5364 ); ( ++ _5365 ); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5366 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5363))); std::shared_ptr< monty::ndarray< double,1 > > _5367 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5363))); std::shared_ptr< monty::ndarray< double,1 > > _5368 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< long long,1 > > _5369 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)0,_5363}); { int _5370 = (int)0; int _5371 = (int)0; int _5372 = (int)0; while (((_5370 < _5360) && (_5371 < _5362))) { if ((((*_5352)(_5370)) < ((*_5361)(_5371)))){ ( ++ _5370 ); }else if ((((*_5352)(_5370)) > ((*_5361)(_5371)))){ ( ++ _5371 ); }else { long long _9031 = ((*_5354)(_5371)); long long _9032 = ((*_5354)((_5371 + (int)1))); for (long long _5373 = _9031;_5373<_9032;++_5373){ (((*_5366)(_5372)) = ((*_5355)(_5373))); (((*_5367)(_5372)) = (((*_5356)(_5373)) * ((*_5353)(_5370)))); ( ++ _5372 ); }( ++ _5370 ); ( ++ _5371 ); }}}if (_5357){ int _5374 = (int)0; int _5375 = (int)0; while (((_5374 < _5360) && (_5375 < _5362))) { if ((((*_5352)(_5374)) < ((*_5361)(_5375)))){ ( ++ _5374 ); }else if ((((*_5352)(_5374)) > ((*_5361)(_5375)))){ ( ++ _5375 ); }else { (((*_5368)((int)0)) += (((*_5353)(_5374)) * ((*_5357)(_5375)))); ( ++ _5374 ); ( ++ _5375 ); }}}else {}return ::mosek::fusion::p_Expr::_new_Expr(_5369,_5359,_5366,_5367,_5368,::mosek::fusion::p_Set::scalar(),nullptr); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5376,    monty::rc_ptr< ::mosek::fusion::Expression > _5377) { return mosek::fusion::p_Expr::outer(_5376,_5377); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( std::shared_ptr< monty::ndarray< double,1 > > _5376,monty::rc_ptr< ::mosek::fusion::Expression > _5377){ if ((mosek::fusion::p_Set::_get_impl(_5377->shape())->nd != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _5378 = ::mosek::fusion::p_Set::make(_5377->shape()->dim((int)0),_5377->shape()->dim((int)0)); monty::rc_ptr< ::mosek::fusion::FlatExpr > _5379 = _5377->eval(); int _5380 = ((int)((mosek::fusion::p_FlatExpr::_get_impl(_5379)->subj)->size(0)) * (int)((_5376)->size(0))); int _5381 = (((int)((mosek::fusion::p_FlatExpr::_get_impl(_5379)->ptrb)->size(0)) - (int)1) * (int)((_5376)->size(0))); std::shared_ptr< monty::ndarray< long long,1 > > _5382 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5381 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5383 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5380))); std::shared_ptr< monty::ndarray< double,1 > > _5384 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5380))); std::shared_ptr< monty::ndarray< double,1 > > _5385 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5386 = nullptr; if (mosek::fusion::p_FlatExpr::_get_impl(_5379)->inst){ (_5386 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5381)))); }else {}if (mosek::fusion::p_FlatExpr::_get_impl(_5379)->bfix){ (_5385 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5381)))); }else {}if (! mosek::fusion::p_FlatExpr::_get_impl(_5379)->inst){ long long _5387 = (long long)0; int _9033 = (int)0; int _9034 = mosek::fusion::p_FlatExpr::_get_impl(_5379)->shape->dim((int)0); for (int _5388 = _9033;_5388<_9034;++_5388){ int _9035 = (int)0; int _9036 = (int)((_5376)->size(0)); for (int _5389 = _9035;_5389<_9036;++_5389){ long long _5390 = (((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->ptrb)((_5388 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->ptrb)(_5388))); (((*_5382)((_5387 + (int)1))) = (((*_5382)(_5387)) + _5390)); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5379)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->ptrb)(_5388)),_5383,((*_5382)(_5387)),_5390); long long _9037 = (long long)0; long long _9038 = _5390; for (long long _5391 = _9037;_5391<_9038;++_5391){ (((*_5384)((((*_5382)(_5387)) + _5391))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->ptrb)(_5388)) + _5391))) * ((*_5376)(_5389)))); }( ++ _5387 ); }}if (_5385){ (_5387 = (long long)0); int _9039 = (int)0; int _9040 = mosek::fusion::p_FlatExpr::_get_impl(_5379)->shape->dim((int)0); for (int _5392 = _9039;_5392<_9040;++_5392){ int _9041 = (int)0; int _9042 = (int)((_5376)->size(0)); for (int _5393 = _9041;_5393<_9042;++_5393){ (((*_5384)(_5387)) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->cof)(_5392)) * ((*_5376)(_5393)))); ( ++ _5387 ); }}}else {}}else { long long _5394 = (long long)0; int _9043 = (int)0; int _9044 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_5379)->inst)->size(0)); for (int _5395 = _9043;_5395<_9044;++_5395){ int _9045 = (int)0; int _9046 = (int)((_5376)->size(0)); for (int _5396 = _9045;_5396<_9046;++_5396){ long long _5397 = (((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->ptrb)((_5395 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->ptrb)(_5395))); (((*_5382)((_5394 + (int)1))) = (((*_5382)(_5394)) + _5397)); (((*_5386)(_5394)) = ((((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->inst)(_5395)) * (int)((_5376)->size(0))) + _5396)); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5379)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->ptrb)(_5395)),_5383,((*_5382)(_5394)),_5397); long long _9047 = (long long)0; long long _9048 = _5397; for (long long _5398 = _9047;_5398<_9048;++_5398){ (((*_5384)((((*_5382)(_5394)) + _5398))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->ptrb)(_5395)) + _5398))) * ((*_5376)(((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->inst)(_5396)))))); }( ++ _5394 ); }}if (_5385){ (_5394 = (long long)0); int _9049 = (int)0; int _9050 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_5379)->inst)->size(0)); for (int _5399 = _9049;_5399<_9050;++_5399){ int _9051 = (int)0; int _9052 = (int)((_5376)->size(0)); for (int _5400 = _9051;_5400<_9052;++_5400){ (((*_5384)(_5394)) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->cof)(_5399)) * ((*_5376)(((*mosek::fusion::p_FlatExpr::_get_impl(_5379)->inst)(_5400)))))); ( ++ _5394 ); }}}else {}}return ::mosek::fusion::p_Expr::_new_Expr(_5382,mosek::fusion::p_FlatExpr::_get_impl(_5379)->x,_5383,_5384,_5385,_5378,_5386); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Expression > _5401,    std::shared_ptr< monty::ndarray< double,1 > > _5402) { return mosek::fusion::p_Expr::outer(_5401,_5402); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( monty::rc_ptr< ::mosek::fusion::Expression > _5401,std::shared_ptr< monty::ndarray< double,1 > > _5402){ if (((mosek::fusion::p_Set::_get_impl(_5401->shape())->nd != (int)1) || (mosek::fusion::p_Set::_get_impl(_5401->shape())->nd != (int)1))){ throw ::mosek::fusion::DimensionError(std::string ("Arguments must be one-dimensional"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _5403 = ::mosek::fusion::p_Set::make(_5401->shape()->dim((int)0),_5401->shape()->dim((int)0)); monty::rc_ptr< ::mosek::fusion::FlatExpr > _5404 = _5401->eval(); int _5405 = ((int)((mosek::fusion::p_FlatExpr::_get_impl(_5404)->subj)->size(0)) * (int)((_5402)->size(0))); int _5406 = (((int)((mosek::fusion::p_FlatExpr::_get_impl(_5404)->ptrb)->size(0)) - (int)1) * (int)((_5402)->size(0))); std::shared_ptr< monty::ndarray< long long,1 > > _5407 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5406 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5408 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5405))); std::shared_ptr< monty::ndarray< double,1 > > _5409 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5405))); std::shared_ptr< monty::ndarray< double,1 > > _5410 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_5404)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5406)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5411 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_5404)->inst) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5406)))); })(); if (! mosek::fusion::p_FlatExpr::_get_impl(_5404)->inst){ long long _5412 = (long long)0; int _9053 = (int)0; int _9054 = (int)((_5402)->size(0)); for (int _5413 = _9053;_5413<_9054;++_5413){ int _9055 = (int)0; int _9056 = mosek::fusion::p_FlatExpr::_get_impl(_5404)->shape->dim((int)0); for (int _5414 = _9055;_5414<_9056;++_5414){ long long _5415 = (((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->ptrb)((_5414 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->ptrb)(_5414))); (((*_5407)((_5412 + (int)1))) = (((*_5407)(_5412)) + _5415)); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5404)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->ptrb)(_5414)),_5408,((*_5407)(_5412)),_5415); long long _9057 = (long long)0; long long _9058 = _5415; for (long long _5416 = _9057;_5416<_9058;++_5416){ (((*_5409)((((*_5407)(_5412)) + _5416))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->ptrb)(_5414)) + _5416))) * ((*_5402)(_5413)))); }( ++ _5412 ); }}if (_5410){ (_5412 = (long long)0); int _9059 = (int)0; int _9060 = (int)((_5402)->size(0)); for (int _5417 = _9059;_5417<_9060;++_5417){ int _9061 = (int)0; int _9062 = mosek::fusion::p_FlatExpr::_get_impl(_5404)->shape->dim((int)0); for (int _5418 = _9061;_5418<_9062;++_5418){ (((*_5409)(_5412)) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->cof)(_5418)) * ((*_5402)(_5417)))); ( ++ _5412 ); }}}else {}}else { long long _5419 = (long long)0; int _9063 = (int)0; int _9064 = (int)((_5402)->size(0)); for (int _5420 = _9063;_5420<_9064;++_5420){ int _9065 = (int)0; int _9066 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_5404)->inst)->size(0)); for (int _5421 = _9065;_5421<_9066;++_5421){ long long _5422 = (((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->ptrb)((_5421 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->ptrb)(_5421))); (((*_5407)((_5419 + (int)1))) = (((*_5407)(_5419)) + _5422)); (((*_5411)(_5419)) = ((long long)(_5420 * mosek::fusion::p_FlatExpr::_get_impl(_5404)->shape->dim((int)0)) + ((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->inst)(_5421)))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_5404)->subj,((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->ptrb)(_5421)),_5408,((*_5407)(_5419)),_5422); long long _9067 = (long long)0; long long _9068 = _5422; for (long long _5423 = _9067;_5423<_9068;++_5423){ (((*_5409)((((*_5407)(_5419)) + _5423))) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->cof)((((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->ptrb)(_5421)) + _5423))) * ((*_5402)(((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->inst)(_5420)))))); }( ++ _5419 ); }}if (_5410){ (_5419 = (long long)0); int _9069 = (int)0; int _9070 = (int)((_5402)->size(0)); for (int _5424 = _9069;_5424<_9070;++_5424){ int _9071 = (int)0; int _9072 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_5404)->inst)->size(0)); for (int _5425 = _9071;_5425<_9072;++_5425){ (((*_5409)(_5419)) = (((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->cof)(_5425)) * ((*_5402)(((*mosek::fusion::p_FlatExpr::_get_impl(_5404)->inst)(_5424)))))); ( ++ _5419 ); }}}else {}}return ::mosek::fusion::p_Expr::_new_Expr(_5407,mosek::fusion::p_FlatExpr::_get_impl(_5404)->x,_5408,_5409,_5410,_5403,_5411); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _5426,    monty::rc_ptr< ::mosek::fusion::Variable > _5427) { return mosek::fusion::p_Expr::outer(_5426,_5427); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( std::shared_ptr< monty::ndarray< double,1 > > _5426,monty::rc_ptr< ::mosek::fusion::Variable > _5427){ if ((mosek::fusion::p_Set::_get_impl(_5427->shape())->nd != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _5428 = ::mosek::fusion::p_Set::make((int)((_5426)->size(0)),_5427->shape()->dim((int)0)); std::shared_ptr< monty::ndarray< long long,1 > > _5429 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(_5428)->size + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5430 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(_5428)->size))); std::shared_ptr< monty::ndarray< double,1 > > _5431 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(_5428)->size))); std::shared_ptr< monty::ndarray< double,1 > > _5432 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5433 = nullptr; { long long _5434 = (long long)0; int _9073 = (int)0; int _9074 = (int)((_5426)->size(0)); for (int _5435 = _9073;_5435<_9074;++_5435){ int _9075 = (int)0; int _9076 = _5427->shape()->dim((int)0); for (int _5436 = _9075;_5436<_9076;++_5436){ (((*_5429)((_5434 + (int)1))) = (_5434 + (int)1)); (((*_5430)(_5434)) = (long long)_5436); (((*_5431)(_5434)) = ((*_5426)(_5435))); ( ++ _5434 ); }}}return ::mosek::fusion::p_Expr::_new_Expr(_5429,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5427}),_5430,_5431,_5432,_5428,_5433); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _5437,    std::shared_ptr< monty::ndarray< double,1 > > _5438) { return mosek::fusion::p_Expr::outer(_5437,_5438); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer( monty::rc_ptr< ::mosek::fusion::Variable > _5437,std::shared_ptr< monty::ndarray< double,1 > > _5438){ if ((mosek::fusion::p_Set::_get_impl(_5437->shape())->nd != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _5439 = ::mosek::fusion::p_Set::make(_5437->shape()->dim((int)0),(int)((_5438)->size(0))); std::shared_ptr< monty::ndarray< long long,1 > > _5440 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((mosek::fusion::p_Set::_get_impl(_5439)->size + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5441 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(_5439)->size))); std::shared_ptr< monty::ndarray< double,1 > > _5442 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(mosek::fusion::p_Set::_get_impl(_5439)->size))); std::shared_ptr< monty::ndarray< double,1 > > _5443 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5444 = nullptr; { long long _5445 = (long long)0; int _9077 = (int)0; int _9078 = _5437->shape()->dim((int)0); for (int _5446 = _9077;_5446<_9078;++_5446){ int _9079 = (int)0; int _9080 = (int)((_5438)->size(0)); for (int _5447 = _9079;_5447<_9080;++_5447){ (((*_5440)((_5445 + (int)1))) = (_5445 + (int)1)); (((*_5441)(_5445)) = (long long)_5446); (((*_5442)(_5445)) = ((*_5438)(_5447))); ( ++ _5445 ); }}}return ::mosek::fusion::p_Expr::_new_Expr(_5440,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{_5437}),_5441,_5442,_5443,_5439,_5444); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::pick  ( std::shared_ptr< monty::ndarray< int,2 > > _5448) { return mosek::fusion::p_Expr::_get_impl(this)->pick(_5448); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::pick( std::shared_ptr< monty::ndarray< int,2 > > _5448){ std::shared_ptr< monty::ndarray< int,2 > > _5449 = _5448; if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)((_5449)->size(1)))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid index size"));}else {}int _9081 = (int)0; int _9082 = (int)((_5449)->size(0)); for (int _5450 = _9081;_5450<_9082;++_5450){ int _9083 = (int)0; int _9084 = (int)((_5449)->size(1)); for (int _5451 = _9083;_5451<_9084;++_5451){ if (((((*_5449)(_5450,_5451)) < (int)0) || (((*_5449)(_5450,_5451)) >= shape_p->dim(_5451)))){ throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));}else {}}}return pick_(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9085; for (int _5452=(int)0, _9086=(int)((_5449)->size(0)); _5452 < _9086;++_5452)_9085.push_back(mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9087; for (int _5453=(int)0, _9088=(int)((_5449)->size(1)); _5453 < _9088;++_5453)_9087.push_back(((*_5449)(_5452,_5453))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9087.size()),_9087.begin(),_9087.end())); })())); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9085.size()),_9085.begin(),_9085.end())); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::pick  ( std::shared_ptr< monty::ndarray< int,1 > > _5454) { return mosek::fusion::p_Expr::_get_impl(this)->pick(_5454); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::pick( std::shared_ptr< monty::ndarray< int,1 > > _5454){ if ((mosek::fusion::p_Set::_get_impl(shape_p)->nd != (int)1)){ throw ::mosek::fusion::DimensionError(std::string ("Method is only valid for one-dimensional expressions"));}else {}int _9089 = (int)0; int _9090 = (int)((_5454)->size(0)); for (int _5455 = _9089;_5455<_9090;++_5455){ if (((((*_5454)(_5455)) < (int)0) || (((*_5454)(_5455)) >= shape_p->dim((int)0)))){ throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));}else {}}return pick_(([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9091; for (int _5456=(int)0, _9092=(int)((_5454)->size(0)); _5456 < _9092;++_5456)_9091.push_back(((*_5454)(_5456))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9091.size()),_9091.begin(),_9091.end())); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::pick_( std::shared_ptr< monty::ndarray< long long,1 > > _5457){ if (((int)((_5457)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),x,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),nullptr); }else {}if (! inst){ long long _5458 = (long long)0; std::shared_ptr< monty::ndarray< long long,1 > > _5459 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((_5457)->size(0)) + (int)1)))); int _9093 = (int)0; int _9094 = (int)((_5457)->size(0)); for (int _5460 = _9093;_5460<_9094;++_5460){ (_5458 += (((*ptrb)((((*_5457)(_5460)) + (int)1))) - ((*ptrb)(((*_5457)(_5460)))))); (((*_5459)((_5460 + (int)1))) = (((*_5459)(_5460)) + (((*ptrb)((((*_5457)(_5460)) + (int)1))) - ((*ptrb)(((*_5457)(_5460))))))); }std::shared_ptr< monty::ndarray< long long,1 > > _5461 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5458))); std::shared_ptr< monty::ndarray< double,1 > > _5462 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5458))); std::shared_ptr< monty::ndarray< double,1 > > _5463 = nullptr; int _9095 = (int)0; int _9096 = (int)((_5457)->size(0)); for (int _5464 = _9095;_5464<_9096;++_5464){ long long _5465 = ((*_5459)(_5464)); long long _5466 = (((*_5459)((_5464 + (int)1))) - _5465); ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(((*_5457)(_5464)))),_5461,_5465,_5466); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(((*_5457)(_5464)))),_5462,_5465,_5466); }if (bfix){ (_5463 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9097; for (int _5467=(int)0, _9098=(int)((_5457)->size(0)); _5467 < _9098;++_5467)_9097.push_back(((*bfix)(((*_5457)(_5467))))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9097.size()),_9097.begin(),_9097.end())); })()); }else {}std::shared_ptr< monty::ndarray< long long,1 > > _5468 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _5469 = ::mosek::fusion::p_Set::make((int)((_5457)->size(0))); return ::mosek::fusion::p_Expr::_new_Expr(_5459,x,_5461,_5462,_5463,_5469,_5468); }else { std::shared_ptr< monty::ndarray< long long,1 > > _5470 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9099; for (int _5471=(int)0, _9100=(int)((_5457)->size(0)); _5471 < _9100;++_5471)_9099.push_back(_5471); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9099.size()),_9099.begin(),_9099.end())); })(); ::mosek::fusion::p_Sort::argsort(_5470,_5457); int _5472 = (int)0; long long _5473 = (long long)0; { int _5474 = (int)0; int _5475 = (int)0; int _5476 = (int)((_5457)->size(0)); int _5477 = (int)((inst)->size(0)); while (((_5474 < _5476) && (_5475 < _5477))) { if ((((*_5457)(((*_5470)(_5474)))) < ((*inst)(_5475)))){ ( ++ _5474 ); }else if ((((*_5457)(((*_5470)(_5474)))) > ((*inst)(_5475)))){ ( ++ _5475 ); }else { ( ++ _5472 ); (_5473 += (((*ptrb)((_5475 + (int)1))) - ((*ptrb)(_5475)))); }}}std::shared_ptr< monty::ndarray< long long,1 > > _5478 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5472))); std::shared_ptr< monty::ndarray< long long,1 > > _5479 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5472 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5480 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5473))); std::shared_ptr< monty::ndarray< double,1 > > _5481 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5473))); std::shared_ptr< monty::ndarray< double,1 > > _5482 = nullptr; monty::rc_ptr< ::mosek::fusion::Set > _5483 = ::mosek::fusion::p_Set::make((int)((_5457)->size(0))); std::shared_ptr< monty::ndarray< int,1 > > _5484 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9101; for (int _5485=(int)0, _9102=(int)((_5457)->size(0)); _5485 < _9102;++_5485)_9101.push_back((- (int)1)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9101.size()),_9101.begin(),_9101.end())); })(); { int _5486 = (int)0; int _5487 = (int)0; int _5488 = (int)((_5457)->size(0)); int _5489 = (int)((inst)->size(0)); while (((_5486 < _5488) && (_5487 < _5489))) { if ((((*_5457)(((*_5470)(_5486)))) < ((*inst)(_5487)))){ ( ++ _5486 ); }else if ((((*_5457)(((*_5470)(_5486)))) > ((*inst)(_5487)))){ ( ++ _5487 ); }else { (((*_5484)(((*_5470)(_5486)))) = _5487); }}}{ int _5490 = (int)0; int _9103 = (int)0; int _9104 = (int)((_5484)->size(0)); for (int _5491 = _9103;_5491<_9104;++_5491){ if ((((*_5484)(_5490)) >= (int)0)){ long long _5492 = (((*ptrb)((((*_5484)(_5490)) + (int)1))) - ((*ptrb)(((*_5484)(_5491))))); (((*_5479)((_5490 + (int)1))) += (((*_5479)(_5490)) + _5492)); (((*_5478)(_5490)) = _5491); ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(((*_5484)(_5491)))),_5480,((*_5479)(_5490)),_5492); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(((*_5484)(_5491)))),_5481,((*_5479)(_5490)),_5492); ( ++ _5490 ); }else {}}}if (bfix){ (_5482 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5472)))); int _5493 = (int)0; int _9105 = (int)0; int _9106 = (int)((_5484)->size(0)); for (int _5494 = _9105;_5494<_9106;++_5494){ if ((((*_5484)(_5493)) >= (int)0)){ (((*_5482)(_5493)) = ((*bfix)(((*_5484)(_5494))))); ( ++ _5493 ); }else {}}}else {}return ::mosek::fusion::p_Expr::_new_Expr(_5479,x,_5480,_5481,_5482,_5483,_5478); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5495) { return mosek::fusion::p_Expr::stack(_5495); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _5495){ if (! _5495){ throw monty::NullPointerException(std::string ("Argument exprs may not be null"));}else {}int _9107 = (int)0; int _9108 = (int)((_5495)->size(0)); for (int _5496 = _9107;_5496<_9108;++_5496){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5497 = ((*_5495)(_5496)); if (! _5497){ throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));}else {}int _9109 = (int)0; int _9110 = (int)((_5497)->size(0)); for (int _5498 = _9109;_5498<_9110;++_5498){ if (! ((*_5497)(_5498))){ throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));}else {}}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5499 = ([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Expression > > _9111; for (int _5500=(int)0, _9112=(int)((_5495)->size(0)); _5500 < _9112;++_5500)_9111.push_back(::mosek::fusion::p_Expr::stack_(((*_5495)(_5500)),(int)1)); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9111.size()),_9111.begin(),_9111.end())); })(); return ::mosek::fusion::p_Expr::stack_(_5499,(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5501,    double _5502,    double _5503) { return mosek::fusion::p_Expr::vstack(_5501,_5502,_5503); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5501,double _5502,double _5503){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5501),::mosek::fusion::p_Expr::constTerm(_5502),::mosek::fusion::p_Expr::constTerm(_5503)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5504,    double _5505,    monty::rc_ptr< ::mosek::fusion::Variable > _5506) { return mosek::fusion::p_Expr::vstack(_5504,_5505,_5506); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5504,double _5505,monty::rc_ptr< ::mosek::fusion::Variable > _5506){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5504),::mosek::fusion::p_Expr::constTerm(_5505),_5506->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5507,    double _5508,    monty::rc_ptr< ::mosek::fusion::Expression > _5509) { return mosek::fusion::p_Expr::vstack(_5507,_5508,_5509); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5507,double _5508,monty::rc_ptr< ::mosek::fusion::Expression > _5509){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5507),::mosek::fusion::p_Expr::constTerm(_5508),_5509}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5510,    monty::rc_ptr< ::mosek::fusion::Variable > _5511,    double _5512) { return mosek::fusion::p_Expr::vstack(_5510,_5511,_5512); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5510,monty::rc_ptr< ::mosek::fusion::Variable > _5511,double _5512){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5510),_5511->asExpr(),::mosek::fusion::p_Expr::constTerm(_5512)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5513,    monty::rc_ptr< ::mosek::fusion::Variable > _5514,    monty::rc_ptr< ::mosek::fusion::Variable > _5515) { return mosek::fusion::p_Expr::vstack(_5513,_5514,_5515); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5513,monty::rc_ptr< ::mosek::fusion::Variable > _5514,monty::rc_ptr< ::mosek::fusion::Variable > _5515){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5513),_5514->asExpr(),_5515->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5516,    monty::rc_ptr< ::mosek::fusion::Variable > _5517,    monty::rc_ptr< ::mosek::fusion::Expression > _5518) { return mosek::fusion::p_Expr::vstack(_5516,_5517,_5518); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5516,monty::rc_ptr< ::mosek::fusion::Variable > _5517,monty::rc_ptr< ::mosek::fusion::Expression > _5518){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5516),_5517->asExpr(),_5518}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5519,    monty::rc_ptr< ::mosek::fusion::Expression > _5520,    double _5521) { return mosek::fusion::p_Expr::vstack(_5519,_5520,_5521); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5519,monty::rc_ptr< ::mosek::fusion::Expression > _5520,double _5521){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5519),_5520,::mosek::fusion::p_Expr::constTerm(_5521)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5522,    monty::rc_ptr< ::mosek::fusion::Expression > _5523,    monty::rc_ptr< ::mosek::fusion::Variable > _5524) { return mosek::fusion::p_Expr::vstack(_5522,_5523,_5524); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5522,monty::rc_ptr< ::mosek::fusion::Expression > _5523,monty::rc_ptr< ::mosek::fusion::Variable > _5524){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5522),_5523,_5524->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5525,    monty::rc_ptr< ::mosek::fusion::Expression > _5526,    monty::rc_ptr< ::mosek::fusion::Expression > _5527) { return mosek::fusion::p_Expr::vstack(_5525,_5526,_5527); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5525,monty::rc_ptr< ::mosek::fusion::Expression > _5526,monty::rc_ptr< ::mosek::fusion::Expression > _5527){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5525),_5526,_5527}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5528,    double _5529,    double _5530) { return mosek::fusion::p_Expr::vstack(_5528,_5529,_5530); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5528,double _5529,double _5530){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5528->asExpr(),::mosek::fusion::p_Expr::constTerm(_5529),::mosek::fusion::p_Expr::constTerm(_5530)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5531,    double _5532,    monty::rc_ptr< ::mosek::fusion::Variable > _5533) { return mosek::fusion::p_Expr::vstack(_5531,_5532,_5533); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5531,double _5532,monty::rc_ptr< ::mosek::fusion::Variable > _5533){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5531->asExpr(),::mosek::fusion::p_Expr::constTerm(_5532),_5533->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5534,    double _5535,    monty::rc_ptr< ::mosek::fusion::Expression > _5536) { return mosek::fusion::p_Expr::vstack(_5534,_5535,_5536); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5534,double _5535,monty::rc_ptr< ::mosek::fusion::Expression > _5536){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5534->asExpr(),::mosek::fusion::p_Expr::constTerm(_5535),_5536}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5537,    monty::rc_ptr< ::mosek::fusion::Variable > _5538,    double _5539) { return mosek::fusion::p_Expr::vstack(_5537,_5538,_5539); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5537,monty::rc_ptr< ::mosek::fusion::Variable > _5538,double _5539){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5537->asExpr(),_5538->asExpr(),::mosek::fusion::p_Expr::constTerm(_5539)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5540,    monty::rc_ptr< ::mosek::fusion::Variable > _5541,    monty::rc_ptr< ::mosek::fusion::Variable > _5542) { return mosek::fusion::p_Expr::vstack(_5540,_5541,_5542); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5540,monty::rc_ptr< ::mosek::fusion::Variable > _5541,monty::rc_ptr< ::mosek::fusion::Variable > _5542){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5540->asExpr(),_5541->asExpr(),_5542->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5543,    monty::rc_ptr< ::mosek::fusion::Variable > _5544,    monty::rc_ptr< ::mosek::fusion::Expression > _5545) { return mosek::fusion::p_Expr::vstack(_5543,_5544,_5545); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5543,monty::rc_ptr< ::mosek::fusion::Variable > _5544,monty::rc_ptr< ::mosek::fusion::Expression > _5545){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5543->asExpr(),_5544->asExpr(),_5545}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5546,    monty::rc_ptr< ::mosek::fusion::Expression > _5547,    double _5548) { return mosek::fusion::p_Expr::vstack(_5546,_5547,_5548); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5546,monty::rc_ptr< ::mosek::fusion::Expression > _5547,double _5548){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5546->asExpr(),_5547,::mosek::fusion::p_Expr::constTerm(_5548)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5549,    monty::rc_ptr< ::mosek::fusion::Expression > _5550,    monty::rc_ptr< ::mosek::fusion::Variable > _5551) { return mosek::fusion::p_Expr::vstack(_5549,_5550,_5551); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5549,monty::rc_ptr< ::mosek::fusion::Expression > _5550,monty::rc_ptr< ::mosek::fusion::Variable > _5551){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5549->asExpr(),_5550,_5551->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5552,    monty::rc_ptr< ::mosek::fusion::Expression > _5553,    monty::rc_ptr< ::mosek::fusion::Expression > _5554) { return mosek::fusion::p_Expr::vstack(_5552,_5553,_5554); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5552,monty::rc_ptr< ::mosek::fusion::Expression > _5553,monty::rc_ptr< ::mosek::fusion::Expression > _5554){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5552->asExpr(),_5553,_5554}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5555,    double _5556,    double _5557) { return mosek::fusion::p_Expr::vstack(_5555,_5556,_5557); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5555,double _5556,double _5557){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5555,::mosek::fusion::p_Expr::constTerm(_5556),::mosek::fusion::p_Expr::constTerm(_5557)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5558,    double _5559,    monty::rc_ptr< ::mosek::fusion::Variable > _5560) { return mosek::fusion::p_Expr::vstack(_5558,_5559,_5560); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5558,double _5559,monty::rc_ptr< ::mosek::fusion::Variable > _5560){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5558,::mosek::fusion::p_Expr::constTerm(_5559),_5560->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5561,    double _5562,    monty::rc_ptr< ::mosek::fusion::Expression > _5563) { return mosek::fusion::p_Expr::vstack(_5561,_5562,_5563); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5561,double _5562,monty::rc_ptr< ::mosek::fusion::Expression > _5563){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5561,::mosek::fusion::p_Expr::constTerm(_5562),_5563}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5564,    monty::rc_ptr< ::mosek::fusion::Variable > _5565,    double _5566) { return mosek::fusion::p_Expr::vstack(_5564,_5565,_5566); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5564,monty::rc_ptr< ::mosek::fusion::Variable > _5565,double _5566){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5564,_5565->asExpr(),::mosek::fusion::p_Expr::constTerm(_5566)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5567,    monty::rc_ptr< ::mosek::fusion::Variable > _5568,    monty::rc_ptr< ::mosek::fusion::Variable > _5569) { return mosek::fusion::p_Expr::vstack(_5567,_5568,_5569); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5567,monty::rc_ptr< ::mosek::fusion::Variable > _5568,monty::rc_ptr< ::mosek::fusion::Variable > _5569){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5567,_5568->asExpr(),_5569->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5570,    monty::rc_ptr< ::mosek::fusion::Variable > _5571,    monty::rc_ptr< ::mosek::fusion::Expression > _5572) { return mosek::fusion::p_Expr::vstack(_5570,_5571,_5572); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5570,monty::rc_ptr< ::mosek::fusion::Variable > _5571,monty::rc_ptr< ::mosek::fusion::Expression > _5572){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5570,_5571->asExpr(),_5572}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5573,    monty::rc_ptr< ::mosek::fusion::Expression > _5574,    double _5575) { return mosek::fusion::p_Expr::vstack(_5573,_5574,_5575); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5573,monty::rc_ptr< ::mosek::fusion::Expression > _5574,double _5575){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5573,_5574,::mosek::fusion::p_Expr::constTerm(_5575)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5576,    monty::rc_ptr< ::mosek::fusion::Expression > _5577,    monty::rc_ptr< ::mosek::fusion::Variable > _5578) { return mosek::fusion::p_Expr::vstack(_5576,_5577,_5578); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5576,monty::rc_ptr< ::mosek::fusion::Expression > _5577,monty::rc_ptr< ::mosek::fusion::Variable > _5578){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5576,_5577,_5578->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5579,    monty::rc_ptr< ::mosek::fusion::Expression > _5580,    monty::rc_ptr< ::mosek::fusion::Expression > _5581) { return mosek::fusion::p_Expr::vstack(_5579,_5580,_5581); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5579,monty::rc_ptr< ::mosek::fusion::Expression > _5580,monty::rc_ptr< ::mosek::fusion::Expression > _5581){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5579,_5580,_5581}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5582,    monty::rc_ptr< ::mosek::fusion::Variable > _5583) { return mosek::fusion::p_Expr::vstack(_5582,_5583); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5582,monty::rc_ptr< ::mosek::fusion::Variable > _5583){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5582),_5583->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _5584,    monty::rc_ptr< ::mosek::fusion::Expression > _5585) { return mosek::fusion::p_Expr::vstack(_5584,_5585); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( double _5584,monty::rc_ptr< ::mosek::fusion::Expression > _5585){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5584),_5585}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5586,    double _5587) { return mosek::fusion::p_Expr::vstack(_5586,_5587); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5586,double _5587){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5586->asExpr(),::mosek::fusion::p_Expr::constTerm(_5587)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5588,    monty::rc_ptr< ::mosek::fusion::Variable > _5589) { return mosek::fusion::p_Expr::vstack(_5588,_5589); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5588,monty::rc_ptr< ::mosek::fusion::Variable > _5589){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5588->asExpr(),_5589->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5590,    monty::rc_ptr< ::mosek::fusion::Expression > _5591) { return mosek::fusion::p_Expr::vstack(_5590,_5591); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Variable > _5590,monty::rc_ptr< ::mosek::fusion::Expression > _5591){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5590->asExpr(),_5591}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5592,    double _5593) { return mosek::fusion::p_Expr::vstack(_5592,_5593); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5592,double _5593){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5592,::mosek::fusion::p_Expr::constTerm(_5593)}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5594,    monty::rc_ptr< ::mosek::fusion::Variable > _5595) { return mosek::fusion::p_Expr::vstack(_5594,_5595); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5594,monty::rc_ptr< ::mosek::fusion::Variable > _5595){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5594,_5595->asExpr()}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5596,    monty::rc_ptr< ::mosek::fusion::Expression > _5597) { return mosek::fusion::p_Expr::vstack(_5596,_5597); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( monty::rc_ptr< ::mosek::fusion::Expression > _5596,monty::rc_ptr< ::mosek::fusion::Expression > _5597){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5596,_5597}),(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5598) { return mosek::fusion::p_Expr::vstack(_5598); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5598){ if (! _5598){ throw monty::NullPointerException(std::string ("Argument exprs may not be null"));}else {}int _9113 = (int)0; int _9114 = (int)((_5598)->size(0)); for (int _5599 = _9113;_5599<_9114;++_5599){ if (! ((*_5598)(_5599))){ throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));}else {}}return ::mosek::fusion::p_Expr::stack_(_5598,(int)0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5600,    monty::rc_ptr< ::mosek::fusion::Expression > _5601,    monty::rc_ptr< ::mosek::fusion::Expression > _5602) { return mosek::fusion::p_Expr::hstack(_5600,_5601,_5602); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5600,monty::rc_ptr< ::mosek::fusion::Expression > _5601,monty::rc_ptr< ::mosek::fusion::Expression > _5602){ if ((! _5600 || (! _5601 || ! _5602))){ throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));}else {}return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5600,_5601,_5602}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5603,    monty::rc_ptr< ::mosek::fusion::Expression > _5604,    monty::rc_ptr< ::mosek::fusion::Variable > _5605) { return mosek::fusion::p_Expr::hstack(_5603,_5604,_5605); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5603,monty::rc_ptr< ::mosek::fusion::Expression > _5604,monty::rc_ptr< ::mosek::fusion::Variable > _5605){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5603,_5604,_5605->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5606,    monty::rc_ptr< ::mosek::fusion::Expression > _5607,    double _5608) { return mosek::fusion::p_Expr::hstack(_5606,_5607,_5608); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5606,monty::rc_ptr< ::mosek::fusion::Expression > _5607,double _5608){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5606,_5607,::mosek::fusion::p_Expr::constTerm(_5608)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5609,    monty::rc_ptr< ::mosek::fusion::Variable > _5610,    monty::rc_ptr< ::mosek::fusion::Expression > _5611) { return mosek::fusion::p_Expr::hstack(_5609,_5610,_5611); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5609,monty::rc_ptr< ::mosek::fusion::Variable > _5610,monty::rc_ptr< ::mosek::fusion::Expression > _5611){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5609,_5610->asExpr(),_5611}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5612,    monty::rc_ptr< ::mosek::fusion::Variable > _5613,    monty::rc_ptr< ::mosek::fusion::Variable > _5614) { return mosek::fusion::p_Expr::hstack(_5612,_5613,_5614); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5612,monty::rc_ptr< ::mosek::fusion::Variable > _5613,monty::rc_ptr< ::mosek::fusion::Variable > _5614){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5612,_5613->asExpr(),_5614->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5615,    monty::rc_ptr< ::mosek::fusion::Variable > _5616,    double _5617) { return mosek::fusion::p_Expr::hstack(_5615,_5616,_5617); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5615,monty::rc_ptr< ::mosek::fusion::Variable > _5616,double _5617){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5615,_5616->asExpr(),::mosek::fusion::p_Expr::constTerm(_5617)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5618,    double _5619,    monty::rc_ptr< ::mosek::fusion::Expression > _5620) { return mosek::fusion::p_Expr::hstack(_5618,_5619,_5620); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5618,double _5619,monty::rc_ptr< ::mosek::fusion::Expression > _5620){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5618,::mosek::fusion::p_Expr::constTerm(_5619),_5620}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5621,    double _5622,    monty::rc_ptr< ::mosek::fusion::Variable > _5623) { return mosek::fusion::p_Expr::hstack(_5621,_5622,_5623); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5621,double _5622,monty::rc_ptr< ::mosek::fusion::Variable > _5623){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5621,::mosek::fusion::p_Expr::constTerm(_5622),_5623->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5624,    double _5625,    double _5626) { return mosek::fusion::p_Expr::hstack(_5624,_5625,_5626); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5624,double _5625,double _5626){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5624,::mosek::fusion::p_Expr::constTerm(_5625),::mosek::fusion::p_Expr::constTerm(_5626)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5627,    monty::rc_ptr< ::mosek::fusion::Expression > _5628,    monty::rc_ptr< ::mosek::fusion::Expression > _5629) { return mosek::fusion::p_Expr::hstack(_5627,_5628,_5629); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5627,monty::rc_ptr< ::mosek::fusion::Expression > _5628,monty::rc_ptr< ::mosek::fusion::Expression > _5629){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5627->asExpr(),_5628,_5629}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5630,    monty::rc_ptr< ::mosek::fusion::Expression > _5631,    monty::rc_ptr< ::mosek::fusion::Variable > _5632) { return mosek::fusion::p_Expr::hstack(_5630,_5631,_5632); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5630,monty::rc_ptr< ::mosek::fusion::Expression > _5631,monty::rc_ptr< ::mosek::fusion::Variable > _5632){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5630->asExpr(),_5631,_5632->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5633,    monty::rc_ptr< ::mosek::fusion::Expression > _5634,    double _5635) { return mosek::fusion::p_Expr::hstack(_5633,_5634,_5635); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5633,monty::rc_ptr< ::mosek::fusion::Expression > _5634,double _5635){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5633->asExpr(),_5634,::mosek::fusion::p_Expr::constTerm(_5635)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5636,    monty::rc_ptr< ::mosek::fusion::Variable > _5637,    monty::rc_ptr< ::mosek::fusion::Expression > _5638) { return mosek::fusion::p_Expr::hstack(_5636,_5637,_5638); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5636,monty::rc_ptr< ::mosek::fusion::Variable > _5637,monty::rc_ptr< ::mosek::fusion::Expression > _5638){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5636->asExpr(),_5637->asExpr(),_5638}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5639,    monty::rc_ptr< ::mosek::fusion::Variable > _5640,    monty::rc_ptr< ::mosek::fusion::Variable > _5641) { return mosek::fusion::p_Expr::hstack(_5639,_5640,_5641); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5639,monty::rc_ptr< ::mosek::fusion::Variable > _5640,monty::rc_ptr< ::mosek::fusion::Variable > _5641){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5639->asExpr(),_5640->asExpr(),_5641->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5642,    monty::rc_ptr< ::mosek::fusion::Variable > _5643,    double _5644) { return mosek::fusion::p_Expr::hstack(_5642,_5643,_5644); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5642,monty::rc_ptr< ::mosek::fusion::Variable > _5643,double _5644){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5642->asExpr(),_5643->asExpr(),::mosek::fusion::p_Expr::constTerm(_5644)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5645,    double _5646,    monty::rc_ptr< ::mosek::fusion::Expression > _5647) { return mosek::fusion::p_Expr::hstack(_5645,_5646,_5647); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5645,double _5646,monty::rc_ptr< ::mosek::fusion::Expression > _5647){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5645->asExpr(),::mosek::fusion::p_Expr::constTerm(_5646),_5647}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5648,    double _5649,    monty::rc_ptr< ::mosek::fusion::Variable > _5650) { return mosek::fusion::p_Expr::hstack(_5648,_5649,_5650); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5648,double _5649,monty::rc_ptr< ::mosek::fusion::Variable > _5650){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5648->asExpr(),::mosek::fusion::p_Expr::constTerm(_5649),_5650->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5651,    double _5652,    double _5653) { return mosek::fusion::p_Expr::hstack(_5651,_5652,_5653); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5651,double _5652,double _5653){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5651->asExpr(),::mosek::fusion::p_Expr::constTerm(_5652),::mosek::fusion::p_Expr::constTerm(_5653)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5654,    monty::rc_ptr< ::mosek::fusion::Expression > _5655,    monty::rc_ptr< ::mosek::fusion::Expression > _5656) { return mosek::fusion::p_Expr::hstack(_5654,_5655,_5656); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5654,monty::rc_ptr< ::mosek::fusion::Expression > _5655,monty::rc_ptr< ::mosek::fusion::Expression > _5656){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5654),_5655,_5656}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5657,    monty::rc_ptr< ::mosek::fusion::Expression > _5658,    monty::rc_ptr< ::mosek::fusion::Variable > _5659) { return mosek::fusion::p_Expr::hstack(_5657,_5658,_5659); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5657,monty::rc_ptr< ::mosek::fusion::Expression > _5658,monty::rc_ptr< ::mosek::fusion::Variable > _5659){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5657),_5658,_5659->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5660,    monty::rc_ptr< ::mosek::fusion::Expression > _5661,    double _5662) { return mosek::fusion::p_Expr::hstack(_5660,_5661,_5662); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5660,monty::rc_ptr< ::mosek::fusion::Expression > _5661,double _5662){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5660),_5661,::mosek::fusion::p_Expr::constTerm(_5662)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5663,    monty::rc_ptr< ::mosek::fusion::Variable > _5664,    monty::rc_ptr< ::mosek::fusion::Expression > _5665) { return mosek::fusion::p_Expr::hstack(_5663,_5664,_5665); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5663,monty::rc_ptr< ::mosek::fusion::Variable > _5664,monty::rc_ptr< ::mosek::fusion::Expression > _5665){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5663),_5664->asExpr(),_5665}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5666,    monty::rc_ptr< ::mosek::fusion::Variable > _5667,    monty::rc_ptr< ::mosek::fusion::Variable > _5668) { return mosek::fusion::p_Expr::hstack(_5666,_5667,_5668); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5666,monty::rc_ptr< ::mosek::fusion::Variable > _5667,monty::rc_ptr< ::mosek::fusion::Variable > _5668){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5666),_5667->asExpr(),_5668->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5669,    monty::rc_ptr< ::mosek::fusion::Variable > _5670,    double _5671) { return mosek::fusion::p_Expr::hstack(_5669,_5670,_5671); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5669,monty::rc_ptr< ::mosek::fusion::Variable > _5670,double _5671){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5669),_5670->asExpr(),::mosek::fusion::p_Expr::constTerm(_5671)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5672,    double _5673,    monty::rc_ptr< ::mosek::fusion::Expression > _5674) { return mosek::fusion::p_Expr::hstack(_5672,_5673,_5674); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5672,double _5673,monty::rc_ptr< ::mosek::fusion::Expression > _5674){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5672),::mosek::fusion::p_Expr::constTerm(_5673),_5674}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5675,    double _5676,    monty::rc_ptr< ::mosek::fusion::Variable > _5677) { return mosek::fusion::p_Expr::hstack(_5675,_5676,_5677); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5675,double _5676,monty::rc_ptr< ::mosek::fusion::Variable > _5677){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5675),::mosek::fusion::p_Expr::constTerm(_5676),_5677->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5678,    monty::rc_ptr< ::mosek::fusion::Expression > _5679) { return mosek::fusion::p_Expr::hstack(_5678,_5679); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5678,monty::rc_ptr< ::mosek::fusion::Expression > _5679){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5678->asExpr(),_5679}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5680,    monty::rc_ptr< ::mosek::fusion::Variable > _5681) { return mosek::fusion::p_Expr::hstack(_5680,_5681); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5680,monty::rc_ptr< ::mosek::fusion::Variable > _5681){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5680->asExpr(),_5681->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _5682,    double _5683) { return mosek::fusion::p_Expr::hstack(_5682,_5683); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Variable > _5682,double _5683){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5682->asExpr(),::mosek::fusion::p_Expr::constTerm(_5683)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5684,    monty::rc_ptr< ::mosek::fusion::Expression > _5685) { return mosek::fusion::p_Expr::hstack(_5684,_5685); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5684,monty::rc_ptr< ::mosek::fusion::Expression > _5685){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5684),_5685}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _5686,    monty::rc_ptr< ::mosek::fusion::Variable > _5687) { return mosek::fusion::p_Expr::hstack(_5686,_5687); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( double _5686,monty::rc_ptr< ::mosek::fusion::Variable > _5687){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5686),_5687->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5688,    monty::rc_ptr< ::mosek::fusion::Variable > _5689) { return mosek::fusion::p_Expr::hstack(_5688,_5689); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5688,monty::rc_ptr< ::mosek::fusion::Variable > _5689){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5688,_5689->asExpr()}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5690,    double _5691) { return mosek::fusion::p_Expr::hstack(_5690,_5691); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5690,double _5691){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5690,::mosek::fusion::p_Expr::constTerm(_5691)}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _5692,    monty::rc_ptr< ::mosek::fusion::Expression > _5693) { return mosek::fusion::p_Expr::hstack(_5692,_5693); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( monty::rc_ptr< ::mosek::fusion::Expression > _5692,monty::rc_ptr< ::mosek::fusion::Expression > _5693){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5692,_5693}),(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5694) { return mosek::fusion::p_Expr::hstack(_5694); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5694){ if (! _5694){ throw monty::NullPointerException(std::string ("Argument exprs may not be null"));}else {}int _9115 = (int)0; int _9116 = (int)((_5694)->size(0)); for (int _5695 = _9115;_5695<_9116;++_5695){ if (! ((*_5694)(_5695))){ throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));}else {}}return ::mosek::fusion::p_Expr::stack_(_5694,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5696,    monty::rc_ptr< ::mosek::fusion::Expression > _5697,    monty::rc_ptr< ::mosek::fusion::Expression > _5698,    monty::rc_ptr< ::mosek::fusion::Expression > _5699) { return mosek::fusion::p_Expr::stack(_5696,_5697,_5698,_5699); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5696,monty::rc_ptr< ::mosek::fusion::Expression > _5697,monty::rc_ptr< ::mosek::fusion::Expression > _5698,monty::rc_ptr< ::mosek::fusion::Expression > _5699){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5697,_5698,_5699}),_5696); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5700,    monty::rc_ptr< ::mosek::fusion::Expression > _5701,    monty::rc_ptr< ::mosek::fusion::Expression > _5702,    monty::rc_ptr< ::mosek::fusion::Variable > _5703) { return mosek::fusion::p_Expr::stack(_5700,_5701,_5702,_5703); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5700,monty::rc_ptr< ::mosek::fusion::Expression > _5701,monty::rc_ptr< ::mosek::fusion::Expression > _5702,monty::rc_ptr< ::mosek::fusion::Variable > _5703){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5701,_5702,_5703->asExpr()}),_5700); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5704,    monty::rc_ptr< ::mosek::fusion::Expression > _5705,    monty::rc_ptr< ::mosek::fusion::Expression > _5706,    double _5707) { return mosek::fusion::p_Expr::stack(_5704,_5705,_5706,_5707); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5704,monty::rc_ptr< ::mosek::fusion::Expression > _5705,monty::rc_ptr< ::mosek::fusion::Expression > _5706,double _5707){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5705,_5706,::mosek::fusion::p_Expr::constTerm(_5707)}),_5704); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5708,    monty::rc_ptr< ::mosek::fusion::Expression > _5709,    monty::rc_ptr< ::mosek::fusion::Variable > _5710,    monty::rc_ptr< ::mosek::fusion::Expression > _5711) { return mosek::fusion::p_Expr::stack(_5708,_5709,_5710,_5711); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5708,monty::rc_ptr< ::mosek::fusion::Expression > _5709,monty::rc_ptr< ::mosek::fusion::Variable > _5710,monty::rc_ptr< ::mosek::fusion::Expression > _5711){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5709,_5710->asExpr(),_5711}),_5708); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5712,    monty::rc_ptr< ::mosek::fusion::Expression > _5713,    monty::rc_ptr< ::mosek::fusion::Variable > _5714,    monty::rc_ptr< ::mosek::fusion::Variable > _5715) { return mosek::fusion::p_Expr::stack(_5712,_5713,_5714,_5715); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5712,monty::rc_ptr< ::mosek::fusion::Expression > _5713,monty::rc_ptr< ::mosek::fusion::Variable > _5714,monty::rc_ptr< ::mosek::fusion::Variable > _5715){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5713,_5714->asExpr(),_5715->asExpr()}),_5712); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5716,    monty::rc_ptr< ::mosek::fusion::Expression > _5717,    monty::rc_ptr< ::mosek::fusion::Variable > _5718,    double _5719) { return mosek::fusion::p_Expr::stack(_5716,_5717,_5718,_5719); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5716,monty::rc_ptr< ::mosek::fusion::Expression > _5717,monty::rc_ptr< ::mosek::fusion::Variable > _5718,double _5719){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5717,_5718->asExpr(),::mosek::fusion::p_Expr::constTerm(_5719)}),_5716); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5720,    monty::rc_ptr< ::mosek::fusion::Expression > _5721,    double _5722,    monty::rc_ptr< ::mosek::fusion::Expression > _5723) { return mosek::fusion::p_Expr::stack(_5720,_5721,_5722,_5723); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5720,monty::rc_ptr< ::mosek::fusion::Expression > _5721,double _5722,monty::rc_ptr< ::mosek::fusion::Expression > _5723){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5721,::mosek::fusion::p_Expr::constTerm(_5722),_5723}),_5720); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5724,    monty::rc_ptr< ::mosek::fusion::Expression > _5725,    double _5726,    monty::rc_ptr< ::mosek::fusion::Variable > _5727) { return mosek::fusion::p_Expr::stack(_5724,_5725,_5726,_5727); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5724,monty::rc_ptr< ::mosek::fusion::Expression > _5725,double _5726,monty::rc_ptr< ::mosek::fusion::Variable > _5727){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5725,::mosek::fusion::p_Expr::constTerm(_5726),_5727->asExpr()}),_5724); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5728,    monty::rc_ptr< ::mosek::fusion::Expression > _5729,    double _5730,    double _5731) { return mosek::fusion::p_Expr::stack(_5728,_5729,_5730,_5731); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5728,monty::rc_ptr< ::mosek::fusion::Expression > _5729,double _5730,double _5731){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5729,::mosek::fusion::p_Expr::constTerm(_5730),::mosek::fusion::p_Expr::constTerm(_5731)}),_5728); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5732,    monty::rc_ptr< ::mosek::fusion::Variable > _5733,    monty::rc_ptr< ::mosek::fusion::Expression > _5734,    monty::rc_ptr< ::mosek::fusion::Expression > _5735) { return mosek::fusion::p_Expr::stack(_5732,_5733,_5734,_5735); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5732,monty::rc_ptr< ::mosek::fusion::Variable > _5733,monty::rc_ptr< ::mosek::fusion::Expression > _5734,monty::rc_ptr< ::mosek::fusion::Expression > _5735){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5733->asExpr(),_5734,_5735}),_5732); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5736,    monty::rc_ptr< ::mosek::fusion::Variable > _5737,    monty::rc_ptr< ::mosek::fusion::Expression > _5738,    monty::rc_ptr< ::mosek::fusion::Variable > _5739) { return mosek::fusion::p_Expr::stack(_5736,_5737,_5738,_5739); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5736,monty::rc_ptr< ::mosek::fusion::Variable > _5737,monty::rc_ptr< ::mosek::fusion::Expression > _5738,monty::rc_ptr< ::mosek::fusion::Variable > _5739){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5737->asExpr(),_5738,_5739->asExpr()}),_5736); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5740,    monty::rc_ptr< ::mosek::fusion::Variable > _5741,    monty::rc_ptr< ::mosek::fusion::Expression > _5742,    double _5743) { return mosek::fusion::p_Expr::stack(_5740,_5741,_5742,_5743); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5740,monty::rc_ptr< ::mosek::fusion::Variable > _5741,monty::rc_ptr< ::mosek::fusion::Expression > _5742,double _5743){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5741->asExpr(),_5742,::mosek::fusion::p_Expr::constTerm(_5743)}),_5740); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5744,    monty::rc_ptr< ::mosek::fusion::Variable > _5745,    monty::rc_ptr< ::mosek::fusion::Variable > _5746,    monty::rc_ptr< ::mosek::fusion::Expression > _5747) { return mosek::fusion::p_Expr::stack(_5744,_5745,_5746,_5747); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5744,monty::rc_ptr< ::mosek::fusion::Variable > _5745,monty::rc_ptr< ::mosek::fusion::Variable > _5746,monty::rc_ptr< ::mosek::fusion::Expression > _5747){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5745->asExpr(),_5746->asExpr(),_5747}),_5744); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5748,    monty::rc_ptr< ::mosek::fusion::Variable > _5749,    monty::rc_ptr< ::mosek::fusion::Variable > _5750,    monty::rc_ptr< ::mosek::fusion::Variable > _5751) { return mosek::fusion::p_Expr::stack(_5748,_5749,_5750,_5751); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5748,monty::rc_ptr< ::mosek::fusion::Variable > _5749,monty::rc_ptr< ::mosek::fusion::Variable > _5750,monty::rc_ptr< ::mosek::fusion::Variable > _5751){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5749->asExpr(),_5750->asExpr(),_5751->asExpr()}),_5748); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5752,    monty::rc_ptr< ::mosek::fusion::Variable > _5753,    monty::rc_ptr< ::mosek::fusion::Variable > _5754,    double _5755) { return mosek::fusion::p_Expr::stack(_5752,_5753,_5754,_5755); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5752,monty::rc_ptr< ::mosek::fusion::Variable > _5753,monty::rc_ptr< ::mosek::fusion::Variable > _5754,double _5755){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5753->asExpr(),_5754->asExpr(),::mosek::fusion::p_Expr::constTerm(_5755)}),_5752); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5756,    monty::rc_ptr< ::mosek::fusion::Variable > _5757,    double _5758,    monty::rc_ptr< ::mosek::fusion::Expression > _5759) { return mosek::fusion::p_Expr::stack(_5756,_5757,_5758,_5759); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5756,monty::rc_ptr< ::mosek::fusion::Variable > _5757,double _5758,monty::rc_ptr< ::mosek::fusion::Expression > _5759){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5757->asExpr(),::mosek::fusion::p_Expr::constTerm(_5758),_5759}),_5756); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5760,    monty::rc_ptr< ::mosek::fusion::Variable > _5761,    double _5762,    monty::rc_ptr< ::mosek::fusion::Variable > _5763) { return mosek::fusion::p_Expr::stack(_5760,_5761,_5762,_5763); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5760,monty::rc_ptr< ::mosek::fusion::Variable > _5761,double _5762,monty::rc_ptr< ::mosek::fusion::Variable > _5763){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5761->asExpr(),::mosek::fusion::p_Expr::constTerm(_5762),_5763->asExpr()}),_5760); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5764,    monty::rc_ptr< ::mosek::fusion::Variable > _5765,    double _5766,    double _5767) { return mosek::fusion::p_Expr::stack(_5764,_5765,_5766,_5767); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5764,monty::rc_ptr< ::mosek::fusion::Variable > _5765,double _5766,double _5767){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5765->asExpr(),::mosek::fusion::p_Expr::constTerm(_5766),::mosek::fusion::p_Expr::constTerm(_5767)}),_5764); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5768,    double _5769,    monty::rc_ptr< ::mosek::fusion::Expression > _5770,    monty::rc_ptr< ::mosek::fusion::Expression > _5771) { return mosek::fusion::p_Expr::stack(_5768,_5769,_5770,_5771); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5768,double _5769,monty::rc_ptr< ::mosek::fusion::Expression > _5770,monty::rc_ptr< ::mosek::fusion::Expression > _5771){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5769),_5770,_5771}),_5768); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5772,    double _5773,    monty::rc_ptr< ::mosek::fusion::Expression > _5774,    monty::rc_ptr< ::mosek::fusion::Variable > _5775) { return mosek::fusion::p_Expr::stack(_5772,_5773,_5774,_5775); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5772,double _5773,monty::rc_ptr< ::mosek::fusion::Expression > _5774,monty::rc_ptr< ::mosek::fusion::Variable > _5775){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5773),_5774,_5775->asExpr()}),_5772); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5776,    double _5777,    monty::rc_ptr< ::mosek::fusion::Expression > _5778,    double _5779) { return mosek::fusion::p_Expr::stack(_5776,_5777,_5778,_5779); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5776,double _5777,monty::rc_ptr< ::mosek::fusion::Expression > _5778,double _5779){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5777),_5778,::mosek::fusion::p_Expr::constTerm(_5779)}),_5776); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5780,    double _5781,    monty::rc_ptr< ::mosek::fusion::Variable > _5782,    monty::rc_ptr< ::mosek::fusion::Expression > _5783) { return mosek::fusion::p_Expr::stack(_5780,_5781,_5782,_5783); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5780,double _5781,monty::rc_ptr< ::mosek::fusion::Variable > _5782,monty::rc_ptr< ::mosek::fusion::Expression > _5783){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5781),_5782->asExpr(),_5783}),_5780); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5784,    double _5785,    monty::rc_ptr< ::mosek::fusion::Variable > _5786,    monty::rc_ptr< ::mosek::fusion::Variable > _5787) { return mosek::fusion::p_Expr::stack(_5784,_5785,_5786,_5787); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5784,double _5785,monty::rc_ptr< ::mosek::fusion::Variable > _5786,monty::rc_ptr< ::mosek::fusion::Variable > _5787){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5785),_5786->asExpr(),_5787->asExpr()}),_5784); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5788,    double _5789,    monty::rc_ptr< ::mosek::fusion::Variable > _5790,    double _5791) { return mosek::fusion::p_Expr::stack(_5788,_5789,_5790,_5791); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5788,double _5789,monty::rc_ptr< ::mosek::fusion::Variable > _5790,double _5791){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5789),_5790->asExpr(),::mosek::fusion::p_Expr::constTerm(_5791)}),_5788); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5792,    double _5793,    double _5794,    monty::rc_ptr< ::mosek::fusion::Expression > _5795) { return mosek::fusion::p_Expr::stack(_5792,_5793,_5794,_5795); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5792,double _5793,double _5794,monty::rc_ptr< ::mosek::fusion::Expression > _5795){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5793),::mosek::fusion::p_Expr::constTerm(_5794),_5795}),_5792); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5796,    double _5797,    double _5798,    monty::rc_ptr< ::mosek::fusion::Variable > _5799) { return mosek::fusion::p_Expr::stack(_5796,_5797,_5798,_5799); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5796,double _5797,double _5798,monty::rc_ptr< ::mosek::fusion::Variable > _5799){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5797),::mosek::fusion::p_Expr::constTerm(_5798),_5799->asExpr()}),_5796); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5800,    monty::rc_ptr< ::mosek::fusion::Variable > _5801,    monty::rc_ptr< ::mosek::fusion::Expression > _5802) { return mosek::fusion::p_Expr::stack(_5800,_5801,_5802); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5800,monty::rc_ptr< ::mosek::fusion::Variable > _5801,monty::rc_ptr< ::mosek::fusion::Expression > _5802){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5801->asExpr(),_5802}),_5800); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5803,    monty::rc_ptr< ::mosek::fusion::Variable > _5804,    monty::rc_ptr< ::mosek::fusion::Variable > _5805) { return mosek::fusion::p_Expr::stack(_5803,_5804,_5805); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5803,monty::rc_ptr< ::mosek::fusion::Variable > _5804,monty::rc_ptr< ::mosek::fusion::Variable > _5805){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5804->asExpr(),_5805->asExpr()}),_5803); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5806,    monty::rc_ptr< ::mosek::fusion::Variable > _5807,    double _5808) { return mosek::fusion::p_Expr::stack(_5806,_5807,_5808); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5806,monty::rc_ptr< ::mosek::fusion::Variable > _5807,double _5808){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5807->asExpr(),::mosek::fusion::p_Expr::constTerm(_5808)}),_5806); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5809,    double _5810,    monty::rc_ptr< ::mosek::fusion::Expression > _5811) { return mosek::fusion::p_Expr::stack(_5809,_5810,_5811); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5809,double _5810,monty::rc_ptr< ::mosek::fusion::Expression > _5811){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5810),_5811}),_5809); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5812,    double _5813,    monty::rc_ptr< ::mosek::fusion::Variable > _5814) { return mosek::fusion::p_Expr::stack(_5812,_5813,_5814); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5812,double _5813,monty::rc_ptr< ::mosek::fusion::Variable > _5814){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::mosek::fusion::p_Expr::constTerm(_5813),_5814->asExpr()}),_5812); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5815,    monty::rc_ptr< ::mosek::fusion::Expression > _5816,    monty::rc_ptr< ::mosek::fusion::Variable > _5817) { return mosek::fusion::p_Expr::stack(_5815,_5816,_5817); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5815,monty::rc_ptr< ::mosek::fusion::Expression > _5816,monty::rc_ptr< ::mosek::fusion::Variable > _5817){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5816,_5817->asExpr()}),_5815); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5818,    monty::rc_ptr< ::mosek::fusion::Expression > _5819,    double _5820) { return mosek::fusion::p_Expr::stack(_5818,_5819,_5820); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5818,monty::rc_ptr< ::mosek::fusion::Expression > _5819,double _5820){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5819,::mosek::fusion::p_Expr::constTerm(_5820)}),_5818); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5821,    monty::rc_ptr< ::mosek::fusion::Expression > _5822,    monty::rc_ptr< ::mosek::fusion::Expression > _5823) { return mosek::fusion::p_Expr::stack(_5821,_5822,_5823); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5821,monty::rc_ptr< ::mosek::fusion::Expression > _5822,monty::rc_ptr< ::mosek::fusion::Expression > _5823){ return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{_5822,_5823}),_5821); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _5824,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5825) { return mosek::fusion::p_Expr::stack(_5824,_5825); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack( int _5824,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5825){ return ::mosek::fusion::p_Expr::stack_(_5825,_5824); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5826,int _5827){ if (((int)((_5826)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1); }else {}if (((int)((_5826)->size(0)) == (int)1)){ return ((*_5826)((int)0)); }else {}int _5828 = (_5827 + (int)1); int _9117 = (int)0; int _9118 = (int)((_5826)->size(0)); for (int _5829 = _9117;_5829<_9118;++_5829){ if ((mosek::fusion::p_Set::_get_impl(((*_5826)(_5829))->shape())->nd > _5828)){ (_5828 = mosek::fusion::p_Set::_get_impl(((*_5826)(_5829))->shape())->nd); }else {}}std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > > _5830 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 >(monty::shape((int)((_5826)->size(0))))); monty::rc_ptr< ::mosek::fusion::Expression > _5831 = ((*_5826)((int)0)); std::shared_ptr< monty::ndarray< int,1 > > _5832 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_5828))); bool _5833 = true; bool _5834 = false; monty::rc_ptr< ::mosek::fusion::Expression > _5835 = nullptr; int _5836 = (int)0; std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5837 = nullptr; if ((mosek::fusion::p_Set::_get_impl(_5831->shape())->nd < _5827)){ throw ::mosek::fusion::LengthError(std::string ("Invalid stack dimension"));}else {}int _9119 = (int)0; int _9120 = (int)((_5830)->size(0)); for (int _5838 = _9119;_5838<_9120;++_5838){ monty::rc_ptr< ::mosek::fusion::Expression > _5839 = ((*_5826)(_5838)); int _9121 = (int)0; int _9122 = mosek::fusion::p_Set::_get_impl(_5839->shape())->nd; for (int _5840 = _9121;_5840<_9122;++_5840){ if (((_5827 != _5840) && (_5831->shape()->dim(_5840) != _5839->shape()->dim(_5840)))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));}else {}}(((*_5832)(_5827)) = (((*_5832)(_5827)) + _5839->shape()->dim(_5827))); (((*_5830)(_5838)) = ((*_5826)(_5838))->eval()); (_5836 = (_5836 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5838)))->x)->size(0)))); (_5833 = (_5833 && ! mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5838)))->inst)); (_5834 = (_5834 || mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5838)))->bfix)); }std::shared_ptr< monty::ndarray< long long,1 > > _5841 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5830)->size(0))))); { (_5837 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_5836)))); int _5842 = (int)0; int _9123 = (int)0; int _9124 = (int)((_5830)->size(0)); for (int _5843 = _9123;_5843<_9124;++_5843){ int _9125 = (int)0; int _9126 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5843)))->x)->size(0)); for (int _5844 = _9125;_5844<_9126;++_5844){ (((*_5837)(_5842)) = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5843)))->x)(_5844))); ( ++ _5842 ); }}int _9127 = (int)1; int _9128 = (int)((_5830)->size(0)); for (int _5845 = _9127;_5845<_9128;++_5845){ (((*_5841)(_5845)) = ((*_5841)((_5845 - (int)1)))); int _9129 = (int)0; int _9130 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)((_5845 - (int)1))))->x)->size(0)); for (int _5846 = _9129;_5846<_9130;++_5846){ (((*_5841)(_5845)) = (((*_5841)(_5845)) + ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)((_5845 - (int)1))))->x)(_5846))->size())); }}}int _9131 = (int)0; int _9132 = _5828; for (int _5847 = _9131;_5847<_9132;++_5847){ if ((_5847 != _5827)){ (((*_5832)(_5847)) = _5831->shape()->dim(_5847)); }else {}}monty::rc_ptr< ::mosek::fusion::NDSet > _5848 = ::mosek::fusion::p_NDSet::_new_NDSet(_5832); long long _5849 = mosek::fusion::p_FlatExpr::_get_impl(((*_5830)((int)0)))->nnz; int _5850 = ((int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)((int)0)))->ptrb)->size(0)) - (int)1); int _9133 = (int)1; int _9134 = (int)((_5826)->size(0)); for (int _5851 = _9133;_5851<_9134;++_5851){ (_5849 = (_5849 + mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5851)))->nnz)); (_5850 = ((_5850 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5851)))->ptrb)->size(0))) - (int)1)); }std::shared_ptr< monty::ndarray< double,1 > > _5852 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (! _5834)) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5850)))); })(); if ((_5827 == (int)0)){ std::shared_ptr< monty::ndarray< long long,1 > > _5853 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5850 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5854 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5849))); std::shared_ptr< monty::ndarray< double,1 > > _5855 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5849))); std::shared_ptr< monty::ndarray< long long,1 > > _5856 = ([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( _5833) return (nullptr); else return (std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5850)))); })(); long long _5857 = (long long)0; long long _5858 = (long long)0; long long _5859 = (long long)0; int _9135 = (int)0; int _9136 = (int)((_5830)->size(0)); for (int _5860 = _9135;_5860<_9136;++_5860){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->cof,(long long)0,_5855,_5858,mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->nnz); if (mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->bfix){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->bfix,(long long)0,_5852,_5857,(long long)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->bfix)->size(0))); }else {}int _9137 = (int)0; int _9138 = ((int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->ptrb)->size(0)) - (int)1); for (int _5861 = _9137;_5861<_9138;++_5861){ (((*_5853)(((_5857 + _5861) + (int)1))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->ptrb)((_5861 + (int)1))) + _5858)); }long long _9139 = (long long)0; long long _9140 = mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->nnz; for (long long _5862 = _9139;_5862<_9140;++_5862){ (((*_5854)((_5858 + _5862))) = (((*_5841)(_5860)) + ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->subj)(_5862)))); }if ((! _5833)){ if (! mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->inst){ int _9141 = (int)0; int _9142 = ((int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->ptrb)->size(0)) - (int)1); for (int _5863 = _9141;_5863<_9142;++_5863){ (((*_5856)((_5857 + _5863))) = (_5859 + _5863)); }(_5857 = ((_5857 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->ptrb)->size(0))) - (int)1)); }else { int _9143 = (int)0; int _9144 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->inst)->size(0)); for (int _5864 = _9143;_5864<_9144;++_5864){ (((*_5856)((_5857 + _5864))) = (_5859 + ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->inst)(_5864)))); }(_5857 = (_5857 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->inst)->size(0)))); }}else { (_5857 = ((_5857 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->ptrb)->size(0))) - (int)1)); }(_5859 = (_5859 + mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->shape)->size)); (_5858 = (_5858 + mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5860)))->nnz)); }(_5835 = ::mosek::fusion::p_Expr::_new_Expr(_5853,_5837,_5854,_5855,_5852,::mosek::fusion::Set::t(_5848),_5856)); }else { std::shared_ptr< monty::ndarray< long long,1 > > _5865 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5850 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5866 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5849))); std::shared_ptr< monty::ndarray< double,1 > > _5867 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5849))); std::shared_ptr< monty::ndarray< long long,1 > > _5868 = nullptr; long long _5869 = (long long)0; long long _5870 = (long long)0; long long _5871 = (long long)0; int _5872 = (int)1; int _9145 = (int)0; int _9146 = _5827; for (int _5873 = _9145;_5873<_9146;++_5873){ (_5872 = (_5872 * ((*_5832)(_5873)))); }int _5874 = (int)1; int _9147 = (_5827 + (int)1); int _9148 = (int)((_5832)->size(0)); for (int _5875 = _9147;_5875<_9148;++_5875){ (_5874 = (_5874 * ((*_5832)(_5875)))); }int _5876 = _5874; (_5874 = (_5874 * ((*_5832)(_5827)))); std::shared_ptr< monty::ndarray< int,1 > > _5877 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9149; for (int _5878=(int)0, _9150=(int)((_5830)->size(0)); _5878 < _9150;++_5878)_9149.push_back((_5876 * mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5878)))->shape->dim(_5827))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9149.size()),_9149.begin(),_9149.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _5879 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5830)->size(0))))); if (_5833){ int _9151 = (int)0; int _9152 = _5872; for (int _5880 = _9151;_5880<_9152;++_5880){ int _9153 = (int)0; int _9154 = (int)((_5830)->size(0)); for (int _5881 = _9153;_5881<_9154;++_5881){ long long _5882 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5881)))->ptrb)((((*_5879)(_5881)) + ((*_5877)(_5881))))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5881)))->ptrb)(((*_5879)(_5881))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5881)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5881)))->ptrb)(((*_5879)(_5881)))),_5867,_5870,_5882); if (mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5881)))->bfix){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5881)))->bfix,((*_5879)(_5881)),_5852,_5869,(long long)((*_5877)(_5881))); }else {}long long _5883 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5881)))->ptrb)(((*_5879)(_5881)))); long long _9155 = (long long)0; long long _9156 = _5882; for (long long _5884 = _9155;_5884<_9156;++_5884){ (((*_5866)((_5870 + _5884))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5881)))->subj)((_5883 + _5884))) + ((*_5841)(_5881)))); }int _9157 = (int)0; int _9158 = ((*_5877)(_5881)); for (int _5885 = _9157;_5885<_9158;++_5885){ (((*_5865)(((_5869 + _5885) + (int)1))) = ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5881)))->ptrb)(((((*_5879)(_5881)) + _5885) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5881)))->ptrb)((((*_5879)(_5881)) + _5885)))) + ((*_5865)((_5869 + _5885))))); }(_5870 = (_5870 + _5882)); (_5869 = (_5869 + ((*_5877)(_5881)))); (_5871 = (_5871 + mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5881)))->shape)->size)); (((*_5879)(_5881)) = (((*_5879)(_5881)) + ((*_5877)(_5881)))); }}(_5835 = ::mosek::fusion::p_Expr::_new_Expr(_5865,_5837,_5866,_5867,_5852,::mosek::fusion::Set::t(_5848),_5868)); }else { std::shared_ptr< monty::ndarray< long long,1 > > _5886 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5830)->size(0))))); (_5868 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5850)))); int _9159 = (int)0; int _9160 = _5872; for (int _5887 = _9159;_5887<_9160;++_5887){ int _9161 = (int)0; int _9162 = (int)((_5830)->size(0)); for (int _5888 = _9161;_5888<_9162;++_5888){ if ((! mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->inst || ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->shape)->size == (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->inst)->size(0))) && ((int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->inst)->size(0)) > (int)0)))){ long long _5889 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->ptrb)((((*_5879)(_5888)) + ((*_5877)(_5888))))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->ptrb)(((*_5879)(_5888))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->ptrb)(((*_5879)(_5888)))),_5867,_5870,_5889); if (mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->bfix){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->bfix,((*_5879)(_5888)),_5852,_5869,(long long)((*_5877)(_5888))); }else {}long long _5890 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->ptrb)(((*_5879)(_5888)))); long long _9163 = (long long)0; long long _9164 = _5889; for (long long _5891 = _9163;_5891<_9164;++_5891){ (((*_5866)((_5870 + _5891))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->subj)((_5890 + _5891))) + ((*_5841)(_5888)))); }int _9165 = (int)0; int _9166 = ((*_5877)(_5888)); for (int _5892 = _9165;_5892<_9166;++_5892){ (((*_5865)((_5869 + _5892))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->ptrb)((((*_5879)(_5888)) + _5892))) + ((*_5865)(_5869)))); }int _9167 = (int)0; int _9168 = ((*_5877)(_5888)); for (int _5893 = _9167;_5893<_9168;++_5893){ (((*_5868)((_5869 + _5893))) = (_5871 + _5893)); }(_5870 = (_5870 + _5889)); (_5869 = (_5869 + ((*_5877)(_5888)))); (_5871 = (_5871 + mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->shape)->size)); (((*_5879)(_5888)) = (((*_5879)(_5888)) + ((*_5877)(_5888)))); }else if (((int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->inst)->size(0)) > (int)0)){ long long _5894 = (long long)0; { long long _5895 = (long long)0; while ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->inst)((((*_5879)(_5888)) + _5895))) < (((*_5886)(_5888)) + ((*_5877)(_5888))))) { ( ++ _5895 ); }(_5894 = _5895); }long long _5896 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->ptrb)((((*_5879)(_5888)) + _5894))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->ptrb)(((*_5879)(_5888))))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->ptrb)(((*_5879)(_5888)))),_5867,_5870,_5896); if (mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->bfix){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->bfix,((*_5879)(_5888)),_5852,_5869,_5894); }else {}long long _5897 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->ptrb)(((*_5879)(_5888)))); long long _9169 = (long long)0; long long _9170 = _5896; for (long long _5898 = _9169;_5898<_9170;++_5898){ (((*_5866)((_5870 + _5898))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->subj)((_5897 + _5898))) + ((*_5841)(_5888)))); }long long _9171 = (long long)0; long long _9172 = _5894; for (long long _5899 = _9171;_5899<_9172;++_5899){ (((*_5865)(((_5869 + _5899) + (int)1))) = ((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->ptrb)(((((*_5879)(_5888)) + _5899) + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->ptrb)((((*_5879)(_5888)) + _5899)))) + ((*_5865)((_5869 + _5899))))); }long long _9173 = (long long)0; long long _9174 = _5894; for (long long _5900 = _9173;_5900<_9174;++_5900){ (((*_5868)((_5869 + _5900))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->inst)(_5900)) + _5871)); }(_5870 += _5896); (_5869 += _5894); (_5871 += mosek::fusion::p_Set::_get_impl(mosek::fusion::p_FlatExpr::_get_impl(((*_5830)(_5888)))->shape)->size); (((*_5879)(_5888)) += _5894); (((*_5886)(_5888)) += ((*_5877)(_5888))); }else { }}}(_5835 = ::mosek::fusion::p_Expr::_new_Expr(_5865,_5837,_5866,_5867,_5852,::mosek::fusion::Set::t(_5848),_5868)); }}return _5835; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Expression > _5901,    int _5902,    int _5903) { return mosek::fusion::p_Expr::repeat(_5901,_5902,_5903); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat( monty::rc_ptr< ::mosek::fusion::Expression > _5901,int _5902,int _5903){ if ((_5902 <= (int)0)){ throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));}else {}return ::mosek::fusion::p_Expr::stack_(([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Expression > > _9175; for (int _5904=(int)0, _9176=_5902; _5904 < _9176;++_5904)_9175.push_back(_5901); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_9175.size()),_9175.begin(),_9175.end())); })(),_5903); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5905) { return mosek::fusion::p_Expr::add(_5905); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5905){ if (((int)((_5905)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1); }else {}monty::rc_ptr< ::mosek::fusion::Expression > _5906 = nullptr; if (! _5905){ throw monty::NullPointerException(std::string ("Argument exps may not be null"));}else {}if ((((int)((_5905)->size(0)) > (int)0) && ! ((*_5905)((int)0)))){ throw monty::NullPointerException(std::string ("Argument exps may not contain null"));}else {}long long _5907 = mosek::fusion::p_Set::_get_impl(((*_5905)((int)0))->shape())->size; monty::rc_ptr< ::mosek::fusion::Set > _5908 = ([&]() -> monty::rc_ptr< ::mosek::fusion::Set > { if ( ((*_5905)((int)0))->shape()) return (((*_5905)((int)0))->shape()); else return (::mosek::fusion::p_Set::make((int)_5907)); })(); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > > _5909 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::FlatExpr >,1 >(monty::shape((int)((_5905)->size(0))))); long long _5910 = (long long)0; bool _5911 = true; bool _5912 = false; std::shared_ptr< monty::ndarray< long long,1 > > _5913 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5905)->size(0))))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5914; int _5915 = (int)0; int _9177 = (int)0; int _9178 = (int)((_5905)->size(0)); for (int _5916 = _9177;_5916<_9178;++_5916){ if (! ((*_5905)(_5916))){ throw monty::NullPointerException(std::string ("Argument exps may not contain null"));}else {}(((*_5909)(_5916)) = ((*_5905)(_5916))->eval()); if ((! mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5916)))->shape->compare(_5908))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}if (mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5916)))->bfix){ (_5912 = true); }else {}(_5910 = (_5910 + mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5916)))->nnz)); (_5911 = (_5911 && ! mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5916)))->inst)); (_5915 = (_5915 + (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5916)))->x)->size(0)))); }(_5914 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_5915)))); { int _5917 = (int)0; int _9179 = (int)0; int _9180 = (int)((_5909)->size(0)); for (int _5918 = _9179;_5918<_9180;++_5918){ int _9181 = (int)0; int _9182 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5918)))->x)->size(0)); for (int _5919 = _9181;_5919<_9182;++_5919){ (((*_5914)(_5917)) = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5918)))->x)(_5919))); ( ++ _5917 ); }}}int _9183 = (int)1; int _9184 = (int)((_5905)->size(0)); for (int _5920 = _9183;_5920<_9184;++_5920){ (((*_5913)(_5920)) = ((*_5913)((_5920 - (int)1)))); int _9185 = (int)0; int _9186 = (int)((mosek::fusion::p_FlatExpr::_get_impl(((*_5909)((_5920 - (int)1))))->x)->size(0)); for (int _5921 = _9185;_5921<_9186;++_5921){ (((*_5913)(_5920)) = (((*_5913)(_5920)) + ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)((_5920 - (int)1))))->x)(_5921))->size())); }}if (_5911){ std::shared_ptr< monty::ndarray< long long,1 > > _5922 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5907 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _5923 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5910))); std::shared_ptr< monty::ndarray< double,1 > > _5924 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5910))); std::shared_ptr< monty::ndarray< double,1 > > _5925 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _5926 = nullptr; long long _9187 = (long long)0; long long _9188 = _5907; for (long long _5927 = _9187;_5927<_9188;++_5927){ (((*_5922)((_5927 + (int)1))) = ((*_5922)(_5927))); int _9189 = (int)0; int _9190 = (int)((_5909)->size(0)); for (int _5928 = _9189;_5928<_9190;++_5928){ long long _5929 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5928)))->ptrb)((_5927 + (int)1))) - ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5928)))->ptrb)(_5927))); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5928)))->cof,((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5928)))->ptrb)(_5927)),_5924,((*_5922)((_5927 + (int)1))),_5929); long long _9191 = (long long)0; long long _9192 = _5929; for (long long _5930 = _9191;_5930<_9192;++_5930){ (((*_5923)((((*_5922)((_5927 + (int)1))) + _5930))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5928)))->subj)((((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5928)))->ptrb)(_5927)) + _5930))) + ((*_5913)(_5928)))); }(((*_5922)((_5927 + (int)1))) += _5929); }}if (_5912){ (_5925 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5907)))); long long _9193 = (long long)0; long long _9194 = _5907; for (long long _5931 = _9193;_5931<_9194;++_5931){ int _9195 = (int)0; int _9196 = (int)((_5909)->size(0)); for (int _5932 = _9195;_5932<_9196;++_5932){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5932)))->bfix){ (((*_5925)(_5931)) += ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5932)))->bfix)(_5931))); }else {}}}}else {}(_5906 = ::mosek::fusion::p_Expr::_new_Expr(_5922,_5914,_5923,_5924,_5925,_5908,_5926)); }else { std::shared_ptr< monty::ndarray< int,1 > > _5933 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_5909)->size(0))))); std::shared_ptr< monty::ndarray< int,1 > > _5934 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_5909)->size(0))))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _5935 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 >(monty::shape((int)((_5909)->size(0))))); int _9197 = (int)0; int _9198 = (int)((_5909)->size(0)); for (int _5936 = _9197;_5936<_9198;++_5936){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5936)))->inst){ (((*_5935)(_5936)) = mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5936)))->inst); }else { (((*_5935)(_5936)) = ::mosek::fusion::Utils::Tools::range(((long long)((mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5936)))->ptrb)->size(0)) - (long long)1))); }(((*_5934)(_5936)) = (int)((((*_5935)(_5936)))->size(0))); }int _5937 = (int)0; { std::shared_ptr< monty::ndarray< int,1 > > _5938 = ::mosek::fusion::Utils::Tools::range((int)((_5909)->size(0))); int _5939 = (int)((_5909)->size(0)); while ((_5939 > (int)0)) { long long _5940 = ((*((*_5935)(((*_5938)((int)0)))))(((*_5933)(((*_5938)((int)0)))))); int _9199 = (int)1; int _9200 = _5939; for (int _5941 = _9199;_5941<_9200;++_5941){ if ((((*((*_5935)(((*_5938)(_5941)))))(((*_5933)(((*_5938)(_5941)))))) < _5940)){ (_5940 = ((*((*_5935)(((*_5938)(_5941)))))(((*_5933)(((*_5938)(_5941))))))); }else {}}( ++ _5937 ); int _9201 = (int)0; int _9202 = _5939; for (int _5942 = _9201;_5942<_9202;++_5942){ if ((((*((*_5935)(((*_5938)(_5942)))))(((*_5933)(((*_5938)(_5942)))))) == _5940)){ ( ++ ((*_5933)(((*_5938)(_5942)))) ); }else {}}{ int _5943 = (int)0; for (;(_5943 < _5939);){ if ((((*_5933)(((*_5938)(_5943)))) >= ((*_5934)(((*_5938)(_5943)))))){ int _5944 = ((*_5938)(_5943)); (((*_5938)(_5943)) = ((*_5938)((_5939 - (int)1)))); (((*_5938)((_5939 - (int)1))) = _5944); ( -- _5939 ); }else { ( ++ _5943 ); }}}}}std::shared_ptr< monty::ndarray< long long,1 > > _5945 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5937))); std::shared_ptr< monty::ndarray< long long,1 > > _5946 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_5937 + (int)1)))); std::shared_ptr< monty::ndarray< double,1 > > _5947 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5910))); std::shared_ptr< monty::ndarray< long long,1 > > _5948 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5910))); std::shared_ptr< monty::ndarray< double,1 > > _5949 = nullptr; { int _9203 = (int)0; int _9204 = (int)((_5933)->size(0)); for (int _5950 = _9203;_5950<_9204;++_5950){ (((*_5933)(_5950)) = (int)0); }int _5951 = (int)0; std::shared_ptr< monty::ndarray< int,1 > > _5952 = ::mosek::fusion::Utils::Tools::range((int)((_5909)->size(0))); int _5953 = (int)((_5909)->size(0)); while ((_5953 > (int)0)) { long long _5954 = ((*((*_5935)(((*_5952)((int)0)))))(((*_5933)(((*_5952)((int)0)))))); int _9205 = (int)1; int _9206 = _5953; for (int _5955 = _9205;_5955<_9206;++_5955){ if ((((*((*_5935)(((*_5952)(_5955)))))(((*_5933)(((*_5952)(_5955)))))) < _5954)){ (_5954 = ((*((*_5935)(((*_5952)(_5955)))))(((*_5933)(((*_5952)(_5955))))))); }else {}}(((*_5945)(_5951)) = _5954); (((*_5946)((_5951 + (int)1))) = ((*_5946)(_5951))); int _9207 = (int)0; int _9208 = _5953; for (int _5956 = _9207;_5956<_9208;++_5956){ if ((((*((*_5935)(((*_5952)(_5956)))))(((*_5933)(((*_5952)(_5956)))))) == _5954)){ int _5957 = ((*_5952)(_5956)); long long _5958 = ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5957)))->ptrb)(((*_5933)(_5957)))); long long _5959 = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5957)))->ptrb)((((*_5933)(_5957)) + (int)1))) - _5958); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5957)))->cof,_5958,_5947,((*_5946)((_5951 + (int)1))),_5959); long long _9209 = (long long)0; long long _9210 = _5959; for (long long _5960 = _9209;_5960<_9210;++_5960){ (((*_5948)((((*_5946)((_5951 + (int)1))) + _5960))) = (((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5957)))->subj)((_5958 + _5960))) + ((*_5913)(_5957)))); }(((*_5946)((_5951 + (int)1))) = (((*_5946)((_5951 + (int)1))) + _5959)); ( ++ ((*_5933)(_5957)) ); }else {}}{ int _5961 = (int)0; for (;(_5961 < _5953);){ if ((((*_5933)(((*_5952)(_5961)))) >= ((*_5934)(((*_5952)(_5961)))))){ int _5962 = ((*_5952)(_5961)); (((*_5952)(_5961)) = ((*_5952)((_5953 - (int)1)))); (((*_5952)((_5953 - (int)1))) = _5962); ( -- _5953 ); }else { ( ++ _5961 ); }}}( ++ _5951 ); }}if (_5912){ int _9211 = (int)0; int _9212 = (int)((_5933)->size(0)); for (int _5963 = _9211;_5963<_9212;++_5963){ (((*_5933)(_5963)) = (int)0); }int _5964 = (int)0; int _5965 = (int)0; int _9213 = (int)0; int _9214 = (int)((_5909)->size(0)); for (int _5966 = _9213;_5966<_9214;++_5966){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5966)))->bfix){ ( ++ _5965 ); }else {}}std::shared_ptr< monty::ndarray< long long,1 > > _5967 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5965))); { int _5968 = (int)0; int _5969 = (int)0; for (;(_5969 < _5965);( ++ _5968 )){ if (mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(_5968)))->bfix){ (((*_5967)(_5969)) = _5968); ( ++ _5969 ); }else {}}}(_5949 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_5937)))); while ((_5965 > (int)0)) { long long _5970 = ((*((*_5935)(((*_5967)((int)0)))))(((*_5933)(((*_5967)((int)0)))))); int _9215 = (int)1; int _9216 = _5965; for (int _5971 = _9215;_5971<_9216;++_5971){ if ((((*((*_5935)(((*_5967)(_5971)))))(((*_5933)(((*_5967)(_5971)))))) < _5970)){ (_5970 = ((*((*_5935)(((*_5967)(_5971)))))(((*_5933)(((*_5967)(_5971))))))); }else {}}int _9217 = (int)0; int _9218 = _5965; for (int _5972 = _9217;_5972<_9218;++_5972){ if ((((*((*_5935)(((*_5967)(_5972)))))(((*_5933)(((*_5967)(_5972)))))) == _5970)){ (((*_5949)(_5964)) = (((*_5949)(_5964)) + ((*mosek::fusion::p_FlatExpr::_get_impl(((*_5909)(((*_5967)(_5972)))))->bfix)(((*_5933)(((*_5967)(_5972)))))))); ( ++ ((*_5933)(((*_5967)(_5972)))) ); }else {}}{ int _5973 = (int)0; for (;(_5973 < _5965);){ if ((((*_5933)(((*_5967)(_5973)))) >= ((*_5934)(((*_5967)(_5973)))))){ long long _5974 = ((*_5967)(_5973)); (((*_5967)(_5973)) = ((*_5967)((_5965 - (int)1)))); (((*_5967)((_5965 - (int)1))) = _5974); ( -- _5965 ); }else { ( ++ _5973 ); }}}( ++ _5964 ); }}else {}if ((_5937 == mosek::fusion::p_Set::_get_impl(_5908)->size)){ (_5945 = nullptr); }else {}(_5906 = ::mosek::fusion::p_Expr::_new_Expr(_5946,_5914,_5948,_5947,_5949,_5908,_5945)); }return _5906; }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5975) { return mosek::fusion::p_Expr::add(_5975); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _5975){ if (! _5975){ throw monty::NullPointerException(std::string ("Argument vs may not be null"));}else {}if (((int)((_5975)->size(0)) == (int)0)){ return ::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(int)0}),nullptr,std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1); }else {}if ((((int)((_5975)->size(0)) > (int)0) && ! ((*_5975)((int)0)))){ throw monty::NullPointerException(std::string ("Argument vs may contain null"));}else {}monty::rc_ptr< ::mosek::fusion::Set > _5976 = ((*_5975)((int)0))->shape(); int _5977 = mosek::fusion::p_Set::_get_impl(_5976)->nd; long long _5978 = mosek::fusion::p_Set::_get_impl(_5976)->size; long long _5979 = mosek::fusion::p_Set::_get_impl(_5976)->size; int _9219 = (int)1; int _9220 = (int)((_5975)->size(0)); for (int _5980 = _9219;_5980<_9220;++_5980){ if (! ((*_5975)(_5980))){ throw monty::NullPointerException(std::string ("Argument vs may not contain null"));}else if ((! _5976->compare(((*_5975)(_5980))->shape()))){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));}else {}}long long _5981 = (_5978 * (int)((_5975)->size(0))); std::shared_ptr< monty::ndarray< long long,1 > > _5982 = ::mosek::fusion::Utils::Tools::range((long long)0,(_5981 + (int)((_5975)->size(0))),(long long)((int)((_5975)->size(0)))); std::shared_ptr< monty::ndarray< long long,1 > > _5983 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9221; for (long long _5984=(int)0, _9222=_5978; _5984 < _9222;++_5984) for (int _5985=(int)0, _9223=(int)((_5975)->size(0)); _5985 < _9223;++_5985)_9221.push_back((_5984 + (_5985 * _5978))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9221.size()),_9221.begin(),_9221.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _5986 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9224; for (long long _5987=(int)0, _9225=_5981; _5987 < _9225;++_5987)_9224.push_back((int)1); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9224.size()),_9224.begin(),_9224.end())); })(); return ::mosek::fusion::p_Expr::_new_Expr(_5982,_5975,_5983,_5986,nullptr,_5976,nullptr,(int)1); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_( monty::rc_ptr< ::mosek::fusion::Expression > _5988,double _5989,monty::rc_ptr< ::mosek::fusion::Expression > _5990,double _5991){ if ((_5988->getModel() && (_5990->getModel() && (_5988->getModel() != _5990->getModel())))){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5992 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); std::string _5993 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(_5988->getModel().get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(_5988->getModel().get())->getName()); else return (std::string ("?")); })(); std::string _5994 = ([&]() -> std::string { if ( ((int)((mosek::fusion::p_Model::_get_impl(_5990->getModel().get())->getName()).size()) > (int)0)) return (mosek::fusion::p_Model::_get_impl(_5990->getModel().get())->getName()); else return (std::string ("?")); })(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_5992.get())->a(std::string ("Operands belong to different models: '")).get())->a(_5993).get())->a(std::string ("' and '")).get())->a(_5994).get())->a(std::string ("'")); throw ::mosek::fusion::ModelError(mosek::fusion::Utils::p_StringBuffer::_get_impl(_5992.get())->toString());}else {}{ int _5995 = ([&]() -> int { if ( (mosek::fusion::p_Set::_get_impl(_5988->shape())->nd >= mosek::fusion::p_Set::_get_impl(_5990->shape())->nd)) return (mosek::fusion::p_Set::_get_impl(_5988->shape())->nd); else return (mosek::fusion::p_Set::_get_impl(_5990->shape())->nd); })(); int _9226 = (int)0; int _9227 = _5995; for (int _5996 = _9226;_5996<_9227;++_5996){ if ((_5988->shape()->dim(_5996) != _5990->shape()->dim(_5996))){ throw ::mosek::fusion::DimensionError(std::string ("Dimensions mismatch"));}else {}}}monty::rc_ptr< ::mosek::fusion::FlatExpr > _5997 = _5988->eval(); monty::rc_ptr< ::mosek::fusion::FlatExpr > _5998 = _5990->eval(); bool _5999 = (mosek::fusion::p_FlatExpr::_get_impl(_5997)->inst && mosek::fusion::p_FlatExpr::_get_impl(_5998)->inst); monty::rc_ptr< ::mosek::fusion::Set > _6000 = mosek::fusion::p_FlatExpr::_get_impl(_5997)->shape; std::shared_ptr< monty::ndarray< long long,1 > > _6001 = mosek::fusion::p_FlatExpr::_get_impl(_5997)->inst; std::shared_ptr< monty::ndarray< long long,1 > > _6002 = mosek::fusion::p_FlatExpr::_get_impl(_5998)->inst; if (! _6001){ (_6001 = ::mosek::fusion::Utils::Tools::range(mosek::fusion::p_Set::_get_impl(_6000)->size)); }else {}if (! _6002){ (_6002 = ::mosek::fusion::Utils::Tools::range(mosek::fusion::p_Set::_get_impl(_6000)->size)); }else {}int _6003 = (int)0; { int _6004 = (int)0; int _6005 = (int)0; while (((_6004 < (int)((_6001)->size(0))) && (_6005 < (int)((_6002)->size(0))))) { if ((((*_6001)(_6004)) < ((*_6002)(_6005)))){ ( ++ _6004 ); ( ++ _6003 ); }else if ((((*_6001)(_6004)) > ((*_6002)(_6005)))){ ( ++ _6005 ); ( ++ _6003 ); }else { ( ++ _6004 ); ( ++ _6005 ); ( ++ _6003 ); }}(_6003 = ((_6003 + (int)((_6001)->size(0))) - _6004)); (_6003 = ((_6003 + (int)((_6002)->size(0))) - _6005)); }std::shared_ptr< monty::ndarray< long long,1 > > _6006 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6003))); long long _6007 = (long long)0; int _9228 = (int)0; int _9229 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_5997)->x)->size(0)); for (int _6008 = _9228;_6008<_9229;++_6008){ (_6007 = (_6007 + ((*mosek::fusion::p_FlatExpr::_get_impl(_5997)->x)(_6008))->size())); }std::shared_ptr< monty::ndarray< long long,1 > > _6009 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6003 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6010 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(((int)((mosek::fusion::p_FlatExpr::_get_impl(_5997)->subj)->size(0)) + (int)((mosek::fusion::p_FlatExpr::_get_impl(_5998)->subj)->size(0)))))); std::shared_ptr< monty::ndarray< double,1 > > _6011 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(((int)((mosek::fusion::p_FlatExpr::_get_impl(_5997)->subj)->size(0)) + (int)((mosek::fusion::p_FlatExpr::_get_impl(_5998)->subj)->size(0)))))); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6012 = ::mosek::fusion::p_Expr::varstack(mosek::fusion::p_FlatExpr::_get_impl(_5997)->x,mosek::fusion::p_FlatExpr::_get_impl(_5998)->x); std::shared_ptr< monty::ndarray< double,1 > > _6013 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( (! mosek::fusion::p_FlatExpr::_get_impl(_5997)->bfix && ! mosek::fusion::p_FlatExpr::_get_impl(_5998)->bfix)) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6003)))); })(); { std::shared_ptr< monty::ndarray< long long,1 > > _6014 = mosek::fusion::p_FlatExpr::_get_impl(_5997)->ptrb; std::shared_ptr< monty::ndarray< long long,1 > > _6015 = mosek::fusion::p_FlatExpr::_get_impl(_5997)->subj; std::shared_ptr< monty::ndarray< double,1 > > _6016 = mosek::fusion::p_FlatExpr::_get_impl(_5997)->cof; std::shared_ptr< monty::ndarray< double,1 > > _6017 = mosek::fusion::p_FlatExpr::_get_impl(_5997)->bfix; std::shared_ptr< monty::ndarray< long long,1 > > _6018 = mosek::fusion::p_FlatExpr::_get_impl(_5998)->ptrb; std::shared_ptr< monty::ndarray< long long,1 > > _6019 = mosek::fusion::p_FlatExpr::_get_impl(_5998)->subj; std::shared_ptr< monty::ndarray< double,1 > > _6020 = mosek::fusion::p_FlatExpr::_get_impl(_5998)->cof; std::shared_ptr< monty::ndarray< double,1 > > _6021 = mosek::fusion::p_FlatExpr::_get_impl(_5998)->bfix; { int _6022 = (int)0; int _6023 = (int)0; int _6024 = (int)0; long long _6025 = (long long)0; while (((_6022 < (int)((_6001)->size(0))) && (_6023 < (int)((_6002)->size(0))))) { if ((((*_6001)(_6022)) < ((*_6002)(_6023)))){ long long _6026 = (((*_6014)((_6022 + (int)1))) - ((*_6014)(_6022))); ::mosek::fusion::Utils::Tools::arraycopy(_6015,((*_6014)(_6022)),_6010,_6025,_6026); long long _9230 = (long long)0; long long _9231 = _6026; for (long long _6027 = _9230;_6027<_9231;++_6027){ (((*_6011)((_6025 + _6027))) = (((*_6016)((((*_6014)(_6022)) + _6027))) * _5989)); }(_6025 = (_6025 + _6026)); (((*_6006)(_6024)) = ((*_6001)(_6022))); (((*_6009)((_6024 + (int)1))) = (((*_6009)(_6024)) + _6026)); ( ++ _6022 ); ( ++ _6024 ); }else if ((((*_6001)(_6022)) > ((*_6002)(_6023)))){ long long _6028 = (((*_6018)((_6023 + (int)1))) - ((*_6018)(_6023))); long long _9232 = (long long)0; long long _9233 = _6028; for (long long _6029 = _9232;_6029<_9233;++_6029){ (((*_6010)((_6025 + _6029))) = (((*_6019)((((*_6018)(_6023)) + _6029))) + _6007)); }long long _9234 = (long long)0; long long _9235 = _6028; for (long long _6030 = _9234;_6030<_9235;++_6030){ (((*_6011)((_6025 + _6030))) = (((*_6020)((((*_6018)(_6023)) + _6030))) * _5991)); }(_6025 = (_6025 + _6028)); (((*_6006)(_6024)) = ((*_6002)(_6023))); (((*_6009)((_6024 + (int)1))) = (((*_6009)(_6024)) + _6028)); ( ++ _6023 ); ( ++ _6024 ); }else { long long _6031 = (((*_6014)((_6022 + (int)1))) - ((*_6014)(_6022))); ::mosek::fusion::Utils::Tools::arraycopy(_6015,((*_6014)(_6022)),_6010,_6025,_6031); long long _9236 = (long long)0; long long _9237 = _6031; for (long long _6032 = _9236;_6032<_9237;++_6032){ (((*_6011)((_6025 + _6032))) = (((*_6016)((((*_6014)(_6022)) + _6032))) * _5989)); }(_6025 = (_6025 + _6031)); long long _6033 = (((*_6018)((_6023 + (int)1))) - ((*_6018)(_6023))); long long _9238 = (long long)0; long long _9239 = _6033; for (long long _6034 = _9238;_6034<_9239;++_6034){ (((*_6010)((_6025 + _6034))) = (((*_6019)((((*_6018)(_6023)) + _6034))) + _6007)); }long long _9240 = (long long)0; long long _9241 = _6033; for (long long _6035 = _9240;_6035<_9241;++_6035){ (((*_6011)((_6025 + _6035))) = (((*_6020)((((*_6018)(_6023)) + _6035))) * _5991)); }(_6025 = (_6025 + _6033)); (((*_6006)(_6024)) = ((*_6001)(_6022))); (((*_6009)((_6024 + (int)1))) = ((((*_6009)(_6024)) + _6031) + _6033)); ( ++ _6022 ); ( ++ _6023 ); ( ++ _6024 ); }}while ((_6022 < (int)((_6001)->size(0)))) { long long _6036 = (((*_6014)((_6022 + (int)1))) - ((*_6014)(_6022))); ::mosek::fusion::Utils::Tools::arraycopy(_6015,((*_6014)(_6022)),_6010,_6025,_6036); long long _9242 = (long long)0; long long _9243 = _6036; for (long long _6037 = _9242;_6037<_9243;++_6037){ (((*_6011)((_6025 + _6037))) = (((*_6016)((((*_6014)(_6022)) + _6037))) * _5989)); }(_6025 = (_6025 + _6036)); (((*_6006)(_6024)) = ((*_6001)(_6022))); (((*_6009)((_6024 + (int)1))) = (((*_6009)(_6024)) + _6036)); ( ++ _6022 ); ( ++ _6024 ); }while ((_6023 < (int)((_6002)->size(0)))) { long long _6038 = (((*_6018)((_6023 + (int)1))) - ((*_6018)(_6023))); long long _9244 = (long long)0; long long _9245 = _6038; for (long long _6039 = _9244;_6039<_9245;++_6039){ (((*_6010)((_6025 + _6039))) = (((*_6019)((((*_6018)(_6023)) + _6039))) + _6007)); }long long _9246 = (long long)0; long long _9247 = _6038; for (long long _6040 = _9246;_6040<_9247;++_6040){ (((*_6011)((_6025 + _6040))) = (((*_6020)((((*_6018)(_6023)) + _6040))) * _5991)); }(_6025 = (_6025 + _6038)); (((*_6006)(_6024)) = ((*_6002)(_6023))); (((*_6009)((_6024 + (int)1))) = (((*_6009)(_6024)) + _6038)); ( ++ _6023 ); ( ++ _6024 ); }if ((_6017 || _6021)){ int _6041 = (int)0; int _6042 = (int)0; int _6043 = (int)0; long long _6044 = (long long)0; while (((_6041 < (int)((_6001)->size(0))) && (_6042 < (int)((_6002)->size(0))))) { if ((((*_6001)(_6041)) < ((*_6002)(_6042)))){ if (_6017){ (((*_6013)(_6043)) = (((*_6017)(_6041)) * _5989)); }else {}( ++ _6041 ); ( ++ _6043 ); }else if ((((*_6001)(_6041)) > ((*_6002)(_6042)))){ if (_6021){ (((*_6013)(_6043)) = (((*_6021)(_6042)) * _5991)); }else {}( ++ _6042 ); ( ++ _6043 ); }else { if (_6017){ (((*_6013)(_6043)) = (((*_6017)(_6041)) * _5989)); }else {}if (_6021){ (((*_6013)(_6043)) = (((*_6013)(_6043)) + (((*_6021)(_6042)) * _5991))); }else {}( ++ _6041 ); ( ++ _6042 ); ( ++ _6043 ); }}while ((_6041 < (int)((_6001)->size(0)))) { if (_6017){ (((*_6013)(_6043)) = (((*_6017)(_6041)) * _5989)); }else {}( ++ _6041 ); ( ++ _6043 ); }while ((_6042 < (int)((_6002)->size(0)))) { if (_6021){ (((*_6013)(_6043)) = (((*_6021)(_6042)) * _5991)); }else {}( ++ _6042 ); ( ++ _6043 ); }}else {}}}return ::mosek::fusion::p_Expr::_new_Expr(_6009,_6012,_6010,_6011,_6013,_6000,([&]() -> std::shared_ptr< monty::ndarray< long long,1 > > { if ( ((int)((_6006)->size(0)) == mosek::fusion::p_Set::_get_impl(_6000)->size)) return (nullptr); else return (_6006); })()); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose( ){ monty::rc_ptr< ::mosek::fusion::Expr > _6045 = _pubthis; if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Expr::_get_impl(_6045.get())->shape())->nd > (int)2)){ throw ::mosek::fusion::DimensionError(std::string ("Wrong dimensions for transpose"));}else {}if ((mosek::fusion::p_Set::_get_impl(mosek::fusion::p_Expr::_get_impl(_6045.get())->shape())->nd == (int)1)){ return ::mosek::fusion::p_Expr::reshape(::mosek::fusion::Expression::t(_6045),::mosek::fusion::p_Set::make((int)1,mosek::fusion::p_Expr::_get_impl(_6045.get())->shape()->dim((int)0))); }else if ((mosek::fusion::p_Expr::_get_impl(_6045.get())->shape()->dim((int)0) == (int)1)){ return ::mosek::fusion::p_Expr::reshape(::mosek::fusion::Expression::t(_6045),::mosek::fusion::p_Set::make((int)1,mosek::fusion::p_Expr::_get_impl(_6045.get())->shape()->dim((int)1))); }else if ((mosek::fusion::p_Expr::_get_impl(_6045.get())->shape()->dim((int)1) == (int)1)){ return ::mosek::fusion::p_Expr::reshape(::mosek::fusion::Expression::t(_6045),::mosek::fusion::p_Set::make(mosek::fusion::p_Expr::_get_impl(_6045.get())->shape()->dim((int)0))); }else {}monty::rc_ptr< ::mosek::fusion::FlatExpr > _6046 = mosek::fusion::p_Expr::_get_impl(_6045.get())->eval(); std::shared_ptr< monty::ndarray< long long,1 > > _6047 = mosek::fusion::p_FlatExpr::_get_impl(_6046)->inst; std::shared_ptr< monty::ndarray< double,1 > > _6048 = mosek::fusion::p_FlatExpr::_get_impl(_6046)->bfix; std::shared_ptr< monty::ndarray< long long,1 > > _6049 = mosek::fusion::p_FlatExpr::_get_impl(_6046)->ptrb; std::shared_ptr< monty::ndarray< long long,1 > > _6050 = mosek::fusion::p_FlatExpr::_get_impl(_6046)->subj; std::shared_ptr< monty::ndarray< double,1 > > _6051 = mosek::fusion::p_FlatExpr::_get_impl(_6046)->cof; if (mosek::fusion::p_FlatExpr::_get_impl(_6046)->inst){ int _6052 = mosek::fusion::p_FlatExpr::_get_impl(_6046)->shape->dim((int)0); int _6053 = mosek::fusion::p_FlatExpr::_get_impl(_6046)->shape->dim((int)1); int _6054 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_6046)->inst)->size(0)); int _6055 = (int)((mosek::fusion::p_FlatExpr::_get_impl(_6046)->subj)->size(0)); std::shared_ptr< monty::ndarray< double,1 > > _6056 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( ! mosek::fusion::p_FlatExpr::_get_impl(_6046)->bfix) return (nullptr); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6054)))); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6057 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6054))); std::shared_ptr< monty::ndarray< long long,1 > > _6058 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6054 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6059 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6055))); std::shared_ptr< monty::ndarray< double,1 > > _6060 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6055))); monty::rc_ptr< ::mosek::fusion::Set > _6061 = ::mosek::fusion::p_Set::make(_6053,_6052); std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6062 = mosek::fusion::p_FlatExpr::_get_impl(_6046)->x; { std::shared_ptr< monty::ndarray< long long,1 > > _6063 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9248; for (int _6064=(int)0, _9249=_6054; _6064 < _9249;++_6064)_9248.push_back((((*_6047)(_6064)) / _6053)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9248.size()),_9248.begin(),_9248.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6065 = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9250; for (int _6066=(int)0, _9251=_6054; _6066 < _9251;++_6066)_9250.push_back((((*_6047)(_6066)) % _6053)); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9250.size()),_9250.begin(),_9250.end())); })(); std::shared_ptr< monty::ndarray< long long,1 > > _6067 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6054))); std::shared_ptr< monty::ndarray< long long,1 > > _6068 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6054 + (int)1)))); int _9252 = (int)0; int _9253 = _6054; for (int _6069 = _9252;_6069<_9253;++_6069){ ( ++ ((*_6068)((((*_6065)(_6069)) + (int)1))) ); }int _9254 = (int)0; int _9255 = _6054; for (int _6070 = _9254;_6070<_9255;++_6070){ (((*_6068)((_6070 + (int)1))) += ((*_6068)(_6070))); }int _9256 = (int)0; int _9257 = _6054; for (int _6071 = _9256;_6071<_9257;++_6071){ (((*_6067)(((*_6068)(((*_6065)(_6071)))))) = _6071); ( ++ ((*_6068)(((*_6065)(_6071)))) ); }if (_6056){ int _9258 = (int)0; int _9259 = _6054; for (int _6072 = _9258;_6072<_9259;++_6072){ (((*_6056)(_6072)) = ((*_6048)(((*_6067)(_6072))))); }}else {}int _9260 = (int)0; int _9261 = _6054; for (int _6073 = _9260;_6073<_9261;++_6073){ (((*_6057)(_6073)) = ((((*_6065)(((*_6067)(_6073)))) * _6052) + ((*_6063)(((*_6067)(_6073)))))); }int _9262 = (int)0; int _9263 = _6054; for (int _6074 = _9262;_6074<_9263;++_6074){ (((*_6058)((_6074 + (int)1))) = (((*_6058)(_6074)) + (((*_6049)((((*_6067)(_6074)) + (int)1))) - ((*_6049)(((*_6067)(_6074))))))); }int _9264 = (int)0; int _9265 = _6054; for (int _6075 = _9264;_6075<_9265;++_6075){ ::mosek::fusion::Utils::Tools::arraycopy(_6050,((*_6049)(((*_6067)(_6075)))),_6059,((*_6058)(_6075)),(((*_6058)((_6075 + (int)1))) - ((*_6058)(_6075)))); ::mosek::fusion::Utils::Tools::arraycopy(_6051,((*_6049)(((*_6067)(_6075)))),_6060,((*_6058)(_6075)),(((*_6058)((_6075 + (int)1))) - ((*_6058)(_6075)))); }}return ::mosek::fusion::p_Expr::_new_Expr(_6058,_6062,_6059,_6060,_6056,_6061,_6057,(int)1); }else { int _6076 = mosek::fusion::p_FlatExpr::_get_impl(_6046)->shape->dim((int)0); int _6077 = mosek::fusion::p_FlatExpr::_get_impl(_6046)->shape->dim((int)1); std::shared_ptr< monty::ndarray< long long,1 > > _6078 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_6046)->ptrb)->size(0))))); std::shared_ptr< monty::ndarray< long long,1 > > _6079 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_6046)->subj)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _6080 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((mosek::fusion::p_FlatExpr::_get_impl(_6046)->cof)->size(0))))); std::shared_ptr< monty::ndarray< double,1 > > _6081 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _6048) return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_6076 * _6077))))); else return (nullptr); })(); monty::rc_ptr< ::mosek::fusion::Set > _6082 = ::mosek::fusion::p_Set::make(_6077,_6076); { int _9266 = (int)0; int _9267 = _6077; for (int _6083 = _9266;_6083<_9267;++_6083){ int _9268 = (int)0; int _9269 = _6076; for (int _6084 = _9268;_6084<_9269;++_6084){ int _6085 = ((_6084 * _6077) + _6083); int _6086 = ((_6083 * _6076) + _6084); (((*_6078)((_6086 + (int)1))) = (((*_6078)(_6086)) + (((*_6049)((_6085 + (int)1))) - ((*_6049)(_6085))))); ::mosek::fusion::Utils::Tools::arraycopy(_6050,((*_6049)(_6085)),_6079,((*_6078)(_6086)),(((*_6049)((_6085 + (int)1))) - ((*_6049)(_6085)))); ::mosek::fusion::Utils::Tools::arraycopy(_6051,((*_6049)(_6085)),_6080,((*_6078)(_6086)),(((*_6049)((_6085 + (int)1))) - ((*_6049)(_6085)))); }}if (_6048){ int _9270 = (int)0; int _9271 = _6077; for (int _6087 = _9270;_6087<_9271;++_6087){ int _9272 = (int)0; int _9273 = _6076; for (int _6088 = _9272;_6088<_9273;++_6088){ int _6089 = ((_6088 * _6077) + _6087); int _6090 = ((_6087 * _6076) + _6088); (((*_6081)(_6090)) = ((*_6048)(_6089))); }}}else {}}return ::mosek::fusion::p_Expr::_new_Expr(_6078,mosek::fusion::p_FlatExpr::_get_impl(_6046)->x,_6079,_6080,_6081,_6082,nullptr,(int)1); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::slice  ( std::shared_ptr< monty::ndarray< int,1 > > _6091,    std::shared_ptr< monty::ndarray< int,1 > > _6092) { return mosek::fusion::p_Expr::_get_impl(this)->slice(_6091,_6092); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::slice( std::shared_ptr< monty::ndarray< int,1 > > _6091,std::shared_ptr< monty::ndarray< int,1 > > _6092){ if (((int)((_6091)->size(0)) != (int)((_6092)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Length firsta and lasta do not match"));}else {}if (((int)((_6091)->size(0)) != mosek::fusion::p_Set::_get_impl(shape_p)->nd)){ throw ::mosek::fusion::LengthError(std::string ("Length firsta and lasta do not match shape"));}else {}int _9274 = (int)0; int _9275 = (int)((_6091)->size(0)); for (int _6093 = _9274;_6093<_9275;++_6093){ if (((((*_6091)(_6093)) < (int)0) || ((((*_6091)(_6093)) > ((*_6092)(_6093))) || (((*_6092)(_6093)) > shape_p->dim(_6093))))){ throw ::mosek::fusion::IndexError(std::string ("Index is invalid or out of bounds"));}else {}}std::shared_ptr< monty::ndarray< int,1 > > _6094 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9276; for (int _6095=(int)0, _9277=(int)((_6091)->size(0)); _6095 < _9277;++_6095)_9276.push_back((((*_6092)(_6095)) - ((*_6091)(_6095)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9276.size()),_9276.begin(),_9276.end())); })(); monty::rc_ptr< ::mosek::fusion::NDSet > _6096 = ::mosek::fusion::p_NDSet::_new_NDSet(_6094); if (! inst){ long long _6097 = (long long)1; int _9278 = (int)0; int _9279 = (int)((_6091)->size(0)); for (int _6098 = _9278;_6098<_9279;++_6098){ (_6097 = (_6097 * (((*_6092)(_6098)) - ((*_6091)(_6098))))); }long long _6099 = mosek::fusion::p_Set::_get_impl(shape_p.get())->linearidx(_6091); monty::rc_ptr< ::mosek::fusion::IndexCounter > _6100 = ::mosek::fusion::p_IndexCounter::_new_IndexCounter(_6099,_6094,shape_p); long long _6101 = (long long)0; long long _9280 = (long long)0; long long _9281 = _6097; for (long long _6102 = _9280;_6102<_9281;++_6102){ long long _6103 = _6100->get(); (_6101 = (_6101 + (((*ptrb)((_6103 + (int)1))) - ((*ptrb)(_6103))))); _6100->inc(); }std::shared_ptr< monty::ndarray< long long,1 > > _6104 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6097 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6105 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6101))); std::shared_ptr< monty::ndarray< double,1 > > _6106 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6101))); _6100->reset(); long long _9282 = (long long)0; long long _9283 = _6097; for (long long _6107 = _9282;_6107<_9283;++_6107){ long long _6108 = _6100->get(); ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(_6108)),_6105,((*_6104)(_6107)),(((*ptrb)((_6108 + (int)1))) - ((*ptrb)(_6108)))); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(_6108)),_6106,((*_6104)(_6107)),(((*ptrb)((_6108 + (int)1))) - ((*ptrb)(_6108)))); (((*_6104)((_6107 + (int)1))) = (((*_6104)(_6107)) + (((*ptrb)((_6108 + (int)1))) - ((*ptrb)(_6108))))); _6100->inc(); }std::shared_ptr< monty::ndarray< double,1 > > _6109 = nullptr; if (bfix){ _6100->reset(); long long _9284 = (long long)0; long long _9285 = _6097; for (long long _6110 = _9284;_6110<_9285;++_6110){ (((*_6109)(_6110)) = ((*bfix)(_6100->get()))); _6100->inc(); }}else {}return ::mosek::fusion::p_Expr::_new_Expr(_6104,x,_6105,_6106,_6109,::mosek::fusion::Set::t(_6096),nullptr); }else { long long _6111 = (long long)0; long long _6112 = (long long)0; int _9286 = (int)0; int _9287 = (int)((inst)->size(0)); for (int _6113 = _9286;_6113<_9287;++_6113){ std::shared_ptr< monty::ndarray< int,1 > > _6114 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_6113))); bool _6115 = true; int _9288 = (int)0; int _9289 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _6116 = _9288;_6116<_9289;++_6116){ (_6115 = (_6115 && ((((*_6091)(_6116)) <= ((*_6114)(_6116))) && (((*_6114)(_6116)) < ((*_6092)(_6116)))))); }if (_6115){ ( ++ _6111 ); (_6112 = (_6112 + (((*ptrb)((_6113 + (int)1))) - ((*ptrb)(_6113))))); }else {}}std::shared_ptr< monty::ndarray< long long,1 > > _6117 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((_6111 + (int)1)))); std::shared_ptr< monty::ndarray< long long,1 > > _6118 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6112))); std::shared_ptr< monty::ndarray< double,1 > > _6119 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6112))); std::shared_ptr< monty::ndarray< double,1 > > _6120 = nullptr; std::shared_ptr< monty::ndarray< long long,1 > > _6121 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6111))); { int _6122 = (int)0; int _9290 = (int)0; int _9291 = (int)((inst)->size(0)); for (int _6123 = _9290;_6123<_9291;++_6123){ std::shared_ptr< monty::ndarray< int,1 > > _6124 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_6123))); bool _6125 = true; int _9292 = (int)0; int _9293 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _6126 = _9292;_6126<_9293;++_6126){ (_6125 = (_6125 && ((((*_6091)(_6126)) <= ((*_6124)(_6126))) && (((*_6124)(_6126)) < ((*_6092)(_6126)))))); }if (_6125){ ::mosek::fusion::Utils::Tools::arraycopy(subj,((*ptrb)(_6123)),_6118,((*_6117)(_6122)),(((*ptrb)((_6123 + (int)1))) - ((*ptrb)(_6123)))); ::mosek::fusion::Utils::Tools::arraycopy(cof_v,((*ptrb)(_6123)),_6119,((*_6117)(_6122)),(((*ptrb)((_6123 + (int)1))) - ((*ptrb)(_6123)))); (((*_6117)((_6122 + (int)1))) = ((((*_6117)(_6122)) + ((*ptrb)((_6123 + (int)1)))) - ((*ptrb)(_6123)))); (((*_6121)(_6122)) = mosek::fusion::p_NDSet::_get_impl(_6096.get())->linearidx(([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9294; for (int _6127=(int)0, _9295=(int)((_6124)->size(0)); _6127 < _9295;++_6127)_9294.push_back((((*_6124)(_6127)) - ((*_6091)(_6127)))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9294.size()),_9294.begin(),_9294.end())); })())); ( ++ _6122 ); }else {}}}if (bfix){ (_6120 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6111)))); int _6128 = (int)0; int _9296 = (int)0; int _9297 = (int)((inst)->size(0)); for (int _6129 = _9296;_6129<_9297;++_6129){ std::shared_ptr< monty::ndarray< int,1 > > _6130 = mosek::fusion::p_Set::_get_impl(shape_p.get())->idxtokey(((*inst)(_6129))); bool _6131 = true; int _9298 = (int)0; int _9299 = mosek::fusion::p_Set::_get_impl(shape_p)->nd; for (int _6132 = _9298;_6132<_9299;++_6132){ (_6131 = (_6131 && ((((*_6091)(_6132)) <= ((*_6130)(_6132))) && (((*_6130)(_6132)) < ((*_6092)(_6132)))))); }if (_6131){ (((*_6120)(_6128)) = ((*bfix)(_6129))); ( ++ _6128 ); }else {}}}else {}return ::mosek::fusion::p_Expr::_new_Expr(_6117,x,_6118,_6119,_6120,::mosek::fusion::Set::t(_6096),_6121); }}monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::index  ( std::shared_ptr< monty::ndarray< int,1 > > _6133) { return mosek::fusion::p_Expr::_get_impl(this)->index(_6133); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::index( std::shared_ptr< monty::ndarray< int,1 > > _6133){ std::shared_ptr< monty::ndarray< int,1 > > _6134 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9300; for (int _6135=(int)0, _9301=(int)((_6133)->size(0)); _6135 < _9301;++_6135)_9300.push_back((((*_6133)(_6135)) + (int)1)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9300.size()),_9300.begin(),_9300.end())); })(); return slice(_6133,_6134); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::index  ( int _6136) { return mosek::fusion::p_Expr::_get_impl(this)->index(_6136); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::index( int _6136){ return slice(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6136}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(_6136 + (int)1)})); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::slice  ( int _6137,    int _6138) { return mosek::fusion::p_Expr::_get_impl(this)->slice(_6137,_6138); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::slice( int _6137,int _6138){ return slice(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6137}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6138})); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6139,    monty::rc_ptr< ::mosek::fusion::Expression > _6140) { return mosek::fusion::p_Expr::mulElm(_6139,_6140); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Matrix > _6139,monty::rc_ptr< ::mosek::fusion::Expression > _6140){ return ::mosek::fusion::p_Expr::mulElm_(_6139,_6140); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6141,    monty::rc_ptr< ::mosek::fusion::Variable > _6142) { return mosek::fusion::p_Expr::mulElm(_6141,_6142); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Matrix > _6141,monty::rc_ptr< ::mosek::fusion::Variable > _6142){ return ::mosek::fusion::p_Expr::mulElm_(_6141,_6142); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6143,    monty::rc_ptr< ::mosek::fusion::Variable > _6144) { return mosek::fusion::p_Expr::mulElm(_6143,_6144); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6143,monty::rc_ptr< ::mosek::fusion::Variable > _6144){ return ::mosek::fusion::p_Expr::mulElm_(_6143,_6144); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6145,    monty::rc_ptr< ::mosek::fusion::Expression > _6146) { return mosek::fusion::p_Expr::mulElm(_6145,_6146); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6145,monty::rc_ptr< ::mosek::fusion::Expression > _6146){ return ::mosek::fusion::p_Expr::mulElm_(_6145,_6146); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _6147,    monty::rc_ptr< ::mosek::fusion::Variable > _6148) { return mosek::fusion::p_Expr::mulElm(_6147,_6148); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,2 > > _6147,monty::rc_ptr< ::mosek::fusion::Variable > _6148){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6147),_6148); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _6149,    monty::rc_ptr< ::mosek::fusion::Expression > _6150) { return mosek::fusion::p_Expr::mulElm(_6149,_6150); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,2 > > _6149,monty::rc_ptr< ::mosek::fusion::Expression > _6150){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6149),_6150); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _6151,    monty::rc_ptr< ::mosek::fusion::Variable > _6152) { return mosek::fusion::p_Expr::mulElm(_6151,_6152); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,1 > > _6151,monty::rc_ptr< ::mosek::fusion::Variable > _6152){ return ::mosek::fusion::p_Expr::mulElm_(_6151,_6152); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _6153,    monty::rc_ptr< ::mosek::fusion::Expression > _6154) { return mosek::fusion::p_Expr::mulElm(_6153,_6154); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( std::shared_ptr< monty::ndarray< double,1 > > _6153,monty::rc_ptr< ::mosek::fusion::Expression > _6154){ return ::mosek::fusion::p_Expr::mulElm_(_6153,_6154); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6155,    monty::rc_ptr< ::mosek::fusion::Matrix > _6156) { return mosek::fusion::p_Expr::mulElm(_6155,_6156); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6155,monty::rc_ptr< ::mosek::fusion::Matrix > _6156){ return ::mosek::fusion::p_Expr::mulElm_(_6156,_6155); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6157,    std::shared_ptr< monty::ndarray< double,2 > > _6158) { return mosek::fusion::p_Expr::mulElm(_6157,_6158); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6157,std::shared_ptr< monty::ndarray< double,2 > > _6158){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6158),_6157); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6159,    std::shared_ptr< monty::ndarray< double,1 > > _6160) { return mosek::fusion::p_Expr::mulElm(_6159,_6160); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6159,std::shared_ptr< monty::ndarray< double,1 > > _6160){ return ::mosek::fusion::p_Expr::mulElm_(_6160,_6159); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _6161,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6162) { return mosek::fusion::p_Expr::mulElm(_6161,_6162); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Expression > _6161,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6162){ return ::mosek::fusion::p_Expr::mulElm_(_6162,_6161); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6163,    monty::rc_ptr< ::mosek::fusion::Matrix > _6164) { return mosek::fusion::p_Expr::mulElm(_6163,_6164); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6163,monty::rc_ptr< ::mosek::fusion::Matrix > _6164){ return ::mosek::fusion::p_Expr::mulElm_(_6164,_6163); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6165,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6166) { return mosek::fusion::p_Expr::mulElm(_6165,_6166); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6165,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6166){ return ::mosek::fusion::p_Expr::mulElm_(_6166,_6165); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6167,    std::shared_ptr< monty::ndarray< double,2 > > _6168) { return mosek::fusion::p_Expr::mulElm(_6167,_6168); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6167,std::shared_ptr< monty::ndarray< double,2 > > _6168){ return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_6168),_6167); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Variable > _6169,    std::shared_ptr< monty::ndarray< double,1 > > _6170) { return mosek::fusion::p_Expr::mulElm(_6169,_6170); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm( monty::rc_ptr< ::mosek::fusion::Variable > _6169,std::shared_ptr< monty::ndarray< double,1 > > _6170){ return ::mosek::fusion::p_Expr::mulElm_(_6170,_6169); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6171,    monty::rc_ptr< ::mosek::fusion::Expression > _6172) { return mosek::fusion::p_Expr::dot(_6171,_6172); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Matrix > _6171,monty::rc_ptr< ::mosek::fusion::Expression > _6172){ return ::mosek::fusion::p_Expr::dot_(_6171,_6172); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6173,    monty::rc_ptr< ::mosek::fusion::Variable > _6174) { return mosek::fusion::p_Expr::dot(_6173,_6174); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Matrix > _6173,monty::rc_ptr< ::mosek::fusion::Variable > _6174){ return ::mosek::fusion::p_Expr::dot_(_6173,_6174); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6175,    monty::rc_ptr< ::mosek::fusion::Variable > _6176) { return mosek::fusion::p_Expr::dot(_6175,_6176); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6175,monty::rc_ptr< ::mosek::fusion::Variable > _6176){ return ::mosek::fusion::p_Expr::dot_(_6175,_6176); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6177,    monty::rc_ptr< ::mosek::fusion::Expression > _6178) { return mosek::fusion::p_Expr::dot(_6177,_6178); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6177,monty::rc_ptr< ::mosek::fusion::Expression > _6178){ return ::mosek::fusion::p_Expr::dot_(_6177,_6178); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _6179,    monty::rc_ptr< ::mosek::fusion::Variable > _6180) { return mosek::fusion::p_Expr::dot(_6179,_6180); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,2 > > _6179,monty::rc_ptr< ::mosek::fusion::Variable > _6180){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6179),_6180); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _6181,    monty::rc_ptr< ::mosek::fusion::Expression > _6182) { return mosek::fusion::p_Expr::dot(_6181,_6182); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,2 > > _6181,monty::rc_ptr< ::mosek::fusion::Expression > _6182){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6181),_6182); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _6183,    monty::rc_ptr< ::mosek::fusion::Variable > _6184) { return mosek::fusion::p_Expr::dot(_6183,_6184); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,1 > > _6183,monty::rc_ptr< ::mosek::fusion::Variable > _6184){ return ::mosek::fusion::p_Expr::dot_(_6183,_6184); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _6185,    monty::rc_ptr< ::mosek::fusion::Expression > _6186) { return mosek::fusion::p_Expr::dot(_6185,_6186); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( std::shared_ptr< monty::ndarray< double,1 > > _6185,monty::rc_ptr< ::mosek::fusion::Expression > _6186){ return ::mosek::fusion::p_Expr::dot_(_6185,_6186); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6187,    monty::rc_ptr< ::mosek::fusion::Matrix > _6188) { return mosek::fusion::p_Expr::dot(_6187,_6188); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6187,monty::rc_ptr< ::mosek::fusion::Matrix > _6188){ return ::mosek::fusion::p_Expr::dot_(_6188,_6187); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6189,    std::shared_ptr< monty::ndarray< double,2 > > _6190) { return mosek::fusion::p_Expr::dot(_6189,_6190); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6189,std::shared_ptr< monty::ndarray< double,2 > > _6190){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6190),_6189); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6191,    std::shared_ptr< monty::ndarray< double,1 > > _6192) { return mosek::fusion::p_Expr::dot(_6191,_6192); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6191,std::shared_ptr< monty::ndarray< double,1 > > _6192){ return ::mosek::fusion::p_Expr::dot_(_6192,_6191); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _6193,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6194) { return mosek::fusion::p_Expr::dot(_6193,_6194); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Expression > _6193,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6194){ return ::mosek::fusion::p_Expr::dot_(_6194,_6193); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6195,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6196) { return mosek::fusion::p_Expr::dot(_6195,_6196); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6195,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6196){ return ::mosek::fusion::p_Expr::dot_(_6196,_6195); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6197,    monty::rc_ptr< ::mosek::fusion::Matrix > _6198) { return mosek::fusion::p_Expr::dot(_6197,_6198); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6197,monty::rc_ptr< ::mosek::fusion::Matrix > _6198){ return ::mosek::fusion::p_Expr::dot_(_6198,_6197); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6199,    std::shared_ptr< monty::ndarray< double,2 > > _6200) { return mosek::fusion::p_Expr::dot(_6199,_6200); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6199,std::shared_ptr< monty::ndarray< double,2 > > _6200){ return ::mosek::fusion::p_Expr::dot_(::mosek::fusion::p_Matrix::dense(_6200),_6199); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Variable > _6201,    std::shared_ptr< monty::ndarray< double,1 > > _6202) { return mosek::fusion::p_Expr::dot(_6201,_6202); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot( monty::rc_ptr< ::mosek::fusion::Variable > _6201,std::shared_ptr< monty::ndarray< double,1 > > _6202){ return ::mosek::fusion::p_Expr::dot_(_6202,_6201); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6203,    monty::rc_ptr< ::mosek::fusion::Variable > _6204) { return mosek::fusion::p_Expr::sub(_6203,_6204); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6203,monty::rc_ptr< ::mosek::fusion::Variable > _6204){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6203),1.0,_6204->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6205,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6206) { return mosek::fusion::p_Expr::sub(_6205,_6206); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6205,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6206){ return ::mosek::fusion::p_Expr::add_(_6205->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6206),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6207,    monty::rc_ptr< ::mosek::fusion::Variable > _6208) { return mosek::fusion::p_Expr::sub(_6207,_6208); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Matrix > _6207,monty::rc_ptr< ::mosek::fusion::Variable > _6208){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6207),1.0,_6208->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6209,    monty::rc_ptr< ::mosek::fusion::Matrix > _6210) { return mosek::fusion::p_Expr::sub(_6209,_6210); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6209,monty::rc_ptr< ::mosek::fusion::Matrix > _6210){ return ::mosek::fusion::p_Expr::add_(_6209->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6210),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _6211,    monty::rc_ptr< ::mosek::fusion::Variable > _6212) { return mosek::fusion::p_Expr::sub(_6211,_6212); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( double _6211,monty::rc_ptr< ::mosek::fusion::Variable > _6212){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6212->shape(),_6211),1.0,_6212->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6213,    double _6214) { return mosek::fusion::p_Expr::sub(_6213,_6214); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6213,double _6214){ return ::mosek::fusion::p_Expr::add_(_6213->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6213->shape(),_6214),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _6215,    monty::rc_ptr< ::mosek::fusion::Variable > _6216) { return mosek::fusion::p_Expr::sub(_6215,_6216); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,2 > > _6215,monty::rc_ptr< ::mosek::fusion::Variable > _6216){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6215),1.0,_6216->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _6217,    monty::rc_ptr< ::mosek::fusion::Variable > _6218) { return mosek::fusion::p_Expr::sub(_6217,_6218); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,1 > > _6217,monty::rc_ptr< ::mosek::fusion::Variable > _6218){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6217),1.0,_6218->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6219,    std::shared_ptr< monty::ndarray< double,2 > > _6220) { return mosek::fusion::p_Expr::sub(_6219,_6220); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6219,std::shared_ptr< monty::ndarray< double,2 > > _6220){ return ::mosek::fusion::p_Expr::add_(_6219->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6220),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6221,    std::shared_ptr< monty::ndarray< double,1 > > _6222) { return mosek::fusion::p_Expr::sub(_6221,_6222); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6221,std::shared_ptr< monty::ndarray< double,1 > > _6222){ return ::mosek::fusion::p_Expr::add_(_6221->asExpr(),1.0,::mosek::fusion::p_Expr::constTerm(_6222),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6223,    monty::rc_ptr< ::mosek::fusion::Variable > _6224) { return mosek::fusion::p_Expr::sub(_6223,_6224); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6223,monty::rc_ptr< ::mosek::fusion::Variable > _6224){ return ::mosek::fusion::p_Expr::add_(_6223->asExpr(),1.0,_6224->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6225,    monty::rc_ptr< ::mosek::fusion::Expression > _6226) { return mosek::fusion::p_Expr::sub(_6225,_6226); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6225,monty::rc_ptr< ::mosek::fusion::Expression > _6226){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6225),1.0,_6226,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6227,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6228) { return mosek::fusion::p_Expr::sub(_6227,_6228); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6227,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6228){ return ::mosek::fusion::p_Expr::add_(_6227,1.0,::mosek::fusion::p_Expr::constTerm(_6228),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6229,    monty::rc_ptr< ::mosek::fusion::Expression > _6230) { return mosek::fusion::p_Expr::sub(_6229,_6230); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Matrix > _6229,monty::rc_ptr< ::mosek::fusion::Expression > _6230){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6229),1.0,_6230,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6231,    monty::rc_ptr< ::mosek::fusion::Matrix > _6232) { return mosek::fusion::p_Expr::sub(_6231,_6232); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6231,monty::rc_ptr< ::mosek::fusion::Matrix > _6232){ return ::mosek::fusion::p_Expr::add_(_6231,1.0,::mosek::fusion::p_Expr::constTerm(_6232),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _6233,    monty::rc_ptr< ::mosek::fusion::Expression > _6234) { return mosek::fusion::p_Expr::sub(_6233,_6234); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( double _6233,monty::rc_ptr< ::mosek::fusion::Expression > _6234){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6234->shape(),_6233),1.0,_6234,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6235,    double _6236) { return mosek::fusion::p_Expr::sub(_6235,_6236); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6235,double _6236){ return ::mosek::fusion::p_Expr::add_(_6235,1.0,::mosek::fusion::p_Expr::constTerm(_6235->shape(),_6236),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _6237,    monty::rc_ptr< ::mosek::fusion::Expression > _6238) { return mosek::fusion::p_Expr::sub(_6237,_6238); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,2 > > _6237,monty::rc_ptr< ::mosek::fusion::Expression > _6238){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6237),1.0,_6238,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _6239,    monty::rc_ptr< ::mosek::fusion::Expression > _6240) { return mosek::fusion::p_Expr::sub(_6239,_6240); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( std::shared_ptr< monty::ndarray< double,1 > > _6239,monty::rc_ptr< ::mosek::fusion::Expression > _6240){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6239),1.0,_6240,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6241,    std::shared_ptr< monty::ndarray< double,2 > > _6242) { return mosek::fusion::p_Expr::sub(_6241,_6242); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6241,std::shared_ptr< monty::ndarray< double,2 > > _6242){ return ::mosek::fusion::p_Expr::add_(_6241,1.0,::mosek::fusion::p_Expr::constTerm(_6242),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6243,    std::shared_ptr< monty::ndarray< double,1 > > _6244) { return mosek::fusion::p_Expr::sub(_6243,_6244); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6243,std::shared_ptr< monty::ndarray< double,1 > > _6244){ return ::mosek::fusion::p_Expr::add_(_6243,1.0,::mosek::fusion::p_Expr::constTerm(_6244),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Variable > _6245,    monty::rc_ptr< ::mosek::fusion::Expression > _6246) { return mosek::fusion::p_Expr::sub(_6245,_6246); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Variable > _6245,monty::rc_ptr< ::mosek::fusion::Expression > _6246){ return ::mosek::fusion::p_Expr::add_(_6245->asExpr(),1.0,_6246,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6247,    monty::rc_ptr< ::mosek::fusion::Variable > _6248) { return mosek::fusion::p_Expr::sub(_6247,_6248); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6247,monty::rc_ptr< ::mosek::fusion::Variable > _6248){ return ::mosek::fusion::p_Expr::add_(_6247,1.0,_6248->asExpr(),(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _6249,    monty::rc_ptr< ::mosek::fusion::Expression > _6250) { return mosek::fusion::p_Expr::sub(_6249,_6250); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub( monty::rc_ptr< ::mosek::fusion::Expression > _6249,monty::rc_ptr< ::mosek::fusion::Expression > _6250){ return ::mosek::fusion::p_Expr::add_(_6249,1.0,_6250,(- 1.0)); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6251,    monty::rc_ptr< ::mosek::fusion::Variable > _6252) { return mosek::fusion::p_Expr::add(_6251,_6252); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6251,monty::rc_ptr< ::mosek::fusion::Variable > _6252){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6251),1.0,_6252->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6253,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6254) { return mosek::fusion::p_Expr::add(_6253,_6254); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6253,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6254){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6254),1.0,_6253->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6255,    monty::rc_ptr< ::mosek::fusion::Variable > _6256) { return mosek::fusion::p_Expr::add(_6255,_6256); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Matrix > _6255,monty::rc_ptr< ::mosek::fusion::Variable > _6256){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6255),1.0,_6256->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6257,    monty::rc_ptr< ::mosek::fusion::Matrix > _6258) { return mosek::fusion::p_Expr::add(_6257,_6258); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6257,monty::rc_ptr< ::mosek::fusion::Matrix > _6258){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6258),1.0,_6257->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _6259,    monty::rc_ptr< ::mosek::fusion::Variable > _6260) { return mosek::fusion::p_Expr::add(_6259,_6260); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( double _6259,monty::rc_ptr< ::mosek::fusion::Variable > _6260){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6260->shape(),_6259),1.0,_6260->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6261,    double _6262) { return mosek::fusion::p_Expr::add(_6261,_6262); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6261,double _6262){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6261->shape(),_6262),1.0,_6261->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _6263,    monty::rc_ptr< ::mosek::fusion::Variable > _6264) { return mosek::fusion::p_Expr::add(_6263,_6264); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,2 > > _6263,monty::rc_ptr< ::mosek::fusion::Variable > _6264){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6263),1.0,_6264->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _6265,    monty::rc_ptr< ::mosek::fusion::Variable > _6266) { return mosek::fusion::p_Expr::add(_6265,_6266); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,1 > > _6265,monty::rc_ptr< ::mosek::fusion::Variable > _6266){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6265),1.0,_6266->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6267,    std::shared_ptr< monty::ndarray< double,2 > > _6268) { return mosek::fusion::p_Expr::add(_6267,_6268); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6267,std::shared_ptr< monty::ndarray< double,2 > > _6268){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6268),1.0,_6267->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6269,    std::shared_ptr< monty::ndarray< double,1 > > _6270) { return mosek::fusion::p_Expr::add(_6269,_6270); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6269,std::shared_ptr< monty::ndarray< double,1 > > _6270){ return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_6270),1.0,_6269->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6271,    monty::rc_ptr< ::mosek::fusion::Variable > _6272) { return mosek::fusion::p_Expr::add(_6271,_6272); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6271,monty::rc_ptr< ::mosek::fusion::Variable > _6272){ return ::mosek::fusion::p_Expr::add_(_6271->asExpr(),1.0,_6272->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6273,    monty::rc_ptr< ::mosek::fusion::Expression > _6274) { return mosek::fusion::p_Expr::add(_6273,_6274); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6273,monty::rc_ptr< ::mosek::fusion::Expression > _6274){ return ::mosek::fusion::p_Expr::add_(_6274,1.0,::mosek::fusion::p_Expr::constTerm(_6273),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6275,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6276) { return mosek::fusion::p_Expr::add(_6275,_6276); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6275,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6276){ return ::mosek::fusion::p_Expr::add_(_6275,1.0,::mosek::fusion::p_Expr::constTerm(_6276),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6277,    monty::rc_ptr< ::mosek::fusion::Expression > _6278) { return mosek::fusion::p_Expr::add(_6277,_6278); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Matrix > _6277,monty::rc_ptr< ::mosek::fusion::Expression > _6278){ return ::mosek::fusion::p_Expr::add_(_6278,1.0,::mosek::fusion::p_Expr::constTerm(_6277),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6279,    monty::rc_ptr< ::mosek::fusion::Matrix > _6280) { return mosek::fusion::p_Expr::add(_6279,_6280); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6279,monty::rc_ptr< ::mosek::fusion::Matrix > _6280){ return ::mosek::fusion::p_Expr::add_(_6279,1.0,::mosek::fusion::p_Expr::constTerm(_6280),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _6281,    monty::rc_ptr< ::mosek::fusion::Expression > _6282) { return mosek::fusion::p_Expr::add(_6281,_6282); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( double _6281,monty::rc_ptr< ::mosek::fusion::Expression > _6282){ return ::mosek::fusion::p_Expr::add_(_6282,1.0,::mosek::fusion::p_Expr::constTerm(_6282->shape(),_6281),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6283,    double _6284) { return mosek::fusion::p_Expr::add(_6283,_6284); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6283,double _6284){ return ::mosek::fusion::p_Expr::add_(_6283,1.0,::mosek::fusion::p_Expr::constTerm(_6283->shape(),_6284),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _6285,    monty::rc_ptr< ::mosek::fusion::Expression > _6286) { return mosek::fusion::p_Expr::add(_6285,_6286); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,2 > > _6285,monty::rc_ptr< ::mosek::fusion::Expression > _6286){ return ::mosek::fusion::p_Expr::add_(_6286,1.0,::mosek::fusion::p_Expr::constTerm(_6285),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _6287,    monty::rc_ptr< ::mosek::fusion::Expression > _6288) { return mosek::fusion::p_Expr::add(_6287,_6288); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( std::shared_ptr< monty::ndarray< double,1 > > _6287,monty::rc_ptr< ::mosek::fusion::Expression > _6288){ return ::mosek::fusion::p_Expr::add_(_6288,1.0,::mosek::fusion::p_Expr::constTerm(_6287),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6289,    std::shared_ptr< monty::ndarray< double,2 > > _6290) { return mosek::fusion::p_Expr::add(_6289,_6290); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6289,std::shared_ptr< monty::ndarray< double,2 > > _6290){ return ::mosek::fusion::p_Expr::add_(_6289,1.0,::mosek::fusion::p_Expr::constTerm(_6290),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6291,    std::shared_ptr< monty::ndarray< double,1 > > _6292) { return mosek::fusion::p_Expr::add(_6291,_6292); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6291,std::shared_ptr< monty::ndarray< double,1 > > _6292){ return ::mosek::fusion::p_Expr::add_(_6291,1.0,::mosek::fusion::p_Expr::constTerm(_6292),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Variable > _6293,    monty::rc_ptr< ::mosek::fusion::Expression > _6294) { return mosek::fusion::p_Expr::add(_6293,_6294); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Variable > _6293,monty::rc_ptr< ::mosek::fusion::Expression > _6294){ return ::mosek::fusion::p_Expr::add_(_6293->asExpr(),1.0,_6294,1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6295,    monty::rc_ptr< ::mosek::fusion::Variable > _6296) { return mosek::fusion::p_Expr::add(_6295,_6296); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6295,monty::rc_ptr< ::mosek::fusion::Variable > _6296){ return ::mosek::fusion::p_Expr::add_(_6295,1.0,_6296->asExpr(),1.0); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _6297,    monty::rc_ptr< ::mosek::fusion::Expression > _6298) { return mosek::fusion::p_Expr::add(_6297,_6298); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add( monty::rc_ptr< ::mosek::fusion::Expression > _6297,monty::rc_ptr< ::mosek::fusion::Expression > _6298){ return ::mosek::fusion::p_Expr::add_(_6297,1.0,_6298,1.0); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Expr::shape  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->shape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Expr::shape( ){ return shape_p; }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::Expr::getShape  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->getShape(); }monty::rc_ptr< ::mosek::fusion::Set > mosek::fusion::p_Expr::getShape( ){ return shape_p; }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Expr::getModel  ( ) { return mosek::fusion::p_Expr::_get_impl(this)->getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::getModel( ){ return model; }void mosek::fusion::p_Expr::validateData( std::shared_ptr< monty::ndarray< long long,1 > > _6299,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6300,std::shared_ptr< monty::ndarray< long long,1 > > _6301,std::shared_ptr< monty::ndarray< double,1 > > _6302,std::shared_ptr< monty::ndarray< double,1 > > _6303,monty::rc_ptr< ::mosek::fusion::Set > _6304,std::shared_ptr< monty::ndarray< long long,1 > > _6305){ int _6306 = ((int)((_6299)->size(0)) - (int)1); long long _6307 = ((*_6299)(((int)((_6299)->size(0)) - (int)1))); long long _6308 = (long long)0; if (! _6300){ throw ::mosek::fusion::ExpressionError(std::string ("Array v must not be null"));}else {}int _9302 = (int)0; int _9303 = (int)((_6300)->size(0)); for (int _6309 = _9302;_6309<_9303;++_6309){ if (! ((*_6300)(_6309))){ throw ::mosek::fusion::ExpressionError(std::string ("Array elements of v must not be null"));}else { (_6308 = (_6308 + ((*_6300)(_6309))->size())); }}if (((int)((_6299)->size(0)) < (int)1)){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));}else {}if ((_6307 != (int)((_6301)->size(0)))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));}else {}if ((_6307 != (int)((_6302)->size(0)))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));}else {}if ((_6303 && (_6306 != (int)((_6303)->size(0))))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));}else {}if (_6304){ if ((_6305 && ((int)((_6305)->size(0)) < mosek::fusion::p_Set::_get_impl(_6304)->size))){ std::shared_ptr< monty::ndarray< long long,1 > > _6310 = _6305; if (((int)((_6310)->size(0)) != ((int)((_6299)->size(0)) - (int)1))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));}else {}if (((int)((_6310)->size(0)) > (int)0)){ if (((((*_6310)((int)0)) < (int)0) || (((*_6310)((int)0)) >= mosek::fusion::p_Set::_get_impl(_6304)->size))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));}else {}bool _6311 = true; long long _6312 = mosek::fusion::p_Set::_get_impl(_6304)->size; int _9304 = (int)1; int _9305 = (int)((_6310)->size(0)); for (int _6313 = _9304;_6313<_9305;++_6313){ (_6311 = (_6311 && ((((*_6310)(_6313)) >= (int)0) && ((((*_6310)(_6313)) < _6312) && (((*_6310)(_6313)) > ((*_6310)((_6313 - (int)1)))))))); }if ((! _6311)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));}else {}}else {}}else { if ((mosek::fusion::p_Set::_get_impl(_6304)->size != ((long long)((_6299)->size(0)) - (long long)1))){ throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));}else {}}}else if (_6305){ throw ::mosek::fusion::ExpressionError(std::string ("Undefined expression shape"));}else {}bool _6314 = false; bool _6315 = false; if ((((*_6299)((int)0)) != (long long)0)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));}else {}bool _6316 = true; int _9306 = (int)0; int _9307 = _6306; for (int _6317 = _9306;_6317<_9307;++_6317){ (_6316 = (_6316 && (((*_6299)(_6317)) <= ((*_6299)((_6317 + (int)1)))))); }if ((! _6316)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));}else {}bool _6318 = true; int _9308 = (int)0; long long _9309 = _6307; for (long long _6319 = _9308;_6319<_9309;++_6319){ (_6318 = (_6318 && ((((*_6301)(_6319)) >= (int)0) && (((*_6301)(_6319)) < _6308)))); }if ((! _6318)){ throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'subj' argument in expression"));}else {}}monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6320){ return ([&]() -> monty::rc_ptr< ::mosek::fusion::Model > { if ( (! _6320 || ((int)((_6320)->size(0)) == (int)0))) return (nullptr); else return (((*_6320)((int)0))->getModel()); })(); }void mosek::fusion::p_Expr::destroy(){varsb.reset();inst.reset();cof_v.reset();x.reset();subj.reset();ptrb.reset();bfix.reset();shape_p.reset();model.reset();}void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }mosek::fusion::FlatExpr::FlatExpr(mosek::fusion::p_FlatExpr *_impl) : _impl(_impl) { /*std::cout << "FlatExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::FlatExpr::~FlatExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_FlatExpr::p_FlatExpr  (::mosek::fusion::FlatExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _6321){ return new mosek::fusion::FlatExpr(_6321); }mosek::fusion::FlatExpr::FlatExpr  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _6321) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_6321); }void mosek::fusion::p_FlatExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::FlatExpr > _6321){monty::rc_reserve __reserve_this(_pubthis); { { if (mosek::fusion::p_FlatExpr::_get_impl(_6321)->bfix){ (bfix = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6321)->bfix)); }else { (bfix = nullptr); }(ptrb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6321)->ptrb)); (subj = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6321)->subj)); (x = mosek::fusion::p_FlatExpr::_get_impl(_6321)->x); (cof = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_FlatExpr::_get_impl(_6321)->cof)); (nnz = mosek::fusion::p_FlatExpr::_get_impl(_6321)->nnz); (shape = mosek::fusion::p_FlatExpr::_get_impl(_6321)->shape); (inst = mosek::fusion::p_FlatExpr::_get_impl(_6321)->inst); }}}mosek::fusion::FlatExpr::t mosek::fusion::p_FlatExpr::_new_FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _6322,    std::shared_ptr< monty::ndarray< long long,1 > > _6323,    std::shared_ptr< monty::ndarray< long long,1 > > _6324,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6325,    std::shared_ptr< monty::ndarray< double,1 > > _6326,    monty::rc_ptr< ::mosek::fusion::Set > _6327,    std::shared_ptr< monty::ndarray< long long,1 > > _6328){ return new mosek::fusion::FlatExpr(_6322,_6323,_6324,_6325,_6326,_6327,_6328); }mosek::fusion::FlatExpr::FlatExpr  (std::shared_ptr< monty::ndarray< double,1 > > _6322,    std::shared_ptr< monty::ndarray< long long,1 > > _6323,    std::shared_ptr< monty::ndarray< long long,1 > > _6324,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6325,    std::shared_ptr< monty::ndarray< double,1 > > _6326,    monty::rc_ptr< ::mosek::fusion::Set > _6327,    std::shared_ptr< monty::ndarray< long long,1 > > _6328) :    FlatExpr(new mosek::fusion::p_FlatExpr(this)){ mosek::fusion::p_FlatExpr::_get_impl(this)->_initialize(_6322,_6323,_6324,_6325,_6326,_6327,_6328); }void mosek::fusion::p_FlatExpr::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _6322,    std::shared_ptr< monty::ndarray< long long,1 > > _6323,    std::shared_ptr< monty::ndarray< long long,1 > > _6324,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6325,    std::shared_ptr< monty::ndarray< double,1 > > _6326,    monty::rc_ptr< ::mosek::fusion::Set > _6327,    std::shared_ptr< monty::ndarray< long long,1 > > _6328){monty::rc_reserve __reserve_this(_pubthis); { { if ((_6322 && ((int)((_6322)->size(0)) != ((int)((_6323)->size(0)) - (int)1)))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of bfix and ptrb"));}else {}if ((! _6326 || (! _6324 || ((int)((_6324)->size(0)) != (int)((_6326)->size(0)))))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of subj and cof"));}else {}if (_6327){ if (_6328){ if (((int)((_6328)->size(0)) != ((int)((_6323)->size(0)) - (int)1))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching lengths of inst and ptrb"));}else {}}else if ((mosek::fusion::p_Set::_get_impl(_6327)->size != ((long long)((_6323)->size(0)) - (int)1))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching shape and ptrb"));}else {}}else {}(bfix = _6322); (ptrb = _6323); (subj = _6324); (x = _6325); (cof = _6326); (nnz = ((*ptrb)(((int)((ptrb)->size(0)) - (int)1)))); (shape = _6327); (inst = _6328); }}}std::string mosek::fusion::FlatExpr::toString  ( ) { return mosek::fusion::p_FlatExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_FlatExpr::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6329 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6329.get())->a(std::string ("FlatExpr:")).get())->lf().get())->a(std::string ("+-----------------")).get())->lf().get())->a(std::string ("| ptrb[")).get())->a((int)((ptrb)->size(0))).get())->a(std::string ("] = ")).get())->a(ptrb).get())->lf().get())->a(std::string ("| subj[")).get())->a((int)((subj)->size(0))).get())->a(std::string ("] = ")).get())->a(subj).get())->lf().get())->a(std::string ("| cof [")).get())->a((int)((cof)->size(0))).get())->a(std::string ("] = ")).get())->a(cof).get())->lf().get())->a(std::string ("| bfix[")); if (bfix){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6329.get())->a((int)((bfix)->size(0))); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6329.get())->a(std::string ("] = ")).get())->a(bfix).get())->lf().get())->a(std::string ("| inst[")); if (inst){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6329.get())->a((int)((inst)->size(0))); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6329.get())->a(std::string ("] = ")).get())->a(inst).get())->lf().get())->a(std::string ("+-----------------")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_6329.get())->toString(); }int mosek::fusion::FlatExpr::size  ( ) { return mosek::fusion::p_FlatExpr::_get_impl(this)->size(); }int mosek::fusion::p_FlatExpr::size( ){ return ((int)((ptrb)->size(0)) - (int)1); }void mosek::fusion::p_FlatExpr::destroy(){inst.reset();shape.reset();cof.reset();x.reset();subj.reset();ptrb.reset();bfix.reset();}void mosek::fusion::FlatExpr::destroy() { mosek::fusion::p_FlatExpr::_get_impl(this)->destroy(); }mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix  (int _6330,    int _6331,    std::shared_ptr< monty::ndarray< int,1 > > _6332,    std::shared_ptr< monty::ndarray< int,1 > > _6333,    std::shared_ptr< monty::ndarray< double,1 > > _6334,    std::shared_ptr< monty::ndarray< int,1 > > _6335,    std::shared_ptr< monty::ndarray< int,1 > > _6336,    std::shared_ptr< monty::ndarray< double,1 > > _6337,    double _6338){ return new mosek::fusion::SymmetricMatrix(_6330,_6331,_6332,_6333,_6334,_6335,_6336,_6337,_6338); }mosek::fusion::SymmetricMatrix::SymmetricMatrix  (int _6330,    int _6331,    std::shared_ptr< monty::ndarray< int,1 > > _6332,    std::shared_ptr< monty::ndarray< int,1 > > _6333,    std::shared_ptr< monty::ndarray< double,1 > > _6334,    std::shared_ptr< monty::ndarray< int,1 > > _6335,    std::shared_ptr< monty::ndarray< int,1 > > _6336,    std::shared_ptr< monty::ndarray< double,1 > > _6337,    double _6338) :    SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this)){ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_6330,_6331,_6332,_6333,_6334,_6335,_6336,_6337,_6338); }void mosek::fusion::p_SymmetricMatrix::_initialize  (int _6330,    int _6331,    std::shared_ptr< monty::ndarray< int,1 > > _6332,    std::shared_ptr< monty::ndarray< int,1 > > _6333,    std::shared_ptr< monty::ndarray< double,1 > > _6334,    std::shared_ptr< monty::ndarray< int,1 > > _6335,    std::shared_ptr< monty::ndarray< int,1 > > _6336,    std::shared_ptr< monty::ndarray< double,1 > > _6337,    double _6338){monty::rc_reserve __reserve_this(_pubthis); { { (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->d0 = _6330); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->d1 = _6331); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->usubi = _6332); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->usubj = _6333); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->uval = _6334); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->vsubi = _6335); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->vsubj = _6336); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->vval = _6337); (mosek::fusion::p_SymmetricMatrix::_get_impl(_pubthis)->scale = _6338); (nnz = (- (int)1)); }}}monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( int _6339,    std::shared_ptr< monty::ndarray< int,1 > > _6340,    std::shared_ptr< monty::ndarray< double,1 > > _6341) { return mosek::fusion::p_SymmetricMatrix::rankOne(_6339,_6340,_6341); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne( int _6339,std::shared_ptr< monty::ndarray< int,1 > > _6340,std::shared_ptr< monty::ndarray< double,1 > > _6341){ if (((int)((_6340)->size(0)) != (int)((_6341)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));}else {}int _9310 = (int)0; int _9311 = (int)((_6340)->size(0)); for (int _6342 = _9310;_6342<_9311;++_6342){ if (((((*_6340)(_6342)) < (int)0) || (((*_6340)(_6342)) >= _6339))){ throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));}else {}}std::shared_ptr< monty::ndarray< int,1 > > _6343 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9312; for (int _6344=(int)0, _9313=(int)((_6340)->size(0)); _6344 < _9313;++_6344)_9312.push_back(((*_6340)(_6344))); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9312.size()),_9312.begin(),_9312.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _6345 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9314; for (int _6346=(int)0, _9315=(int)((_6340)->size(0)); _6346 < _9315;++_6346)_9314.push_back((int)1); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9314.size()),_9314.begin(),_9314.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _6347 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9316; for (int _6348=(int)0, _9317=(int)((_6341)->size(0)); _6348 < _9317;++_6348)_9316.push_back(((*_6341)(_6348))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9316.size()),_9316.begin(),_9316.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6339,(int)1,_6343,_6345,_6347,_6343,_6345,_6347,1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( std::shared_ptr< monty::ndarray< double,1 > > _6349) { return mosek::fusion::p_SymmetricMatrix::rankOne(_6349); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne( std::shared_ptr< monty::ndarray< double,1 > > _6349){ int _6350 = (int)((_6349)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6351 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9318; for (int _6352=(int)0, _9319=_6350; _6352 < _9319;++_6352)_9318.push_back(_6352); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9318.size()),_9318.begin(),_9318.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _6353 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9320; for (int _6354=(int)0, _9321=_6350; _6354 < _9321;++_6354)_9320.push_back((int)1); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9320.size()),_9320.begin(),_9320.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _6355 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9322; for (int _6356=(int)0, _9323=_6350; _6356 < _9323;++_6356)_9322.push_back(((*_6349)(_6356))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9322.size()),_9322.begin(),_9322.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6350,(int)1,_6351,_6353,_6355,_6351,_6353,_6355,1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag  ( std::shared_ptr< monty::ndarray< double,1 > > _6357) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_6357); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag( std::shared_ptr< monty::ndarray< double,1 > > _6357){ int _6358 = (int)((_6357)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6359 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9324; for (int _6360=(int)0, _9325=_6358; _6360 < _9325;++_6360)_9324.push_back(_6360); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9324.size()),_9324.begin(),_9324.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6358,_6358,_6359,([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9326; for (int _6361=(int)0, _9327=_6358; _6361 < _9327;++_6361)_9326.push_back((_6358 - _6361)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9326.size()),_9326.begin(),_9326.end())); })(),([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9328; for (int _6362=(int)0, _9329=_6358; _6362 < _9329;++_6362)_9328.push_back(((*_6357)(_6362))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9328.size()),_9328.begin(),_9328.end())); })(),_6359,_6359,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9330; for (int _6363=(int)0, _9331=_6358; _6363 < _9331;++_6363)_9330.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9330.size()),_9330.begin(),_9330.end())); })(),1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _6364) { return mosek::fusion::p_SymmetricMatrix::diag(_6364); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag( std::shared_ptr< monty::ndarray< double,1 > > _6364){ int _6365 = (int)((_6364)->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6366 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9332; for (int _6367=(int)0, _9333=_6365; _6367 < _9333;++_6367)_9332.push_back(_6367); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9332.size()),_9332.begin(),_9332.end())); })(); return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_6365,_6365,_6366,_6366,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9334; for (int _6368=(int)0, _9335=_6365; _6368 < _9335;++_6368)_9334.push_back(((*_6364)(_6368))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9334.size()),_9334.begin(),_9334.end())); })(),_6366,_6366,([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9336; for (int _6369=(int)0, _9337=_6365; _6369 < _9337;++_6369)_9336.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9336.size()),_9336.begin(),_9336.end())); })(),1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add  ( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6370) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->add(_6370); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::add( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6370){ int _6371 = _pubthis->getdim(); if ((_6370->getdim() != _6371)){ throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));}else {}int _6372 = (int)((usubi)->size(0)); int _6373 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->usubi)->size(0)); int _6374 = (_6372 + _6373); int _6375 = (int)((vsubi)->size(0)); int _6376 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->vsubi)->size(0)); int _6377 = (_6375 + _6376); std::shared_ptr< monty::ndarray< int,1 > > _6378 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6374))); std::shared_ptr< monty::ndarray< int,1 > > _6379 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6374))); std::shared_ptr< monty::ndarray< double,1 > > _6380 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6374))); std::shared_ptr< monty::ndarray< int,1 > > _6381 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6377))); std::shared_ptr< monty::ndarray< int,1 > > _6382 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6377))); std::shared_ptr< monty::ndarray< double,1 > > _6383 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6377))); ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_6378,(int)0,_6372); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->usubi,(int)0,_6378,_6372,_6373); ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_6379,(int)0,_6372); int _9338 = (int)0; int _9339 = _6373; for (int _6384 = _9338;_6384<_9339;++_6384){ (((*_6379)((_6384 + _6372))) = (((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->usubj)(_6384)) + d1)); }if (((scale > 1.0) || (scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_6380,(int)0,_6372); }else { int _9340 = (int)0; int _9341 = _6372; for (int _6385 = _9340;_6385<_9341;++_6385){ (((*_6380)(_6385)) = (scale * ((*uval)(_6385)))); }}if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->uval,(int)0,_6380,_6372,_6373); }else { int _9342 = (int)0; int _9343 = _6373; for (int _6386 = _9342;_6386<_9343;++_6386){ (((*_6380)((_6386 + _6372))) = (mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->uval)(_6386)))); }}::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_6378,(int)0,_6372); int _9344 = (int)0; int _9345 = _6376; for (int _6387 = _9344;_6387<_9345;++_6387){ (((*_6381)((_6387 + _6375))) = (((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->vsubi)(_6387)) + mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->d1)); }::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_6382,(int)0,_6375); ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->vsubj,_6375,_6382,_6375,_6376); if (((scale > 1.0) || (scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_6383,(int)0,_6375); }else { int _9346 = (int)0; int _9347 = _6375; for (int _6388 = _9346;_6388<_9347;++_6388){ (((*_6383)(_6388)) = (scale * ((*vval)(_6388)))); }}if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->scale < 1.0))){ ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->vval,(int)0,_6383,_6375,_6376); }else { int _9348 = (int)0; int _9349 = _6376; for (int _6389 = _9348;_6389<_9349;++_6389){ (((*_6383)((_6389 + _6375))) = (mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->vval)(_6389)))); }}return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,(d1 + mosek::fusion::p_SymmetricMatrix::_get_impl(_6370)->d1),_6378,_6379,_6380,_6381,_6382,_6383,1.0); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub  ( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6390) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->sub(_6390); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::sub( monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6390){ return _pubthis->add(_6390->mul((- 1.0))); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul  ( double _6391) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->mul(_6391); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::mul( double _6391){ return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _6391)); }int mosek::fusion::SymmetricMatrix::getdim  ( ) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }int mosek::fusion::p_SymmetricMatrix::getdim( ){ return d0; }void mosek::fusion::p_SymmetricMatrix::destroy(){vval.reset();vsubj.reset();vsubi.reset();uval.reset();usubj.reset();usubi.reset();}void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }mosek::fusion::p_NDSparseArray::p_NDSparseArray  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6392,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _6393,    std::shared_ptr< monty::ndarray< double,1 > > _6394){ return new mosek::fusion::NDSparseArray(_6392,_6393,_6394); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6392,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _6393,    std::shared_ptr< monty::ndarray< double,1 > > _6394) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_6392,_6393,_6394); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6392,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _6393,    std::shared_ptr< monty::ndarray< double,1 > > _6394){monty::rc_reserve __reserve_this(_pubthis); { { std::shared_ptr< monty::ndarray< long long,1 > > _6395 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_6393)->size(0))))); (size = (long long)1); int _9350 = (int)0; int _9351 = (int)((_6392)->size(0)); for (int _6396 = _9350;_6396<_9351;++_6396){ (size = (size * ((*_6392)(_6396)))); }int _6397 = (int)((_6392)->size(0)); if (((int)((_6393)->size(0)) != (int)((_6394)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));}else {}int _9352 = (int)0; int _9353 = (int)((_6393)->size(0)); for (int _6398 = _9352;_6398<_9353;++_6398){ if (((int)((((*_6393)(_6398)))->size(0)) != _6397)){ throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));}else {}int _9354 = (int)0; int _9355 = (int)((((*_6393)(_6398)))->size(0)); for (int _6399 = _9354;_6399<_9355;++_6399){ if (((((*((*_6393)(_6398)))(_6399)) < (int)0) || (((*((*_6393)(_6398)))(_6399)) >= ((*_6392)(_6399))))){ throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));}else {}}}int _9356 = (int)0; int _9357 = (int)((_6393)->size(0)); for (int _6400 = _9356;_6400<_9357;++_6400){ long long _6401 = (long long)0; int _9358 = (int)0; int _9359 = (int)((((*_6393)(_6400)))->size(0)); for (int _6402 = _9358;_6402<_9359;++_6402){ (_6401 = ((_6401 * ((*_6392)(((_6397 - _6402) - (int)1)))) + ((*((*_6393)(_6400)))(_6402)))); }(((*_6395)(_6400)) = _6401); }(dims = ::mosek::fusion::Utils::Tools::arraycopy(_6392)); bool _6403 = true; int _9360 = (int)1; int _9361 = (int)((_6395)->size(0)); for (int _6404 = _9360;_6404<_9361;++_6404){ (_6403 = (_6403 && (((*_6395)(_6404)) >= ((*_6395)((_6404 - (int)1)))))); }if (_6403){ int _6405 = (int)1; int _9362 = (int)1; int _9363 = (int)((_6395)->size(0)); for (int _6406 = _9362;_6406<_9363;++_6406){ if ((((*_6395)((_6406 - (int)1))) > ((*_6395)(_6406)))){ ( ++ _6405 ); }else {}}if ((_6405 == (int)((_6395)->size(0)))){ (inst = ::mosek::fusion::Utils::Tools::arraycopy(_6395)); (cof = ::mosek::fusion::Utils::Tools::arraycopy(_6394)); }else { (inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6405)))); (((*inst)((int)0)) = ((*_6395)((int)0))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6405)))); (((*cof)((int)0)) = ((*_6394)((int)0))); int _6407 = (int)0; int _9364 = (int)1; int _9365 = (int)((_6395)->size(0)); for (int _6408 = _9364;_6408<_9365;++_6408){ if ((((*_6395)(_6408)) > ((*_6395)((_6408 - (int)1))))){ ( ++ _6407 ); (((*inst)(_6407)) = ((*_6395)(_6408))); (((*cof)(_6407)) = ((*_6394)(_6408))); }else { (((*cof)(_6407)) = (((*cof)(_6407)) + ((*_6394)(_6408)))); }}}}else { std::shared_ptr< monty::ndarray< long long,1 > > _6409 = ::mosek::fusion::Utils::Tools::range((long long)((_6395)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_6409,_6395,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_6395)->size(0))); int _6410 = (int)1; int _9366 = (int)1; int _9367 = (int)((_6395)->size(0)); for (int _6411 = _9366;_6411<_9367;++_6411){ if ((((*_6395)(((*_6409)((_6411 - (int)1))))) < ((*_6395)(((*_6409)(_6411)))))){ ( ++ _6410 ); }else {}}(inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6410)))); (((*inst)((int)0)) = ((*_6395)(((*_6409)((int)0))))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6410)))); (((*cof)((int)0)) = ((*_6394)(((*_6409)((int)0))))); int _6412 = (int)0; int _9368 = (int)1; int _9369 = (int)((_6395)->size(0)); for (int _6413 = _9368;_6413<_9369;++_6413){ if ((((*_6395)(((*_6409)(_6413)))) > ((*_6395)(((*_6409)((_6413 - (int)1))))))){ ( ++ _6412 ); (((*inst)(_6412)) = ((*_6395)(((*_6409)(_6413))))); (((*cof)(_6412)) = ((*_6394)(((*_6409)(_6413))))); }else { (((*cof)(_6412)) = (((*cof)(_6412)) + ((*_6394)(((*_6409)(_6413)))))); }}}}}}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6414,    std::shared_ptr< monty::ndarray< long long,1 > > _6415,    std::shared_ptr< monty::ndarray< double,1 > > _6416){ return new mosek::fusion::NDSparseArray(_6414,_6415,_6416); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _6414,    std::shared_ptr< monty::ndarray< long long,1 > > _6415,    std::shared_ptr< monty::ndarray< double,1 > > _6416) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_6414,_6415,_6416); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6414,    std::shared_ptr< monty::ndarray< long long,1 > > _6415,    std::shared_ptr< monty::ndarray< double,1 > > _6416){monty::rc_reserve __reserve_this(_pubthis); { { (size = (long long)1); int _9370 = (int)0; int _9371 = (int)((_6414)->size(0)); for (int _6417 = _9370;_6417<_9371;++_6417){ (size = (size * ((*_6414)(_6417)))); }if (((int)((_6415)->size(0)) != (int)((_6416)->size(0)))){ throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));}else {}int _9372 = (int)0; int _9373 = (int)((_6415)->size(0)); for (int _6418 = _9372;_6418<_9373;++_6418){ if (((((*_6415)(_6418)) < (int)0) || (((*_6415)(_6418)) >= size))){ throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));}else {}}(dims = ::mosek::fusion::Utils::Tools::arraycopy(_6414)); bool _6419 = true; int _9374 = (int)1; int _9375 = (int)((_6415)->size(0)); for (int _6420 = _9374;_6420<_9375;++_6420){ (_6419 = (_6419 && (((*_6415)(_6420)) >= ((*_6415)((_6420 - (int)1)))))); }if (_6419){ int _6421 = (int)1; int _9376 = (int)1; int _9377 = (int)((_6415)->size(0)); for (int _6422 = _9376;_6422<_9377;++_6422){ if ((((*_6415)((_6422 - (int)1))) > ((*_6415)(_6422)))){ ( ++ _6421 ); }else {}}if ((_6421 == (int)((_6415)->size(0)))){ (inst = ::mosek::fusion::Utils::Tools::arraycopy(_6415)); (cof = ::mosek::fusion::Utils::Tools::arraycopy(_6416)); }else { (inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6421)))); (((*inst)((int)0)) = ((*_6415)((int)0))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6421)))); (((*cof)((int)0)) = ((*_6416)((int)0))); int _6423 = (int)0; int _9378 = (int)1; int _9379 = (int)((_6415)->size(0)); for (int _6424 = _9378;_6424<_9379;++_6424){ if ((((*_6415)(_6424)) > ((*_6415)((_6424 - (int)1))))){ ( ++ _6423 ); (((*inst)(_6423)) = ((*_6415)(_6424))); (((*cof)(_6423)) = ((*_6416)(_6424))); }else { (((*cof)(_6423)) = (((*cof)(_6423)) + ((*_6416)(_6424)))); }}}}else { std::shared_ptr< monty::ndarray< long long,1 > > _6425 = ::mosek::fusion::Utils::Tools::range((long long)((_6415)->size(0))); ::mosek::fusion::p_CommonTools::argQsort(_6425,_6415,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_6415)->size(0))); int _6426 = (int)1; int _9380 = (int)1; int _9381 = (int)((_6415)->size(0)); for (int _6427 = _9380;_6427<_9381;++_6427){ if ((((*_6415)(((*_6425)((_6427 - (int)1))))) < ((*_6415)(((*_6425)(_6427)))))){ ( ++ _6426 ); }else {}}(inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6426)))); (((*inst)((int)0)) = ((*_6415)(((*_6425)((int)0))))); (cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6426)))); (((*cof)((int)0)) = ((*_6416)(((*_6425)((int)0))))); int _6428 = (int)0; int _9382 = (int)1; int _9383 = (int)((_6415)->size(0)); for (int _6429 = _9382;_6429<_9383;++_6429){ if ((((*_6415)(((*_6425)(_6429)))) > ((*inst)(((*_6425)((_6429 - (int)1))))))){ ( ++ _6428 ); (((*inst)(_6428)) = ((*_6415)(((*_6425)(_6429))))); (((*cof)(_6428)) = ((*_6416)(((*_6425)(_6429))))); }else { (((*cof)(_6428)) = (((*cof)(_6428)) + ((*_6416)(((*_6425)(_6429)))))); }}}}}}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _6430){ return new mosek::fusion::NDSparseArray(_6430); }mosek::fusion::NDSparseArray::NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _6430) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_6430); }void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _6430){monty::rc_reserve __reserve_this(_pubthis); { { long long _6431 = _6430->numNonzeros(); int _6432 = _6430->numRows(); int _6433 = _6430->numColumns(); std::shared_ptr< monty::ndarray< int,1 > > _6434 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6431))); std::shared_ptr< monty::ndarray< int,1 > > _6435 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6431))); std::shared_ptr< monty::ndarray< double,1 > > _6436 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6431))); _6430->getDataAsTriplets(_6434,_6435,_6436); (size = ((long long)_6430->numRows() * (long long)_6430->numColumns())); (dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{_6432,_6433})); (inst = ([=]()->std::shared_ptr< monty::ndarray< long long,1 > > { std::vector< long long > _9384; for (long long _6437=(long long)0, _9385=_6431; _6437 < _9385;++_6437)_9384.push_back((((long long)((*_6434)(_6437)) * _6433) + (long long)((*_6435)(_6437)))); return std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9384.size()),_9384.begin(),_9384.end())); })()); (cof = _6436); }}}monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6438) { return mosek::fusion::p_NDSparseArray::make(_6438); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make( monty::rc_ptr< ::mosek::fusion::Matrix > _6438){ return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_6438); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _6439,    std::shared_ptr< monty::ndarray< long long,1 > > _6440,    std::shared_ptr< monty::ndarray< double,1 > > _6441) { return mosek::fusion::p_NDSparseArray::make(_6439,_6440,_6441); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make( std::shared_ptr< monty::ndarray< int,1 > > _6439,std::shared_ptr< monty::ndarray< long long,1 > > _6440,std::shared_ptr< monty::ndarray< double,1 > > _6441){ return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_6439,_6440,_6441); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _6442,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _6443,    std::shared_ptr< monty::ndarray< double,1 > > _6444) { return mosek::fusion::p_NDSparseArray::make(_6442,_6443,_6444); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make( std::shared_ptr< monty::ndarray< int,1 > > _6442,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _6443,std::shared_ptr< monty::ndarray< double,1 > > _6444){ return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_6442,_6443,_6444); }void mosek::fusion::p_NDSparseArray::destroy(){cof.reset();inst.reset();dims.reset();}void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_DenseMatrix::p_DenseMatrix  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _6445,    int _6446,    std::shared_ptr< monty::ndarray< double,1 > > _6447){ return new mosek::fusion::DenseMatrix(_6445,_6446,_6447); }mosek::fusion::DenseMatrix::DenseMatrix  (int _6445,    int _6446,    std::shared_ptr< monty::ndarray< double,1 > > _6447) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6445,_6446,_6447); }void mosek::fusion::p_DenseMatrix::_initialize  (int _6445,    int _6446,    std::shared_ptr< monty::ndarray< double,1 > > _6447){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6445,_6446);(nnz = (long long)(_6445 * _6446)); (data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((_6445 * _6446))))); ::mosek::fusion::Utils::Tools::arraycopy(_6447,(int)0,data,(int)0,(_6445 * _6446)); }}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _6448){ return new mosek::fusion::DenseMatrix(_6448); }mosek::fusion::DenseMatrix::DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _6448) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6448); }void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _6448){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_6448)->dimi,mosek::fusion::p_Matrix::_get_impl(_6448)->dimj);monty::rc_ptr< ::mosek::fusion::Matrix > _9386 = _6448; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9386.get())) {::mosek::fusion::DenseMatrix::t _6449(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9386.get()));{ (data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_6449)->data)); }}else if (nullptr != dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9386.get())) {::mosek::fusion::SparseMatrix::t _6450(dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9386.get()));{ (data = ::mosek::fusion::Utils::Tools::zeros((mosek::fusion::p_Matrix::_get_impl(_6450)->dimi * mosek::fusion::p_Matrix::_get_impl(_6450)->dimj))); long long _9387 = (long long)0; long long _9388 = mosek::fusion::p_SparseMatrix::_get_impl(_6450)->nnz; for (long long _6452 = _9387;_6452<_9388;++_6452){ (((*data)(((((*mosek::fusion::p_SparseMatrix::_get_impl(_6450)->subi)(_6452)) * dimj) + ((*mosek::fusion::p_SparseMatrix::_get_impl(_6450)->subj)(_6452))))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_6450)->val)(_6452))); }}}else {mosek::fusion::Matrix::t _6451 = _9386;{ throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));}}(nnz = (long long)(dimi * dimj)); }}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _6453){ return new mosek::fusion::DenseMatrix(_6453); }mosek::fusion::DenseMatrix::DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _6453) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6453); }void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _6453){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize((int)((_6453)->size(0)),(int)((_6453)->size(1)));(data = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9389; for (int _6454=(int)0, _9390=dimi; _6454 < _9390;++_6454) for (int _6455=(int)0, _9391=dimj; _6455 < _9391;++_6455)_9389.push_back(((*_6453)(_6454,_6455))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9389.size()),_9389.begin(),_9389.end())); })()); (nnz = (long long)(dimi * dimj)); }}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _6456,    int _6457,    double _6458){ return new mosek::fusion::DenseMatrix(_6456,_6457,_6458); }mosek::fusion::DenseMatrix::DenseMatrix  (int _6456,    int _6457,    double _6458) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_6456,_6457,_6458); }void mosek::fusion::p_DenseMatrix::_initialize  (int _6456,    int _6457,    double _6458){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6456,_6457);(data = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9392; for (int _6459=(int)0, _9393=_6456; _6459 < _9393;++_6459) for (int _6460=(int)0, _9394=_6457; _6460 < _9394;++_6460)_9392.push_back(_6458); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9392.size()),_9392.begin(),_9392.end())); })()); (nnz = (long long)(_6456 * _6457)); }}std::string mosek::fusion::DenseMatrix::toString  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_DenseMatrix::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6461 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(std::string ("DenseMatrix(")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(dimi); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(std::string (",")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(dimj); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(std::string (": ")); int _6462 = (int)0; { int _6463 = (int)0; for (;(_6463 < dimi);( ++ _6463 )){ if ((_6463 > (int)0)){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(std::string (",")); }else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(std::string ("[ ")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(((*data)(_6462))); ( ++ _6462 ); { int _6464 = (int)1; for (;(_6464 < dimj);( ++ _6464 )){ mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(std::string (",")); mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(((*data)(_6462))); ( ++ _6462 ); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(std::string (" ]")); }}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->a(std::string (")")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_6461.get())->toString(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::transpose( ){ std::shared_ptr< monty::ndarray< double,1 > > _6465 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((dimi * dimj)))); int _6466 = (int)0; int _6467 = dimi; int _9395 = (int)0; int _9396 = dimi; for (int _6468 = _9395;_6468<_9396;++_6468){ int _6469 = _6468; int _9397 = (int)0; int _9398 = dimj; for (int _6470 = _9397;_6470<_9398;++_6470){ (((*_6465)(_6469)) = ((*data)(_6466))); (_6469 = (_6469 + _6467)); ( ++ _6466 ); }}return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_6465); }bool mosek::fusion::DenseMatrix::isSparse  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_DenseMatrix::isSparse( ){ return false; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix::getDataAsArray  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray( ){ return ::mosek::fusion::Utils::Tools::arraycopy(data); }void mosek::fusion::DenseMatrix::getDataAsTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _6471,    std::shared_ptr< monty::ndarray< int,1 > > _6472,    std::shared_ptr< monty::ndarray< double,1 > > _6473) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_6471,_6472,_6473); }void mosek::fusion::p_DenseMatrix::getDataAsTriplets( std::shared_ptr< monty::ndarray< int,1 > > _6471,std::shared_ptr< monty::ndarray< int,1 > > _6472,std::shared_ptr< monty::ndarray< double,1 > > _6473){ if ((((int)((_6471)->size(0)) < nnz) || (((int)((_6472)->size(0)) < nnz) || ((int)((_6473)->size(0)) < nnz)))){ throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));}else {}::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_6473,(int)0,(int)((data)->size(0))); int _6474 = (int)0; int _9399 = (int)0; int _9400 = dimi; for (int _6475 = _9399;_6475<_9400;++_6475){ int _9401 = (int)0; int _9402 = dimj; for (int _6476 = _9401;_6476<_9402;++_6476){ (((*_6471)(_6474)) = _6475); (((*_6472)(_6474)) = _6476); ( ++ _6474 ); }}}double mosek::fusion::DenseMatrix::get  ( int _6477,    int _6478) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_6477,_6478); }double mosek::fusion::p_DenseMatrix::get( int _6477,int _6478){ return ((*data)(((_6477 * dimi) + _6478))); }long long mosek::fusion::DenseMatrix::numNonzeros  ( ) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_DenseMatrix::numNonzeros( ){ return (long long)(dimi * dimj); }void mosek::fusion::p_DenseMatrix::destroy(){data.reset();}void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_SparseMatrix::p_SparseMatrix  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _6479,    int _6480,    std::shared_ptr< monty::ndarray< int,1 > > _6481,    std::shared_ptr< monty::ndarray< int,1 > > _6482,    std::shared_ptr< monty::ndarray< double,1 > > _6483,    long long _6484){ return new mosek::fusion::SparseMatrix(_6479,_6480,_6481,_6482,_6483,_6484); }mosek::fusion::SparseMatrix::SparseMatrix  (int _6479,    int _6480,    std::shared_ptr< monty::ndarray< int,1 > > _6481,    std::shared_ptr< monty::ndarray< int,1 > > _6482,    std::shared_ptr< monty::ndarray< double,1 > > _6483,    long long _6484) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_6479,_6480,_6481,_6482,_6483,_6484); }void mosek::fusion::p_SparseMatrix::_initialize  (int _6479,    int _6480,    std::shared_ptr< monty::ndarray< int,1 > > _6481,    std::shared_ptr< monty::ndarray< int,1 > > _6482,    std::shared_ptr< monty::ndarray< double,1 > > _6483,    long long _6484){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6479,_6480);if ((_6484 > (int)0)){ if ((((int)((_6481)->size(0)) < _6484) || (((int)((_6482)->size(0)) < _6484) || ((int)((_6483)->size(0)) < _6484)))){ throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));}else {}long long _9403 = (long long)0; long long _9404 = _6484; for (long long _6485 = _9403;_6485<_9404;++_6485){ if (((((*_6481)(_6485)) < (int)0) || ((((*_6481)(_6485)) >= dimi) || ((((*_6482)(_6485)) < (int)0) || (((*_6482)(_6485)) >= dimj))))){ throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));}else {}}std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _6486 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _6487 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1))); std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _6488 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1))); ::mosek::fusion::p_CommonTools::tripletSort(_6481,_6482,_6483,_6486,_6487,_6488,_6484,dimi,dimj); (subi = ((*_6486)((int)0))); (subj = ((*_6487)((int)0))); (val = ((*_6488)((int)0))); (nnz = (long long)((val)->size(0))); }else { (subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); (val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)))); (nnz = (long long)0); }}}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _6489,    int _6490,    std::shared_ptr< monty::ndarray< int,1 > > _6491,    std::shared_ptr< monty::ndarray< int,1 > > _6492,    std::shared_ptr< monty::ndarray< double,1 > > _6493){ return new mosek::fusion::SparseMatrix(_6489,_6490,_6491,_6492,_6493); }mosek::fusion::SparseMatrix::SparseMatrix  (int _6489,    int _6490,    std::shared_ptr< monty::ndarray< int,1 > > _6491,    std::shared_ptr< monty::ndarray< int,1 > > _6492,    std::shared_ptr< monty::ndarray< double,1 > > _6493) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_6489,_6490,_6491,_6492,_6493); }void mosek::fusion::p_SparseMatrix::_initialize  (int _6489,    int _6490,    std::shared_ptr< monty::ndarray< int,1 > > _6491,    std::shared_ptr< monty::ndarray< int,1 > > _6492,    std::shared_ptr< monty::ndarray< double,1 > > _6493){monty::rc_reserve __reserve_this(_pubthis); { mosek::fusion::p_Matrix::_initialize(_6489,_6490);int _6494 = (int)0; int _9405 = (int)0; int _9406 = (int)((_6493)->size(0)); for (int _6495 = _9405;_6495<_9406;++_6495){ if (((((*_6493)(_6495)) > (int)0) || (((*_6493)(_6495)) < (int)0))){ ( ++ _6494 ); }else {}}if (((_6494 > (int)0) && (_6494 < (int)((_6491)->size(0))))){ (subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6494)))); (subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6494)))); (val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6494)))); (nnz = _6494); int _6496 = (int)0; int _9407 = (int)0; int _9408 = (int)((val)->size(0)); for (int _6497 = _9407;_6497<_9408;++_6497){ if (((((*_6493)(_6497)) < (int)0) || (((*_6493)(_6497)) > (int)0))){ (((*val)(_6496)) = ((*val)(_6497))); (((*subi)(_6496)) = ((*subj)(_6497))); (((*subi)(_6496)) = ((*subi)(_6497))); ( ++ _6496 ); }else {}}}else { (subi = _6491); (subj = _6492); (val = _6493); if (! _6491){ (nnz = (long long)0); }else { (nnz = (long long)((subi)->size(0))); }}}}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SparseMatrix::formPtrb( ){ std::shared_ptr< monty::ndarray< long long,1 > > _6498 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((dimi + (int)1)))); long long _6499 = (long long)0; int _9409 = (int)0; int _9410 = dimi; for (int _6500 = _9409;_6500<_9410;++_6500){ (((*_6498)(_6500)) = _6499); { for (;((_6499 < nnz) && (((*subi)(_6499)) == _6500));( ++ _6499 )){ }}}(((*_6498)(dimi)) = _6499); return _6498; }std::string mosek::fusion::SparseMatrix::toString  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_SparseMatrix::toString( ){ monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6501 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer(); mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6501.get())->a(std::string ("SparseMatrix(")).get())->a(dimi).get())->a(std::string (",")).get())->a(dimj).get())->a(std::string (", [")); if ((subi && ((int)((subi)->size(0)) > (int)0))){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6501.get())->a(std::string ("(")).get())->a(((*subi)((int)0))).get())->a(std::string (",")).get())->a(((*subj)((int)0))).get())->a(std::string (",")).get())->a(((*val)((int)0))).get())->a(std::string (")")); int _9411 = (int)1; int _9412 = (int)((subi)->size(0)); for (int _6502 = _9411;_6502<_9412;++_6502){ mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(mosek::fusion::Utils::p_StringBuffer::_get_impl(_6501.get())->a(std::string (",(")).get())->a(((*subi)(_6502))).get())->a(std::string (",")).get())->a(((*subj)(_6502))).get())->a(std::string (",")).get())->a(((*val)(_6502))).get())->a(std::string (")")); }}else {}mosek::fusion::Utils::p_StringBuffer::_get_impl(_6501.get())->a(std::string (" ])")); return mosek::fusion::Utils::p_StringBuffer::_get_impl(_6501.get())->toString(); }long long mosek::fusion::SparseMatrix::numNonzeros  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_SparseMatrix::numNonzeros( ){ return nnz; }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::transpose( ){ return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val); }bool mosek::fusion::SparseMatrix::isSparse  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_SparseMatrix::isSparse( ){ return true; }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix::getDataAsArray  ( ) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray( ){ std::shared_ptr< monty::ndarray< double,1 > > _6503 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((dimi * dimj)))); int _9413 = (int)0; int _9414 = (int)((subi)->size(0)); for (int _6504 = _9413;_6504<_9414;++_6504){ (((*_6503)(((((*subi)(_6504)) * dimj) + ((*subj)(_6504))))) = ((*val)(_6504))); }return _6503; }void mosek::fusion::SparseMatrix::getDataAsTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _6505,    std::shared_ptr< monty::ndarray< int,1 > > _6506,    std::shared_ptr< monty::ndarray< double,1 > > _6507) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_6505,_6506,_6507); }void mosek::fusion::p_SparseMatrix::getDataAsTriplets( std::shared_ptr< monty::ndarray< int,1 > > _6505,std::shared_ptr< monty::ndarray< int,1 > > _6506,std::shared_ptr< monty::ndarray< double,1 > > _6507){ if ((((long long)((_6505)->size(0)) < nnz) || (((long long)((_6506)->size(0)) < nnz) || ((long long)((_6507)->size(0)) < nnz)))){ throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));}else {}if ((subi && ((int)((subi)->size(0)) > (int)0))){ ::mosek::fusion::Utils::Tools::arraycopy(subi,(long long)0,_6505,(long long)0,nnz); ::mosek::fusion::Utils::Tools::arraycopy(subj,(long long)0,_6506,(long long)0,nnz); ::mosek::fusion::Utils::Tools::arraycopy(val,(long long)0,_6507,(long long)0,nnz); }else {}}double mosek::fusion::SparseMatrix::get  ( int _6508,    int _6509) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_6508,_6509); }double mosek::fusion::p_SparseMatrix::get( int _6508,int _6509){ if (((_6508 < (int)0) || ((_6508 >= dimi) || ((_6509 < (int)0) || (_6509 >= dimj))))){ throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));}else {}int _6510 = (int)0; int _6511 = (int)((subi)->size(0)); while (((_6511 - _6510) > (int)1)) { int _6512 = ((_6510 + _6511) / (int)2); if (((((*subi)(_6512)) < _6508) || ((((*subi)(_6512)) == _6508) && (((*subj)(_6512)) < _6509)))){ (_6510 = _6512); }else if (((((*subi)(_6512)) > _6508) || ((((*subi)(_6512)) == _6508) && (((*subj)(_6512)) > _6509)))){ (_6511 = _6512); }else { return ((*val)(_6512)); }}if (((((*subi)(_6510)) == _6508) && (((*subj)(_6510)) == _6509))){ return ((*val)(_6510)); }else { return 0.0; }}void mosek::fusion::p_SparseMatrix::destroy(){val.reset();subj.reset();subi.reset();}void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_Matrix::p_Matrix  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Matrix::_initialize  (int _6513,    int _6514){monty::rc_reserve __reserve_this(_pubthis); { { if (((_6513 < (int)0) || (_6514 < (int)0))){ throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));}else {}(dimi = _6513); (dimj = _6514); }}}std::string mosek::fusion::Matrix::toString  ( ) { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_Matrix::toString( ){ return std::string (""); }void mosek::fusion::p_Matrix::switchDims( ){ int _6515 = dimi; (dimi = dimj); (dimj = _6515); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _6516,    monty::rc_ptr< ::mosek::fusion::Matrix > _6517) { return mosek::fusion::p_Matrix::diag(_6516,_6517); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( int _6516,monty::rc_ptr< ::mosek::fusion::Matrix > _6517){ return ::mosek::fusion::p_Matrix::diag(([=]()->std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > { std::vector< monty::rc_ptr< ::mosek::fusion::Matrix > > _9415; for (int _6518=(int)0, _9416=_6516; _6518 < _9416;++_6518)_9415.push_back(_6517); return std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_9415.size()),_9415.begin(),_9415.end())); })()); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _6519) { return mosek::fusion::p_Matrix::diag(_6519); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _6519){ std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _6520 = _6519; long long _6521 = (long long)0; int _6522 = (int)0; int _6523 = (int)0; int _9417 = (int)0; int _9418 = (int)((_6519)->size(0)); for (int _6524 = _9417;_6524<_9418;++_6524){ (_6522 = (_6522 + mosek::fusion::p_Matrix::_get_impl(((*_6519)(_6524)))->dimi)); (_6523 = (_6523 + mosek::fusion::p_Matrix::_get_impl(((*_6519)(_6524)))->dimj)); (_6521 = (_6521 + ((*_6519)(_6524))->numNonzeros())); }std::shared_ptr< monty::ndarray< int,1 > > _6525 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6521))); std::shared_ptr< monty::ndarray< int,1 > > _6526 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6521))); std::shared_ptr< monty::ndarray< double,1 > > _6527 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6521))); { int _6528 = (int)0; int _6529 = (int)0; long long _6530 = (long long)0; int _9419 = (int)0; int _9420 = (int)((_6519)->size(0)); for (int _6531 = _9419;_6531<_9420;++_6531){ long long _6532 = ((*_6519)(_6531))->numNonzeros(); std::shared_ptr< monty::ndarray< int,1 > > _6533 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6532))); std::shared_ptr< monty::ndarray< int,1 > > _6534 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6532))); std::shared_ptr< monty::ndarray< double,1 > > _6535 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6532))); ((*_6519)(_6531))->getDataAsTriplets(_6533,_6534,_6535); ::mosek::fusion::Utils::Tools::arraycopy(_6535,(long long)0,_6527,_6530,_6532); long long _9421 = (long long)0; long long _9422 = _6532; for (long long _6536 = _9421;_6536<_9422;++_6536){ (((*_6525)((_6530 + _6536))) = (((*_6533)(_6536)) + _6528)); (((*_6526)((_6530 + _6536))) = (((*_6533)(_6536)) + _6529)); }(_6530 = (_6530 + _6532)); (_6528 = (_6528 + mosek::fusion::p_Matrix::_get_impl(((*_6519)(_6531)))->dimi)); (_6529 = (_6529 + mosek::fusion::p_Matrix::_get_impl(((*_6519)(_6531)))->dimj)); }}return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6522,_6523,_6525,_6526,_6527); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _6537,    double _6538,    int _6539) { return mosek::fusion::p_Matrix::antidiag(_6537,_6538,_6539); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( int _6537,double _6538,int _6539){ if (((_6539 < _6537) && (_6539 >= (int)0))){ return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_6538,(_6537 - _6539)),_6539); }else if (((_6539 > (- _6537)) && (_6539 < (int)0))){ return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_6538,(_6537 + _6539)),_6539); }else { throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));}}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _6540,    double _6541) { return mosek::fusion::p_Matrix::antidiag(_6540,_6541); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( int _6540,double _6541){ return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_6541,_6540),(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _6542,    double _6543,    int _6544) { return mosek::fusion::p_Matrix::diag(_6542,_6543,_6544); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( int _6542,double _6543,int _6544){ if (((_6544 < _6542) && (_6544 >= (int)0))){ return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_6543,(_6542 - _6544)),_6544); }else if (((_6544 > (- _6542)) && (_6544 < (int)0))){ return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_6543,(_6542 + _6544)),_6544); }else { throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));}}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _6545,    double _6546) { return mosek::fusion::p_Matrix::diag(_6545,_6546); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( int _6545,double _6546){ return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_6546,_6545),(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _6547,    int _6548) { return mosek::fusion::p_Matrix::antidiag(_6547,_6548); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( std::shared_ptr< monty::ndarray< double,1 > > _6547,int _6548){ int _6549 = ([&]() -> int { if ( (_6548 > (int)0)) return (_6548); else return ((- _6548)); })(); int _6550 = ((int)((_6547)->size(0)) + _6549); int _6551 = (int)((_6547)->size(0)); if ((_6548 >= (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _6552 = ::mosek::fusion::Utils::Tools::range(_6548,(_6551 + _6548)); std::shared_ptr< monty::ndarray< int,1 > > _6553 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9423; for (int _6554=(int)1, _9424=(_6551 + (int)1); _6554 < _9424;++_6554)_9423.push_back(((_6551 + _6548) - _6554)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9423.size()),_9423.begin(),_9423.end())); })(); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6550,_6550,_6552,_6553,_6547); }else { std::shared_ptr< monty::ndarray< int,1 > > _6555 = ::mosek::fusion::Utils::Tools::range((int)0,_6551); std::shared_ptr< monty::ndarray< int,1 > > _6556 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9425; for (int _6557=(int)1, _9426=(_6551 + (int)1); _6557 < _9426;++_6557)_9425.push_back((_6551 - _6557)); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9425.size()),_9425.begin(),_9425.end())); })(); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6550,_6550,_6555,_6556,_6547); }}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _6558) { return mosek::fusion::p_Matrix::antidiag(_6558); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag( std::shared_ptr< monty::ndarray< double,1 > > _6558){ return ::mosek::fusion::p_Matrix::antidiag(_6558,(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _6559,    int _6560) { return mosek::fusion::p_Matrix::diag(_6559,_6560); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( std::shared_ptr< monty::ndarray< double,1 > > _6559,int _6560){ int _6561 = ([&]() -> int { if ( (_6560 > (int)0)) return (_6560); else return ((- _6560)); })(); int _6562 = ((int)((_6559)->size(0)) + _6561); int _6563 = (int)((_6559)->size(0)); if ((_6560 >= (int)0)){ std::shared_ptr< monty::ndarray< int,1 > > _6564 = ::mosek::fusion::Utils::Tools::range((int)0,_6563); std::shared_ptr< monty::ndarray< int,1 > > _6565 = ::mosek::fusion::Utils::Tools::range(_6561,(_6563 + _6561)); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6562,_6562,_6564,_6565,_6559); }else { std::shared_ptr< monty::ndarray< int,1 > > _6566 = ::mosek::fusion::Utils::Tools::range(_6561,(_6563 + _6561)); std::shared_ptr< monty::ndarray< int,1 > > _6567 = ::mosek::fusion::Utils::Tools::range((int)0,_6563); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6562,_6562,_6566,_6567,_6559); }}monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _6568) { return mosek::fusion::p_Matrix::diag(_6568); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag( std::shared_ptr< monty::ndarray< double,1 > > _6568){ return ::mosek::fusion::p_Matrix::diag(_6568,(int)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones  ( int _6569,    int _6570) { return mosek::fusion::p_Matrix::ones(_6569,_6570); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones( int _6569,int _6570){ return ::mosek::fusion::p_Matrix::dense(_6569,_6570,1.0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye  ( int _6571) { return mosek::fusion::p_Matrix::eye(_6571); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye( int _6571){ return ::mosek::fusion::p_Matrix::diag(([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9427; for (int _6572=(int)0, _9428=_6571; _6572 < _9428;++_6572)_9427.push_back(1.0); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9427.size()),_9427.begin(),_9427.end())); })()); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6573) { return mosek::fusion::p_Matrix::dense(_6573); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( monty::rc_ptr< ::mosek::fusion::Matrix > _6573){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6573); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _6574,    int _6575,    double _6576) { return mosek::fusion::p_Matrix::dense(_6574,_6575,_6576); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( int _6574,int _6575,double _6576){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6574,_6575,_6576); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _6577,    int _6578,    std::shared_ptr< monty::ndarray< double,1 > > _6579) { return mosek::fusion::p_Matrix::dense(_6577,_6578,_6579); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( int _6577,int _6578,std::shared_ptr< monty::ndarray< double,1 > > _6579){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6577,_6578,_6579); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( std::shared_ptr< monty::ndarray< double,2 > > _6580) { return mosek::fusion::p_Matrix::dense(_6580); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense( std::shared_ptr< monty::ndarray< double,2 > > _6580){ return ::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_6580); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6581) { return mosek::fusion::p_Matrix::sparse(_6581); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( monty::rc_ptr< ::mosek::fusion::Matrix > _6581){ std::shared_ptr< monty::ndarray< int,1 > > _6582 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6581->numNonzeros()))); std::shared_ptr< monty::ndarray< int,1 > > _6583 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6581->numNonzeros()))); std::shared_ptr< monty::ndarray< double,1 > > _6584 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6581->numNonzeros()))); _6581->getDataAsTriplets(_6582,_6583,_6584); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6581->numRows(),_6581->numColumns(),_6582,_6583,_6584); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _6585) { return mosek::fusion::p_Matrix::sparse(_6585); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _6585){ int _6586 = (int)((_6585)->size(0)); int _6587 = (int)((((*_6585)((int)0)))->size(0)); std::shared_ptr< monty::ndarray< int,1 > > _6588 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6586))); std::shared_ptr< monty::ndarray< int,1 > > _6589 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6587))); long long _6590 = (long long)0; int _6591 = (int)0; { int _6592 = (int)0; for (;(_6592 < _6586);( ++ _6592 )){ { int _6593 = (int)0; for (;(_6593 < _6587);( ++ _6593 )){ monty::rc_ptr< ::mosek::fusion::Matrix > _6594 = ((*((*_6585)(_6592)))(_6593)); if (_6594){ if ((((*_6589)(_6593)) == (int)0)){ (((*_6589)(_6593)) = mosek::fusion::p_Matrix::_get_impl(_6594)->dimj); }else if ((((*_6589)(_6593)) != mosek::fusion::p_Matrix::_get_impl(_6594)->dimj)){ throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));}else {}if ((((*_6588)(_6592)) == (int)0)){ (((*_6588)(_6592)) = mosek::fusion::p_Matrix::_get_impl(_6594)->dimi); }else if ((((*_6588)(_6592)) != mosek::fusion::p_Matrix::_get_impl(_6594)->dimi)){ throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));}else {}(_6590 = (_6590 + _6594->numNonzeros())); }else {}( ++ _6591 ); }}}}std::shared_ptr< monty::ndarray< double,1 > > _6595 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6590))); std::shared_ptr< monty::ndarray< int,1 > > _6596 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6590))); std::shared_ptr< monty::ndarray< int,1 > > _6597 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6590))); int _6598 = (int)0; int _6599 = (int)0; { int _6600 = (int)0; for (;(_6600 < _6586);( ++ _6600 )){ std::shared_ptr< monty::ndarray< int,1 > > _6601 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6587))); { int _6602 = (int)0; for (;(_6602 < ((*_6588)(_6600)));( ++ _6602 )){ int _6603 = (int)0; { int _6604 = (int)0; for (;(_6604 < _6587);( ++ _6604 )){ monty::rc_ptr< ::mosek::fusion::Matrix > _6605 = ((*((*_6585)(_6600)))(_6604)); if (_6605){ monty::rc_ptr< ::mosek::fusion::Matrix > _9429 = _6605; if (nullptr != dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9429.get())) {::mosek::fusion::DenseMatrix::t _6606(dynamic_cast< ::mosek::fusion::DenseMatrix* >(_9429.get()));{ int _6609 = ((*_6601)(_6604)); { int _6610 = (int)0; for (;(_6610 < mosek::fusion::p_Matrix::_get_impl(_6606)->dimj);( ++ _6610 )){ (((*_6595)(_6598)) = ((*mosek::fusion::p_DenseMatrix::_get_impl(_6606)->data)(_6609))); (((*_6596)(_6598)) = (_6599 + _6602)); (((*_6597)(_6598)) = (_6603 + _6610)); ( ++ _6609 ); ( ++ _6598 ); }}(((*_6601)(_6604)) = _6609); }}else if (nullptr != dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9429.get())) {::mosek::fusion::SparseMatrix::t _6607(dynamic_cast< ::mosek::fusion::SparseMatrix* >(_9429.get()));{ int _6611; { (_6611 = ((*_6601)(_6604))); for (;((_6611 < mosek::fusion::p_SparseMatrix::_get_impl(_6607)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_6607)->subi)(_6611)) == _6602));( ++ _6611 )){ (((*_6595)(_6598)) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_6607)->val)(_6611))); (((*_6597)(_6598)) = (((*mosek::fusion::p_SparseMatrix::_get_impl(_6607)->subj)(_6611)) + _6603)); (((*_6596)(_6598)) = (_6599 + _6602)); ( ++ _6598 ); }}(((*_6601)(_6604)) = _6611); }}else {mosek::fusion::Matrix::t _6608 = _9429;{ throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));}}}else {}(_6603 = (_6603 + ((*_6589)(_6604)))); }}}}(_6599 = (_6599 + ((*_6588)(_6600)))); }}int _6612 = (int)0; int _6613 = (int)0; { int _6614 = (int)0; for (;(_6614 < _6586);( ++ _6614 )){ (_6612 = (_6612 + ((*_6588)(_6614)))); }}{ int _6615 = (int)0; for (;(_6615 < _6587);( ++ _6615 )){ (_6613 = (_6613 + ((*_6589)(_6615)))); }}return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6612,_6613,_6596,_6597,_6595); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< double,2 > > _6616) { return mosek::fusion::p_Matrix::sparse(_6616); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< double,2 > > _6616){ int _6617 = (int)((_6616)->size(0)); int _6618 = (int)((_6616)->size(1)); long long _6619 = (long long)(_6617 * _6618); std::shared_ptr< monty::ndarray< int,1 > > _6620 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9430; for (int _6621=(int)0, _9431=_6617; _6621 < _9431;++_6621) for (int _6622=(int)0, _9432=_6618; _6622 < _9432;++_6622)_9430.push_back(_6621); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9430.size()),_9430.begin(),_9430.end())); })(); std::shared_ptr< monty::ndarray< int,1 > > _6623 = ([=]()->std::shared_ptr< monty::ndarray< int,1 > > { std::vector< int > _9433; for (int _6624=(int)0, _9434=_6617; _6624 < _9434;++_6624) for (int _6625=(int)0, _9435=_6618; _6625 < _9435;++_6625)_9433.push_back(_6625); return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9433.size()),_9433.begin(),_9433.end())); })(); std::shared_ptr< monty::ndarray< double,1 > > _6626 = ([=]()->std::shared_ptr< monty::ndarray< double,1 > > { std::vector< double > _9436; for (int _6627=(int)0, _9437=_6617; _6627 < _9437;++_6627) for (int _6628=(int)0, _9438=_6618; _6628 < _9438;++_6628)_9436.push_back(((*_6616)(_6627,_6628))); return std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9436.size()),_9436.begin(),_9436.end())); })(); return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6617,_6618,_6620,_6623,_6626); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6629,    int _6630) { return mosek::fusion::p_Matrix::sparse(_6629,_6630); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( int _6629,int _6630){ return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6629,_6630,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(long long)0); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6631,    int _6632,    std::shared_ptr< monty::ndarray< int,1 > > _6633,    std::shared_ptr< monty::ndarray< int,1 > > _6634,    double _6635) { return mosek::fusion::p_Matrix::sparse(_6631,_6632,_6633,_6634,_6635); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( int _6631,int _6632,std::shared_ptr< monty::ndarray< int,1 > > _6633,std::shared_ptr< monty::ndarray< int,1 > > _6634,double _6635){ int _6636 = (int)0; if (_6633){ (_6636 = (int)((_6633)->size(0))); }else if (_6634){ (_6636 = (int)((_6634)->size(0))); }else {}return ::mosek::fusion::p_Matrix::sparse(_6631,_6632,_6633,_6634,::mosek::fusion::Utils::Tools::makevector(_6635,_6636)); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _6637,    std::shared_ptr< monty::ndarray< int,1 > > _6638,    double _6639) { return mosek::fusion::p_Matrix::sparse(_6637,_6638,_6639); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< int,1 > > _6637,std::shared_ptr< monty::ndarray< int,1 > > _6638,double _6639){ int _6640 = (int)0; int _6641 = (int)0; int _6642 = (int)((_6637)->size(0)); if ((_6642 > (int)((_6638)->size(0)))){ (_6642 = (int)((_6638)->size(0))); }else {}int _9439 = (int)0; int _9440 = _6642; for (int _6643 = _9439;_6643<_9440;++_6643){ if ((_6640 < ((*_6637)(_6643)))){ (_6640 = ((*_6637)(_6643))); }else {}if ((_6641 < ((*_6638)(_6643)))){ (_6641 = ((*_6638)(_6643))); }else {}}return ::mosek::fusion::p_Matrix::sparse((_6640 + (int)1),(_6641 + (int)1),_6637,_6638,_6639); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _6644,    std::shared_ptr< monty::ndarray< int,1 > > _6645,    std::shared_ptr< monty::ndarray< double,1 > > _6646) { return mosek::fusion::p_Matrix::sparse(_6644,_6645,_6646); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( std::shared_ptr< monty::ndarray< int,1 > > _6644,std::shared_ptr< monty::ndarray< int,1 > > _6645,std::shared_ptr< monty::ndarray< double,1 > > _6646){ int _6647 = (int)0; int _6648 = (int)0; int _6649 = (int)((_6644)->size(0)); if ((_6649 > (int)((_6645)->size(0)))){ (_6649 = (int)((_6645)->size(0))); }else {}if ((_6649 > (int)((_6646)->size(0)))){ (_6649 = (int)((_6646)->size(0))); }else {}int _9441 = (int)0; int _9442 = _6649; for (int _6650 = _9441;_6650<_9442;++_6650){ if ((_6647 < ((*_6644)(_6650)))){ (_6647 = ((*_6644)(_6650))); }else {}if ((_6648 < ((*_6645)(_6650)))){ (_6648 = ((*_6645)(_6650))); }else {}}return ::mosek::fusion::p_Matrix::sparse((_6647 + (int)1),(_6648 + (int)1),_6644,_6645,_6646); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _6651,    int _6652,    std::shared_ptr< monty::ndarray< int,1 > > _6653,    std::shared_ptr< monty::ndarray< int,1 > > _6654,    std::shared_ptr< monty::ndarray< double,1 > > _6655) { return mosek::fusion::p_Matrix::sparse(_6651,_6652,_6653,_6654,_6655); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse( int _6651,int _6652,std::shared_ptr< monty::ndarray< int,1 > > _6653,std::shared_ptr< monty::ndarray< int,1 > > _6654,std::shared_ptr< monty::ndarray< double,1 > > _6655){ std::shared_ptr< monty::ndarray< int,1 > > _6656 = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( _6653) return (_6653); else return (std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); })(); std::shared_ptr< monty::ndarray< int,1 > > _6657 = ([&]() -> std::shared_ptr< monty::ndarray< int,1 > > { if ( _6654) return (_6654); else return (std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)))); })(); std::shared_ptr< monty::ndarray< double,1 > > _6658 = ([&]() -> std::shared_ptr< monty::ndarray< double,1 > > { if ( _6655) return (_6655); else return (std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)))); })(); long long _6659 = (long long)((_6656)->size(0)); if ((((long long)((_6657)->size(0)) != _6659) || ((long long)((_6658)->size(0)) != _6659))){ throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));}else {}return ::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_6651,_6652,_6656,_6657,_6658,_6659); }int mosek::fusion::Matrix::numColumns  ( ) { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }int mosek::fusion::p_Matrix::numColumns( ){ return dimj; }int mosek::fusion::Matrix::numRows  ( ) { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }int mosek::fusion::p_Matrix::numRows( ){ return dimi; }void mosek::fusion::p_Matrix::destroy(){}void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }mosek::fusion::UnimplementedError::UnimplementedError  ( const std::string &  _6665) : RuntimeException(_6665){ }mosek::fusion::FatalError::FatalError  ( const std::string &  _6666) : RuntimeException(_6666){ }mosek::fusion::UnexpectedError::UnexpectedError  ( ::mosek::fusion::FusionException _6667) : RuntimeException(_6667.toString()){ }mosek::fusion::UnexpectedError::UnexpectedError  ( const std::string &  _6668) : RuntimeException(_6668){ }mosek::fusion::SparseFormatError::SparseFormatError  ( const std::string &  _6669) : mosek::fusion::FusionRuntimeException(_6669){ }mosek::fusion::SolutionError::SolutionError  ( ) : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined")){ }mosek::fusion::SolutionError::SolutionError  ( const std::string &  _6670) : mosek::fusion::FusionException(_6670){ }mosek::fusion::SliceError::SliceError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range")){ }mosek::fusion::SliceError::SliceError  ( const std::string &  _6671) : mosek::fusion::FusionRuntimeException(_6671){ }mosek::fusion::SetDefinitionError::SetDefinitionError  ( const std::string &  _6672) : mosek::fusion::FusionRuntimeException(_6672){ }mosek::fusion::OptimizeError::OptimizeError  ( const std::string &  _6673) : mosek::fusion::FusionRuntimeException(_6673){ }mosek::fusion::NameError::NameError  ( const std::string &  _6674) : mosek::fusion::FusionRuntimeException(_6674){ }mosek::fusion::ModelError::ModelError  ( const std::string &  _6675) : mosek::fusion::FusionRuntimeException(_6675){ }mosek::fusion::MatrixError::MatrixError  ( const std::string &  _6676) : mosek::fusion::FusionRuntimeException(_6676){ }mosek::fusion::DimensionError::DimensionError  ( const std::string &  _6677) : mosek::fusion::FusionRuntimeException(_6677){ }mosek::fusion::LengthError::LengthError  ( const std::string &  _6678) : mosek::fusion::FusionRuntimeException(_6678){ }mosek::fusion::RangeError::RangeError  ( const std::string &  _6679) : mosek::fusion::FusionRuntimeException(_6679){ }mosek::fusion::IndexError::IndexError  ( const std::string &  _6680) : mosek::fusion::FusionRuntimeException(_6680){ }mosek::fusion::DomainError::DomainError  ( const std::string &  _6681) : mosek::fusion::FusionRuntimeException(_6681){ }mosek::fusion::ValueConversionError::ValueConversionError  ( const std::string &  _6682) : mosek::fusion::FusionRuntimeException(_6682){ }mosek::fusion::ParameterError::ParameterError  ( const std::string &  _6683) : mosek::fusion::FusionRuntimeException(_6683){ }mosek::fusion::ExpressionError::ExpressionError  ( const std::string &  _6684) : mosek::fusion::FusionRuntimeException(_6684){ }mosek::fusion::IOError::IOError  ( const std::string &  _6685) : mosek::fusion::FusionRuntimeException(_6685){ }mosek::fusion::FusionRuntimeException::FusionRuntimeException  ( const std::string &  _6686) : RuntimeException(_6686){ (msg = _6686); }std::string mosek::fusion::FusionRuntimeException::toString(){ return msg; }mosek::fusion::FusionException::FusionException  ( const std::string &  _6687) : Exception(_6687){ (msg = _6687); }std::string mosek::fusion::FusionException::toString(){ return msg; }mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }mosek::fusion::p_Parameters::p_Parameters  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6688,    const std::string & _6689,    double _6690) { mosek::fusion::p_Parameters::setParameter(_6688,_6689,_6690); }void mosek::fusion::p_Parameters::setParameter( monty::rc_ptr< ::mosek::fusion::Model > _6688,const std::string & _6689,double _6690){ if (false){ }else if ((_6689 == std::string ("simStabilityPriority"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6691 = _6690; if ((_6691 <= (int)100)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_SIM_STABILITY_PRIORITY"),_6691); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simStabilityPriority)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simStabilityPriority)"));}}else if ((_6689 == std::string ("simPrimalPhaseoneMethod"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6692 = _6690; if ((_6692 <= (int)10)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6692); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else if ((_6689 == std::string ("mioNodeOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));}else if ((_6689 == std::string ("presolveLevel"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6693 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6693); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else if ((_6689 == std::string ("mioMtUserCb"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMtUserCb)"));}else if ((_6689 == std::string ("presolveUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));}else if ((_6689 == std::string ("mioCutKnapsackCover"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));}else if ((_6689 == std::string ("intpntOrderMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));}else if ((_6689 == std::string ("logInfeasAna"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6694 = _6690; if (((int)0 <= _6694)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6694); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else if ((_6689 == std::string ("simPrimalSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));}else if ((_6689 == std::string ("simDualRestrictSelection"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6695 = _6690; if ((_6695 <= (int)100)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6695); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else if ((_6689 == std::string ("logMioFreq"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6696 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6696); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else if ((_6689 == std::string ("mioRootOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));}else if ((_6689 == std::string ("simDualPhaseoneMethod"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6697 = _6690; if ((_6697 <= (int)10)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6697); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else if ((_6689 == std::string ("logBiFreq"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6698 = _6690; if (((int)0 <= _6698)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6698); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else if ((_6689 == std::string ("logPresolve"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6699 = _6690; if (((int)0 <= _6699)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6699); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else if ((_6689 == std::string ("intpntOffColTrh"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6700 = _6690; if (((int)0 <= _6700)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6700); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else if ((_6689 == std::string ("mioMode"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));}else if ((_6689 == std::string ("mioCutGmi"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));}else if ((_6689 == std::string ("licenseTrhExpiryWrn"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6701 = _6690; if (((int)0 <= _6701)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6701); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else if ((_6689 == std::string ("logSim"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6702 = _6690; if (((int)0 <= _6702)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6702); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else if ((_6689 == std::string ("mtSpincount"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6703 = _6690; if ((_6703 <= (int)1000000000)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6703); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else if ((_6689 == std::string ("simScalingMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));}else if ((_6689 == std::string ("logAnaPro"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6704 = _6690; if (((int)0 <= _6704)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_ANA_PRO"),_6704); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else if ((_6689 == std::string ("logSimFreq"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6705 = _6690; if (((int)0 <= _6705)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6705); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else if ((_6689 == std::string ("presolveMaxNumReductions"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6706 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_REDUCTIONS"),_6706); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumReductions)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumReductions)"));}}else if ((_6689 == std::string ("intpntMultiThread"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));}else if ((_6689 == std::string ("writeLpQuotedNames"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));}else if ((_6689 == std::string ("presolveEliminatorMaxFill"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6707 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6707); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else if ((_6689 == std::string ("logFactor"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6708 = _6690; if (((int)0 <= _6708)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_FACTOR"),_6708); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFactor)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFactor)"));}}else if ((_6689 == std::string ("autoUpdateSolInfo"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));}else if ((_6689 == std::string ("timingLevel"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6709 = _6690; if (((int)0 <= _6709)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_TIMING_LEVEL"),_6709); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (timingLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (timingLevel)"));}}else if ((_6689 == std::string ("mioPerspectiveReformulate"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));}else if ((_6689 == std::string ("biIgnoreNumError"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));}else if ((_6689 == std::string ("mioNodeSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));}else if ((_6689 == std::string ("intpntMaxNumRefinementSteps"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6710 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_REFINEMENT_STEPS"),_6710); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumRefinementSteps)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumRefinementSteps)"));}}else if ((_6689 == std::string ("logSimMinor"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6711 = _6690; if (((int)0 <= _6711)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6711); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else if ((_6689 == std::string ("simMaxIterations"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6712 = _6690; if (((int)0 <= _6712)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6712); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else if ((_6689 == std::string ("mioProbingLevel"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6713 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6713); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else if ((_6689 == std::string ("intpntMaxIterations"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6714 = _6690; if (((int)0 <= _6714)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6714); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else if ((_6689 == std::string ("cacheLicense"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));}else if ((_6689 == std::string ("logBi"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6715 = _6690; if (((int)0 <= _6715)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6715); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else if ((_6689 == std::string ("intpntMaxNumCor"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6716 = _6690; if (((- (int)1) <= _6716)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6716); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else if ((_6689 == std::string ("writeLpLineWidth"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6717 = _6690; if (((int)40 <= _6717)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6717); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else if ((_6689 == std::string ("simDegen"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));}else if ((_6689 == std::string ("licenseWait"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));}else if ((_6689 == std::string ("presolveEliminatorMaxNumTries"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6718 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6718); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else if ((_6689 == std::string ("simRefactorFreq"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6719 = _6690; if (((int)0 <= _6719)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6719); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else if ((_6689 == std::string ("simDualSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));}else if ((_6689 == std::string ("simSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));}else if ((_6689 == std::string ("logIntpnt"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6720 = _6690; if (((int)0 <= _6720)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6720); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else if ((_6689 == std::string ("logMio"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6721 = _6690; if (((int)0 <= _6721)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6721); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else if ((_6689 == std::string ("simHotstart"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));}else if ((_6689 == std::string ("simExploitDupvec"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));}else if ((_6689 == std::string ("mioBranchDir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));}else if ((_6689 == std::string ("mioRinsMaxNodes"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6722 = _6690; if (((- (int)1) <= _6722)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6722); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else if ((_6689 == std::string ("mioCutCmir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));}else if ((_6689 == std::string ("biMaxIterations"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6723 = _6690; if (((int)0 <= _6723)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6723); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else if ((_6689 == std::string ("simHotstartLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));}else if ((_6689 == std::string ("presolveLindepRelWorkTrh"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6724 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6724); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else if ((_6689 == std::string ("mioVbDetectionLevel"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6725 = _6690; if ((_6725 <= (int)2)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6725); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else if ((_6689 == std::string ("presolveLindepUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));}else if ((_6689 == std::string ("intpntHotstart"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntHotstart)"));}else if ((_6689 == std::string ("intpntStartingPoint"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));}else if ((_6689 == std::string ("mioCutImpliedBound"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));}else if ((_6689 == std::string ("licensePauseTime"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6726 = _6690; if ((_6726 <= (int)1000000)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6726); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else if ((_6689 == std::string ("intpntDiffStep"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));}else if ((_6689 == std::string ("simScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));}else if ((_6689 == std::string ("writeLpTermsPerLine"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6727 = _6690; if (((int)0 <= _6727)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6727); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else if ((_6689 == std::string ("biIgnoreMaxIter"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));}else if ((_6689 == std::string ("presolveLindepAbsWorkTrh"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6728 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6728); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else if ((_6689 == std::string ("intpntSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));}else if ((_6689 == std::string ("writeLpFullObj"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));}else if ((_6689 == std::string ("simBasisFactorUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));}else if ((_6689 == std::string ("intpntRegularizationUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));}else if ((_6689 == std::string ("biCleanOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));}else if ((_6689 == std::string ("infeasPreferPrimal"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));}else if ((_6689 == std::string ("logStorage"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6729 = _6690; if (((int)0 <= _6729)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_STORAGE"),_6729); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logStorage)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logStorage)"));}}else if ((_6689 == std::string ("intpntBasis"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));}else if ((_6689 == std::string ("logCutSecondOpt"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6730 = _6690; if (((int)0 <= _6730)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6730); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else if ((_6689 == std::string ("mioMaxNumSolutions"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6731 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6731); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else if ((_6689 == std::string ("mioCutSelectionLevel"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6732 = _6690; if ((_6732 <= (int)1)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6732); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else if ((_6689 == std::string ("simMaxNumSetbacks"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6733 = _6690; if (((int)0 <= _6733)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6733); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else if ((_6689 == std::string ("simNonSingular"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));}else if ((_6689 == std::string ("mioCutClique"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));}else if ((_6689 == std::string ("logOrder"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6734 = _6690; if (((int)0 <= _6734)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6734); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else if ((_6689 == std::string ("logOptimizer"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6735 = _6690; if (((int)0 <= _6735)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_OPTIMIZER"),_6735); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOptimizer)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOptimizer)"));}}else if ((_6689 == std::string ("mioMaxNumBranches"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6736 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6736); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else if ((_6689 == std::string ("simPrimalCrash"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6737 = _6690; if (((int)0 <= _6737)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6737); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else if ((_6689 == std::string ("mioConstructSol"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));}else if ((_6689 == std::string ("simInteger"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6738 = _6690; if ((_6738 <= (int)10)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_SIM_INTEGER"),_6738); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simInteger)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simInteger)"));}}else if ((_6689 == std::string ("simPrimalRestrictSelection"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6739 = _6690; if ((_6739 <= (int)100)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6739); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else if ((_6689 == std::string ("optimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));}else if ((_6689 == std::string ("maxNumWarnings"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6740 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_MAX_NUM_WARNINGS"),_6740); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (maxNumWarnings)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (maxNumWarnings)"));}}else if ((_6689 == std::string ("licenseSuppressExpireWrns"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));}else if ((_6689 == std::string ("logExpand"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6741 = _6690; if (((int)0 <= _6741)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6741); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else if ((_6689 == std::string ("licenseDebug"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));}else if ((_6689 == std::string ("logResponse"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6742 = _6690; if (((int)0 <= _6742)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6742); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else if ((_6689 == std::string ("log"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6743 = _6690; if (((int)0 <= _6743)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6743); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else if ((_6689 == std::string ("mioRootRepeatPresolveLevel"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6744 = _6690; if ((_6744 <= (int)1)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6744); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else if ((_6689 == std::string ("simSwitchOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));}else if ((_6689 == std::string ("numThreads"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6745 = _6690; if (((int)0 <= _6745)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6745); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else if ((_6689 == std::string ("simDualCrash"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6746 = _6690; if (((int)0 <= _6746)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6746); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else if ((_6689 == std::string ("logHead"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6747 = _6690; if (((int)0 <= _6747)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_HEAD"),_6747); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logHead)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logHead)"));}}else if ((_6689 == std::string ("simReformulation"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));}else if ((_6689 == std::string ("simSaveLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));}else if ((_6689 == std::string ("mioMaxNumRelaxs"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6748 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6748); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else if ((_6689 == std::string ("logFile"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6749 = _6690; if (((int)0 <= _6749)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6749); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else if ((_6689 == std::string ("mioHeuristicLevel"))){ if (((_6690 - (int)_6690) == 0.0)){ double _6750 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6750); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else if ((_6689 == std::string ("intpntScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));}else if ((_6689 == std::string ("lowerObjCutFiniteTrh"))){ double _6751 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6751); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}else if ((_6689 == std::string ("mioMaxTime"))){ double _6752 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6752); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}else if ((_6689 == std::string ("basisTolS"))){ double _6753 = _6690; if ((1.000000e-09 <= _6753)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6753); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}else if ((_6689 == std::string ("presolveTolS"))){ double _6754 = _6690; if ((0.000000e+00 <= _6754)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6754); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}else if ((_6689 == std::string ("upperObjCut"))){ double _6755 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6755); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}else if ((_6689 == std::string ("intpntCoTolDfeas"))){ double _6756 = _6690; if ((_6756 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6756); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}else if ((_6689 == std::string ("intpntQoTolNearRel"))){ double _6757 = _6690; if ((1.000000e+00 <= _6757)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_NEAR_REL"),_6757); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}else if ((_6689 == std::string ("mioTolAbsGap"))){ double _6758 = _6690; if ((0.000000e+00 <= _6758)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6758); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}else if ((_6689 == std::string ("upperObjCutFiniteTrh"))){ double _6759 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6759); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}else if ((_6689 == std::string ("mioTolAbsRelaxInt"))){ double _6760 = _6690; if ((1.000000e-09 <= _6760)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6760); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}else if ((_6689 == std::string ("semidefiniteTolApprox"))){ double _6761 = _6690; if ((1.000000e-15 <= _6761)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_SEMIDEFINITE_TOL_APPROX"),_6761); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (semidefiniteTolApprox)"));}}else if ((_6689 == std::string ("mioTolRelDualBoundImprovement"))){ double _6762 = _6690; if ((_6762 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6762); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}else if ((_6689 == std::string ("mioNearTolRelGap"))){ double _6763 = _6690; if ((0.000000e+00 <= _6763)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_REL_GAP"),_6763); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}else if ((_6689 == std::string ("presolveTolRelLindep"))){ double _6764 = _6690; if ((0.000000e+00 <= _6764)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6764); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}else if ((_6689 == std::string ("intpntTolDsafe"))){ double _6765 = _6690; if ((1.000000e-04 <= _6765)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6765); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}else if ((_6689 == std::string ("mioTolFeas"))){ double _6766 = _6690; if ((_6766 <= 1.000000e-03)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6766); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}else if ((_6689 == std::string ("intpntTolInfeas"))){ double _6767 = _6690; if ((_6767 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6767); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}else if ((_6689 == std::string ("optimizerMaxTime"))){ double _6768 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6768); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}else if ((_6689 == std::string ("anaSolInfeasTol"))){ double _6769 = _6690; if ((0.000000e+00 <= _6769)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_ANA_SOL_INFEAS_TOL"),_6769); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}else if ((_6689 == std::string ("simplexAbsTolPiv"))){ double _6770 = _6690; if ((1.000000e-12 <= _6770)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6770); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}else if ((_6689 == std::string ("intpntTolMuRed"))){ double _6771 = _6690; if ((_6771 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6771); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}else if ((_6689 == std::string ("intpntCoTolMuRed"))){ double _6772 = _6690; if ((_6772 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6772); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}else if ((_6689 == std::string ("intpntCoTolRelGap"))){ double _6773 = _6690; if ((_6773 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6773); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}else if ((_6689 == std::string ("lowerObjCut"))){ double _6774 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6774); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}else if ((_6689 == std::string ("mioDisableTermTime"))){ double _6775 = _6690; if (true){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_MIO_DISABLE_TERM_TIME"),_6775); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}else if ((_6689 == std::string ("intpntTolRelStep"))){ double _6776 = _6690; if ((_6776 <= 9.999990e-01)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6776); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}else if ((_6689 == std::string ("simLuTolRelPiv"))){ double _6777 = _6690; if ((_6777 <= 9.999990e-01)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6777); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}else if ((_6689 == std::string ("intpntTolStepSize"))){ double _6778 = _6690; if ((_6778 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6778); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}else if ((_6689 == std::string ("intpntTolPfeas"))){ double _6779 = _6690; if ((_6779 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6779); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}else if ((_6689 == std::string ("basisRelTolS"))){ double _6780 = _6690; if ((0.000000e+00 <= _6780)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6780); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}else if ((_6689 == std::string ("presolveTolAbsLindep"))){ double _6781 = _6690; if ((0.000000e+00 <= _6781)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6781); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}else if ((_6689 == std::string ("intpntCoTolInfeas"))){ double _6782 = _6690; if ((_6782 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6782); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}else if ((_6689 == std::string ("mioRelGapConst"))){ double _6783 = _6690; if ((1.000000e-15 <= _6783)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6783); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}else if ((_6689 == std::string ("presolveTolAij"))){ double _6784 = _6690; if ((1.000000e-15 <= _6784)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6784); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}else if ((_6689 == std::string ("presolveTolX"))){ double _6785 = _6690; if ((0.000000e+00 <= _6785)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6785); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}else if ((_6689 == std::string ("intpntTolPath"))){ double _6786 = _6690; if ((_6786 <= 9.999000e-01)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6786); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}else if ((_6689 == std::string ("basisTolX"))){ double _6787 = _6690; if ((1.000000e-09 <= _6787)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6787); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}else if ((_6689 == std::string ("intpntTolRelGap"))){ double _6788 = _6690; if ((1.000000e-14 <= _6788)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6788); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}else if ((_6689 == std::string ("intpntTolPsafe"))){ double _6789 = _6690; if ((1.000000e-04 <= _6789)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6789); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}else if ((_6689 == std::string ("intpntCoTolNearRel"))){ double _6790 = _6690; if ((1.000000e+00 <= _6790)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6790); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}else if ((_6689 == std::string ("intpntQoTolRelGap"))){ double _6791 = _6690; if ((_6791 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_REL_GAP"),_6791); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}else if ((_6689 == std::string ("intpntQoTolInfeas"))){ double _6792 = _6690; if ((_6792 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_INFEAS"),_6792); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}else if ((_6689 == std::string ("intpntQoTolDfeas"))){ double _6793 = _6690; if ((_6793 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_DFEAS"),_6793); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}else if ((_6689 == std::string ("intpntTolDfeas"))){ double _6794 = _6690; if ((_6794 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6794); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}else if ((_6689 == std::string ("mioNearTolAbsGap"))){ double _6795 = _6690; if ((0.000000e+00 <= _6795)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_ABS_GAP"),_6795); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}else if ((_6689 == std::string ("intpntQoTolPfeas"))){ double _6796 = _6690; if ((_6796 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_PFEAS"),_6796); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}else if ((_6689 == std::string ("mioTolRelGap"))){ double _6797 = _6690; if ((0.000000e+00 <= _6797)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6797); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}else if ((_6689 == std::string ("intpntQoTolMuRed"))){ double _6798 = _6690; if ((_6798 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_MU_RED"),_6798); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}else if ((_6689 == std::string ("intpntCoTolPfeas"))){ double _6799 = _6690; if ((_6799 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6688.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6799); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));}}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6800,    const std::string & _6801,    int _6802) { mosek::fusion::p_Parameters::setParameter(_6800,_6801,_6802); }void mosek::fusion::p_Parameters::setParameter( monty::rc_ptr< ::mosek::fusion::Model > _6800,const std::string & _6801,int _6802){ if (false){ }else if ((_6801 == std::string ("simStabilityPriority"))){ int _6803 = _6802; if ((_6803 <= (int)100)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_SIM_STABILITY_PRIORITY"),_6803); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simStabilityPriority)"));}}else if ((_6801 == std::string ("simPrimalPhaseoneMethod"))){ int _6804 = _6802; if ((_6804 <= (int)10)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6804); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else if ((_6801 == std::string ("mioNodeOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));}else if ((_6801 == std::string ("presolveLevel"))){ int _6805 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6805); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else if ((_6801 == std::string ("mioMtUserCb"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMtUserCb)"));}else if ((_6801 == std::string ("presolveUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));}else if ((_6801 == std::string ("mioCutKnapsackCover"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));}else if ((_6801 == std::string ("intpntOrderMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));}else if ((_6801 == std::string ("logInfeasAna"))){ int _6806 = _6802; if (((int)0 <= _6806)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6806); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else if ((_6801 == std::string ("simPrimalSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));}else if ((_6801 == std::string ("simDualRestrictSelection"))){ int _6807 = _6802; if ((_6807 <= (int)100)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6807); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else if ((_6801 == std::string ("logMioFreq"))){ int _6808 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6808); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else if ((_6801 == std::string ("mioRootOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));}else if ((_6801 == std::string ("simDualPhaseoneMethod"))){ int _6809 = _6802; if ((_6809 <= (int)10)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6809); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else if ((_6801 == std::string ("logBiFreq"))){ int _6810 = _6802; if (((int)0 <= _6810)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6810); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else if ((_6801 == std::string ("logPresolve"))){ int _6811 = _6802; if (((int)0 <= _6811)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6811); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else if ((_6801 == std::string ("intpntOffColTrh"))){ int _6812 = _6802; if (((int)0 <= _6812)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6812); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else if ((_6801 == std::string ("mioMode"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));}else if ((_6801 == std::string ("mioCutGmi"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));}else if ((_6801 == std::string ("licenseTrhExpiryWrn"))){ int _6813 = _6802; if (((int)0 <= _6813)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6813); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else if ((_6801 == std::string ("logSim"))){ int _6814 = _6802; if (((int)0 <= _6814)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6814); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else if ((_6801 == std::string ("mtSpincount"))){ int _6815 = _6802; if ((_6815 <= (int)1000000000)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6815); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else if ((_6801 == std::string ("simScalingMethod"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));}else if ((_6801 == std::string ("logAnaPro"))){ int _6816 = _6802; if (((int)0 <= _6816)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_ANA_PRO"),_6816); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else if ((_6801 == std::string ("logSimFreq"))){ int _6817 = _6802; if (((int)0 <= _6817)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6817); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else if ((_6801 == std::string ("presolveMaxNumReductions"))){ int _6818 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_REDUCTIONS"),_6818); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumReductions)"));}}else if ((_6801 == std::string ("intpntMultiThread"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));}else if ((_6801 == std::string ("writeLpQuotedNames"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));}else if ((_6801 == std::string ("presolveEliminatorMaxFill"))){ int _6819 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6819); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else if ((_6801 == std::string ("logFactor"))){ int _6820 = _6802; if (((int)0 <= _6820)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_FACTOR"),_6820); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFactor)"));}}else if ((_6801 == std::string ("autoUpdateSolInfo"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));}else if ((_6801 == std::string ("timingLevel"))){ int _6821 = _6802; if (((int)0 <= _6821)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_TIMING_LEVEL"),_6821); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (timingLevel)"));}}else if ((_6801 == std::string ("mioPerspectiveReformulate"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));}else if ((_6801 == std::string ("biIgnoreNumError"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));}else if ((_6801 == std::string ("mioNodeSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));}else if ((_6801 == std::string ("intpntMaxNumRefinementSteps"))){ int _6822 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_REFINEMENT_STEPS"),_6822); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumRefinementSteps)"));}}else if ((_6801 == std::string ("logSimMinor"))){ int _6823 = _6802; if (((int)0 <= _6823)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6823); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else if ((_6801 == std::string ("simMaxIterations"))){ int _6824 = _6802; if (((int)0 <= _6824)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6824); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else if ((_6801 == std::string ("mioProbingLevel"))){ int _6825 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6825); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else if ((_6801 == std::string ("intpntMaxIterations"))){ int _6826 = _6802; if (((int)0 <= _6826)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6826); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else if ((_6801 == std::string ("cacheLicense"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));}else if ((_6801 == std::string ("logBi"))){ int _6827 = _6802; if (((int)0 <= _6827)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6827); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else if ((_6801 == std::string ("intpntMaxNumCor"))){ int _6828 = _6802; if (((- (int)1) <= _6828)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6828); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else if ((_6801 == std::string ("writeLpLineWidth"))){ int _6829 = _6802; if (((int)40 <= _6829)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6829); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else if ((_6801 == std::string ("simDegen"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));}else if ((_6801 == std::string ("licenseWait"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));}else if ((_6801 == std::string ("presolveEliminatorMaxNumTries"))){ int _6830 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6830); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else if ((_6801 == std::string ("simRefactorFreq"))){ int _6831 = _6802; if (((int)0 <= _6831)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6831); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else if ((_6801 == std::string ("simDualSelection"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));}else if ((_6801 == std::string ("simSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));}else if ((_6801 == std::string ("logIntpnt"))){ int _6832 = _6802; if (((int)0 <= _6832)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6832); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else if ((_6801 == std::string ("logMio"))){ int _6833 = _6802; if (((int)0 <= _6833)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6833); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else if ((_6801 == std::string ("simHotstart"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));}else if ((_6801 == std::string ("simExploitDupvec"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));}else if ((_6801 == std::string ("mioBranchDir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));}else if ((_6801 == std::string ("mioRinsMaxNodes"))){ int _6834 = _6802; if (((- (int)1) <= _6834)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_6834); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else if ((_6801 == std::string ("mioCutCmir"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));}else if ((_6801 == std::string ("biMaxIterations"))){ int _6835 = _6802; if (((int)0 <= _6835)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_6835); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else if ((_6801 == std::string ("simHotstartLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));}else if ((_6801 == std::string ("presolveLindepRelWorkTrh"))){ int _6836 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_6836); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else if ((_6801 == std::string ("mioVbDetectionLevel"))){ int _6837 = _6802; if ((_6837 <= (int)2)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_6837); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else if ((_6801 == std::string ("presolveLindepUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));}else if ((_6801 == std::string ("intpntHotstart"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntHotstart)"));}else if ((_6801 == std::string ("intpntStartingPoint"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));}else if ((_6801 == std::string ("mioCutImpliedBound"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));}else if ((_6801 == std::string ("licensePauseTime"))){ int _6838 = _6802; if ((_6838 <= (int)1000000)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_6838); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else if ((_6801 == std::string ("intpntDiffStep"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));}else if ((_6801 == std::string ("simScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));}else if ((_6801 == std::string ("writeLpTermsPerLine"))){ int _6839 = _6802; if (((int)0 <= _6839)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_6839); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else if ((_6801 == std::string ("biIgnoreMaxIter"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));}else if ((_6801 == std::string ("presolveLindepAbsWorkTrh"))){ int _6840 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_6840); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else if ((_6801 == std::string ("intpntSolveForm"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));}else if ((_6801 == std::string ("writeLpFullObj"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));}else if ((_6801 == std::string ("simBasisFactorUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));}else if ((_6801 == std::string ("intpntRegularizationUse"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));}else if ((_6801 == std::string ("biCleanOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));}else if ((_6801 == std::string ("infeasPreferPrimal"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));}else if ((_6801 == std::string ("logStorage"))){ int _6841 = _6802; if (((int)0 <= _6841)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_STORAGE"),_6841); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logStorage)"));}}else if ((_6801 == std::string ("intpntBasis"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));}else if ((_6801 == std::string ("logCutSecondOpt"))){ int _6842 = _6802; if (((int)0 <= _6842)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_6842); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else if ((_6801 == std::string ("mioMaxNumSolutions"))){ int _6843 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_6843); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else if ((_6801 == std::string ("mioCutSelectionLevel"))){ int _6844 = _6802; if ((_6844 <= (int)1)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_6844); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else if ((_6801 == std::string ("simMaxNumSetbacks"))){ int _6845 = _6802; if (((int)0 <= _6845)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_6845); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else if ((_6801 == std::string ("simNonSingular"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));}else if ((_6801 == std::string ("mioCutClique"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));}else if ((_6801 == std::string ("logOrder"))){ int _6846 = _6802; if (((int)0 <= _6846)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_6846); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else if ((_6801 == std::string ("logOptimizer"))){ int _6847 = _6802; if (((int)0 <= _6847)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_OPTIMIZER"),_6847); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOptimizer)"));}}else if ((_6801 == std::string ("mioMaxNumBranches"))){ int _6848 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_6848); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else if ((_6801 == std::string ("simPrimalCrash"))){ int _6849 = _6802; if (((int)0 <= _6849)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_6849); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else if ((_6801 == std::string ("mioConstructSol"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));}else if ((_6801 == std::string ("simInteger"))){ int _6850 = _6802; if ((_6850 <= (int)10)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_SIM_INTEGER"),_6850); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simInteger)"));}}else if ((_6801 == std::string ("simPrimalRestrictSelection"))){ int _6851 = _6802; if ((_6851 <= (int)100)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_6851); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else if ((_6801 == std::string ("optimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));}else if ((_6801 == std::string ("maxNumWarnings"))){ int _6852 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_MAX_NUM_WARNINGS"),_6852); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (maxNumWarnings)"));}}else if ((_6801 == std::string ("licenseSuppressExpireWrns"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));}else if ((_6801 == std::string ("logExpand"))){ int _6853 = _6802; if (((int)0 <= _6853)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_6853); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else if ((_6801 == std::string ("licenseDebug"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));}else if ((_6801 == std::string ("logResponse"))){ int _6854 = _6802; if (((int)0 <= _6854)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_6854); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else if ((_6801 == std::string ("log"))){ int _6855 = _6802; if (((int)0 <= _6855)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_6855); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else if ((_6801 == std::string ("mioRootRepeatPresolveLevel"))){ int _6856 = _6802; if ((_6856 <= (int)1)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_6856); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else if ((_6801 == std::string ("simSwitchOptimizer"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));}else if ((_6801 == std::string ("numThreads"))){ int _6857 = _6802; if (((int)0 <= _6857)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_6857); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else if ((_6801 == std::string ("simDualCrash"))){ int _6858 = _6802; if (((int)0 <= _6858)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_6858); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else if ((_6801 == std::string ("logHead"))){ int _6859 = _6802; if (((int)0 <= _6859)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_HEAD"),_6859); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logHead)"));}}else if ((_6801 == std::string ("simReformulation"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));}else if ((_6801 == std::string ("simSaveLu"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));}else if ((_6801 == std::string ("mioMaxNumRelaxs"))){ int _6860 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_6860); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else if ((_6801 == std::string ("logFile"))){ int _6861 = _6802; if (((int)0 <= _6861)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_6861); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else if ((_6801 == std::string ("mioHeuristicLevel"))){ int _6862 = _6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_6862); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else if ((_6801 == std::string ("intpntScaling"))){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));}else if ((_6801 == std::string ("lowerObjCutFiniteTrh"))){ double _6863 = (double)_6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_6863); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}else if ((_6801 == std::string ("mioMaxTime"))){ double _6864 = (double)_6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_6864); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}else if ((_6801 == std::string ("basisTolS"))){ double _6865 = (double)_6802; if ((1.000000e-09 <= _6865)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_6865); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}else if ((_6801 == std::string ("presolveTolS"))){ double _6866 = (double)_6802; if ((0.000000e+00 <= _6866)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_6866); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}else if ((_6801 == std::string ("upperObjCut"))){ double _6867 = (double)_6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_6867); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}else if ((_6801 == std::string ("intpntCoTolDfeas"))){ double _6868 = (double)_6802; if ((_6868 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_6868); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}else if ((_6801 == std::string ("intpntQoTolNearRel"))){ double _6869 = (double)_6802; if ((1.000000e+00 <= _6869)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_NEAR_REL"),_6869); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}else if ((_6801 == std::string ("mioTolAbsGap"))){ double _6870 = (double)_6802; if ((0.000000e+00 <= _6870)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_6870); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}else if ((_6801 == std::string ("upperObjCutFiniteTrh"))){ double _6871 = (double)_6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_6871); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}else if ((_6801 == std::string ("mioTolAbsRelaxInt"))){ double _6872 = (double)_6802; if ((1.000000e-09 <= _6872)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_6872); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}else if ((_6801 == std::string ("semidefiniteTolApprox"))){ double _6873 = (double)_6802; if ((1.000000e-15 <= _6873)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_SEMIDEFINITE_TOL_APPROX"),_6873); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (semidefiniteTolApprox)"));}}else if ((_6801 == std::string ("mioTolRelDualBoundImprovement"))){ double _6874 = (double)_6802; if ((_6874 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_6874); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}else if ((_6801 == std::string ("mioNearTolRelGap"))){ double _6875 = (double)_6802; if ((0.000000e+00 <= _6875)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_REL_GAP"),_6875); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}else if ((_6801 == std::string ("presolveTolRelLindep"))){ double _6876 = (double)_6802; if ((0.000000e+00 <= _6876)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_6876); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}else if ((_6801 == std::string ("intpntTolDsafe"))){ double _6877 = (double)_6802; if ((1.000000e-04 <= _6877)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_6877); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}else if ((_6801 == std::string ("mioTolFeas"))){ double _6878 = (double)_6802; if ((_6878 <= 1.000000e-03)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_6878); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}else if ((_6801 == std::string ("intpntTolInfeas"))){ double _6879 = (double)_6802; if ((_6879 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_6879); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}else if ((_6801 == std::string ("optimizerMaxTime"))){ double _6880 = (double)_6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_6880); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}else if ((_6801 == std::string ("anaSolInfeasTol"))){ double _6881 = (double)_6802; if ((0.000000e+00 <= _6881)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_ANA_SOL_INFEAS_TOL"),_6881); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}else if ((_6801 == std::string ("simplexAbsTolPiv"))){ double _6882 = (double)_6802; if ((1.000000e-12 <= _6882)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_6882); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}else if ((_6801 == std::string ("intpntTolMuRed"))){ double _6883 = (double)_6802; if ((_6883 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_6883); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}else if ((_6801 == std::string ("intpntCoTolMuRed"))){ double _6884 = (double)_6802; if ((_6884 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_6884); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}else if ((_6801 == std::string ("intpntCoTolRelGap"))){ double _6885 = (double)_6802; if ((_6885 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_6885); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}else if ((_6801 == std::string ("lowerObjCut"))){ double _6886 = (double)_6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_6886); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}else if ((_6801 == std::string ("mioDisableTermTime"))){ double _6887 = (double)_6802; if (true){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_MIO_DISABLE_TERM_TIME"),_6887); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}else if ((_6801 == std::string ("intpntTolRelStep"))){ double _6888 = (double)_6802; if ((_6888 <= 9.999990e-01)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_6888); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}else if ((_6801 == std::string ("simLuTolRelPiv"))){ double _6889 = (double)_6802; if ((_6889 <= 9.999990e-01)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_6889); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}else if ((_6801 == std::string ("intpntTolStepSize"))){ double _6890 = (double)_6802; if ((_6890 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_6890); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}else if ((_6801 == std::string ("intpntTolPfeas"))){ double _6891 = (double)_6802; if ((_6891 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_6891); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}else if ((_6801 == std::string ("basisRelTolS"))){ double _6892 = (double)_6802; if ((0.000000e+00 <= _6892)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_6892); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}else if ((_6801 == std::string ("presolveTolAbsLindep"))){ double _6893 = (double)_6802; if ((0.000000e+00 <= _6893)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_6893); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}else if ((_6801 == std::string ("intpntCoTolInfeas"))){ double _6894 = (double)_6802; if ((_6894 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_6894); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}else if ((_6801 == std::string ("mioRelGapConst"))){ double _6895 = (double)_6802; if ((1.000000e-15 <= _6895)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_6895); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}else if ((_6801 == std::string ("presolveTolAij"))){ double _6896 = (double)_6802; if ((1.000000e-15 <= _6896)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_6896); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}else if ((_6801 == std::string ("presolveTolX"))){ double _6897 = (double)_6802; if ((0.000000e+00 <= _6897)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_6897); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}else if ((_6801 == std::string ("intpntTolPath"))){ double _6898 = (double)_6802; if ((_6898 <= 9.999000e-01)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_6898); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}else if ((_6801 == std::string ("basisTolX"))){ double _6899 = (double)_6802; if ((1.000000e-09 <= _6899)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_6899); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}else if ((_6801 == std::string ("intpntTolRelGap"))){ double _6900 = (double)_6802; if ((1.000000e-14 <= _6900)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_6900); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}else if ((_6801 == std::string ("intpntTolPsafe"))){ double _6901 = (double)_6802; if ((1.000000e-04 <= _6901)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_6901); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}else if ((_6801 == std::string ("intpntCoTolNearRel"))){ double _6902 = (double)_6802; if ((1.000000e+00 <= _6902)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_6902); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}else if ((_6801 == std::string ("intpntQoTolRelGap"))){ double _6903 = (double)_6802; if ((_6903 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_REL_GAP"),_6903); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}else if ((_6801 == std::string ("intpntQoTolInfeas"))){ double _6904 = (double)_6802; if ((_6904 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_INFEAS"),_6904); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}else if ((_6801 == std::string ("intpntQoTolDfeas"))){ double _6905 = (double)_6802; if ((_6905 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_DFEAS"),_6905); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}else if ((_6801 == std::string ("intpntTolDfeas"))){ double _6906 = (double)_6802; if ((_6906 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_6906); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}else if ((_6801 == std::string ("mioNearTolAbsGap"))){ double _6907 = (double)_6802; if ((0.000000e+00 <= _6907)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_ABS_GAP"),_6907); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}else if ((_6801 == std::string ("intpntQoTolPfeas"))){ double _6908 = (double)_6802; if ((_6908 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_PFEAS"),_6908); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}else if ((_6801 == std::string ("mioTolRelGap"))){ double _6909 = (double)_6802; if ((0.000000e+00 <= _6909)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_6909); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}else if ((_6801 == std::string ("intpntQoTolMuRed"))){ double _6910 = (double)_6802; if ((_6910 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_MU_RED"),_6910); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}else if ((_6801 == std::string ("intpntCoTolPfeas"))){ double _6911 = (double)_6802; if ((_6911 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6800.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_6911); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));}}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _6912,    const std::string & _6913,    const std::string & _6914) { mosek::fusion::p_Parameters::setParameter(_6912,_6913,_6914); }void mosek::fusion::p_Parameters::setParameter( monty::rc_ptr< ::mosek::fusion::Model > _6912,const std::string & _6913,const std::string & _6914){ if (false){ }else if ((_6913 == std::string ("simStabilityPriority"))){ try { int _6916 = ::mosek::fusion::Utils::Tools::toInt(_6914); if ((_6916 <= (int)100)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_STABILITY_PRIORITY"),_6916); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simStabilityPriority)"));}}catch (mosek::fusion::ValueConversionError _6915){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simStabilityPriority)"));}}else if ((_6913 == std::string ("simPrimalPhaseoneMethod"))){ try { int _6918 = ::mosek::fusion::Utils::Tools::toInt(_6914); if ((_6918 <= (int)10)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_6918); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}catch (mosek::fusion::ValueConversionError _6917){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));}}else if ((_6913 == std::string ("mioNodeOptimizer"))){ int _6919 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6914); if ((_6919 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_6919); }else if ((_6913 == std::string ("presolveLevel"))){ try { int _6921 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_6921); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}catch (mosek::fusion::ValueConversionError _6920){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));}}else if ((_6913 == std::string ("mioMtUserCb"))){ int _6922 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_6922 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMtUserCb)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_MT_USER_CB"),_6922); }else if ((_6913 == std::string ("presolveUse"))){ int _6923 = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_6914); if ((_6923 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_6923); }else if ((_6913 == std::string ("mioCutKnapsackCover"))){ int _6924 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_6924 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_6924); }else if ((_6913 == std::string ("intpntOrderMethod"))){ int _6925 = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_6914); if ((_6925 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_6925); }else if ((_6913 == std::string ("logInfeasAna"))){ try { int _6927 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6927)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_6927); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}catch (mosek::fusion::ValueConversionError _6926){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));}}else if ((_6913 == std::string ("simPrimalSelection"))){ int _6928 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_6914); if ((_6928 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_6928); }else if ((_6913 == std::string ("simDualRestrictSelection"))){ try { int _6930 = ::mosek::fusion::Utils::Tools::toInt(_6914); if ((_6930 <= (int)100)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_6930); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}catch (mosek::fusion::ValueConversionError _6929){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));}}else if ((_6913 == std::string ("logMioFreq"))){ try { int _6932 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_6932); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}catch (mosek::fusion::ValueConversionError _6931){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));}}else if ((_6913 == std::string ("mioRootOptimizer"))){ int _6933 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6914); if ((_6933 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_6933); }else if ((_6913 == std::string ("simDualPhaseoneMethod"))){ try { int _6935 = ::mosek::fusion::Utils::Tools::toInt(_6914); if ((_6935 <= (int)10)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_6935); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}catch (mosek::fusion::ValueConversionError _6934){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));}}else if ((_6913 == std::string ("logBiFreq"))){ try { int _6937 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6937)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_6937); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}catch (mosek::fusion::ValueConversionError _6936){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));}}else if ((_6913 == std::string ("logPresolve"))){ try { int _6939 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6939)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_6939); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}catch (mosek::fusion::ValueConversionError _6938){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));}}else if ((_6913 == std::string ("intpntOffColTrh"))){ try { int _6941 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6941)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_6941); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}catch (mosek::fusion::ValueConversionError _6940){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));}}else if ((_6913 == std::string ("mioMode"))){ int _6942 = ::mosek::fusion::p_Parameters::string_to_miomode_value(_6914); if ((_6942 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_6942); }else if ((_6913 == std::string ("mioCutGmi"))){ int _6943 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_6943 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_6943); }else if ((_6913 == std::string ("licenseTrhExpiryWrn"))){ try { int _6945 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6945)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_6945); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}catch (mosek::fusion::ValueConversionError _6944){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));}}else if ((_6913 == std::string ("logSim"))){ try { int _6947 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6947)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_6947); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}catch (mosek::fusion::ValueConversionError _6946){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));}}else if ((_6913 == std::string ("mtSpincount"))){ try { int _6949 = ::mosek::fusion::Utils::Tools::toInt(_6914); if ((_6949 <= (int)1000000000)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_6949); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}catch (mosek::fusion::ValueConversionError _6948){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));}}else if ((_6913 == std::string ("simScalingMethod"))){ int _6950 = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_6914); if ((_6950 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_6950); }else if ((_6913 == std::string ("logAnaPro"))){ try { int _6952 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6952)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_ANA_PRO"),_6952); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}catch (mosek::fusion::ValueConversionError _6951){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logAnaPro)"));}}else if ((_6913 == std::string ("logSimFreq"))){ try { int _6954 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6954)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_6954); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}catch (mosek::fusion::ValueConversionError _6953){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));}}else if ((_6913 == std::string ("presolveMaxNumReductions"))){ try { int _6956 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_REDUCTIONS"),_6956); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumReductions)"));}}catch (mosek::fusion::ValueConversionError _6955){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumReductions)"));}}else if ((_6913 == std::string ("intpntMultiThread"))){ int _6957 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_6957 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MULTI_THREAD"),_6957); }else if ((_6913 == std::string ("writeLpQuotedNames"))){ int _6958 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_6958 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_QUOTED_NAMES"),_6958); }else if ((_6913 == std::string ("presolveEliminatorMaxFill"))){ try { int _6960 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_6960); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}catch (mosek::fusion::ValueConversionError _6959){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));}}else if ((_6913 == std::string ("logFactor"))){ try { int _6962 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6962)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_FACTOR"),_6962); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFactor)"));}}catch (mosek::fusion::ValueConversionError _6961){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFactor)"));}}else if ((_6913 == std::string ("autoUpdateSolInfo"))){ int _6963 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_6963 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_6963); }else if ((_6913 == std::string ("timingLevel"))){ try { int _6965 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6965)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_TIMING_LEVEL"),_6965); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (timingLevel)"));}}catch (mosek::fusion::ValueConversionError _6964){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (timingLevel)"));}}else if ((_6913 == std::string ("mioPerspectiveReformulate"))){ int _6966 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_6966 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_6966); }else if ((_6913 == std::string ("biIgnoreNumError"))){ int _6967 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_6967 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_6967); }else if ((_6913 == std::string ("mioNodeSelection"))){ int _6968 = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_6914); if ((_6968 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_6968); }else if ((_6913 == std::string ("intpntMaxNumRefinementSteps"))){ try { int _6970 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_REFINEMENT_STEPS"),_6970); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumRefinementSteps)"));}}catch (mosek::fusion::ValueConversionError _6969){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumRefinementSteps)"));}}else if ((_6913 == std::string ("logSimMinor"))){ try { int _6972 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6972)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_6972); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}catch (mosek::fusion::ValueConversionError _6971){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));}}else if ((_6913 == std::string ("simMaxIterations"))){ try { int _6974 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6974)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_6974); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}catch (mosek::fusion::ValueConversionError _6973){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));}}else if ((_6913 == std::string ("mioProbingLevel"))){ try { int _6976 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_6976); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}catch (mosek::fusion::ValueConversionError _6975){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));}}else if ((_6913 == std::string ("intpntMaxIterations"))){ try { int _6978 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6978)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_6978); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}catch (mosek::fusion::ValueConversionError _6977){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));}}else if ((_6913 == std::string ("cacheLicense"))){ int _6979 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_6979 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_6979); }else if ((_6913 == std::string ("logBi"))){ try { int _6981 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6981)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_6981); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}catch (mosek::fusion::ValueConversionError _6980){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));}}else if ((_6913 == std::string ("intpntMaxNumCor"))){ try { int _6983 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((- (int)1) <= _6983)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_6983); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}catch (mosek::fusion::ValueConversionError _6982){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));}}else if ((_6913 == std::string ("writeLpLineWidth"))){ try { int _6985 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)40 <= _6985)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_6985); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}catch (mosek::fusion::ValueConversionError _6984){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));}}else if ((_6913 == std::string ("simDegen"))){ int _6986 = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_6914); if ((_6986 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_6986); }else if ((_6913 == std::string ("licenseWait"))){ int _6987 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_6987 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_6987); }else if ((_6913 == std::string ("presolveEliminatorMaxNumTries"))){ try { int _6989 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_6989); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}catch (mosek::fusion::ValueConversionError _6988){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));}}else if ((_6913 == std::string ("simRefactorFreq"))){ try { int _6991 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6991)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_6991); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}catch (mosek::fusion::ValueConversionError _6990){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));}}else if ((_6913 == std::string ("simDualSelection"))){ int _6992 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_6914); if ((_6992 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_6992); }else if ((_6913 == std::string ("simSolveForm"))){ int _6993 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_6914); if ((_6993 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_6993); }else if ((_6913 == std::string ("logIntpnt"))){ try { int _6995 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6995)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_6995); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}catch (mosek::fusion::ValueConversionError _6994){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));}}else if ((_6913 == std::string ("logMio"))){ try { int _6997 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _6997)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_6997); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}catch (mosek::fusion::ValueConversionError _6996){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));}}else if ((_6913 == std::string ("simHotstart"))){ int _6998 = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_6914); if ((_6998 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_6998); }else if ((_6913 == std::string ("simExploitDupvec"))){ int _6999 = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_6914); if ((_6999 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_6999); }else if ((_6913 == std::string ("mioBranchDir"))){ int _7000 = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_6914); if ((_7000 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_7000); }else if ((_6913 == std::string ("mioRinsMaxNodes"))){ try { int _7002 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((- (int)1) <= _7002)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_7002); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}catch (mosek::fusion::ValueConversionError _7001){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));}}else if ((_6913 == std::string ("mioCutCmir"))){ int _7003 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7003 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_7003); }else if ((_6913 == std::string ("biMaxIterations"))){ try { int _7005 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7005)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_7005); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}catch (mosek::fusion::ValueConversionError _7004){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));}}else if ((_6913 == std::string ("simHotstartLu"))){ int _7006 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7006 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_7006); }else if ((_6913 == std::string ("presolveLindepRelWorkTrh"))){ try { int _7008 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_7008); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}catch (mosek::fusion::ValueConversionError _7007){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));}}else if ((_6913 == std::string ("mioVbDetectionLevel"))){ try { int _7010 = ::mosek::fusion::Utils::Tools::toInt(_6914); if ((_7010 <= (int)2)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_7010); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}catch (mosek::fusion::ValueConversionError _7009){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));}}else if ((_6913 == std::string ("presolveLindepUse"))){ int _7011 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7011 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_7011); }else if ((_6913 == std::string ("intpntHotstart"))){ int _7012 = ::mosek::fusion::p_Parameters::string_to_intpnthotstart_value(_6914); if ((_7012 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntHotstart)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_HOTSTART"),_7012); }else if ((_6913 == std::string ("intpntStartingPoint"))){ int _7013 = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_6914); if ((_7013 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_7013); }else if ((_6913 == std::string ("mioCutImpliedBound"))){ int _7014 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7014 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_7014); }else if ((_6913 == std::string ("licensePauseTime"))){ try { int _7016 = ::mosek::fusion::Utils::Tools::toInt(_6914); if ((_7016 <= (int)1000000)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_7016); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}catch (mosek::fusion::ValueConversionError _7015){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));}}else if ((_6913 == std::string ("intpntDiffStep"))){ int _7017 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7017 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_7017); }else if ((_6913 == std::string ("simScaling"))){ int _7018 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_6914); if ((_7018 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_7018); }else if ((_6913 == std::string ("writeLpTermsPerLine"))){ try { int _7020 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7020)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_7020); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}catch (mosek::fusion::ValueConversionError _7019){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));}}else if ((_6913 == std::string ("biIgnoreMaxIter"))){ int _7021 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7021 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_7021); }else if ((_6913 == std::string ("presolveLindepAbsWorkTrh"))){ try { int _7023 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_7023); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}catch (mosek::fusion::ValueConversionError _7022){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));}}else if ((_6913 == std::string ("intpntSolveForm"))){ int _7024 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_6914); if ((_7024 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_7024); }else if ((_6913 == std::string ("writeLpFullObj"))){ int _7025 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7025 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_7025); }else if ((_6913 == std::string ("simBasisFactorUse"))){ int _7026 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7026 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_7026); }else if ((_6913 == std::string ("intpntRegularizationUse"))){ int _7027 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7027 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_7027); }else if ((_6913 == std::string ("biCleanOptimizer"))){ int _7028 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6914); if ((_7028 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_7028); }else if ((_6913 == std::string ("infeasPreferPrimal"))){ int _7029 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7029 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_7029); }else if ((_6913 == std::string ("logStorage"))){ try { int _7031 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7031)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_STORAGE"),_7031); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logStorage)"));}}catch (mosek::fusion::ValueConversionError _7030){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logStorage)"));}}else if ((_6913 == std::string ("intpntBasis"))){ int _7032 = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_6914); if ((_7032 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_7032); }else if ((_6913 == std::string ("logCutSecondOpt"))){ try { int _7034 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7034)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_7034); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}catch (mosek::fusion::ValueConversionError _7033){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));}}else if ((_6913 == std::string ("mioMaxNumSolutions"))){ try { int _7036 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_7036); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}catch (mosek::fusion::ValueConversionError _7035){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));}}else if ((_6913 == std::string ("mioCutSelectionLevel"))){ try { int _7038 = ::mosek::fusion::Utils::Tools::toInt(_6914); if ((_7038 <= (int)1)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_7038); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}catch (mosek::fusion::ValueConversionError _7037){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));}}else if ((_6913 == std::string ("simMaxNumSetbacks"))){ try { int _7040 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7040)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_7040); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}catch (mosek::fusion::ValueConversionError _7039){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));}}else if ((_6913 == std::string ("simNonSingular"))){ int _7041 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7041 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_7041); }else if ((_6913 == std::string ("mioCutClique"))){ int _7042 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7042 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_7042); }else if ((_6913 == std::string ("logOrder"))){ try { int _7044 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7044)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_7044); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}catch (mosek::fusion::ValueConversionError _7043){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));}}else if ((_6913 == std::string ("logOptimizer"))){ try { int _7046 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7046)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_OPTIMIZER"),_7046); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOptimizer)"));}}catch (mosek::fusion::ValueConversionError _7045){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOptimizer)"));}}else if ((_6913 == std::string ("mioMaxNumBranches"))){ try { int _7048 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_7048); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}catch (mosek::fusion::ValueConversionError _7047){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));}}else if ((_6913 == std::string ("simPrimalCrash"))){ try { int _7050 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7050)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_7050); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}catch (mosek::fusion::ValueConversionError _7049){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));}}else if ((_6913 == std::string ("mioConstructSol"))){ int _7051 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7051 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConstructSol)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONSTRUCT_SOL"),_7051); }else if ((_6913 == std::string ("simInteger"))){ try { int _7053 = ::mosek::fusion::Utils::Tools::toInt(_6914); if ((_7053 <= (int)10)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_INTEGER"),_7053); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simInteger)"));}}catch (mosek::fusion::ValueConversionError _7052){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simInteger)"));}}else if ((_6913 == std::string ("simPrimalRestrictSelection"))){ try { int _7055 = ::mosek::fusion::Utils::Tools::toInt(_6914); if ((_7055 <= (int)100)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_7055); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}catch (mosek::fusion::ValueConversionError _7054){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));}}else if ((_6913 == std::string ("optimizer"))){ int _7056 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_6914); if ((_7056 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_7056); }else if ((_6913 == std::string ("maxNumWarnings"))){ try { int _7058 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MAX_NUM_WARNINGS"),_7058); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (maxNumWarnings)"));}}catch (mosek::fusion::ValueConversionError _7057){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (maxNumWarnings)"));}}else if ((_6913 == std::string ("licenseSuppressExpireWrns"))){ int _7059 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7059 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_7059); }else if ((_6913 == std::string ("logExpand"))){ try { int _7061 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7061)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_7061); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}catch (mosek::fusion::ValueConversionError _7060){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));}}else if ((_6913 == std::string ("licenseDebug"))){ int _7062 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7062 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_7062); }else if ((_6913 == std::string ("logResponse"))){ try { int _7064 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7064)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_7064); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}catch (mosek::fusion::ValueConversionError _7063){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));}}else if ((_6913 == std::string ("log"))){ try { int _7066 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7066)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_7066); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}catch (mosek::fusion::ValueConversionError _7065){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));}}else if ((_6913 == std::string ("mioRootRepeatPresolveLevel"))){ try { int _7068 = ::mosek::fusion::Utils::Tools::toInt(_6914); if ((_7068 <= (int)1)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_7068); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}catch (mosek::fusion::ValueConversionError _7067){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));}}else if ((_6913 == std::string ("simSwitchOptimizer"))){ int _7069 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7069 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_7069); }else if ((_6913 == std::string ("numThreads"))){ try { int _7071 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7071)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_7071); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}catch (mosek::fusion::ValueConversionError _7070){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));}}else if ((_6913 == std::string ("simDualCrash"))){ try { int _7073 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7073)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_7073); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}catch (mosek::fusion::ValueConversionError _7072){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));}}else if ((_6913 == std::string ("logHead"))){ try { int _7075 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7075)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_HEAD"),_7075); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logHead)"));}}catch (mosek::fusion::ValueConversionError _7074){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logHead)"));}}else if ((_6913 == std::string ("simReformulation"))){ int _7076 = ::mosek::fusion::p_Parameters::string_to_simreform_value(_6914); if ((_7076 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_7076); }else if ((_6913 == std::string ("simSaveLu"))){ int _7077 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_6914); if ((_7077 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_7077); }else if ((_6913 == std::string ("mioMaxNumRelaxs"))){ try { int _7079 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_7079); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}catch (mosek::fusion::ValueConversionError _7078){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));}}else if ((_6913 == std::string ("logFile"))){ try { int _7081 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (((int)0 <= _7081)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_7081); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}catch (mosek::fusion::ValueConversionError _7080){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));}}else if ((_6913 == std::string ("mioHeuristicLevel"))){ try { int _7083 = ::mosek::fusion::Utils::Tools::toInt(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_7083); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}catch (mosek::fusion::ValueConversionError _7082){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));}}else if ((_6913 == std::string ("intpntScaling"))){ int _7084 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_6914); if ((_7084 < (int)0)){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));}else {}mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_7084); }else if ((_6913 == std::string ("lowerObjCutFiniteTrh"))){ try { double _7086 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_7086); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}catch (mosek::fusion::ValueConversionError _7085){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));}}else if ((_6913 == std::string ("mioMaxTime"))){ try { double _7088 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_7088); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}catch (mosek::fusion::ValueConversionError _7087){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));}}else if ((_6913 == std::string ("basisTolS"))){ try { double _7090 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e-09 <= _7090)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_7090); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}catch (mosek::fusion::ValueConversionError _7089){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));}}else if ((_6913 == std::string ("presolveTolS"))){ try { double _7092 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((0.000000e+00 <= _7092)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_7092); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}catch (mosek::fusion::ValueConversionError _7091){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));}}else if ((_6913 == std::string ("upperObjCut"))){ try { double _7094 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_7094); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}catch (mosek::fusion::ValueConversionError _7093){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));}}else if ((_6913 == std::string ("intpntCoTolDfeas"))){ try { double _7096 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7096 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_7096); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}catch (mosek::fusion::ValueConversionError _7095){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));}}else if ((_6913 == std::string ("intpntQoTolNearRel"))){ try { double _7098 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e+00 <= _7098)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_NEAR_REL"),_7098); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}catch (mosek::fusion::ValueConversionError _7097){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolNearRel)"));}}else if ((_6913 == std::string ("mioTolAbsGap"))){ try { double _7100 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((0.000000e+00 <= _7100)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_7100); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}catch (mosek::fusion::ValueConversionError _7099){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));}}else if ((_6913 == std::string ("upperObjCutFiniteTrh"))){ try { double _7102 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_7102); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}catch (mosek::fusion::ValueConversionError _7101){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));}}else if ((_6913 == std::string ("mioTolAbsRelaxInt"))){ try { double _7104 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e-09 <= _7104)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_7104); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}catch (mosek::fusion::ValueConversionError _7103){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));}}else if ((_6913 == std::string ("semidefiniteTolApprox"))){ try { double _7106 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e-15 <= _7106)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_SEMIDEFINITE_TOL_APPROX"),_7106); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (semidefiniteTolApprox)"));}}catch (mosek::fusion::ValueConversionError _7105){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (semidefiniteTolApprox)"));}}else if ((_6913 == std::string ("mioTolRelDualBoundImprovement"))){ try { double _7108 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7108 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_7108); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}catch (mosek::fusion::ValueConversionError _7107){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));}}else if ((_6913 == std::string ("mioNearTolRelGap"))){ try { double _7110 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((0.000000e+00 <= _7110)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_REL_GAP"),_7110); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7109){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolRelGap)"));}}else if ((_6913 == std::string ("presolveTolRelLindep"))){ try { double _7112 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((0.000000e+00 <= _7112)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_7112); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}catch (mosek::fusion::ValueConversionError _7111){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));}}else if ((_6913 == std::string ("intpntTolDsafe"))){ try { double _7114 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e-04 <= _7114)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_7114); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}catch (mosek::fusion::ValueConversionError _7113){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));}}else if ((_6913 == std::string ("mioTolFeas"))){ try { double _7116 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7116 <= 1.000000e-03)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_7116); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}catch (mosek::fusion::ValueConversionError _7115){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));}}else if ((_6913 == std::string ("intpntTolInfeas"))){ try { double _7118 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7118 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_7118); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}catch (mosek::fusion::ValueConversionError _7117){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));}}else if ((_6913 == std::string ("optimizerMaxTime"))){ try { double _7120 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_7120); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}catch (mosek::fusion::ValueConversionError _7119){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));}}else if ((_6913 == std::string ("anaSolInfeasTol"))){ try { double _7122 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((0.000000e+00 <= _7122)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_ANA_SOL_INFEAS_TOL"),_7122); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}catch (mosek::fusion::ValueConversionError _7121){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (anaSolInfeasTol)"));}}else if ((_6913 == std::string ("simplexAbsTolPiv"))){ try { double _7124 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e-12 <= _7124)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_7124); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}catch (mosek::fusion::ValueConversionError _7123){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));}}else if ((_6913 == std::string ("intpntTolMuRed"))){ try { double _7126 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7126 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_7126); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}catch (mosek::fusion::ValueConversionError _7125){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));}}else if ((_6913 == std::string ("intpntCoTolMuRed"))){ try { double _7128 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7128 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_7128); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}catch (mosek::fusion::ValueConversionError _7127){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));}}else if ((_6913 == std::string ("intpntCoTolRelGap"))){ try { double _7130 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7130 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_7130); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7129){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));}}else if ((_6913 == std::string ("lowerObjCut"))){ try { double _7132 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_7132); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}catch (mosek::fusion::ValueConversionError _7131){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));}}else if ((_6913 == std::string ("mioDisableTermTime"))){ try { double _7134 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if (true){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_MIO_DISABLE_TERM_TIME"),_7134); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}catch (mosek::fusion::ValueConversionError _7133){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioDisableTermTime)"));}}else if ((_6913 == std::string ("intpntTolRelStep"))){ try { double _7136 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7136 <= 9.999990e-01)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_7136); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}catch (mosek::fusion::ValueConversionError _7135){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));}}else if ((_6913 == std::string ("simLuTolRelPiv"))){ try { double _7138 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7138 <= 9.999990e-01)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_7138); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}catch (mosek::fusion::ValueConversionError _7137){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));}}else if ((_6913 == std::string ("intpntTolStepSize"))){ try { double _7140 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7140 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_7140); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}catch (mosek::fusion::ValueConversionError _7139){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));}}else if ((_6913 == std::string ("intpntTolPfeas"))){ try { double _7142 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7142 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_7142); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}catch (mosek::fusion::ValueConversionError _7141){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));}}else if ((_6913 == std::string ("basisRelTolS"))){ try { double _7144 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((0.000000e+00 <= _7144)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_7144); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}catch (mosek::fusion::ValueConversionError _7143){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));}}else if ((_6913 == std::string ("presolveTolAbsLindep"))){ try { double _7146 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((0.000000e+00 <= _7146)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_7146); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}catch (mosek::fusion::ValueConversionError _7145){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));}}else if ((_6913 == std::string ("intpntCoTolInfeas"))){ try { double _7148 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7148 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_7148); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}catch (mosek::fusion::ValueConversionError _7147){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));}}else if ((_6913 == std::string ("mioRelGapConst"))){ try { double _7150 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e-15 <= _7150)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_7150); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}catch (mosek::fusion::ValueConversionError _7149){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));}}else if ((_6913 == std::string ("presolveTolAij"))){ try { double _7152 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e-15 <= _7152)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_7152); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}catch (mosek::fusion::ValueConversionError _7151){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));}}else if ((_6913 == std::string ("presolveTolX"))){ try { double _7154 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((0.000000e+00 <= _7154)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_7154); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}catch (mosek::fusion::ValueConversionError _7153){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));}}else if ((_6913 == std::string ("intpntTolPath"))){ try { double _7156 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7156 <= 9.999000e-01)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_7156); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}catch (mosek::fusion::ValueConversionError _7155){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));}}else if ((_6913 == std::string ("basisTolX"))){ try { double _7158 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e-09 <= _7158)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_7158); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}catch (mosek::fusion::ValueConversionError _7157){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));}}else if ((_6913 == std::string ("intpntTolRelGap"))){ try { double _7160 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e-14 <= _7160)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_7160); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7159){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));}}else if ((_6913 == std::string ("intpntTolPsafe"))){ try { double _7162 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e-04 <= _7162)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_7162); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}catch (mosek::fusion::ValueConversionError _7161){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));}}else if ((_6913 == std::string ("intpntCoTolNearRel"))){ try { double _7164 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((1.000000e+00 <= _7164)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_7164); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}catch (mosek::fusion::ValueConversionError _7163){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));}}else if ((_6913 == std::string ("intpntQoTolRelGap"))){ try { double _7166 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7166 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_REL_GAP"),_7166); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7165){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolRelGap)"));}}else if ((_6913 == std::string ("intpntQoTolInfeas"))){ try { double _7168 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7168 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_INFEAS"),_7168); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}catch (mosek::fusion::ValueConversionError _7167){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolInfeas)"));}}else if ((_6913 == std::string ("intpntQoTolDfeas"))){ try { double _7170 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7170 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_DFEAS"),_7170); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}catch (mosek::fusion::ValueConversionError _7169){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolDfeas)"));}}else if ((_6913 == std::string ("intpntTolDfeas"))){ try { double _7172 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7172 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_7172); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}catch (mosek::fusion::ValueConversionError _7171){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));}}else if ((_6913 == std::string ("mioNearTolAbsGap"))){ try { double _7174 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((0.000000e+00 <= _7174)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_MIO_NEAR_TOL_ABS_GAP"),_7174); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}catch (mosek::fusion::ValueConversionError _7173){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNearTolAbsGap)"));}}else if ((_6913 == std::string ("intpntQoTolPfeas"))){ try { double _7176 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7176 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_PFEAS"),_7176); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}catch (mosek::fusion::ValueConversionError _7175){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolPfeas)"));}}else if ((_6913 == std::string ("mioTolRelGap"))){ try { double _7178 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((0.000000e+00 <= _7178)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_7178); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}catch (mosek::fusion::ValueConversionError _7177){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));}}else if ((_6913 == std::string ("intpntQoTolMuRed"))){ try { double _7180 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7180 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_QO_TOL_MU_RED"),_7180); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}catch (mosek::fusion::ValueConversionError _7179){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntQoTolMuRed)"));}}else if ((_6913 == std::string ("intpntCoTolPfeas"))){ try { double _7182 = ::mosek::fusion::Utils::Tools::toDouble(_6914); if ((_7182 <= 1.000000e+00)){ mosek::fusion::p_Model::_get_impl(_6912.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_7182); }else { throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}catch (mosek::fusion::ValueConversionError _7181){ throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));}}else { throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));}}int mosek::fusion::p_Parameters::string_to_miocontsoltype_value( const std::string & _7183){ if (false){ return (- (int)1); }else if ((_7183 == std::string ("itg"))){ return (int)2; }else if ((_7183 == std::string ("none"))){ return (int)0; }else if ((_7183 == std::string ("root"))){ return (int)1; }else if ((_7183 == std::string ("itgRel"))){ return (int)3; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_internal_dinf_value( const std::string & _7184){ if (false){ return (- (int)1); }else if ((_7184 == std::string ("biPrimalFeas"))){ return (int)8; }else if ((_7184 == std::string ("presolveDupvarTime"))){ return (int)71; }else if ((_7184 == std::string ("intpntFactorSchurFlops"))){ return (int)44; }else if ((_7184 == std::string ("biPrimalObj"))){ return (int)9; }else if ((_7184 == std::string ("biDualDone"))){ return (int)2; }else if ((_7184 == std::string ("presolveSubDomvarTime"))){ return (int)74; }else if ((_7184 == std::string ("intpntFactorMlOrderSparseLFlops"))){ return (int)43; }else if ((_7184 == std::string ("presolveSetupTime"))){ return (int)73; }else if ((_7184 == std::string ("biFactorTime"))){ return (int)5; }else if ((_7184 == std::string ("intpntIterNonCorrectorFlops"))){ return (int)60; }else if ((_7184 == std::string ("intpntFactorHatSchurFlops"))){ return (int)26; }else if ((_7184 == std::string ("intpntGfeas"))){ return (int)56; }else if ((_7184 == std::string ("intpntFactorHatSchurPushTime"))){ return (int)30; }else if ((_7184 == std::string ("intpntFactorHatvTime"))){ return (int)40; }else if ((_7184 == std::string ("intpntFactorSetupHatSchurFlops"))){ return (int)49; }else if ((_7184 == std::string ("intpntFactorHatldFactorFlops"))){ return (int)36; }else if ((_7184 == std::string ("biPrimalDone"))){ return (int)7; }else if ((_7184 == std::string ("intpntFactorDenseLFlops"))){ return (int)19; }else if ((_7184 == std::string ("simPrimalObj"))){ return (int)82; }else if ((_7184 == std::string ("intpntFactorHatathataFlops"))){ return (int)34; }else if ((_7184 == std::string ("intpntIterOneCorrectorFlops"))){ return (int)61; }else if ((_7184 == std::string ("intpntFactorSparseLTime"))){ return (int)53; }else if ((_7184 == std::string ("intpntCompGap"))){ return (int)11; }else if ((_7184 == std::string ("intpntFactorHatvthatvFlops"))){ return (int)41; }else if ((_7184 == std::string ("presolveSubRelaxTime"))){ return (int)75; }else if ((_7184 == std::string ("sensitivityDualTime"))){ return (int)77; }else if ((_7184 == std::string ("biCrashTime"))){ return (int)1; }else if ((_7184 == std::string ("intpntFactorHatSchurPushFlops"))){ return (int)29; }else if ((_7184 == std::string ("intpntFactorHatvthatvTime"))){ return (int)42; }else if ((_7184 == std::string ("intpntFactorDenseTime"))){ return (int)21; }else if ((_7184 == std::string ("sensitivityPrimalTime"))){ return (int)78; }else if ((_7184 == std::string ("intpntFactorBarSchurFlops"))){ return (int)13; }else if ((_7184 == std::string ("biFactorWork"))){ return (int)6; }else if ((_7184 == std::string ("presolveAcoltTime"))){ return (int)68; }else if ((_7184 == std::string ("intpntFactorHataTime"))){ return (int)33; }else if ((_7184 == std::string ("intpntFactorSetupDetectDenseTime"))){ return (int)46; }else if ((_7184 == std::string ("intpntFactorHataFlops"))){ return (int)32; }else if ((_7184 == std::string ("presolveDupconTime"))){ return (int)70; }else if ((_7184 == std::string ("intpntFactorHatSchurPullTime"))){ return (int)28; }else if ((_7184 == std::string ("intpntInitIterTime"))){ return (int)58; }else if ((_7184 == std::string ("primalSimplexInftime"))){ return (int)76; }else if ((_7184 == std::string ("intpntFactorBvFlops"))){ return (int)16; }else if ((_7184 == std::string ("intpntInitSearchTime"))){ return (int)59; }else if ((_7184 == std::string ("intpntFactorSchurTime"))){ return (int)45; }else if ((_7184 == std::string ("intpntFactorHatldFactorTime"))){ return (int)37; }else if ((_7184 == std::string ("intpntFactorBarSchurTime"))){ return (int)15; }else if ((_7184 == std::string ("intpntFactorBarSchurDeTabTime"))){ return (int)12; }else if ((_7184 == std::string ("intpntFactorSetupFlops"))){ return (int)47; }else if ((_7184 == std::string ("intpntFactorBvtbvFlops"))){ return (int)17; }else if ((_7184 == std::string ("intpntGpOrderSavedFlops"))){ return (int)57; }else if ((_7184 == std::string ("intpntFactorTime"))){ return (int)54; }else if ((_7184 == std::string ("intpntMu"))){ return (int)63; }else if ((_7184 == std::string ("intpntFormSearchTime"))){ return (int)55; }else if ((_7184 == std::string ("simDualFeas"))){ return (int)79; }else if ((_7184 == std::string ("presolveCheckproTime"))){ return (int)69; }else if ((_7184 == std::string ("simPrimalFeas"))){ return (int)81; }else if ((_7184 == std::string ("intpntFactorDenseFlops"))){ return (int)18; }else if ((_7184 == std::string ("intpntIterRefTime"))){ return (int)62; }else if ((_7184 == std::string ("intpntSolveTime"))){ return (int)66; }else if ((_7184 == std::string ("intpntFactorHatSchurPullFlops"))){ return (int)27; }else if ((_7184 == std::string ("intpntFactorSetupMlOrderTime"))){ return (int)50; }else if ((_7184 == std::string ("biCrashLuTime"))){ return (int)0; }else if ((_7184 == std::string ("intpntUpdateTime"))){ return (int)67; }else if ((_7184 == std::string ("intpntFactorHatldInitTime"))){ return (int)38; }else if ((_7184 == std::string ("intpntFactorDotlInitTime"))){ return (int)24; }else if ((_7184 == std::string ("intpntSolveSparseLTime"))){ return (int)65; }else if ((_7184 == std::string ("intpntFactorDenseLTime"))){ return (int)20; }else if ((_7184 == std::string ("intpntFactorDotlFactorTime"))){ return (int)23; }else if ((_7184 == std::string ("dualSimplexInftime"))){ return (int)10; }else if ((_7184 == std::string ("biDualObj"))){ return (int)4; }else if ((_7184 == std::string ("intpntFactorSetupGpOrderTime"))){ return (int)48; }else if ((_7184 == std::string ("intpntFactorDotlFactorFlops"))){ return (int)22; }else if ((_7184 == std::string ("intpntFactorSetupTime"))){ return (int)51; }else if ((_7184 == std::string ("presolveFinalTime"))){ return (int)72; }else if ((_7184 == std::string ("intpntFactorHatathataTime"))){ return (int)35; }else if ((_7184 == std::string ("intpntFactorBarSchurSpTabTime"))){ return (int)14; }else if ((_7184 == std::string ("intpntSolveDenseLTime"))){ return (int)64; }else if ((_7184 == std::string ("intpntFactorSparseLFlops"))){ return (int)52; }else if ((_7184 == std::string ("intpntFactorHatvFlops"))){ return (int)39; }else if ((_7184 == std::string ("simDualObj"))){ return (int)80; }else if ((_7184 == std::string ("biDualFeas"))){ return (int)3; }else if ((_7184 == std::string ("intpntFactorHatSchurTime"))){ return (int)31; }else if ((_7184 == std::string ("intpntFactorGpOrderSparseLFlops"))){ return (int)25; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_presolvemode_value( const std::string & _7185){ if (false){ return (- (int)1); }else if ((_7185 == std::string ("on"))){ return (int)1; }else if ((_7185 == std::string ("off"))){ return (int)0; }else if ((_7185 == std::string ("free"))){ return (int)2; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_optimizertype_value( const std::string & _7186){ if (false){ return (- (int)1); }else if ((_7186 == std::string ("freeSimplex"))){ return (int)3; }else if ((_7186 == std::string ("mixedInt"))){ return (int)5; }else if ((_7186 == std::string ("dualSimplex"))){ return (int)1; }else if ((_7186 == std::string ("free"))){ return (int)2; }else if ((_7186 == std::string ("conic"))){ return (int)0; }else if ((_7186 == std::string ("primalSimplex"))){ return (int)6; }else if ((_7186 == std::string ("intpnt"))){ return (int)4; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value( const std::string & _7187){ if (false){ return (- (int)1); }else if ((_7187 == std::string ("col"))){ return (int)1; }else if ((_7187 == std::string ("row"))){ return (int)0; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_iinfitem_value( const std::string & _7188){ if (false){ return (- (int)1); }else if ((_7188 == std::string ("mioConstructSolution"))){ return (int)22; }else if ((_7188 == std::string ("anaProNumVar"))){ return (int)6; }else if ((_7188 == std::string ("simPrimalInfIter"))){ return (int)74; }else if ((_7188 == std::string ("mioNodeDepth"))){ return (int)26; }else if ((_7188 == std::string ("simPrimalDualIter"))){ return (int)71; }else if ((_7188 == std::string ("mioObjBoundDefined"))){ return (int)40; }else if ((_7188 == std::string ("anaProNumConUp"))){ return (int)5; }else if ((_7188 == std::string ("optNumvar"))){ return (int)50; }else if ((_7188 == std::string ("anaProNumVarFr"))){ return (int)10; }else if ((_7188 == std::string ("rdNumbarvar"))){ return (int)52; }else if ((_7188 == std::string ("mioRelgapSatisfied"))){ return (int)46; }else if ((_7188 == std::string ("mioPresolvedNumint"))){ return (int)44; }else if ((_7188 == std::string ("mioNumActiveNodes"))){ return (int)27; }else if ((_7188 == std::string ("simPrimalDualHotstart"))){ return (int)68; }else if ((_7188 == std::string ("intpntSolveDual"))){ return (int)18; }else if ((_7188 == std::string ("anaProNumVarBin"))){ return (int)7; }else if ((_7188 == std::string ("rdNumcon"))){ return (int)53; }else if ((_7188 == std::string ("mioNumCliqueCuts"))){ return (int)29; }else if ((_7188 == std::string ("mioPresolvedNumvar"))){ return (int)45; }else if ((_7188 == std::string ("mioPresolvedNumcont"))){ return (int)43; }else if ((_7188 == std::string ("mioNumImpliedBoundCuts"))){ return (int)32; }else if ((_7188 == std::string ("rdNumvar"))){ return (int)57; }else if ((_7188 == std::string ("simSolveDual"))){ return (int)76; }else if ((_7188 == std::string ("rdNumintvar"))){ return (int)55; }else if ((_7188 == std::string ("optimizeResponse"))){ return (int)51; }else if ((_7188 == std::string ("mioNumGomoryCuts"))){ return (int)31; }else if ((_7188 == std::string ("mioNearRelgapSatisfied"))){ return (int)25; }else if ((_7188 == std::string ("mioCliqueTableSize"))){ return (int)20; }else if ((_7188 == std::string ("solItrProsta"))){ return (int)81; }else if ((_7188 == std::string ("mioNearAbsgapSatisfied"))){ return (int)24; }else if ((_7188 == std::string ("mioInitialSolution"))){ return (int)23; }else if ((_7188 == std::string ("rdProtype"))){ return (int)58; }else if ((_7188 == std::string ("intpntNumThreads"))){ return (int)17; }else if ((_7188 == std::string ("mioNumCmirCuts"))){ return (int)30; }else if ((_7188 == std::string ("simDualHotstartLu"))){ return (int)61; }else if ((_7188 == std::string ("anaProNumVarLo"))){ return (int)12; }else if ((_7188 == std::string ("anaProNumVarUp"))){ return (int)14; }else if ((_7188 == std::string ("mioNumcon"))){ return (int)37; }else if ((_7188 == std::string ("anaProNumConFr"))){ return (int)2; }else if ((_7188 == std::string ("anaProNumConLo"))){ return (int)3; }else if ((_7188 == std::string ("simPrimalDualHotstartLu"))){ return (int)69; }else if ((_7188 == std::string ("simPrimalIter"))){ return (int)75; }else if ((_7188 == std::string ("simPrimalHotstart"))){ return (int)72; }else if ((_7188 == std::string ("simPrimalDualInfIter"))){ return (int)70; }else if ((_7188 == std::string ("mioNumint"))){ return (int)38; }else if ((_7188 == std::string ("anaProNumVarEq"))){ return (int)9; }else if ((_7188 == std::string ("intpntFactorDimDense"))){ return (int)15; }else if ((_7188 == std::string ("solItrSolsta"))){ return (int)82; }else if ((_7188 == std::string ("mioAbsgapSatisfied"))){ return (int)19; }else if ((_7188 == std::string ("mioConstructNumRoundings"))){ return (int)21; }else if ((_7188 == std::string ("solBasSolsta"))){ return (int)78; }else if ((_7188 == std::string ("rdNumq"))){ return (int)56; }else if ((_7188 == std::string ("mioNumBranch"))){ return (int)28; }else if ((_7188 == std::string ("solItgSolsta"))){ return (int)80; }else if ((_7188 == std::string ("mioUserObjCut"))){ return (int)48; }else if ((_7188 == std::string ("mioPresolvedNumcon"))){ return (int)42; }else if ((_7188 == std::string ("mioNumKnapsackCoverCuts"))){ return (int)34; }else if ((_7188 == std::string ("rdNumcone"))){ return (int)54; }else if ((_7188 == std::string ("anaProNumCon"))){ return (int)0; }else if ((_7188 == std::string ("simNumvar"))){ return (int)65; }else if ((_7188 == std::string ("stoNumARealloc"))){ return (int)83; }else if ((_7188 == std::string ("anaProNumVarInt"))){ return (int)11; }else if ((_7188 == std::string ("mioNumRepeatedPresolve"))){ return (int)36; }else if ((_7188 == std::string ("mioNumRelax"))){ return (int)35; }else if ((_7188 == std::string ("mioPresolvedNumbin"))){ return (int)41; }else if ((_7188 == std::string ("simPrimalDualDegIter"))){ return (int)67; }else if ((_7188 == std::string ("simDualDegIter"))){ return (int)59; }else if ((_7188 == std::string ("anaProNumConRa"))){ return (int)4; }else if ((_7188 == std::string ("simDualHotstart"))){ return (int)60; }else if ((_7188 == std::string ("anaProNumVarCont"))){ return (int)8; }else if ((_7188 == std::string ("simDualIter"))){ return (int)63; }else if ((_7188 == std::string ("simDualInfIter"))){ return (int)62; }else if ((_7188 == std::string ("mioTotalNumCuts"))){ return (int)47; }else if ((_7188 == std::string ("mioNumvar"))){ return (int)39; }else if ((_7188 == std::string ("mioNumIntSolutions"))){ return (int)33; }else if ((_7188 == std::string ("simPrimalHotstartLu"))){ return (int)73; }else if ((_7188 == std::string ("solBasProsta"))){ return (int)77; }else if ((_7188 == std::string ("intpntIter"))){ return (int)16; }else if ((_7188 == std::string ("anaProNumConEq"))){ return (int)1; }else if ((_7188 == std::string ("optNumcon"))){ return (int)49; }else if ((_7188 == std::string ("solItgProsta"))){ return (int)79; }else if ((_7188 == std::string ("simPrimalDegIter"))){ return (int)66; }else if ((_7188 == std::string ("anaProNumVarRa"))){ return (int)13; }else if ((_7188 == std::string ("simNumcon"))){ return (int)64; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_simreform_value( const std::string & _7189){ if (false){ return (- (int)1); }else if ((_7189 == std::string ("on"))){ return (int)1; }else if ((_7189 == std::string ("aggressive"))){ return (int)3; }else if ((_7189 == std::string ("off"))){ return (int)0; }else if ((_7189 == std::string ("free"))){ return (int)2; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_stakey_value( const std::string & _7190){ if (false){ return (- (int)1); }else if ((_7190 == std::string ("supbas"))){ return (int)2; }else if ((_7190 == std::string ("bas"))){ return (int)1; }else if ((_7190 == std::string ("fix"))){ return (int)5; }else if ((_7190 == std::string ("low"))){ return (int)3; }else if ((_7190 == std::string ("inf"))){ return (int)6; }else if ((_7190 == std::string ("unk"))){ return (int)0; }else if ((_7190 == std::string ("upr"))){ return (int)4; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_value_value( const std::string & _7191){ if (false){ return (- (int)1); }else if ((_7191 == std::string ("maxStrLen"))){ return (int)1024; }else if ((_7191 == std::string ("licenseBufferLength"))){ return (int)20; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_scalingmethod_value( const std::string & _7192){ if (false){ return (- (int)1); }else if ((_7192 == std::string ("pow2"))){ return (int)0; }else if ((_7192 == std::string ("free"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_soltype_value( const std::string & _7193){ if (false){ return (- (int)1); }else if ((_7193 == std::string ("itg"))){ return (int)2; }else if ((_7193 == std::string ("itr"))){ return (int)0; }else if ((_7193 == std::string ("bas"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_startpointtype_value( const std::string & _7194){ if (false){ return (- (int)1); }else if ((_7194 == std::string ("guess"))){ return (int)1; }else if ((_7194 == std::string ("satisfyBounds"))){ return (int)3; }else if ((_7194 == std::string ("constant"))){ return (int)2; }else if ((_7194 == std::string ("free"))){ return (int)0; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_language_value( const std::string & _7195){ if (false){ return (- (int)1); }else if ((_7195 == std::string ("dan"))){ return (int)1; }else if ((_7195 == std::string ("eng"))){ return (int)0; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_checkconvexitytype_value( const std::string & _7196){ if (false){ return (- (int)1); }else if ((_7196 == std::string ("simple"))){ return (int)1; }else if ((_7196 == std::string ("none"))){ return (int)0; }else if ((_7196 == std::string ("full"))){ return (int)2; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_variabletype_value( const std::string & _7197){ if (false){ return (- (int)1); }else if ((_7197 == std::string ("typeInt"))){ return (int)1; }else if ((_7197 == std::string ("typeCont"))){ return (int)0; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_mpsformat_value( const std::string & _7198){ if (false){ return (- (int)1); }else if ((_7198 == std::string ("strict"))){ return (int)0; }else if ((_7198 == std::string ("relaxed"))){ return (int)1; }else if ((_7198 == std::string ("cplex"))){ return (int)3; }else if ((_7198 == std::string ("free"))){ return (int)2; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_nametype_value( const std::string & _7199){ if (false){ return (- (int)1); }else if ((_7199 == std::string ("gen"))){ return (int)0; }else if ((_7199 == std::string ("lp"))){ return (int)2; }else if ((_7199 == std::string ("mps"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_compresstype_value( const std::string & _7200){ if (false){ return (- (int)1); }else if ((_7200 == std::string ("gzip"))){ return (int)2; }else if ((_7200 == std::string ("none"))){ return (int)0; }else if ((_7200 == std::string ("free"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_simdupvec_value( const std::string & _7201){ if (false){ return (- (int)1); }else if ((_7201 == std::string ("on"))){ return (int)1; }else if ((_7201 == std::string ("off"))){ return (int)0; }else if ((_7201 == std::string ("free"))){ return (int)2; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_dparam_value( const std::string & _7202){ if (false){ return (- (int)1); }else if ((_7202 == std::string ("lowerObjCutFiniteTrh"))){ return (int)47; }else if ((_7202 == std::string ("mioMaxTime"))){ return (int)49; }else if ((_7202 == std::string ("basisTolS"))){ return (int)2; }else if ((_7202 == std::string ("presolveTolS"))){ return (int)62; }else if ((_7202 == std::string ("upperObjCut"))){ return (int)68; }else if ((_7202 == std::string ("intpntCoTolDfeas"))){ return (int)17; }else if ((_7202 == std::string ("dataTolAijLarge"))){ return (int)10; }else if ((_7202 == std::string ("intpntQoTolNearRel"))){ return (int)33; }else if ((_7202 == std::string ("mioTolAbsGap"))){ return (int)53; }else if ((_7202 == std::string ("upperObjCutFiniteTrh"))){ return (int)69; }else if ((_7202 == std::string ("mioTolAbsRelaxInt"))){ return (int)54; }else if ((_7202 == std::string ("semidefiniteTolApprox"))){ return (int)65; }else if ((_7202 == std::string ("dataSymMatTolLarge"))){ return (int)7; }else if ((_7202 == std::string ("mioTolRelDualBoundImprovement"))){ return (int)56; }else if ((_7202 == std::string ("intpntNlTolMuRed"))){ return (int)25; }else if ((_7202 == std::string ("mioNearTolRelGap"))){ return (int)51; }else if ((_7202 == std::string ("presolveTolRelLindep"))){ return (int)61; }else if ((_7202 == std::string ("dataTolAij"))){ return (int)8; }else if ((_7202 == std::string ("intpntTolDsafe"))){ return (int)37; }else if ((_7202 == std::string ("mioTolFeas"))){ return (int)55; }else if ((_7202 == std::string ("intpntTolInfeas"))){ return (int)38; }else if ((_7202 == std::string ("intpntNlTolNearRel"))){ return (int)26; }else if ((_7202 == std::string ("optimizerMaxTime"))){ return (int)58; }else if ((_7202 == std::string ("dataTolX"))){ return (int)16; }else if ((_7202 == std::string ("anaSolInfeasTol"))){ return (int)0; }else if ((_7202 == std::string ("simplexAbsTolPiv"))){ return (int)67; }else if ((_7202 == std::string ("intpntTolMuRed"))){ return (int)39; }else if ((_7202 == std::string ("intpntCoTolMuRed"))){ return (int)19; }else if ((_7202 == std::string ("intpntCoTolRelGap"))){ return (int)22; }else if ((_7202 == std::string ("lowerObjCut"))){ return (int)46; }else if ((_7202 == std::string ("mioDisableTermTime"))){ return (int)48; }else if ((_7202 == std::string ("intpntTolRelStep"))){ return (int)44; }else if ((_7202 == std::string ("checkConvexityRelTol"))){ return (int)4; }else if ((_7202 == std::string ("dataTolCHuge"))){ return (int)13; }else if ((_7202 == std::string ("simLuTolRelPiv"))){ return (int)66; }else if ((_7202 == std::string ("dataTolCjLarge"))){ return (int)14; }else if ((_7202 == std::string ("intpntNlTolRelStep"))){ return (int)29; }else if ((_7202 == std::string ("intpntTolStepSize"))){ return (int)45; }else if ((_7202 == std::string ("intpntTolPfeas"))){ return (int)41; }else if ((_7202 == std::string ("dataSymMatTolHuge"))){ return (int)6; }else if ((_7202 == std::string ("basisRelTolS"))){ return (int)1; }else if ((_7202 == std::string ("presolveTolAbsLindep"))){ return (int)59; }else if ((_7202 == std::string ("intpntCoTolInfeas"))){ return (int)18; }else if ((_7202 == std::string ("mioRelGapConst"))){ return (int)52; }else if ((_7202 == std::string ("presolveTolAij"))){ return (int)60; }else if ((_7202 == std::string ("presolveTolX"))){ return (int)63; }else if ((_7202 == std::string ("intpntTolPath"))){ return (int)40; }else if ((_7202 == std::string ("intpntNlMeritBal"))){ return (int)23; }else if ((_7202 == std::string ("basisTolX"))){ return (int)3; }else if ((_7202 == std::string ("intpntTolRelGap"))){ return (int)43; }else if ((_7202 == std::string ("dataSymMatTol"))){ return (int)5; }else if ((_7202 == std::string ("dataTolAijHuge"))){ return (int)9; }else if ((_7202 == std::string ("dataTolBoundWrn"))){ return (int)12; }else if ((_7202 == std::string ("dataTolBoundInf"))){ return (int)11; }else if ((_7202 == std::string ("intpntTolPsafe"))){ return (int)42; }else if ((_7202 == std::string ("intpntCoTolNearRel"))){ return (int)20; }else if ((_7202 == std::string ("intpntQoTolRelGap"))){ return (int)35; }else if ((_7202 == std::string ("intpntQoTolInfeas"))){ return (int)31; }else if ((_7202 == std::string ("intpntNlTolPfeas"))){ return (int)27; }else if ((_7202 == std::string ("intpntNlTolDfeas"))){ return (int)24; }else if ((_7202 == std::string ("intpntQoTolDfeas"))){ return (int)30; }else if ((_7202 == std::string ("intpntTolDfeas"))){ return (int)36; }else if ((_7202 == std::string ("mioNearTolAbsGap"))){ return (int)50; }else if ((_7202 == std::string ("intpntQoTolPfeas"))){ return (int)34; }else if ((_7202 == std::string ("qcqoReformulateRelDropTol"))){ return (int)64; }else if ((_7202 == std::string ("dataTolQij"))){ return (int)15; }else if ((_7202 == std::string ("mioTolRelGap"))){ return (int)57; }else if ((_7202 == std::string ("intpntQoTolMuRed"))){ return (int)32; }else if ((_7202 == std::string ("intpntNlTolRelGap"))){ return (int)28; }else if ((_7202 == std::string ("intpntCoTolPfeas"))){ return (int)21; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_inftype_value( const std::string & _7203){ if (false){ return (- (int)1); }else if ((_7203 == std::string ("douType"))){ return (int)0; }else if ((_7203 == std::string ("lintType"))){ return (int)2; }else if ((_7203 == std::string ("intType"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_problemtype_value( const std::string & _7204){ if (false){ return (- (int)1); }else if ((_7204 == std::string ("qcqo"))){ return (int)2; }else if ((_7204 == std::string ("lo"))){ return (int)0; }else if ((_7204 == std::string ("conic"))){ return (int)4; }else if ((_7204 == std::string ("geco"))){ return (int)3; }else if ((_7204 == std::string ("mixed"))){ return (int)5; }else if ((_7204 == std::string ("qo"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_orderingtype_value( const std::string & _7205){ if (false){ return (- (int)1); }else if ((_7205 == std::string ("none"))){ return (int)5; }else if ((_7205 == std::string ("forceGraphpar"))){ return (int)4; }else if ((_7205 == std::string ("appminloc"))){ return (int)1; }else if ((_7205 == std::string ("tryGraphpar"))){ return (int)3; }else if ((_7205 == std::string ("free"))){ return (int)0; }else if ((_7205 == std::string ("experimental"))){ return (int)2; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_dataformat_value( const std::string & _7206){ if (false){ return (- (int)1); }else if ((_7206 == std::string ("xml"))){ return (int)4; }else if ((_7206 == std::string ("task"))){ return (int)6; }else if ((_7206 == std::string ("extension"))){ return (int)0; }else if ((_7206 == std::string ("cb"))){ return (int)7; }else if ((_7206 == std::string ("jsonTask"))){ return (int)8; }else if ((_7206 == std::string ("freeMps"))){ return (int)5; }else if ((_7206 == std::string ("lp"))){ return (int)2; }else if ((_7206 == std::string ("op"))){ return (int)3; }else if ((_7206 == std::string ("mps"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_simdegen_value( const std::string & _7207){ if (false){ return (- (int)1); }else if ((_7207 == std::string ("none"))){ return (int)0; }else if ((_7207 == std::string ("moderate"))){ return (int)3; }else if ((_7207 == std::string ("minimum"))){ return (int)4; }else if ((_7207 == std::string ("aggressive"))){ return (int)2; }else if ((_7207 == std::string ("free"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_onoffkey_value( const std::string & _7208){ if (false){ return (- (int)1); }else if ((_7208 == std::string ("on"))){ return (int)1; }else if ((_7208 == std::string ("off"))){ return (int)0; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_transpose_value( const std::string & _7209){ if (false){ return (- (int)1); }else if ((_7209 == std::string ("yes"))){ return (int)1; }else if ((_7209 == std::string ("no"))){ return (int)0; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_mionodeseltype_value( const std::string & _7210){ if (false){ return (- (int)1); }else if ((_7210 == std::string ("pseudo"))){ return (int)5; }else if ((_7210 == std::string ("hybrid"))){ return (int)4; }else if ((_7210 == std::string ("free"))){ return (int)0; }else if ((_7210 == std::string ("worst"))){ return (int)3; }else if ((_7210 == std::string ("best"))){ return (int)2; }else if ((_7210 == std::string ("first"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_rescode_value( const std::string & _7211){ if (false){ return (- (int)1); }else if ((_7211 == std::string ("errParamType"))){ return (int)1218; }else if ((_7211 == std::string ("errInvSkx"))){ return (int)1268; }else if ((_7211 == std::string ("errMulAElement"))){ return (int)1254; }else if ((_7211 == std::string ("errInvalidNameInSolFile"))){ return (int)1170; }else if ((_7211 == std::string ("errMpsMulQsec"))){ return (int)1113; }else if ((_7211 == std::string ("errSenIndexInvalid"))){ return (int)3055; }else if ((_7211 == std::string ("errInvSkn"))){ return (int)1274; }else if ((_7211 == std::string ("errInvSkc"))){ return (int)1267; }else if ((_7211 == std::string ("errToconicConstraintFx"))){ return (int)7151; }else if ((_7211 == std::string ("errIndexIsTooLarge"))){ return (int)1204; }else if ((_7211 == std::string ("errCbfDuplicateBcoord"))){ return (int)7115; }else if ((_7211 == std::string ("errFeasrepairCannotRelax"))){ return (int)1700; }else if ((_7211 == std::string ("errInvConeTypeStr"))){ return (int)1271; }else if ((_7211 == std::string ("wrnLicenseFeatureExpire"))){ return (int)505; }else if ((_7211 == std::string ("errInvalidCompression"))){ return (int)1800; }else if ((_7211 == std::string ("wrnZerosInSparseRow"))){ return (int)705; }else if ((_7211 == std::string ("wrnSolFileIgnoredCon"))){ return (int)351; }else if ((_7211 == std::string ("errCbfDuplicateInt"))){ return (int)7110; }else if ((_7211 == std::string ("errArgIsTooLarge"))){ return (int)1227; }else if ((_7211 == std::string ("errLauSingularMatrix"))){ return (int)7000; }else if ((_7211 == std::string ("errUserNloFunc"))){ return (int)1432; }else if ((_7211 == std::string ("wrnZeroAij"))){ return (int)63; }else if ((_7211 == std::string ("errLauUnknown"))){ return (int)7005; }else if ((_7211 == std::string ("errLpWriteConicProblem"))){ return (int)1163; }else if ((_7211 == std::string ("errUpperBoundIsANan"))){ return (int)1391; }else if ((_7211 == std::string ("errSymMatDuplicate"))){ return (int)3944; }else if ((_7211 == std::string ("errIndexArrIsTooSmall"))){ return (int)1221; }else if ((_7211 == std::string ("errLicenseMax"))){ return (int)1016; }else if ((_7211 == std::string ("wrnDuplicateConstraintNames"))){ return (int)850; }else if ((_7211 == std::string ("errInvalidFormatType"))){ return (int)1283; }else if ((_7211 == std::string ("errNoPrimalInfeasCer"))){ return (int)2000; }else if ((_7211 == std::string ("trmStall"))){ return (int)10006; }else if ((_7211 == std::string ("errOpfPrematureEof"))){ return (int)1172; }else if ((_7211 == std::string ("errLivingTasks"))){ return (int)1066; }else if ((_7211 == std::string ("errMaxnumcone"))){ return (int)1304; }else if ((_7211 == std::string ("errLauNotPositiveDefinite"))){ return (int)7001; }else if ((_7211 == std::string ("errNumvarlim"))){ return (int)1251; }else if ((_7211 == std::string ("wrnUsingGenericNames"))){ return (int)503; }else if ((_7211 == std::string ("errRepairInvalidProblem"))){ return (int)1710; }else if ((_7211 == std::string ("errParamValueStr"))){ return (int)1217; }else if ((_7211 == std::string ("errQobjUpperTriangle"))){ return (int)1415; }else if ((_7211 == std::string ("errLowerBoundIsANan"))){ return (int)1390; }else if ((_7211 == std::string ("errNullPointer"))){ return (int)1065; }else if ((_7211 == std::string ("errParamNameStr"))){ return (int)1208; }else if ((_7211 == std::string ("errParamIsTooSmall"))){ return (int)1216; }else if ((_7211 == std::string ("errSolverProbtype"))){ return (int)1259; }else if ((_7211 == std::string ("errInfIntIndex"))){ return (int)1220; }else if ((_7211 == std::string ("errUserNloEvalHessubi"))){ return (int)1440; }else if ((_7211 == std::string ("errUserNloEvalHessubj"))){ return (int)1441; }else if ((_7211 == std::string ("errOpenDl"))){ return (int)1030; }else if ((_7211 == std::string ("errLast"))){ return (int)1262; }else if ((_7211 == std::string ("errLpEmpty"))){ return (int)1151; }else if ((_7211 == std::string ("errLicenseServerVersion"))){ return (int)1026; }else if ((_7211 == std::string ("errServerProtocol"))){ return (int)8001; }else if ((_7211 == std::string ("errThreadMutexInit"))){ return (int)1045; }else if ((_7211 == std::string ("errInvNameItem"))){ return (int)1280; }else if ((_7211 == std::string ("errCbfTooManyConstraints"))){ return (int)7103; }else if ((_7211 == std::string ("wrnLargeLoBound"))){ return (int)52; }else if ((_7211 == std::string ("errJsonNumberOverflow"))){ return (int)1177; }else if ((_7211 == std::string ("errSenBoundInvalidUp"))){ return (int)3053; }else if ((_7211 == std::string ("errMpsDuplicateQElement"))){ return (int)1121; }else if ((_7211 == std::string ("errDuplicateBarvariableNames"))){ return (int)4502; }else if ((_7211 == std::string ("errConeType"))){ return (int)1305; }else if ((_7211 == std::string ("errCbfInvalidVarType"))){ return (int)7111; }else if ((_7211 == std::string ("errBarVarDim"))){ return (int)3920; }else if ((_7211 == std::string ("wrnAnaAlmostIntBounds"))){ return (int)904; }else if ((_7211 == std::string ("wrnConstructInvalidSolItg"))){ return (int)807; }else if ((_7211 == std::string ("errNullTask"))){ return (int)1061; }else if ((_7211 == std::string ("wrnLicenseExpire"))){ return (int)500; }else if ((_7211 == std::string ("errSpace"))){ return (int)1051; }else if ((_7211 == std::string ("errNullEnv"))){ return (int)1060; }else if ((_7211 == std::string ("errNumconlim"))){ return (int)1250; }else if ((_7211 == std::string ("errRepairOptimizationFailed"))){ return (int)1711; }else if ((_7211 == std::string ("errUnhandledSolutionStatus"))){ return (int)6010; }else if ((_7211 == std::string ("errCbfUnsupported"))){ return (int)7122; }else if ((_7211 == std::string ("wrnOpenParamFile"))){ return (int)50; }else if ((_7211 == std::string ("errInvalidVarName"))){ return (int)1077; }else if ((_7211 == std::string ("ok"))){ return (int)0; }else if ((_7211 == std::string ("errTaskWrite"))){ return (int)2562; }else if ((_7211 == std::string ("errSenSolutionStatus"))){ return (int)3057; }else if ((_7211 == std::string ("errSizeLicenseCon"))){ return (int)1010; }else if ((_7211 == std::string ("errReadFormat"))){ return (int)1090; }else if ((_7211 == std::string ("wrnLargeCj"))){ return (int)57; }else if ((_7211 == std::string ("errLicenseExpired"))){ return (int)1001; }else if ((_7211 == std::string ("errArgumentDimension"))){ return (int)1201; }else if ((_7211 == std::string ("errNanInBlc"))){ return (int)1461; }else if ((_7211 == std::string ("errNanInBlx"))){ return (int)1471; }else if ((_7211 == std::string ("errServerToken"))){ return (int)8003; }else if ((_7211 == std::string ("errSymMatInvalidRowIndex"))){ return (int)3940; }else if ((_7211 == std::string ("errNonUniqueArray"))){ return (int)5000; }else if ((_7211 == std::string ("errInvalidFileFormatForSymMat"))){ return (int)4000; }else if ((_7211 == std::string ("errJsonSyntax"))){ return (int)1175; }else if ((_7211 == std::string ("errMpsMulConName"))){ return (int)1112; }else if ((_7211 == std::string ("errLicenseServer"))){ return (int)1015; }else if ((_7211 == std::string ("wrnTooFewBasisVars"))){ return (int)400; }else if ((_7211 == std::string ("errMpsInvBoundKey"))){ return (int)1108; }else if ((_7211 == std::string ("errThreadCreate"))){ return (int)1048; }else if ((_7211 == std::string ("errInvalidMaxNum"))){ return (int)1247; }else if ((_7211 == std::string ("errInvalidIomode"))){ return (int)1801; }else if ((_7211 == std::string ("errApiArrayTooSmall"))){ return (int)3001; }else if ((_7211 == std::string ("errInvalidAij"))){ return (int)1473; }else if ((_7211 == std::string ("errConeSize"))){ return (int)1301; }else if ((_7211 == std::string ("errUserFuncRet"))){ return (int)1430; }else if ((_7211 == std::string ("errMpsConeType"))){ return (int)1117; }else if ((_7211 == std::string ("errParamIsTooLarge"))){ return (int)1215; }else if ((_7211 == std::string ("wrnPresolveOutofspace"))){ return (int)802; }else if ((_7211 == std::string ("errSizeLicenseIntvar"))){ return (int)1012; }else if ((_7211 == std::string ("errNoOptimizerVarType"))){ return (int)1552; }else if ((_7211 == std::string ("errCbfTooFewVariables"))){ return (int)7117; }else if ((_7211 == std::string ("errJsonData"))){ return (int)1179; }else if ((_7211 == std::string ("errMioNoOptimizer"))){ return (int)1551; }else if ((_7211 == std::string ("errLauArgTrans"))){ return (int)7018; }else if ((_7211 == std::string ("errArgumentPermArray"))){ return (int)1299; }else if ((_7211 == std::string ("errInvalidFileFormatForCones"))){ return (int)4005; }else if ((_7211 == std::string ("errLauInvalidLowerTriangularMatrix"))){ return (int)7002; }else if ((_7211 == std::string ("errObjQNotPsd"))){ return (int)1295; }else if ((_7211 == std::string ("errInternal"))){ return (int)3000; }else if ((_7211 == std::string ("errLpInvalidVarName"))){ return (int)1154; }else if ((_7211 == std::string ("errLpIncompatible"))){ return (int)1150; }else if ((_7211 == std::string ("errNoSolutionInCallback"))){ return (int)2500; }else if ((_7211 == std::string ("errInfLintIndex"))){ return (int)1225; }else if ((_7211 == std::string ("wrnTooManyBasisVars"))){ return (int)405; }else if ((_7211 == std::string ("errSpaceNoInfo"))){ return (int)1081; }else if ((_7211 == std::string ("wrnNzInUprTri"))){ return (int)200; }else if ((_7211 == std::string ("errInvQconSubi"))){ return (int)1405; }else if ((_7211 == std::string ("errCbfInvalidConType"))){ return (int)7112; }else if ((_7211 == std::string ("errInvQconSubk"))){ return (int)1404; }else if ((_7211 == std::string ("errInvQconSubj"))){ return (int)1406; }else if ((_7211 == std::string ("errArgumentType"))){ return (int)1198; }else if ((_7211 == std::string ("errEndOfFile"))){ return (int)1059; }else if ((_7211 == std::string ("errNonlinearEquality"))){ return (int)1290; }else if ((_7211 == std::string ("errNrArguments"))){ return (int)1199; }else if ((_7211 == std::string ("errConQNotPsd"))){ return (int)1293; }else if ((_7211 == std::string ("errInvalidConeName"))){ return (int)1078; }else if ((_7211 == std::string ("errInvalidConName"))){ return (int)1076; }else if ((_7211 == std::string ("errNonlinearRanged"))){ return (int)1292; }else if ((_7211 == std::string ("errWriteOpfInvalidVarName"))){ return (int)1156; }else if ((_7211 == std::string ("errSenFormat"))){ return (int)3050; }else if ((_7211 == std::string ("errNonconvex"))){ return (int)1291; }else if ((_7211 == std::string ("errUnbStepSize"))){ return (int)3100; }else if ((_7211 == std::string ("errMpsUndefVarName"))){ return (int)1106; }else if ((_7211 == std::string ("errInvalidFileName"))){ return (int)1056; }else if ((_7211 == std::string ("errFileWrite"))){ return (int)1054; }else if ((_7211 == std::string ("errCannotHandleNl"))){ return (int)2506; }else if ((_7211 == std::string ("errNoBasisSol"))){ return (int)1600; }else if ((_7211 == std::string ("errApiCbConnect"))){ return (int)3002; }else if ((_7211 == std::string ("errObjQNotNsd"))){ return (int)1296; }else if ((_7211 == std::string ("errMpsNonSymmetricQ"))){ return (int)1120; }else if ((_7211 == std::string ("errUnknown"))){ return (int)1050; }else if ((_7211 == std::string ("errInfType"))){ return (int)1232; }else if ((_7211 == std::string ("errLinkFileDll"))){ return (int)1040; }else if ((_7211 == std::string ("wrnDuplicateVariableNames"))){ return (int)851; }else if ((_7211 == std::string ("errParamNameDou"))){ return (int)1206; }else if ((_7211 == std::string ("wrnDuplicateBarvariableNames"))){ return (int)852; }else if ((_7211 == std::string ("errNoBarsForSolution"))){ return (int)3916; }else if ((_7211 == std::string ("errThreadMutexLock"))){ return (int)1046; }else if ((_7211 == std::string ("errNonlinearFunctionsNotAllowed"))){ return (int)1428; }else if ((_7211 == std::string ("errMixedConicAndNl"))){ return (int)1501; }else if ((_7211 == std::string ("errLpFreeConstraint"))){ return (int)1155; }else if ((_7211 == std::string ("errLicenseInvalidHostid"))){ return (int)1025; }else if ((_7211 == std::string ("errInvConeType"))){ return (int)1272; }else if ((_7211 == std::string ("errInfIntName"))){ return (int)1231; }else if ((_7211 == std::string ("errCbfDuplicateObj"))){ return (int)7107; }else if ((_7211 == std::string ("errApiInternal"))){ return (int)3999; }else if ((_7211 == std::string ("errSenIndexRange"))){ return (int)3052; }else if ((_7211 == std::string ("errCbfInvalidIntIndex"))){ return (int)7121; }else if ((_7211 == std::string ("wrnParamNameDou"))){ return (int)510; }else if ((_7211 == std::string ("errInvQobjSubi"))){ return (int)1401; }else if ((_7211 == std::string ("errInvQobjSubj"))){ return (int)1402; }else if ((_7211 == std::string ("trmUserCallback"))){ return (int)10007; }else if ((_7211 == std::string ("errArgumentLenneq"))){ return (int)1197; }else if ((_7211 == std::string ("errInArgument"))){ return (int)1200; }else if ((_7211 == std::string ("errMaxnumvar"))){ return (int)1241; }else if ((_7211 == std::string ("errMpsInvField"))){ return (int)1101; }else if ((_7211 == std::string ("errOpfFormat"))){ return (int)1168; }else if ((_7211 == std::string ("wrnAnaLargeBounds"))){ return (int)900; }else if ((_7211 == std::string ("errCannotCloneNl"))){ return (int)2505; }else if ((_7211 == std::string ("errSymMatNotLowerTringular"))){ return (int)3942; }else if ((_7211 == std::string ("errMpsMulCsec"))){ return (int)1116; }else if ((_7211 == std::string ("errUserFuncRetData"))){ return (int)1431; }else if ((_7211 == std::string ("errInvAptre"))){ return (int)1253; }else if ((_7211 == std::string ("errBasisFactor"))){ return (int)1610; }else if ((_7211 == std::string ("errInvalidWchar"))){ return (int)2901; }else if ((_7211 == std::string ("errCbfParse"))){ return (int)7100; }else if ((_7211 == std::string ("wrnRquadConesWithRootFixedAtZero"))){ return (int)931; }else if ((_7211 == std::string ("errSizeLicense"))){ return (int)1005; }else if ((_7211 == std::string ("errNanInC"))){ return (int)1470; }else if ((_7211 == std::string ("errLpInvalidConName"))){ return (int)1171; }else if ((_7211 == std::string ("errMioInvalidRootOptimizer"))){ return (int)7130; }else if ((_7211 == std::string ("errHugeAij"))){ return (int)1380; }else if ((_7211 == std::string ("errCbfTooFewConstraints"))){ return (int)7118; }else if ((_7211 == std::string ("errToconicConstraintRa"))){ return (int)7152; }else if ((_7211 == std::string ("errDuplicateConeNames"))){ return (int)4503; }else if ((_7211 == std::string ("wrnConstructNoSolItg"))){ return (int)810; }else if ((_7211 == std::string ("errObjectiveRange"))){ return (int)1260; }else if ((_7211 == std::string ("errMpsTabInField3"))){ return (int)1126; }else if ((_7211 == std::string ("errInfDouName"))){ return (int)1230; }else if ((_7211 == std::string ("errNegativeAppend"))){ return (int)1264; }else if ((_7211 == std::string ("errInvSk"))){ return (int)1270; }else if ((_7211 == std::string ("errParamNameInt"))){ return (int)1207; }else if ((_7211 == std::string ("errBasis"))){ return (int)1266; }else if ((_7211 == std::string ("errMaxnumbarvar"))){ return (int)1242; }else if ((_7211 == std::string ("wrnAnaEmptyCols"))){ return (int)902; }else if ((_7211 == std::string ("trmInternal"))){ return (int)10030; }else if ((_7211 == std::string ("errInvVarType"))){ return (int)1258; }else if ((_7211 == std::string ("errOpfNewVariable"))){ return (int)1169; }else if ((_7211 == std::string ("errFlexlm"))){ return (int)1014; }else if ((_7211 == std::string ("errLpWriteGecoProblem"))){ return (int)1164; }else if ((_7211 == std::string ("trmInternalStop"))){ return (int)10031; }else if ((_7211 == std::string ("errCbfTooFewInts"))){ return (int)7119; }else if ((_7211 == std::string ("wrnParamNameInt"))){ return (int)511; }else if ((_7211 == std::string ("errConeRepVar"))){ return (int)1303; }else if ((_7211 == std::string ("errInvProblem"))){ return (int)1500; }else if ((_7211 == std::string ("errLauArgN"))){ return (int)7011; }else if ((_7211 == std::string ("errLauArgM"))){ return (int)7010; }else if ((_7211 == std::string ("errLauArgK"))){ return (int)7012; }else if ((_7211 == std::string ("wrnNoDualizer"))){ return (int)950; }else if ((_7211 == std::string ("errMpsMulQobj"))){ return (int)1114; }else if ((_7211 == std::string ("wrnParamIgnoredCmio"))){ return (int)516; }else if ((_7211 == std::string ("errThreadMutexUnlock"))){ return (int)1047; }else if ((_7211 == std::string ("errInvQconVal"))){ return (int)1407; }else if ((_7211 == std::string ("errLuMaxNumTries"))){ return (int)2800; }else if ((_7211 == std::string ("wrnDroppedNzQobj"))){ return (int)201; }else if ((_7211 == std::string ("errGlobalInvConicProblem"))){ return (int)1503; }else if ((_7211 == std::string ("errLauInvalidSparseSymmetricMatrix"))){ return (int)7019; }else if ((_7211 == std::string ("errLpFormat"))){ return (int)1160; }else if ((_7211 == std::string ("trmMioNearRelGap"))){ return (int)10003; }else if ((_7211 == std::string ("errSenInvalidRegexp"))){ return (int)3056; }else if ((_7211 == std::string ("errLicenseVersion"))){ return (int)1002; }else if ((_7211 == std::string ("errSymMatInvalidValue"))){ return (int)3943; }else if ((_7211 == std::string ("errDataFileExt"))){ return (int)1055; }else if ((_7211 == std::string ("wrnLpDropVariable"))){ return (int)85; }else if ((_7211 == std::string ("errInfDouIndex"))){ return (int)1219; }else if ((_7211 == std::string ("errCbfDuplicateObjacoord"))){ return (int)7114; }else if ((_7211 == std::string ("errFactor"))){ return (int)1650; }else if ((_7211 == std::string ("wrnParamNameStr"))){ return (int)512; }else if ((_7211 == std::string ("errMaxnumcon"))){ return (int)1240; }else if ((_7211 == std::string ("errLicenseFeature"))){ return (int)1018; }else if ((_7211 == std::string ("errReadLpNonexistingName"))){ return (int)1162; }else if ((_7211 == std::string ("errMpsNullVarName"))){ return (int)1104; }else if ((_7211 == std::string ("errCbfTooManyInts"))){ return (int)7120; }else if ((_7211 == std::string ("errMioInternal"))){ return (int)5010; }else if ((_7211 == std::string ("errLicenseNoServerSupport"))){ return (int)1027; }else if ((_7211 == std::string ("wrnSparMaxLen"))){ return (int)66; }else if ((_7211 == std::string ("errLicenseNoServerLine"))){ return (int)1028; }else if ((_7211 == std::string ("errConeIndex"))){ return (int)1300; }else if ((_7211 == std::string ("errProItem"))){ return (int)1281; }else if ((_7211 == std::string ("errCbfDuplicateAcoord"))){ return (int)7116; }else if ((_7211 == std::string ("errQconSubiTooSmall"))){ return (int)1408; }else if ((_7211 == std::string ("trmNumMaxNumIntSolutions"))){ return (int)10015; }else if ((_7211 == std::string ("errMpsTabInField2"))){ return (int)1125; }else if ((_7211 == std::string ("wrnMioInfeasibleFinal"))){ return (int)270; }else if ((_7211 == std::string ("errNoSnxForBasSol"))){ return (int)2953; }else if ((_7211 == std::string ("errMpsTabInField5"))){ return (int)1127; }else if ((_7211 == std::string ("wrnWriteDiscardedCfix"))){ return (int)804; }else if ((_7211 == std::string ("errInternalTestFailed"))){ return (int)3500; }else if ((_7211 == std::string ("errFileOpen"))){ return (int)1052; }else if ((_7211 == std::string ("wrnIgnoreInteger"))){ return (int)250; }else if ((_7211 == std::string ("errInvalidTask"))){ return (int)1064; }else if ((_7211 == std::string ("errDuplicateConstraintNames"))){ return (int)4500; }else if ((_7211 == std::string ("trmNumericalProblem"))){ return (int)10025; }else if ((_7211 == std::string ("errApiFatalError"))){ return (int)3005; }else if ((_7211 == std::string ("errInvOptimizer"))){ return (int)1550; }else if ((_7211 == std::string ("errRemoveConeVariable"))){ return (int)1310; }else if ((_7211 == std::string ("errToconicConstrQNotPsd"))){ return (int)7150; }else if ((_7211 == std::string ("errSolFileInvalidNumber"))){ return (int)1350; }else if ((_7211 == std::string ("errFileRead"))){ return (int)1053; }else if ((_7211 == std::string ("errUpperTriangle"))){ return (int)6020; }else if ((_7211 == std::string ("wrnSolFilter"))){ return (int)300; }else if ((_7211 == std::string ("errMpsNoObjective"))){ return (int)1110; }else if ((_7211 == std::string ("errConeOverlap"))){ return (int)1302; }else if ((_7211 == std::string ("errInvalidStream"))){ return (int)1062; }else if ((_7211 == std::string ("errInvalidAmplStub"))){ return (int)3700; }else if ((_7211 == std::string ("wrnLargeConFx"))){ return (int)54; }else if ((_7211 == std::string ("errCbfSyntax"))){ return (int)7106; }else if ((_7211 == std::string ("wrnAnaCZero"))){ return (int)901; }else if ((_7211 == std::string ("errTaskInvalid"))){ return (int)2561; }else if ((_7211 == std::string ("errMpsInvConKey"))){ return (int)1107; }else if ((_7211 == std::string ("errNoDualInfeasCer"))){ return (int)2001; }else if ((_7211 == std::string ("errFeasrepairInconsistentBound"))){ return (int)1702; }else if ((_7211 == std::string ("errCbfInvalidDomainDimension"))){ return (int)7113; }else if ((_7211 == std::string ("errInfiniteBound"))){ return (int)1400; }else if ((_7211 == std::string ("errLauArgTransb"))){ return (int)7016; }else if ((_7211 == std::string ("errInvalidIdx"))){ return (int)1246; }else if ((_7211 == std::string ("errLauArgTransa"))){ return (int)7015; }else if ((_7211 == std::string ("errIdenticalTasks"))){ return (int)3101; }else if ((_7211 == std::string ("errWriteMpsInvalidName"))){ return (int)1153; }else if ((_7211 == std::string ("errInvalidWhichsol"))){ return (int)1228; }else if ((_7211 == std::string ("wrnLicenseServer"))){ return (int)501; }else if ((_7211 == std::string ("errMpsInvalidObjsense"))){ return (int)1122; }else if ((_7211 == std::string ("errInvSkStr"))){ return (int)1269; }else if ((_7211 == std::string ("errDupName"))){ return (int)1071; }else if ((_7211 == std::string ("wrnLargeBound"))){ return (int)51; }else if ((_7211 == std::string ("errOptimizerLicense"))){ return (int)1013; }else if ((_7211 == std::string ("errFileLicense"))){ return (int)1007; }else if ((_7211 == std::string ("errSolitem"))){ return (int)1237; }else if ((_7211 == std::string ("errPostsolve"))){ return (int)1580; }else if ((_7211 == std::string ("errPlatformNotLicensed"))){ return (int)1019; }else if ((_7211 == std::string ("errSenBoundInvalidLo"))){ return (int)3054; }else if ((_7211 == std::string ("errMpsSplittedVar"))){ return (int)1111; }else if ((_7211 == std::string ("errThreadCondInit"))){ return (int)1049; }else if ((_7211 == std::string ("errInvalidProblemType"))){ return (int)6000; }else if ((_7211 == std::string ("errCbfNoVariables"))){ return (int)7102; }else if ((_7211 == std::string ("errWhichitemNotAllowed"))){ return (int)1238; }else if ((_7211 == std::string ("errNewerDll"))){ return (int)1036; }else if ((_7211 == std::string ("errMaxLenIsTooSmall"))){ return (int)1289; }else if ((_7211 == std::string ("wrnEmptyName"))){ return (int)502; }else if ((_7211 == std::string ("errProbLicense"))){ return (int)1006; }else if ((_7211 == std::string ("wrnAnaCloseBounds"))){ return (int)903; }else if ((_7211 == std::string ("errArgIsTooSmall"))){ return (int)1226; }else if ((_7211 == std::string ("errWriteLpNonUniqueName"))){ return (int)1161; }else if ((_7211 == std::string ("errMpsInvSecName"))){ return (int)1109; }else if ((_7211 == std::string ("errLpFileFormat"))){ return (int)1157; }else if ((_7211 == std::string ("errLicenseCannotConnect"))){ return (int)1021; }else if ((_7211 == std::string ("errDuplicateVariableNames"))){ return (int)4501; }else if ((_7211 == std::string ("errInvBk"))){ return (int)1255; }else if ((_7211 == std::string ("errNanInDoubleData"))){ return (int)1450; }else if ((_7211 == std::string ("errNameMaxLen"))){ return (int)1750; }else if ((_7211 == std::string ("errSymMatHuge"))){ return (int)1482; }else if ((_7211 == std::string ("errWritingFile"))){ return (int)1166; }else if ((_7211 == std::string ("errJsonString"))){ return (int)1176; }else if ((_7211 == std::string ("errMpsUndefConName"))){ return (int)1105; }else if ((_7211 == std::string ("errArgumentIsTooLarge"))){ return (int)5005; }else if ((_7211 == std::string ("trmMaxIterations"))){ return (int)10000; }else if ((_7211 == std::string ("wrnSolFileIgnoredVar"))){ return (int)352; }else if ((_7211 == std::string ("errIndexIsTooSmall"))){ return (int)1203; }else if ((_7211 == std::string ("trmMioNearAbsGap"))){ return (int)10004; }else if ((_7211 == std::string ("errInvalidAccmode"))){ return (int)2520; }else if ((_7211 == std::string ("errLasti"))){ return (int)1286; }else if ((_7211 == std::string ("errNoInitEnv"))){ return (int)1063; }else if ((_7211 == std::string ("errUndefSolution"))){ return (int)1265; }else if ((_7211 == std::string ("errLastj"))){ return (int)1288; }else if ((_7211 == std::string ("wrnParamStrValue"))){ return (int)515; }else if ((_7211 == std::string ("errInfLintName"))){ return (int)1234; }else if ((_7211 == std::string ("errMissingLicenseFile"))){ return (int)1008; }else if ((_7211 == std::string ("errJsonFormat"))){ return (int)1178; }else if ((_7211 == std::string ("errSenNumerical"))){ return (int)3058; }else if ((_7211 == std::string ("errToconicConstrNotConic"))){ return (int)7153; }else if ((_7211 == std::string ("errNoDualForItgSol"))){ return (int)2950; }else if ((_7211 == std::string ("errOverflow"))){ return (int)1590; }else if ((_7211 == std::string ("errFirsti"))){ return (int)1285; }else if ((_7211 == std::string ("errSymMatInvalid"))){ return (int)1480; }else if ((_7211 == std::string ("errSymMatInvalidColIndex"))){ return (int)3941; }else if ((_7211 == std::string ("errNanInBux"))){ return (int)1472; }else if ((_7211 == std::string ("errLicenseMoseklmDaemon"))){ return (int)1017; }else if ((_7211 == std::string ("errConeTypeStr"))){ return (int)1306; }else if ((_7211 == std::string ("errNanInBuc"))){ return (int)1462; }else if ((_7211 == std::string ("errParamIndex"))){ return (int)1210; }else if ((_7211 == std::string ("errLicense"))){ return (int)1000; }else if ((_7211 == std::string ("errInvalidBarvarName"))){ return (int)1079; }else if ((_7211 == std::string ("errIndex"))){ return (int)1235; }else if ((_7211 == std::string ("errFirstj"))){ return (int)1287; }else if ((_7211 == std::string ("errSenUnhandledProblemType"))){ return (int)3080; }else if ((_7211 == std::string ("errSizeLicenseNumcores"))){ return (int)3900; }else if ((_7211 == std::string ("errNoBarxForSolution"))){ return (int)3915; }else if ((_7211 == std::string ("errInvNumi"))){ return (int)2503; }else if ((_7211 == std::string ("errInvNumj"))){ return (int)2504; }else if ((_7211 == std::string ("errMioInvalidNodeOptimizer"))){ return (int)7131; }else if ((_7211 == std::string ("trmMioNumBranches"))){ return (int)10009; }else if ((_7211 == std::string ("errLpDupSlackName"))){ return (int)1152; }else if ((_7211 == std::string ("errWriteLpFormat"))){ return (int)1158; }else if ((_7211 == std::string ("errMpsNullConName"))){ return (int)1103; }else if ((_7211 == std::string ("errCbfObjSense"))){ return (int)7101; }else if ((_7211 == std::string ("wrnEliminatorSpace"))){ return (int)801; }else if ((_7211 == std::string ("wrnZerosInSparseCol"))){ return (int)710; }else if ((_7211 == std::string ("wrnIncompleteLinearDependencyCheck"))){ return (int)800; }else if ((_7211 == std::string ("errInvalidSymMatDim"))){ return (int)3950; }else if ((_7211 == std::string ("errInvalidSurplus"))){ return (int)1275; }else if ((_7211 == std::string ("errMaxnumqnz"))){ return (int)1243; }else if ((_7211 == std::string ("errInvalidUtf8"))){ return (int)2900; }else if ((_7211 == std::string ("errInvalidObjName"))){ return (int)1075; }else if ((_7211 == std::string ("errParamName"))){ return (int)1205; }else if ((_7211 == std::string ("errAdInvalidCodelist"))){ return (int)3102; }else if ((_7211 == std::string ("wrnLargeAij"))){ return (int)62; }else if ((_7211 == std::string ("errCbfDuplicateVar"))){ return (int)7109; }else if ((_7211 == std::string ("errMpsFile"))){ return (int)1100; }else if ((_7211 == std::string ("wrnNoGlobalOptimizer"))){ return (int)251; }else if ((_7211 == std::string ("errFeasrepairSolvingRelaxed"))){ return (int)1701; }else if ((_7211 == std::string ("trmMaxNumSetbacks"))){ return (int)10020; }else if ((_7211 == std::string ("errSizeLicenseVar"))){ return (int)1011; }else if ((_7211 == std::string ("wrnMpsSplitBouVector"))){ return (int)72; }else if ((_7211 == std::string ("errInt64ToInt32Cast"))){ return (int)3800; }else if ((_7211 == std::string ("wrnSymMatLarge"))){ return (int)960; }else if ((_7211 == std::string ("wrnLargeUpBound"))){ return (int)53; }else if ((_7211 == std::string ("errInfeasUndefined"))){ return (int)3910; }else if ((_7211 == std::string ("wrnNoNonlinearFunctionWrite"))){ return (int)450; }else if ((_7211 == std::string ("errQconUpperTriangle"))){ return (int)1417; }else if ((_7211 == std::string ("errDuplicateAij"))){ return (int)1385; }else if ((_7211 == std::string ("errMpsInvSecOrder"))){ return (int)1115; }else if ((_7211 == std::string ("errCbfDuplicateCon"))){ return (int)7108; }else if ((_7211 == std::string ("wrnConstructSolutionInfeas"))){ return (int)805; }else if ((_7211 == std::string ("errConQNotNsd"))){ return (int)1294; }else if ((_7211 == std::string ("errFixedBoundValues"))){ return (int)1425; }else if ((_7211 == std::string ("wrnMpsSplitRhsVector"))){ return (int)70; }else if ((_7211 == std::string ("errYIsUndefined"))){ return (int)1449; }else if ((_7211 == std::string ("errLicenseCannotAllocate"))){ return (int)1020; }else if ((_7211 == std::string ("errMioNotLoaded"))){ return (int)1553; }else if ((_7211 == std::string ("errCbfTooManyVariables"))){ return (int)7104; }else if ((_7211 == std::string ("errTooSmallMaxnumanz"))){ return (int)1252; }else if ((_7211 == std::string ("errTaskIncompatible"))){ return (int)2560; }else if ((_7211 == std::string ("errInvalidObjectiveSense"))){ return (int)1445; }else if ((_7211 == std::string ("errToconicObjectiveNotPsd"))){ return (int)7155; }else if ((_7211 == std::string ("wrnDuplicateConeNames"))){ return (int)853; }else if ((_7211 == std::string ("wrnNameMaxLen"))){ return (int)65; }else if ((_7211 == std::string ("wrnWriteChangedNames"))){ return (int)803; }else if ((_7211 == std::string ("errJsonMissingData"))){ return (int)1180; }else if ((_7211 == std::string ("errInvalidFileFormatForGeneralNl"))){ return (int)4010; }else if ((_7211 == std::string ("errMpsConeOverlap"))){ return (int)1118; }else if ((_7211 == std::string ("trmMioNumRelaxs"))){ return (int)10008; }else if ((_7211 == std::string ("errInvalidSolFileName"))){ return (int)1057; }else if ((_7211 == std::string ("errUserNloEval"))){ return (int)1433; }else if ((_7211 == std::string ("errOlderDll"))){ return (int)1035; }else if ((_7211 == std::string ("errMpsConeRepeat"))){ return (int)1119; }else if ((_7211 == std::string ("errInvQobjVal"))){ return (int)1403; }else if ((_7211 == std::string ("wrnMpsSplitRanVector"))){ return (int)71; }else if ((_7211 == std::string ("errSpaceLeaking"))){ return (int)1080; }else if ((_7211 == std::string ("errXmlInvalidProblemType"))){ return (int)3600; }else if ((_7211 == std::string ("errReadLpMissingEndTag"))){ return (int)1159; }else if ((_7211 == std::string ("trmMaxTime"))){ return (int)10001; }else if ((_7211 == std::string ("wrnQuadConesWithRootFixedAtZero"))){ return (int)930; }else if ((_7211 == std::string ("errWhichsol"))){ return (int)1236; }else if ((_7211 == std::string ("errConeOverlapAppend"))){ return (int)1307; }else if ((_7211 == std::string ("errBasisSingular"))){ return (int)1615; }else if ((_7211 == std::string ("errQconSubiTooLarge"))){ return (int)1409; }else if ((_7211 == std::string ("errSenUndefName"))){ return (int)3051; }else if ((_7211 == std::string ("errServerStatus"))){ return (int)8002; }else if ((_7211 == std::string ("wrnLpOldQuadFormat"))){ return (int)80; }else if ((_7211 == std::string ("errMpsInvMarker"))){ return (int)1102; }else if ((_7211 == std::string ("errNegativeSurplus"))){ return (int)1263; }else if ((_7211 == std::string ("errInvBkx"))){ return (int)1257; }else if ((_7211 == std::string ("errMpsInvalidObjName"))){ return (int)1128; }else if ((_7211 == std::string ("errIndexArrIsTooLarge"))){ return (int)1222; }else if ((_7211 == std::string ("errCbfNoVersionSpecified"))){ return (int)7105; }else if ((_7211 == std::string ("trmObjectiveRange"))){ return (int)10002; }else if ((_7211 == std::string ("wrnUndefSolFileName"))){ return (int)350; }else if ((_7211 == std::string ("errInvBkc"))){ return (int)1256; }else if ((_7211 == std::string ("errBlankName"))){ return (int)1070; }else if ((_7211 == std::string ("errFirst"))){ return (int)1261; }else if ((_7211 == std::string ("errHugeC"))){ return (int)1375; }else if ((_7211 == std::string ("errUndefinedObjectiveSense"))){ return (int)1446; }else if ((_7211 == std::string ("errTooSmallMaxNumNz"))){ return (int)1245; }else if ((_7211 == std::string ("errInvMarki"))){ return (int)2501; }else if ((_7211 == std::string ("errInvMarkj"))){ return (int)2502; }else if ((_7211 == std::string ("errServerConnect"))){ return (int)8000; }else if ((_7211 == std::string ("errNameIsNull"))){ return (int)1760; }else if ((_7211 == std::string ("errLauArgUplo"))){ return (int)7017; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_scalingtype_value( const std::string & _7212){ if (false){ return (- (int)1); }else if ((_7212 == std::string ("none"))){ return (int)1; }else if ((_7212 == std::string ("moderate"))){ return (int)2; }else if ((_7212 == std::string ("aggressive"))){ return (int)3; }else if ((_7212 == std::string ("free"))){ return (int)0; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_prosta_value( const std::string & _7213){ if (false){ return (- (int)1); }else if ((_7213 == std::string ("primAndDualInfeas"))){ return (int)6; }else if ((_7213 == std::string ("primInfeas"))){ return (int)4; }else if ((_7213 == std::string ("illPosed"))){ return (int)7; }else if ((_7213 == std::string ("unknown"))){ return (int)0; }else if ((_7213 == std::string ("primFeas"))){ return (int)2; }else if ((_7213 == std::string ("nearPrimAndDualFeas"))){ return (int)8; }else if ((_7213 == std::string ("nearDualFeas"))){ return (int)10; }else if ((_7213 == std::string ("primInfeasOrUnbounded"))){ return (int)11; }else if ((_7213 == std::string ("primAndDualFeas"))){ return (int)1; }else if ((_7213 == std::string ("dualInfeas"))){ return (int)5; }else if ((_7213 == std::string ("nearPrimFeas"))){ return (int)9; }else if ((_7213 == std::string ("dualFeas"))){ return (int)3; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_rescodetype_value( const std::string & _7214){ if (false){ return (- (int)1); }else if ((_7214 == std::string ("wrn"))){ return (int)1; }else if ((_7214 == std::string ("trm"))){ return (int)2; }else if ((_7214 == std::string ("unk"))){ return (int)4; }else if ((_7214 == std::string ("ok"))){ return (int)0; }else if ((_7214 == std::string ("err"))){ return (int)3; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_parametertype_value( const std::string & _7215){ if (false){ return (- (int)1); }else if ((_7215 == std::string ("invalidType"))){ return (int)0; }else if ((_7215 == std::string ("strType"))){ return (int)3; }else if ((_7215 == std::string ("douType"))){ return (int)1; }else if ((_7215 == std::string ("intType"))){ return (int)2; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_dinfitem_value( const std::string & _7216){ if (false){ return (- (int)1); }else if ((_7216 == std::string ("presolveLindepTime"))){ return (int)36; }else if ((_7216 == std::string ("mioRootCutgenTime"))){ return (int)29; }else if ((_7216 == std::string ("mioObjRelGap"))){ return (int)26; }else if ((_7216 == std::string ("solItgNrmBarx"))){ return (int)64; }else if ((_7216 == std::string ("solItrNrmXc"))){ return (int)85; }else if ((_7216 == std::string ("toConicTime"))){ return (int)93; }else if ((_7216 == std::string ("simTime"))){ return (int)49; }else if ((_7216 == std::string ("qcqoReformulateTime"))){ return (int)40; }else if ((_7216 == std::string ("solItrNrmXx"))){ return (int)86; }else if ((_7216 == std::string ("solItrNrmSnx"))){ return (int)82; }else if ((_7216 == std::string ("biCleanDualTime"))){ return (int)0; }else if ((_7216 == std::string ("mioCliqueSeparationTime"))){ return (int)15; }else if ((_7216 == std::string ("solBasPviolcon"))){ return (int)62; }else if ((_7216 == std::string ("solBasDviolvar"))){ return (int)52; }else if ((_7216 == std::string ("presolveEliTime"))){ return (int)35; }else if ((_7216 == std::string ("mioOptimizerTime"))){ return (int)27; }else if ((_7216 == std::string ("solBasNrmXx"))){ return (int)59; }else if ((_7216 == std::string ("solBasNrmSux"))){ return (int)57; }else if ((_7216 == std::string ("solBasNrmXc"))){ return (int)58; }else if ((_7216 == std::string ("simDualTime"))){ return (int)44; }else if ((_7216 == std::string ("solBasNrmSuc"))){ return (int)56; }else if ((_7216 == std::string ("mioProbingTime"))){ return (int)28; }else if ((_7216 == std::string ("simObj"))){ return (int)46; }else if ((_7216 == std::string ("solItrNrmSlc"))){ return (int)80; }else if ((_7216 == std::string ("solItrNrmSuc"))){ return (int)83; }else if ((_7216 == std::string ("simFeas"))){ return (int)45; }else if ((_7216 == std::string ("simPrimalTime"))){ return (int)48; }else if ((_7216 == std::string ("solItrNrmBarx"))){ return (int)79; }else if ((_7216 == std::string ("solItrNrmSlx"))){ return (int)81; }else if ((_7216 == std::string ("biCleanTime"))){ return (int)3; }else if ((_7216 == std::string ("solItrNrmBars"))){ return (int)78; }else if ((_7216 == std::string ("solItrNrmSux"))){ return (int)84; }else if ((_7216 == std::string ("solItrPviolcones"))){ return (int)91; }else if ((_7216 == std::string ("intpntDualFeas"))){ return (int)7; }else if ((_7216 == std::string ("solItrPviolbarvar"))){ return (int)89; }else if ((_7216 == std::string ("solBasPviolvar"))){ return (int)63; }else if ((_7216 == std::string ("qcqoReformulateWorstCholeskyColumnScaling"))){ return (int)41; }else if ((_7216 == std::string ("mioGmiSeparationTime"))){ return (int)19; }else if ((_7216 == std::string ("solItrPviolvar"))){ return (int)92; }else if ((_7216 == std::string ("solItgPviolcon"))){ return (int)69; }else if ((_7216 == std::string ("biPrimalTime"))){ return (int)5; }else if ((_7216 == std::string ("mioImpliedBoundTime"))){ return (int)21; }else if ((_7216 == std::string ("qcqoReformulateWorstCholeskyDiagScaling"))){ return (int)42; }else if ((_7216 == std::string ("solItrDviolcones"))){ return (int)76; }else if ((_7216 == std::string ("solItrDviolbarvar"))){ return (int)74; }else if ((_7216 == std::string ("mioObjInt"))){ return (int)25; }else if ((_7216 == std::string ("solBasNrmBarx"))){ return (int)53; }else if ((_7216 == std::string ("mioKnapsackCoverSeparationTime"))){ return (int)22; }else if ((_7216 == std::string ("mioHeuristicTime"))){ return (int)20; }else if ((_7216 == std::string ("solItrPviolcon"))){ return (int)90; }else if ((_7216 == std::string ("solBasNrmSlx"))){ return (int)55; }else if ((_7216 == std::string ("presolveTime"))){ return (int)37; }else if ((_7216 == std::string ("solBasPrimalObj"))){ return (int)61; }else if ((_7216 == std::string ("solBasNrmSlc"))){ return (int)54; }else if ((_7216 == std::string ("solItrNrmY"))){ return (int)87; }else if ((_7216 == std::string ("solBasNrmY"))){ return (int)60; }else if ((_7216 == std::string ("intpntOptStatus"))){ return (int)10; }else if ((_7216 == std::string ("mioObjBound"))){ return (int)24; }else if ((_7216 == std::string ("biCleanPrimalDualTime"))){ return (int)1; }else if ((_7216 == std::string ("solItrDviolvar"))){ return (int)77; }else if ((_7216 == std::string ("simPrimalDualTime"))){ return (int)47; }else if ((_7216 == std::string ("intpntPrimalObj"))){ return (int)13; }else if ((_7216 == std::string ("mioRootOptimizerTime"))){ return (int)30; }else if ((_7216 == std::string ("solItgPviolcones"))){ return (int)70; }else if ((_7216 == std::string ("intpntPrimalFeas"))){ return (int)12; }else if ((_7216 == std::string ("solItgNrmXc"))){ return (int)65; }else if ((_7216 == std::string ("intpntFactorNumFlops"))){ return (int)9; }else if ((_7216 == std::string ("mioTime"))){ return (int)32; }else if ((_7216 == std::string ("biDualTime"))){ return (int)4; }else if ((_7216 == std::string ("solItgNrmXx"))){ return (int)66; }else if ((_7216 == std::string ("optimizerTime"))){ return (int)34; }else if ((_7216 == std::string ("mioRootPresolveTime"))){ return (int)31; }else if ((_7216 == std::string ("intpntDualObj"))){ return (int)8; }else if ((_7216 == std::string ("intpntTime"))){ return (int)14; }else if ((_7216 == std::string ("mioConstructSolutionObj"))){ return (int)17; }else if ((_7216 == std::string ("mioDualBoundAfterPresolve"))){ return (int)18; }else if ((_7216 == std::string ("solItrDualObj"))){ return (int)73; }else if ((_7216 == std::string ("qcqoReformulateMaxPerturbation"))){ return (int)39; }else if ((_7216 == std::string ("solBasDviolcon"))){ return (int)51; }else if ((_7216 == std::string ("solItrPrimalObj"))){ return (int)88; }else if ((_7216 == std::string ("solItrDviolcon"))){ return (int)75; }else if ((_7216 == std::string ("solItgPrimalObj"))){ return (int)67; }else if ((_7216 == std::string ("mioUserObjCut"))){ return (int)33; }else if ((_7216 == std::string ("solItgPviolitg"))){ return (int)71; }else if ((_7216 == std::string ("solItgPviolbarvar"))){ return (int)68; }else if ((_7216 == std::string ("primalRepairPenaltyObj"))){ return (int)38; }else if ((_7216 == std::string ("solItgPviolvar"))){ return (int)72; }else if ((_7216 == std::string ("rdTime"))){ return (int)43; }else if ((_7216 == std::string ("biTime"))){ return (int)6; }else if ((_7216 == std::string ("solBasDualObj"))){ return (int)50; }else if ((_7216 == std::string ("mioCmirSeparationTime"))){ return (int)16; }else if ((_7216 == std::string ("intpntOrderTime"))){ return (int)11; }else if ((_7216 == std::string ("mioObjAbsGap"))){ return (int)23; }else if ((_7216 == std::string ("biCleanPrimalTime"))){ return (int)2; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_miomode_value( const std::string & _7217){ if (false){ return (- (int)1); }else if ((_7217 == std::string ("ignored"))){ return (int)0; }else if ((_7217 == std::string ("satisfied"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_msgkey_value( const std::string & _7218){ if (false){ return (- (int)1); }else if ((_7218 == std::string ("readingFile"))){ return (int)1000; }else if ((_7218 == std::string ("writingFile"))){ return (int)1001; }else if ((_7218 == std::string ("mpsSelected"))){ return (int)1100; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_simseltype_value( const std::string & _7219){ if (false){ return (- (int)1); }else if ((_7219 == std::string ("full"))){ return (int)1; }else if ((_7219 == std::string ("partial"))){ return (int)5; }else if ((_7219 == std::string ("free"))){ return (int)0; }else if ((_7219 == std::string ("ase"))){ return (int)2; }else if ((_7219 == std::string ("devex"))){ return (int)3; }else if ((_7219 == std::string ("se"))){ return (int)4; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_internal_liinf_value( const std::string & _7220){ if (false){ return (- (int)1); }else if ((_7220 == std::string ("intpntLenbarvar"))){ return (int)5; }else if ((_7220 == std::string ("intpntFactorNumNzBefore"))){ return (int)2; }else if ((_7220 == std::string ("intpntFactorGpOrderSparseLNz"))){ return (int)0; }else if ((_7220 == std::string ("intpntFactorMlOrderSparseLNz"))){ return (int)1; }else if ((_7220 == std::string ("intpntFactorUpdatedVNz"))){ return (int)3; }else if ((_7220 == std::string ("intpntFactorVNz"))){ return (int)4; }else if ((_7220 == std::string ("presolveStackSize"))){ return (int)6; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_iomode_value( const std::string & _7221){ if (false){ return (- (int)1); }else if ((_7221 == std::string ("read"))){ return (int)0; }else if ((_7221 == std::string ("write"))){ return (int)1; }else if ((_7221 == std::string ("readwrite"))){ return (int)2; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_streamtype_value( const std::string & _7222){ if (false){ return (- (int)1); }else if ((_7222 == std::string ("msg"))){ return (int)1; }else if ((_7222 == std::string ("wrn"))){ return (int)3; }else if ((_7222 == std::string ("log"))){ return (int)0; }else if ((_7222 == std::string ("err"))){ return (int)2; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_conetype_value( const std::string & _7223){ if (false){ return (- (int)1); }else if ((_7223 == std::string ("quad"))){ return (int)0; }else if ((_7223 == std::string ("rquad"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_mark_value( const std::string & _7224){ if (false){ return (- (int)1); }else if ((_7224 == std::string ("lo"))){ return (int)0; }else if ((_7224 == std::string ("up"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_feature_value( const std::string & _7225){ if (false){ return (- (int)1); }else if ((_7225 == std::string ("pton"))){ return (int)1; }else if ((_7225 == std::string ("pts"))){ return (int)0; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_symmattype_value( const std::string & _7226){ if (false){ return (- (int)1); }else if ((_7226 == std::string ("sparse"))){ return (int)0; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_callbackcode_value( const std::string & _7227){ if (false){ return (- (int)1); }else if ((_7227 == std::string ("beginPrimalDualSimplexBi"))){ return (int)16; }else if ((_7227 == std::string ("updatePrimalSimplexBi"))){ return (int)98; }else if ((_7227 == std::string ("endMio"))){ return (int)42; }else if ((_7227 == std::string ("endPrimalRepair"))){ return (int)48; }else if ((_7227 == std::string ("beginRootCutgen"))){ return (int)24; }else if ((_7227 == std::string ("newIntMio"))){ return (int)85; }else if ((_7227 == std::string ("imPrimalSimplex"))){ return (int)78; }else if ((_7227 == std::string ("beginToConic"))){ return (int)27; }else if ((_7227 == std::string ("imIntpnt"))){ return (int)66; }else if ((_7227 == std::string ("imDualBi"))){ return (int)62; }else if ((_7227 == std::string ("beginFullConvexityCheck"))){ return (int)7; }else if ((_7227 == std::string ("beginDualBi"))){ return (int)2; }else if ((_7227 == std::string ("beginDualSensitivity"))){ return (int)3; }else if ((_7227 == std::string ("imMioPrimalSimplex"))){ return (int)72; }else if ((_7227 == std::string ("beginPrimalBi"))){ return (int)14; }else if ((_7227 == std::string ("updateDualBi"))){ return (int)90; }else if ((_7227 == std::string ("imDualSimplex"))){ return (int)64; }else if ((_7227 == std::string ("beginPrimalRepair"))){ return (int)17; }else if ((_7227 == std::string ("conic"))){ return (int)29; }else if ((_7227 == std::string ("imQoReformulate"))){ return (int)79; }else if ((_7227 == std::string ("beginConic"))){ return (int)1; }else if ((_7227 == std::string ("updateDualSimplexBi"))){ return (int)92; }else if ((_7227 == std::string ("endOptimizer"))){ return (int)43; }else if ((_7227 == std::string ("imRootCutgen"))){ return (int)81; }else if ((_7227 == std::string ("updatePresolve"))){ return (int)93; }else if ((_7227 == std::string ("imSimplex"))){ return (int)82; }else if ((_7227 == std::string ("readOpf"))){ return (int)87; }else if ((_7227 == std::string ("imLicenseWait"))){ return (int)67; }else if ((_7227 == std::string ("endToConic"))){ return (int)58; }else if ((_7227 == std::string ("endConic"))){ return (int)32; }else if ((_7227 == std::string ("beginQcqoReformulate"))){ return (int)22; }else if ((_7227 == std::string ("endDualSensitivity"))){ return (int)34; }else if ((_7227 == std::string ("endPrimalSimplexBi"))){ return (int)52; }else if ((_7227 == std::string ("readOpfSection"))){ return (int)88; }else if ((_7227 == std::string ("imLu"))){ return (int)68; }else if ((_7227 == std::string ("endDualSimplexBi"))){ return (int)37; }else if ((_7227 == std::string ("endLicenseWait"))){ return (int)41; }else if ((_7227 == std::string ("imPresolve"))){ return (int)74; }else if ((_7227 == std::string ("beginDualSetupBi"))){ return (int)4; }else if ((_7227 == std::string ("endInfeasAna"))){ return (int)39; }else if ((_7227 == std::string ("intpnt"))){ return (int)84; }else if ((_7227 == std::string ("updatePrimalBi"))){ return (int)94; }else if ((_7227 == std::string ("endDualBi"))){ return (int)33; }else if ((_7227 == std::string ("endRead"))){ return (int)54; }else if ((_7227 == std::string ("beginPrimalSimplexBi"))){ return (int)21; }else if ((_7227 == std::string ("imPrimalDualSimplex"))){ return (int)76; }else if ((_7227 == std::string ("updatePrimalSimplex"))){ return (int)97; }else if ((_7227 == std::string ("dualSimplex"))){ return (int)30; }else if ((_7227 == std::string ("imFullConvexityCheck"))){ return (int)65; }else if ((_7227 == std::string ("primalSimplex"))){ return (int)86; }else if ((_7227 == std::string ("imSimplexBi"))){ return (int)83; }else if ((_7227 == std::string ("beginDualSimplex"))){ return (int)5; }else if ((_7227 == std::string ("solvingRemote"))){ return (int)89; }else if ((_7227 == std::string ("beginPrimalSimplex"))){ return (int)20; }else if ((_7227 == std::string ("endIntpnt"))){ return (int)40; }else if ((_7227 == std::string ("beginPrimalSetupBi"))){ return (int)19; }else if ((_7227 == std::string ("imRead"))){ return (int)80; }else if ((_7227 == std::string ("beginOptimizer"))){ return (int)12; }else if ((_7227 == std::string ("beginRead"))){ return (int)23; }else if ((_7227 == std::string ("beginLicenseWait"))){ return (int)10; }else if ((_7227 == std::string ("endPrimalSimplex"))){ return (int)51; }else if ((_7227 == std::string ("endPrimalDualSimplexBi"))){ return (int)47; }else if ((_7227 == std::string ("imBi"))){ return (int)60; }else if ((_7227 == std::string ("endDualSetupBi"))){ return (int)35; }else if ((_7227 == std::string ("endBi"))){ return (int)31; }else if ((_7227 == std::string ("endPrimalSetupBi"))){ return (int)50; }else if ((_7227 == std::string ("beginWrite"))){ return (int)28; }else if ((_7227 == std::string ("endSimplexBi"))){ return (int)57; }else if ((_7227 == std::string ("endPrimalSensitivity"))){ return (int)49; }else if ((_7227 == std::string ("beginSimplex"))){ return (int)25; }else if ((_7227 == std::string ("endPresolve"))){ return (int)44; }else if ((_7227 == std::string ("beginInfeasAna"))){ return (int)8; }else if ((_7227 == std::string ("beginPrimalDualSimplex"))){ return (int)15; }else if ((_7227 == std::string ("beginPrimalSensitivity"))){ return (int)18; }else if ((_7227 == std::string ("beginDualSimplexBi"))){ return (int)6; }else if ((_7227 == std::string ("endQcqoReformulate"))){ return (int)53; }else if ((_7227 == std::string ("imPrimalSensivity"))){ return (int)77; }else if ((_7227 == std::string ("endWrite"))){ return (int)59; }else if ((_7227 == std::string ("endDualSimplex"))){ return (int)36; }else if ((_7227 == std::string ("updatePrimalDualSimplex"))){ return (int)95; }else if ((_7227 == std::string ("beginSimplexBi"))){ return (int)26; }else if ((_7227 == std::string ("beginIntpnt"))){ return (int)9; }else if ((_7227 == std::string ("imDualSensivity"))){ return (int)63; }else if ((_7227 == std::string ("endSimplex"))){ return (int)56; }else if ((_7227 == std::string ("endPrimalBi"))){ return (int)45; }else if ((_7227 == std::string ("imMio"))){ return (int)69; }else if ((_7227 == std::string ("updateDualSimplex"))){ return (int)91; }else if ((_7227 == std::string ("imMioIntpnt"))){ return (int)71; }else if ((_7227 == std::string ("endPrimalDualSimplex"))){ return (int)46; }else if ((_7227 == std::string ("imConic"))){ return (int)61; }else if ((_7227 == std::string ("updatePrimalDualSimplexBi"))){ return (int)96; }else if ((_7227 == std::string ("beginBi"))){ return (int)0; }else if ((_7227 == std::string ("endRootCutgen"))){ return (int)55; }else if ((_7227 == std::string ("imMioDualSimplex"))){ return (int)70; }else if ((_7227 == std::string ("writeOpf"))){ return (int)99; }else if ((_7227 == std::string ("endFullConvexityCheck"))){ return (int)38; }else if ((_7227 == std::string ("imOrder"))){ return (int)73; }else if ((_7227 == std::string ("imPrimalBi"))){ return (int)75; }else if ((_7227 == std::string ("beginPresolve"))){ return (int)13; }else if ((_7227 == std::string ("beginMio"))){ return (int)11; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_simhotstart_value( const std::string & _7228){ if (false){ return (- (int)1); }else if ((_7228 == std::string ("none"))){ return (int)0; }else if ((_7228 == std::string ("statusKeys"))){ return (int)2; }else if ((_7228 == std::string ("free"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_liinfitem_value( const std::string & _7229){ if (false){ return (- (int)1); }else if ((_7229 == std::string ("biCleanPrimalIter"))){ return (int)6; }else if ((_7229 == std::string ("intpntFactorNumNz"))){ return (int)9; }else if ((_7229 == std::string ("mioIntpntIter"))){ return (int)10; }else if ((_7229 == std::string ("biCleanPrimalDualIter"))){ return (int)4; }else if ((_7229 == std::string ("biCleanPrimalDualDegIter"))){ return (int)3; }else if ((_7229 == std::string ("biCleanPrimalDegIter"))){ return (int)2; }else if ((_7229 == std::string ("biCleanDualIter"))){ return (int)1; }else if ((_7229 == std::string ("biCleanPrimalDualSubIter"))){ return (int)5; }else if ((_7229 == std::string ("rdNumqnz"))){ return (int)15; }else if ((_7229 == std::string ("rdNumanz"))){ return (int)14; }else if ((_7229 == std::string ("biPrimalIter"))){ return (int)8; }else if ((_7229 == std::string ("biDualIter"))){ return (int)7; }else if ((_7229 == std::string ("mioSimMaxiterSetbacks"))){ return (int)12; }else if ((_7229 == std::string ("biCleanDualDegIter"))){ return (int)0; }else if ((_7229 == std::string ("mioSimplexIter"))){ return (int)13; }else if ((_7229 == std::string ("mioPresolvedAnz"))){ return (int)11; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_branchdir_value( const std::string & _7230){ if (false){ return (- (int)1); }else if ((_7230 == std::string ("far"))){ return (int)4; }else if ((_7230 == std::string ("guided"))){ return (int)6; }else if ((_7230 == std::string ("rootLp"))){ return (int)5; }else if ((_7230 == std::string ("up"))){ return (int)1; }else if ((_7230 == std::string ("free"))){ return (int)0; }else if ((_7230 == std::string ("pseudocost"))){ return (int)7; }else if ((_7230 == std::string ("down"))){ return (int)2; }else if ((_7230 == std::string ("near"))){ return (int)3; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_basindtype_value( const std::string & _7231){ if (false){ return (- (int)1); }else if ((_7231 == std::string ("always"))){ return (int)1; }else if ((_7231 == std::string ("noError"))){ return (int)2; }else if ((_7231 == std::string ("never"))){ return (int)0; }else if ((_7231 == std::string ("ifFeasible"))){ return (int)3; }else if ((_7231 == std::string ("reservered"))){ return (int)4; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_internal_iinf_value( const std::string & _7232){ if (false){ return (- (int)1); }else if ((_7232 == std::string ("presolveNumvar"))){ return (int)70; }else if ((_7232 == std::string ("presolveNumnza"))){ return (int)69; }else if ((_7232 == std::string ("presolveFnumnza"))){ return (int)42; }else if ((_7232 == std::string ("presolveForceConNum"))){ return (int)50; }else if ((_7232 == std::string ("intpntFactorNum"))){ return (int)3; }else if ((_7232 == std::string ("presolveForceVarNumCon"))){ return (int)53; }else if ((_7232 == std::string ("presolveFnumvlo"))){ return (int)46; }else if ((_7232 == std::string ("simNumDualIntegerPivots"))){ return (int)84; }else if ((_7232 == std::string ("presolveFnumcup"))){ return (int)41; }else if ((_7232 == std::string ("intpntNumqcones"))){ return (int)24; }else if ((_7232 == std::string ("intpntFactorNumDenseA"))){ return (int)4; }else if ((_7232 == std::string ("intpntFactorNumDenseW"))){ return (int)6; }else if ((_7232 == std::string ("presolveLindepWork"))){ return (int)59; }else if ((_7232 == std::string ("presolveOutofspace"))){ return (int)77; }else if ((_7232 == std::string ("intpntFactorNumDenseADup"))){ return (int)5; }else if ((_7232 == std::string ("presolveLindepPivots"))){ return (int)57; }else if ((_7232 == std::string ("presolveNumvra"))){ return (int)75; }else if ((_7232 == std::string ("simNumDualBoundswaps"))){ return (int)83; }else if ((_7232 == std::string ("intpntFactorDim"))){ return (int)2; }else if ((_7232 == std::string ("presolveEliNumFreedCon"))){ return (int)32; }else if ((_7232 == std::string ("intpntFactorNumDenseWANull"))){ return (int)7; }else if ((_7232 == std::string ("simPrimalTrust"))){ return (int)95; }else if ((_7232 == std::string ("intpntNumvar"))){ return (int)26; }else if ((_7232 == std::string ("presolveForceVarNum"))){ return (int)52; }else if ((_7232 == std::string ("simNumPrimalBoundswaps"))){ return (int)86; }else if ((_7232 == std::string ("simPrimalDualHotstartNumBasics"))){ return (int)89; }else if ((_7232 == std::string ("presolveNumDouBlocks"))){ return (int)60; }else if ((_7232 == std::string ("presolveFnumcon"))){ return (int)39; }else if ((_7232 == std::string ("presolveLindepNum"))){ return (int)54; }else if ((_7232 == std::string ("simPrimalHotstartBasisRank"))){ return (int)92; }else if ((_7232 == std::string ("presolveNumcra"))){ return (int)67; }else if ((_7232 == std::string ("numLuFactorizations"))){ return (int)27; }else if ((_7232 == std::string ("simPrimalHotstartNumBasics"))){ return (int)93; }else if ((_7232 == std::string ("simDualHotstartBasisRank"))){ return (int)79; }else if ((_7232 == std::string ("presolveFnumvfr"))){ return (int)44; }else if ((_7232 == std::string ("intpntNumcon"))){ return (int)21; }else if ((_7232 == std::string ("presolveFnumcfx"))){ return (int)36; }else if ((_7232 == std::string ("presolveNumElimns"))){ return (int)61; }else if ((_7232 == std::string ("presolveFnumcfr"))){ return (int)35; }else if ((_7232 == std::string ("presolveFnumvra"))){ return (int)48; }else if ((_7232 == std::string ("presolveNumclo"))){ return (int)64; }else if ((_7232 == std::string ("presolveNumcfr"))){ return (int)62; }else if ((_7232 == std::string ("presolveNumcnl"))){ return (int)65; }else if ((_7232 == std::string ("presolveNumcfx"))){ return (int)63; }else if ((_7232 == std::string ("intpntNumbndcone"))){ return (int)19; }else if ((_7232 == std::string ("intpntMaxbarvardim"))){ return (int)11; }else if ((_7232 == std::string ("presolveNumcup"))){ return (int)68; }else if ((_7232 == std::string ("simPrimalDualDoPrimalLog"))){ return (int)87; }else if ((_7232 == std::string ("presolvePivOnConNum"))){ return (int)78; }else if ((_7232 == std::string ("intpntFactorNumSolve"))){ return (int)8; }else if ((_7232 == std::string ("intpntMinconedim"))){ return (int)13; }else if ((_7232 == std::string ("presolveNumvup"))){ return (int)76; }else if ((_7232 == std::string ("intpntNumblo"))){ return (int)18; }else if ((_7232 == std::string ("presolveFnumcra"))){ return (int)40; }else if ((_7232 == std::string ("intpntMaxconedim"))){ return (int)12; }else if ((_7232 == std::string ("presolveLindepSkipped"))){ return (int)58; }else if ((_7232 == std::string ("optObjectiveSense"))){ return (int)28; }else if ((_7232 == std::string ("presolveNumvnl"))){ return (int)74; }else if ((_7232 == std::string ("presolveNumvfr"))){ return (int)71; }else if ((_7232 == std::string ("presolveNumvfx"))){ return (int)72; }else if ((_7232 == std::string ("intpntNumcone"))){ return (int)22; }else if ((_7232 == std::string ("simDualHotstartNumBasics"))){ return (int)80; }else if ((_7232 == std::string ("presolveFnumvar"))){ return (int)43; }else if ((_7232 == std::string ("intpntNumbarvar"))){ return (int)15; }else if ((_7232 == std::string ("simNumDupvec"))){ return (int)85; }else if ((_7232 == std::string ("intpntFirRefIter"))){ return (int)9; }else if ((_7232 == std::string ("presolveFnumclo"))){ return (int)37; }else if ((_7232 == std::string ("biDualInfo"))){ return (int)0; }else if ((_7232 == std::string ("presolveForceConNumVar"))){ return (int)51; }else if ((_7232 == std::string ("intpntNumbfr"))){ return (int)16; }else if ((_7232 == std::string ("intpntNumrqcones"))){ return (int)25; }else if ((_7232 == std::string ("intpntNumbfx"))){ return (int)17; }else if ((_7232 == std::string ("presolveFnumvup"))){ return (int)49; }else if ((_7232 == std::string ("intpntNumbup"))){ return (int)20; }else if ((_7232 == std::string ("simPrimalDualTrust"))){ return (int)91; }else if ((_7232 == std::string ("simDualTrust"))){ return (int)82; }else if ((_7232 == std::string ("presolveFnumvnl"))){ return (int)47; }else if ((_7232 == std::string ("presolveLindepNumTries"))){ return (int)55; }else if ((_7232 == std::string ("biPrimalInfo"))){ return (int)1; }else if ((_7232 == std::string ("presolveNumvlo"))){ return (int)73; }else if ((_7232 == std::string ("optimizer"))){ return (int)29; }else if ((_7232 == std::string ("presolveNumcon"))){ return (int)66; }else if ((_7232 == std::string ("simDualNumSetbacks"))){ return (int)81; }else if ((_7232 == std::string ("presolveEliNumTries"))){ return (int)34; }else if ((_7232 == std::string ("simPrimalNumSetbacks"))){ return (int)94; }else if ((_7232 == std::string ("simPrimalDualHotstartBasisRank"))){ return (int)88; }else if ((_7232 == std::string ("presolveEliNumFreedConTotal"))){ return (int)33; }else if ((_7232 == std::string ("presolveFnumvfx"))){ return (int)45; }else if ((_7232 == std::string ("simPrimalDualNumSetbacks"))){ return (int)90; }else if ((_7232 == std::string ("intpntNumRefSteps"))){ return (int)14; }else if ((_7232 == std::string ("presolveFnumcnl"))){ return (int)38; }else if ((_7232 == std::string ("intpntNumconevar"))){ return (int)23; }else if ((_7232 == std::string ("intpntGpOrderEmployed"))){ return (int)10; }else if ((_7232 == std::string ("presolveLindepNumTruncTries"))){ return (int)56; }else if ((_7232 == std::string ("presolveCompressedStackSize"))){ return (int)31; }else if ((_7232 == std::string ("presolveBadPrecision"))){ return (int)30; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_boundkey_value( const std::string & _7233){ if (false){ return (- (int)1); }else if ((_7233 == std::string ("fx"))){ return (int)2; }else if ((_7233 == std::string ("lo"))){ return (int)0; }else if ((_7233 == std::string ("fr"))){ return (int)3; }else if ((_7233 == std::string ("up"))){ return (int)1; }else if ((_7233 == std::string ("ra"))){ return (int)4; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_solitem_value( const std::string & _7234){ if (false){ return (- (int)1); }else if ((_7234 == std::string ("suc"))){ return (int)4; }else if ((_7234 == std::string ("xc"))){ return (int)0; }else if ((_7234 == std::string ("xx"))){ return (int)1; }else if ((_7234 == std::string ("y"))){ return (int)2; }else if ((_7234 == std::string ("slx"))){ return (int)5; }else if ((_7234 == std::string ("sux"))){ return (int)6; }else if ((_7234 == std::string ("snx"))){ return (int)7; }else if ((_7234 == std::string ("slc"))){ return (int)3; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_objsense_value( const std::string & _7235){ if (false){ return (- (int)1); }else if ((_7235 == std::string ("minimize"))){ return (int)0; }else if ((_7235 == std::string ("maximize"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_solsta_value( const std::string & _7236){ if (false){ return (- (int)1); }else if ((_7236 == std::string ("dualInfeasCer"))){ return (int)6; }else if ((_7236 == std::string ("primInfeasCer"))){ return (int)5; }else if ((_7236 == std::string ("dualIllposedCer"))){ return (int)15; }else if ((_7236 == std::string ("unknown"))){ return (int)0; }else if ((_7236 == std::string ("primIllposedCer"))){ return (int)14; }else if ((_7236 == std::string ("nearOptimal"))){ return (int)8; }else if ((_7236 == std::string ("nearPrimInfeasCer"))){ return (int)12; }else if ((_7236 == std::string ("primFeas"))){ return (int)2; }else if ((_7236 == std::string ("nearIntegerOptimal"))){ return (int)17; }else if ((_7236 == std::string ("nearDualFeas"))){ return (int)10; }else if ((_7236 == std::string ("integerOptimal"))){ return (int)16; }else if ((_7236 == std::string ("nearDualInfeasCer"))){ return (int)13; }else if ((_7236 == std::string ("nearPrimAndDualFeas"))){ return (int)11; }else if ((_7236 == std::string ("optimal"))){ return (int)1; }else if ((_7236 == std::string ("primAndDualFeas"))){ return (int)4; }else if ((_7236 == std::string ("nearPrimFeas"))){ return (int)9; }else if ((_7236 == std::string ("dualFeas"))){ return (int)3; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_iparam_value( const std::string & _7237){ if (false){ return (- (int)1); }else if ((_7237 == std::string ("simStabilityPriority"))){ return (int)140; }else if ((_7237 == std::string ("simPrimalPhaseoneMethod"))){ return (int)131; }else if ((_7237 == std::string ("infeasReportAuto"))){ return (int)14; }else if ((_7237 == std::string ("mioNodeOptimizer"))){ return (int)74; }else if ((_7237 == std::string ("presolveLevel"))){ return (int)98; }else if ((_7237 == std::string ("mioMtUserCb"))){ return (int)73; }else if ((_7237 == std::string ("presolveUse"))){ return (int)103; }else if ((_7237 == std::string ("logSensitivityOpt"))){ return (int)54; }else if ((_7237 == std::string ("opfWriteSolItg"))){ return (int)90; }else if ((_7237 == std::string ("writeBasHead"))){ return (int)149; }else if ((_7237 == std::string ("mioCutKnapsackCover"))){ return (int)66; }else if ((_7237 == std::string ("opfWriteParameters"))){ return (int)87; }else if ((_7237 == std::string ("writeIntVariables"))){ return (int)160; }else if ((_7237 == std::string ("writeMpsFormat"))){ return (int)166; }else if ((_7237 == std::string ("intpntOrderMethod"))){ return (int)24; }else if ((_7237 == std::string ("opfWriteSolItr"))){ return (int)91; }else if ((_7237 == std::string ("logSensitivity"))){ return (int)53; }else if ((_7237 == std::string ("logInfeasAna"))){ return (int)45; }else if ((_7237 == std::string ("simPrimalSelection"))){ return (int)133; }else if ((_7237 == std::string ("writeIntConstraints"))){ return (int)158; }else if ((_7237 == std::string ("sensitivityType"))){ return (int)116; }else if ((_7237 == std::string ("simDualRestrictSelection"))){ return (int)121; }else if ((_7237 == std::string ("logMioFreq"))){ return (int)48; }else if ((_7237 == std::string ("opfWriteSolBas"))){ return (int)89; }else if ((_7237 == std::string ("mioRootOptimizer"))){ return (int)79; }else if ((_7237 == std::string ("writeFreeCon"))){ return (int)154; }else if ((_7237 == std::string ("writeGenericNames"))){ return (int)155; }else if ((_7237 == std::string ("simDualPhaseoneMethod"))){ return (int)120; }else if ((_7237 == std::string ("logBiFreq"))){ return (int)37; }else if ((_7237 == std::string ("logPresolve"))){ return (int)51; }else if ((_7237 == std::string ("writeLpStrictFormat"))){ return (int)164; }else if ((_7237 == std::string ("writeSolConstraints"))){ return (int)170; }else if ((_7237 == std::string ("intpntOffColTrh"))){ return (int)23; }else if ((_7237 == std::string ("mioMode"))){ return (int)72; }else if ((_7237 == std::string ("primalRepairOptimizer"))){ return (int)104; }else if ((_7237 == std::string ("mioCutGmi"))){ return (int)64; }else if ((_7237 == std::string ("licenseTrhExpiryWrn"))){ return (int)32; }else if ((_7237 == std::string ("readLpDropNewVarsInBou"))){ return (int)109; }else if ((_7237 == std::string ("logSim"))){ return (int)55; }else if ((_7237 == std::string ("mtSpincount"))){ return (int)82; }else if ((_7237 == std::string ("solutionCallback"))){ return (int)146; }else if ((_7237 == std::string ("simScalingMethod"))){ return (int)138; }else if ((_7237 == std::string ("logAnaPro"))){ return (int)35; }else if ((_7237 == std::string ("logSimFreq"))){ return (int)56; }else if ((_7237 == std::string ("presolveMaxNumReductions"))){ return (int)102; }else if ((_7237 == std::string ("intpntMultiThread"))){ return (int)22; }else if ((_7237 == std::string ("writeLpQuotedNames"))){ return (int)163; }else if ((_7237 == std::string ("presolveEliminatorMaxFill"))){ return (int)96; }else if ((_7237 == std::string ("logFactor"))){ return (int)41; }else if ((_7237 == std::string ("autoUpdateSolInfo"))){ return (int)3; }else if ((_7237 == std::string ("readMpsWidth"))){ return (int)112; }else if ((_7237 == std::string ("timingLevel"))){ return (int)147; }else if ((_7237 == std::string ("mioPerspectiveReformulate"))){ return (int)76; }else if ((_7237 == std::string ("paramReadIgnError"))){ return (int)95; }else if ((_7237 == std::string ("biIgnoreNumError"))){ return (int)7; }else if ((_7237 == std::string ("mioNodeSelection"))){ return (int)75; }else if ((_7237 == std::string ("anaSolPrintViolated"))){ return (int)1; }else if ((_7237 == std::string ("intpntMaxNumRefinementSteps"))){ return (int)21; }else if ((_7237 == std::string ("logSimMinor"))){ return (int)57; }else if ((_7237 == std::string ("simMaxIterations"))){ return (int)127; }else if ((_7237 == std::string ("mioProbingLevel"))){ return (int)77; }else if ((_7237 == std::string ("intpntMaxIterations"))){ return (int)19; }else if ((_7237 == std::string ("cacheLicense"))){ return (int)9; }else if ((_7237 == std::string ("logBi"))){ return (int)36; }else if ((_7237 == std::string ("intpntMaxNumCor"))){ return (int)20; }else if ((_7237 == std::string ("writeLpLineWidth"))){ return (int)162; }else if ((_7237 == std::string ("solReadNameWidth"))){ return (int)144; }else if ((_7237 == std::string ("simDegen"))){ return (int)118; }else if ((_7237 == std::string ("licenseWait"))){ return (int)33; }else if ((_7237 == std::string ("anaSolBasis"))){ return (int)0; }else if ((_7237 == std::string ("presolveEliminatorMaxNumTries"))){ return (int)97; }else if ((_7237 == std::string ("writeGenericNamesIo"))){ return (int)156; }else if ((_7237 == std::string ("logFeasRepair"))){ return (int)42; }else if ((_7237 == std::string ("simRefactorFreq"))){ return (int)134; }else if ((_7237 == std::string ("simDualSelection"))){ return (int)122; }else if ((_7237 == std::string ("simSolveForm"))){ return (int)139; }else if ((_7237 == std::string ("checkConvexity"))){ return (int)10; }else if ((_7237 == std::string ("writeIgnoreIncompatibleItems"))){ return (int)157; }else if ((_7237 == std::string ("readTaskIgnoreParam"))){ return (int)113; }else if ((_7237 == std::string ("logIntpnt"))){ return (int)46; }else if ((_7237 == std::string ("logMio"))){ return (int)47; }else if ((_7237 == std::string ("simHotstart"))){ return (int)124; }else if ((_7237 == std::string ("writeDataFormat"))){ return (int)152; }else if ((_7237 == std::string ("simExploitDupvec"))){ return (int)123; }else if ((_7237 == std::string ("mioBranchDir"))){ return (int)60; }else if ((_7237 == std::string ("solFilterKeepBasic"))){ return (int)142; }else if ((_7237 == std::string ("mioRinsMaxNodes"))){ return (int)78; }else if ((_7237 == std::string ("mioCutCmir"))){ return (int)63; }else if ((_7237 == std::string ("writeTaskIncSol"))){ return (int)174; }else if ((_7237 == std::string ("biMaxIterations"))){ return (int)8; }else if ((_7237 == std::string ("simHotstartLu"))){ return (int)125; }else if ((_7237 == std::string ("presolveLindepRelWorkTrh"))){ return (int)100; }else if ((_7237 == std::string ("opfWriteSolutions"))){ return (int)92; }else if ((_7237 == std::string ("mioVbDetectionLevel"))){ return (int)81; }else if ((_7237 == std::string ("presolveLindepUse"))){ return (int)101; }else if ((_7237 == std::string ("intpntHotstart"))){ return (int)18; }else if ((_7237 == std::string ("opfWriteHeader"))){ return (int)85; }else if ((_7237 == std::string ("writeIntHead"))){ return (int)159; }else if ((_7237 == std::string ("intpntStartingPoint"))){ return (int)28; }else if ((_7237 == std::string ("writeSolBarvariables"))){ return (int)169; }else if ((_7237 == std::string ("mioCutImpliedBound"))){ return (int)65; }else if ((_7237 == std::string ("licensePauseTime"))){ return (int)30; }else if ((_7237 == std::string ("intpntDiffStep"))){ return (int)17; }else if ((_7237 == std::string ("simScaling"))){ return (int)137; }else if ((_7237 == std::string ("writeLpTermsPerLine"))){ return (int)165; }else if ((_7237 == std::string ("sensitivityAll"))){ return (int)114; }else if ((_7237 == std::string ("biIgnoreMaxIter"))){ return (int)6; }else if ((_7237 == std::string ("presolveLindepAbsWorkTrh"))){ return (int)99; }else if ((_7237 == std::string ("intpntSolveForm"))){ return (int)27; }else if ((_7237 == std::string ("opfMaxTermsPerLine"))){ return (int)84; }else if ((_7237 == std::string ("writeLpFullObj"))){ return (int)161; }else if ((_7237 == std::string ("writePrecision"))){ return (int)168; }else if ((_7237 == std::string ("simBasisFactorUse"))){ return (int)117; }else if ((_7237 == std::string ("writeXmlMode"))){ return (int)175; }else if ((_7237 == std::string ("intpntRegularizationUse"))){ return (int)25; }else if ((_7237 == std::string ("biCleanOptimizer"))){ return (int)5; }else if ((_7237 == std::string ("infeasPreferPrimal"))){ return (int)13; }else if ((_7237 == std::string ("writeBasVariables"))){ return (int)150; }else if ((_7237 == std::string ("logStorage"))){ return (int)58; }else if ((_7237 == std::string ("basisSolveUsePlusOne"))){ return (int)4; }else if ((_7237 == std::string ("readLpQuotedNames"))){ return (int)110; }else if ((_7237 == std::string ("intpntBasis"))){ return (int)16; }else if ((_7237 == std::string ("logCutSecondOpt"))){ return (int)39; }else if ((_7237 == std::string ("compressStatfile"))){ return (int)11; }else if ((_7237 == std::string ("mioMaxNumSolutions"))){ return (int)71; }else if ((_7237 == std::string ("mioCutSelectionLevel"))){ return (int)67; }else if ((_7237 == std::string ("readDebug"))){ return (int)107; }else if ((_7237 == std::string ("writeSolVariables"))){ return (int)173; }else if ((_7237 == std::string ("sensitivityOptimizer"))){ return (int)115; }else if ((_7237 == std::string ("writeMpsInt"))){ return (int)167; }else if ((_7237 == std::string ("simMaxNumSetbacks"))){ return (int)128; }else if ((_7237 == std::string ("readKeepFreeCon"))){ return (int)108; }else if ((_7237 == std::string ("simNonSingular"))){ return (int)129; }else if ((_7237 == std::string ("writeDataParam"))){ return (int)153; }else if ((_7237 == std::string ("mioCutClique"))){ return (int)62; }else if ((_7237 == std::string ("logOrder"))){ return (int)50; }else if ((_7237 == std::string ("opfWriteHints"))){ return (int)86; }else if ((_7237 == std::string ("readMpsFormat"))){ return (int)111; }else if ((_7237 == std::string ("paramReadCaseName"))){ return (int)94; }else if ((_7237 == std::string ("logOptimizer"))){ return (int)49; }else if ((_7237 == std::string ("mioMaxNumBranches"))){ return (int)69; }else if ((_7237 == std::string ("simPrimalCrash"))){ return (int)130; }else if ((_7237 == std::string ("mioConstructSol"))){ return (int)61; }else if ((_7237 == std::string ("autoSortABeforeOpt"))){ return (int)2; }else if ((_7237 == std::string ("simInteger"))){ return (int)126; }else if ((_7237 == std::string ("simPrimalRestrictSelection"))){ return (int)132; }else if ((_7237 == std::string ("optimizer"))){ return (int)93; }else if ((_7237 == std::string ("maxNumWarnings"))){ return (int)59; }else if ((_7237 == std::string ("licenseSuppressExpireWrns"))){ return (int)31; }else if ((_7237 == std::string ("writeSolIgnoreInvalidNames"))){ return (int)172; }else if ((_7237 == std::string ("writeSolHead"))){ return (int)171; }else if ((_7237 == std::string ("writeBasConstraints"))){ return (int)148; }else if ((_7237 == std::string ("logExpand"))){ return (int)40; }else if ((_7237 == std::string ("licenseDebug"))){ return (int)29; }else if ((_7237 == std::string ("infeasGenericNames"))){ return (int)12; }else if ((_7237 == std::string ("logResponse"))){ return (int)52; }else if ((_7237 == std::string ("log"))){ return (int)34; }else if ((_7237 == std::string ("infeasReportLevel"))){ return (int)15; }else if ((_7237 == std::string ("mioRootRepeatPresolveLevel"))){ return (int)80; }else if ((_7237 == std::string ("writeDataCompressed"))){ return (int)151; }else if ((_7237 == std::string ("simSwitchOptimizer"))){ return (int)141; }else if ((_7237 == std::string ("readDataCompressed"))){ return (int)105; }else if ((_7237 == std::string ("solFilterKeepRanged"))){ return (int)143; }else if ((_7237 == std::string ("opfWriteProblem"))){ return (int)88; }else if ((_7237 == std::string ("numThreads"))){ return (int)83; }else if ((_7237 == std::string ("logCheckConvexity"))){ return (int)38; }else if ((_7237 == std::string ("readDataFormat"))){ return (int)106; }else if ((_7237 == std::string ("simDualCrash"))){ return (int)119; }else if ((_7237 == std::string ("logHead"))){ return (int)44; }else if ((_7237 == std::string ("simReformulation"))){ return (int)135; }else if ((_7237 == std::string ("simSaveLu"))){ return (int)136; }else if ((_7237 == std::string ("mioMaxNumRelaxs"))){ return (int)70; }else if ((_7237 == std::string ("logFile"))){ return (int)43; }else if ((_7237 == std::string ("mioHeuristicLevel"))){ return (int)68; }else if ((_7237 == std::string ("solReadWidth"))){ return (int)145; }else if ((_7237 == std::string ("intpntScaling"))){ return (int)26; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_sparam_value( const std::string & _7238){ if (false){ return (- (int)1); }else if ((_7238 == std::string ("paramCommentSign"))){ return (int)6; }else if ((_7238 == std::string ("mioDebugString"))){ return (int)5; }else if ((_7238 == std::string ("basSolFileName"))){ return (int)0; }else if ((_7238 == std::string ("readMpsObjName"))){ return (int)10; }else if ((_7238 == std::string ("remoteAccessToken"))){ return (int)13; }else if ((_7238 == std::string ("paramWriteFileName"))){ return (int)8; }else if ((_7238 == std::string ("intSolFileName"))){ return (int)3; }else if ((_7238 == std::string ("readMpsRhsName"))){ return (int)12; }else if ((_7238 == std::string ("statFileName"))){ return (int)20; }else if ((_7238 == std::string ("writeLpGenVarName"))){ return (int)23; }else if ((_7238 == std::string ("dataFileName"))){ return (int)1; }else if ((_7238 == std::string ("readMpsRanName"))){ return (int)11; }else if ((_7238 == std::string ("solFilterXcLow"))){ return (int)16; }else if ((_7238 == std::string ("solFilterXcUpr"))){ return (int)17; }else if ((_7238 == std::string ("readMpsBouName"))){ return (int)9; }else if ((_7238 == std::string ("solFilterXxUpr"))){ return (int)19; }else if ((_7238 == std::string ("statName"))){ return (int)22; }else if ((_7238 == std::string ("paramReadFileName"))){ return (int)7; }else if ((_7238 == std::string ("itrSolFileName"))){ return (int)4; }else if ((_7238 == std::string ("sensitivityFileName"))){ return (int)14; }else if ((_7238 == std::string ("debugFileName"))){ return (int)2; }else if ((_7238 == std::string ("statKey"))){ return (int)21; }else if ((_7238 == std::string ("sensitivityResFileName"))){ return (int)15; }else if ((_7238 == std::string ("solFilterXxLow"))){ return (int)18; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_intpnthotstart_value( const std::string & _7239){ if (false){ return (- (int)1); }else if ((_7239 == std::string ("primal"))){ return (int)1; }else if ((_7239 == std::string ("none"))){ return (int)0; }else if ((_7239 == std::string ("dual"))){ return (int)2; }else if ((_7239 == std::string ("primalDual"))){ return (int)3; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_uplo_value( const std::string & _7240){ if (false){ return (- (int)1); }else if ((_7240 == std::string ("lo"))){ return (int)0; }else if ((_7240 == std::string ("up"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_sensitivitytype_value( const std::string & _7241){ if (false){ return (- (int)1); }else if ((_7241 == std::string ("optimalPartition"))){ return (int)1; }else if ((_7241 == std::string ("basis"))){ return (int)0; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_accmode_value( const std::string & _7242){ if (false){ return (- (int)1); }else if ((_7242 == std::string ("var"))){ return (int)0; }else if ((_7242 == std::string ("con"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_problemitem_value( const std::string & _7243){ if (false){ return (- (int)1); }else if ((_7243 == std::string ("var"))){ return (int)0; }else if ((_7243 == std::string ("cone"))){ return (int)2; }else if ((_7243 == std::string ("con"))){ return (int)1; }else { return (- (int)1); }}int mosek::fusion::p_Parameters::string_to_solveform_value( const std::string & _7244){ if (false){ return (- (int)1); }else if ((_7244 == std::string ("primal"))){ return (int)1; }else if ((_7244 == std::string ("dual"))){ return (int)2; }else if ((_7244 == std::string ("free"))){ return (int)0; }else { return (- (int)1); }}void mosek::fusion::p_Parameters::destroy(){}void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }