# time: 2017-06-26 09:09:05 UTC
# mode: julia
	using JuPOT
# time: 2017-06-26 09:17:28 UTC
# mode: julia
	Pkg.dir()
# time: 2017-06-26 09:18:58 UTC
# mode: julia
	Pkg.status()
# time: 2017-06-27 10:42:27 UTC
# mode: julia
	Pkg.resolve()
# time: 2017-06-27 10:43:40 UTC
# mode: julia
	using JuPOT
# time: 2017-06-27 10:44:12 UTC
# mode: julia
	Pkg.resolve()
# time: 2017-06-27 10:44:40 UTC
# mode: julia
	using JuPOT
# time: 2017-06-27 10:45:35 UTC
# mode: julia
	name = "ARGS[1]"
# time: 2017-06-27 10:45:36 UTC
# mode: julia
	age = "ARGS[2]"
# time: 2017-06-27 10:45:36 UTC
# mode: julia
	cats = "ARGS[3]"
# time: 2017-06-27 10:45:36 UTC
# mode: julia
	message = "Hello still working " * name * " you are " * age * " and own " * cats * " cats!!"
# time: 2017-06-27 10:45:36 UTC
# mode: julia
	outfile = "output.txt"
# time: 2017-06-27 10:45:36 UTC
# mode: julia
	f = open(outfile, "w")
# time: 2017-06-27 10:45:36 UTC
# mode: julia
	println(f, message)
# time: 2017-06-27 10:45:39 UTC
# mode: julia
	close(f)
# time: 2017-06-27 10:46:28 UTC
# mode: julia
	using JuPOT
# time: 2017-06-27 10:46:28 UTC
# mode: julia
	name = "ARGS[1]"
# time: 2017-06-27 10:46:28 UTC
# mode: julia
	age = "ARGS[2]"
# time: 2017-06-27 10:46:28 UTC
# mode: julia
	cats = "ARGS[3]"
# time: 2017-06-27 10:46:28 UTC
# mode: julia
	message = "Hello after still working " * name * " you are " * age * " and own " * cats * " cats!!"
# time: 2017-06-27 10:46:28 UTC
# mode: julia
	outfile = "output.txt"
# time: 2017-06-27 10:46:28 UTC
# mode: julia
	f = open(outfile, "w")
# time: 2017-06-27 10:46:28 UTC
# mode: julia
	println(f, message)
# time: 2017-06-27 10:46:32 UTC
# mode: julia
	close(f)
# time: 2017-06-27 13:01:39 UTC
# mode: julia
	using JuPOT
# time: 2017-06-27 13:01:40 UTC
# mode: julia
	data = "-0.0073529411764706,-0.0025983667409057,-0.007055328629781,-0.0093457943925234,0.0026485054861899,0.0093914350112697,-0.0022371364653243,-0.012420022581859,-0.042504743833017,0.0093896713615024,-0.0067028764392367,0.0014597049966826,0.0010790451468417,-0.035215845606907,0.0035548554642599,0.0015652740280069,-0.0095424618718226,0.0089296230071629,-0.00023404255319152,0.0078003284348814,0.10526315789474,-0.10945273631841,0,0.059139784946236,-0.036269430051813,0.037234042553192,-0.12682926829268,-0.050279329608939,0.047904191616767,-0.11194029850746,0.0053835800807538,-0.013428226131328,0.0066885066885066,0.019329548526629,-0.010393071285809,0.003632449885645,0.0022678762006404,-0.021367521367521,0.018208995787471,0.014877789585547"
# time: 2017-06-27 13:01:41 UTC
# mode: julia
	d = float(split(data, ","))
# time: 2017-06-27 13:01:42 UTC
# mode: julia
	meanReturns =  "-0.0062084721960919,-0.0027306395393322,-0.018522988576837,0.0025199927970534"
# time: 2017-06-27 13:01:42 UTC
# mode: julia
	returns = parse.(split(meanReturns, ","))
# time: 2017-06-27 13:01:42 UTC
# mode: julia
	stocks = "SBRY,GOOG,DRYS,AIR"
# time: 2017-06-27 13:01:42 UTC
# mode: julia
	tickers = split(stocks, ",")
# time: 2017-06-27 13:01:43 UTC
# mode: julia
	m = 10
# time: 2017-06-27 13:01:45 UTC
# mode: julia
	n = length(tickers)
# time: 2017-06-27 13:02:07 UTC
# mode: julia
	matrix = reshape(d,m,n)
# time: 2017-06-27 13:02:07 UTC
# mode: julia
	covariance = cov(matrix) #covariance matrix of returns
# time: 2017-06-27 13:02:08 UTC
# mode: julia
	# Assets data structure containing, names, expected returns, covarariance
# time: 2017-06-27 13:02:08 UTC
# mode: julia
	assets = AssetsCollection(tickers, returns, covariance)
# time: 2017-06-27 13:02:10 UTC
# mode: julia
	#if minimum(returns) < 0
# time: 2017-06-27 13:02:10 UTC
# mode: julia
	#min = 0
# time: 2017-06-27 13:02:10 UTC
# mode: julia
	#else
# time: 2017-06-27 13:02:10 UTC
# mode: julia
	min = minimum(returns)
# time: 2017-06-27 13:02:10 UTC
# mode: julia
	#end
# time: 2017-06-27 13:02:28 UTC
# mode: julia
	max = maximum(returns)
# time: 2017-06-27 13:03:45 UTC
# mode: julia
	target_ret_test = collect(min:(max-min)/10:max)
# time: 2017-06-27 13:03:45 UTC
# mode: julia
	function efficientFrontierMVO(assets, target_ret_test)
	
	# Create the Arrays to be returned, and set them to be the length of the
	# target_ret_test from the input.
	n = length(target_ret_test)
	risk = Array(Float64,n)
	index = Array(Float64,n)
	
	for i in 1:n
	
	# Get the target return we want to test.
	target_ret = target_ret_test[i]
	
	# Setup and Optimize the SimpleMVO with the new Target Return.
	mvo = SimpleMVO(assets, target_ret; short_sale=true)
	result = optimize(mvo)
	
	# Risk is the Objective Value. Index the Target Return.
	risk[i] = result[1]
	index[i] = target_ret
	end
	
	# Return as a Tuple of the Arrays
	return risk, index
	end
# time: 2017-06-27 13:03:58 UTC
# mode: julia
	efd = efficientFrontierMVO(assets, target_ret_test)
# time: 2017-06-27 13:05:10 UTC
# mode: julia
	Pkg.build("Mosek")
# time: 2017-06-27 13:08:23 UTC
# mode: julia
	Pkg.add("Mosek")
# time: 2017-06-27 13:09:20 UTC
# mode: julia
	Pkg.update()
# time: 2017-06-27 13:49:21 UTC
# mode: julia
	using JuPOT
# time: 2017-06-27 13:49:22 UTC
# mode: julia
	data = "-0.0073529411764706,-0.0025983667409057,-0.007055328629781,-0.0093457943925234,0.0026485054861899,0.0093914350112697,-0.0022371364653243,-0.012420022581859,-0.042504743833017,0.0093896713615024,-0.0067028764392367,0.0014597049966826,0.0010790451468417,-0.035215845606907,0.0035548554642599,0.0015652740280069,-0.0095424618718226,0.0089296230071629,-0.00023404255319152,0.0078003284348814,0.10526315789474,-0.10945273631841,0,0.059139784946236,-0.036269430051813,0.037234042553192,-0.12682926829268,-0.050279329608939,0.047904191616767,-0.11194029850746,0.0053835800807538,-0.013428226131328,0.0066885066885066,0.019329548526629,-0.010393071285809,0.003632449885645,0.0022678762006404,-0.021367521367521,0.018208995787471,0.014877789585547"
# time: 2017-06-27 13:49:23 UTC
# mode: julia
	d = float(split(data, ","))
# time: 2017-06-27 13:49:23 UTC
# mode: julia
	meanReturns =  "-0.0062084721960919,-0.0027306395393322,-0.018522988576837,0.0025199927970534"
# time: 2017-06-27 13:49:23 UTC
# mode: julia
	returns = parse.(split(meanReturns, ","))
# time: 2017-06-27 13:49:24 UTC
# mode: julia
	stocks = "SBRY,GOOG,DRYS,AIR"
# time: 2017-06-27 13:49:24 UTC
# mode: julia
	tickers = split(stocks, ",")
# time: 2017-06-27 13:49:24 UTC
# mode: julia
	m = 10
# time: 2017-06-27 13:49:24 UTC
# mode: julia
	n = length(tickers)
# time: 2017-06-27 13:49:24 UTC
# mode: julia
	matrix = reshape(d,m,n)
# time: 2017-06-27 13:49:25 UTC
# mode: julia
	covariance = cov(matrix) #covariance matrix of returns
# time: 2017-06-27 13:49:26 UTC
# mode: julia
	# Assets data structure containing, names, expected returns, covarariance
# time: 2017-06-27 13:49:26 UTC
# mode: julia
	assets = AssetsCollection(tickers, returns, covariance)
# time: 2017-06-27 13:49:27 UTC
# mode: julia
	#if minimum(returns) < 0
# time: 2017-06-27 13:49:27 UTC
# mode: julia
	#min = 0
# time: 2017-06-27 13:49:27 UTC
# mode: julia
	#else
# time: 2017-06-27 13:49:27 UTC
# mode: julia
	min = minimum(returns)
# time: 2017-06-27 13:49:27 UTC
# mode: julia
	#end
# time: 2017-06-27 13:49:27 UTC
# mode: julia
	max = maximum(returns)
# time: 2017-06-27 13:49:27 UTC
# mode: julia
	target_ret_test = collect(min:(max-min)/10:max)
# time: 2017-06-27 13:49:28 UTC
# mode: julia
	function efficientFrontierMVO(assets, target_ret_test)
	
	# Create the Arrays to be returned, and set them to be the length of the
	# target_ret_test from the input.
	n = length(target_ret_test)
	risk = Array(Float64,n)
	index = Array(Float64,n)
	
	for i in 1:n
	
	# Get the target return we want to test.
	target_ret = target_ret_test[i]
	
	# Setup and Optimize the SimpleMVO with the new Target Return.
	mvo = SimpleMVO(assets, target_ret; short_sale=true)
	result = optimize(mvo)
	
	# Risk is the Objective Value. Index the Target Return.
	risk[i] = result[1]
	index[i] = target_ret
	end
	
	# Return as a Tuple of the Arrays
	return risk, index
	end
# time: 2017-06-27 13:49:28 UTC
# mode: julia
	efd = efficientFrontierMVO(assets, target_ret_test)
# time: 2017-06-27 13:49:36 UTC
# mode: julia
	             outfile = "output.txt"
# time: 2017-06-27 13:49:36 UTC
# mode: julia
	             f = open(outfile, "w")
# time: 2017-06-27 13:49:36 UTC
# mode: julia
	             println(f, efd)
# time: 2017-06-27 13:49:39 UTC
# mode: julia
	             close(f)
# time: 2017-06-27 13:53:24 UTC
# mode: julia
	Pkg.status()
# time: 2017-06-27 13:55:29 UTC
# mode: julia
	Pkg.rm("Mosek")
# time: 2017-06-27 13:57:40 UTC
# mode: julia
	Pkg.add("Mosek", v"0.6.0")
# time: 2017-06-27 14:41:49 UTC
# mode: julia
	Pkg.status()
# time: 2017-06-27 14:42:55 UTC
# mode: julia
	Pkg.rm("Mosek")
# time: 2017-06-27 14:43:51 UTC
# mode: julia
	Pkg.add("Mosek", v"0.5.1")
# time: 2017-06-27 14:46:47 UTC
# mode: julia
	Pkg.add("PyPlot")
# time: 2017-06-27 14:49:10 UTC
# mode: julia
	Pkg.status()
# time: 2017-06-27 14:50:41 UTC
# mode: julia
	Pkg.rm("PyPlot")
# time: 2017-06-27 14:51:09 UTC
# mode: julia
	Pkg.resolve()
# time: 2017-06-27 14:52:23 UTC
# mode: julia
	Pkg.rm("Mosek")
# time: 2017-06-27 14:52:43 UTC
# mode: julia
	Pkg.resolve()
# time: 2017-06-27 15:01:54 UTC
# mode: julia
	Pkg.available("Mosek")
# time: 2017-06-27 15:03:50 UTC
# mode: julia
	Pkg.add("Mosek", v"0.5.1")
# time: 2017-06-27 15:04:24 UTC
# mode: julia
	Pkg.status()
# time: 2017-06-27 15:06:49 UTC
# mode: julia
	Pkg.resolve()
# time: 2017-06-27 15:11:12 UTC
# mode: julia
	println(ENV["MOSEKBINDIR"])
# time: 2017-06-27 15:20:10 UTC
# mode: julia
	println(mskbindir)
# time: 2017-06-27 15:25:36 UTC
# mode: julia
	Pkg.status()
# time: 2017-06-27 15:40:17 UTC
# mode: julia
	Base.versioninfo()
# time: 2017-06-27 15:41:28 UTC
# mode: julia
	Base.versioninfo(verbose=true)
# time: 2017-06-27 15:41:48 UTC
# mode: julia
	Base.versioninfo(verbose="true")
# time: 2017-06-27 15:43:07 UTC
# mode: julia
	Base.versioninfo(verbose)
# time: 2017-06-27 15:43:20 UTC
# mode: julia
	Base.versioninfo("verbose")
# time: 2017-06-27 15:43:47 UTC
# mode: julia
	Base.versioninfo(true)
# time: 2017-06-27 17:40:23 UTC
# mode: julia
	ENV["MOSEKBINDIR"] = "/var/www/html/mvo/public/.julia/v.0.5/Mosek/deps/src/mosek/8/tools/platform/linux64x86/bin"
# time: 2017-06-27 17:40:55 UTC
# mode: julia
	Pkg.resolve()
# time: 2017-06-27 17:41:57 UTC
# mode: julia
	Pkg.build("Mosek")
# time: 2017-06-27 17:44:04 UTC
# mode: julia
	ENV["MOSEKBINDIR"] = "/var/www/html/mvo/public/.julia/v.0.5/Mosek/deps/src/mosek/8/tools/platform/linux64x86"
# time: 2017-06-27 17:44:11 UTC
# mode: julia
	Pkg.build("Mosek")
# time: 2017-06-27 17:44:44 UTC
# mode: julia
	Base.versioninfo(true)
# time: 2017-06-27 17:47:10 UTC
# mode: julia
	ENV["MOSEKBINDIR"] = "/var/www/html/mvo/public/.julia/v.0.5/Mosek/deps/src/mosek/8/tools/platform/linux64x86"
# time: 2017-06-27 17:47:35 UTC
# mode: julia
	println(ENV["MOSEKBINDIR"])
# time: 2017-06-27 17:48:26 UTC
# mode: julia
	include(joinpath(Pkg.dir("Mosek"),"deps","build.jl"))
# time: 2017-06-27 17:49:31 UTC
# mode: julia
	println(mskbindir)
# time: 2017-06-27 17:50:47 UTC
# mode: julia
	ENV["MOSEKBINDIR"] = "/var/www/html/mvo/public/.julia/v0.5/Mosek/deps/src"
# time: 2017-06-27 17:50:58 UTC
# mode: julia
	Pkg.build("Mosek")
# time: 2017-06-27 17:51:26 UTC
# mode: julia
	include(joinpath(Pkg.dir("Mosek"),"deps","build.jl"))
# time: 2017-06-27 17:52:55 UTC
# mode: julia
	println(mskbindir)
# time: 2017-06-27 17:53:04 UTC
# mode: julia
	println(ENV["MOSEKBINDIR"])
# time: 2017-06-27 17:53:11 UTC
# mode: julia
	include(joinpath(Pkg.dir("Mosek"),"deps","build.jl"))
# time: 2017-06-28 12:38:56 UTC
# mode: julia
	using JuPOT
# time: 2017-06-28 12:42:34 UTC
# mode: julia
	data = "-0.0073529411764706,-0.0025983667409057,-0.007055328629781,-0.0093457943925234,0.0026485054861899,0.0093914350112697,-0.0022371364653243,-0.012420022581859,-0.042504743833017,0.0093896713615024,-0.0067028764392367,0.0014597049966826,0.0010790451468417,-0.035215845606907,0.0035548554642599,0.0015652740280069,-0.0095424618718226,0.0089296230071629,-0.00023404255319152,0.0078003284348814,0.10526315789474,-0.10945273631841,0,0.059139784946236,-0.036269430051813,0.037234042553192,-0.12682926829268,-0.050279329608939,0.047904191616767,-0.11194029850746,0.0053835800807538,-0.013428226131328,0.0066885066885066,0.019329548526629,-0.010393071285809,0.003632449885645,0.0022678762006404,-0.021367521367521,0.018208995787471,0.014877789585547"
# time: 2017-06-28 12:42:35 UTC
# mode: julia
	d = float(split(data, ","))
# time: 2017-06-28 12:42:36 UTC
# mode: julia
	meanReturns =  "-0.0062084721960919,-0.0027306395393322,-0.018522988576837,0.0025199927970534"
# time: 2017-06-28 12:42:36 UTC
# mode: julia
	returns = parse.(split(meanReturns, ","))
# time: 2017-06-28 12:42:36 UTC
# mode: julia
	stocks = "SBRY,GOOG,DRYS,AIR"
# time: 2017-06-28 12:42:36 UTC
# mode: julia
	tickers = split(stocks, ",")
# time: 2017-06-28 12:42:36 UTC
# mode: julia
	m = 10
# time: 2017-06-28 12:42:36 UTC
# mode: julia
	n = length(tickers)
# time: 2017-06-28 12:42:36 UTC
# mode: julia
	matrix = reshape(d,m,n)
# time: 2017-06-28 12:42:37 UTC
# mode: julia
	covariance = cov(matrix) #covariance matrix of returns
# time: 2017-06-28 12:42:38 UTC
# mode: julia
	# Assets data structure containing, names, expected returns, covarariance
# time: 2017-06-28 12:42:38 UTC
# mode: julia
	assets = AssetsCollection(tickers, returns, covariance)
# time: 2017-06-28 12:42:39 UTC
# mode: julia
	#if minimum(returns) < 0
# time: 2017-06-28 12:42:39 UTC
# mode: julia
	#min = 0
# time: 2017-06-28 12:42:39 UTC
# mode: julia
	#else
# time: 2017-06-28 12:42:39 UTC
# mode: julia
	min = minimum(returns)
# time: 2017-06-28 12:42:39 UTC
# mode: julia
	#end
# time: 2017-06-28 12:42:39 UTC
# mode: julia
	max = maximum(returns)
# time: 2017-06-28 12:42:39 UTC
# mode: julia
	target_ret_test = collect(min:(max-min)/10:max)
# time: 2017-06-28 12:42:39 UTC
# mode: julia
	function efficientFrontierMVO(assets, target_ret_test)
	
	# Create the Arrays to be returned, and set them to be the length of the
	# target_ret_test from the input.
	n = length(target_ret_test)
	risk = Array(Float64,n)
	index = Array(Float64,n)
	
	for i in 1:n
	
	# Get the target return we want to test.
	target_ret = target_ret_test[i]
	
	# Setup and Optimize the SimpleMVO with the new Target Return.
	mvo = SimpleMVO(assets, target_ret; short_sale=true)
	result = optimize(mvo)
	
	# Risk is the Objective Value. Index the Target Return.
	risk[i] = result[1]
	index[i] = target_ret
	end
	
	# Return as a Tuple of the Arrays
	return risk, index
	end
# time: 2017-06-28 12:42:39 UTC
# mode: julia
	efd = efficientFrontierMVO(assets, target_ret_test)
# time: 2017-06-28 12:42:51 UTC
# mode: julia
	             outfile = "output.txt"
# time: 2017-06-28 12:42:51 UTC
# mode: julia
	             f = open(outfile, "w")
# time: 2017-06-28 12:42:51 UTC
# mode: julia
	             println(f, efd)
# time: 2017-06-28 12:42:54 UTC
# mode: julia
	             close(f)
# time: 2017-07-18 16:55:35 UTC
# mode: julia
	using JuPOT
# time: 2017-07-18 16:55:36 UTC
# mode: julia
	data = "-0.0073529411764706,-0.0025983667409057,-0.007055328629781,-0.0093457943925234,0.0026485054861899,0.0093914350112697,-0.0022371364653243,-0.012420022581859,-0.042504743833017,0.0093896713615024,-0.0067028764392367,0.0014597049966826,0.0010790451468417,-0.035215845606907,0.0035548554642599,0.0015652740280069,-0.0095424618718226,0.0089296230071629,-0.00023404255319152,0.0078003284348814,0.10526315789474,-0.10945273631841,0,0.059139784946236,-0.036269430051813,0.037234042553192,-0.12682926829268,-0.050279329608939,0.047904191616767,-0.11194029850746,0.0053835800807538,-0.013428226131328,0.0066885066885066,0.019329548526629,-0.010393071285809,0.003632449885645,0.0022678762006404,-0.021367521367521,0.018208995787471,0.014877789585547"
# time: 2017-07-18 16:55:36 UTC
# mode: julia
	d = float(split(data, ","))
# time: 2017-07-18 16:55:37 UTC
# mode: julia
	meanReturns =  "-0.0062084721960919,-0.0027306395393322,-0.018522988576837,0.0025199927970534"
# time: 2017-07-18 16:55:37 UTC
# mode: julia
	returns = parse.(split(meanReturns, ","))
# time: 2017-07-18 16:55:37 UTC
# mode: julia
	stocks = "SBRY,GOOG,DRYS,AIR"
# time: 2017-07-18 16:55:37 UTC
# mode: julia
	tickers = split(stocks, ",")
# time: 2017-07-18 16:55:38 UTC
# mode: julia
	m = 10
# time: 2017-07-18 16:55:40 UTC
# mode: julia
	n = length(tickers)
# time: 2017-07-18 16:56:23 UTC
# mode: julia
	matrix = reshape(d,m,n)
# time: 2017-07-18 16:56:23 UTC
# mode: julia
	             covariance = cov(matrix) #covariance matrix of returns
# time: 2017-07-18 16:56:24 UTC
# mode: julia
	             # Assets data structure containing, names, expected returns, covarariance
# time: 2017-07-18 16:56:24 UTC
# mode: julia
	             assets = AssetsCollection(tickers, returns, covariance)
# time: 2017-07-18 16:56:25 UTC
# mode: julia
	             if minimum(returns) < 0
	             min = 0
	             else
	             min = minimum(returns)
	             end
# time: 2017-07-18 16:56:25 UTC
# mode: julia
	             max = maximum(returns)
# time: 2017-07-18 16:56:28 UTC
# mode: julia
	             target_ret_test = collect(min:(max-min)/10:max)
# time: 2017-07-18 16:57:06 UTC
# mode: julia
	function efficientFrontierMVO(assets, target_ret_test)
	
	                 # Create the Arrays to be returned, and set them to be the length of the
	                 # target_ret_test from the input.
	                 n = length(target_ret_test)
	                 risk = Array(Float64,n)
	                 index = Array(Float64,n)
	
	                 for i in 1:n
	                     # Get the target return we want to test.
	                     target_ret = target_ret_test[i]
	
	                     # Setup and Optimize the SimpleMVO with the new Target Return.
	                     mvo = SimpleMVO(assets, target_ret; short_sale=false)
	                     result = optimize(mvo)
	
	                     # Risk is the Objective Value. Index the Target Return.
	                     risk[i] = result[1]
	                     index[i] = target_ret
	                 end
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	using JuPOT
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	data = "-0.0073529411764706,-0.0025983667409057,-0.007055328629781,-0.0093457943925234,0.0026485054861899,0.0093914350112697,-0.0022371364653243,-0.012420022581859,-0.042504743833017,0.0093896713615024,-0.0067028764392367,0.0014597049966826,0.0010790451468417,-0.035215845606907,0.0035548554642599,0.0015652740280069,-0.0095424618718226,0.0089296230071629,-0.00023404255319152,0.0078003284348814,0.10526315789474,-0.10945273631841,0,0.059139784946236,-0.036269430051813,0.037234042553192,-0.12682926829268,-0.050279329608939,0.047904191616767,-0.11194029850746,0.0053835800807538,-0.013428226131328,0.0066885066885066,0.019329548526629,-0.010393071285809,0.003632449885645,0.0022678762006404,-0.021367521367521,0.018208995787471,0.014877789585547"
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	d = float(split(data, ","))
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	meanReturns =  "-0.0062084721960919,-0.0027306395393322,-0.018522988576837,0.0025199927970534"
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	returns = parse.(split(meanReturns, ","))
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	stocks = "SBRY,GOOG,DRYS,AIR"
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	tickers = split(stocks, ",")
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	m = 10
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	n = length(tickers)
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	matrix = reshape(d,m,n)
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	covariance = cov(matrix) #covariance matrix of returns
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	# Assets data structure containing, names, expected returns, covarariance
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	assets = AssetsCollection(tickers, returns, covariance)
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	             if minimum(returns) < 0
	             min = 0
	             else
	             min = minimum(returns)
	             end
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	             max = maximum(returns)
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	             target_ret_test = collect(min:(max-min)/10:max)
# time: 2017-07-18 17:01:40 UTC
# mode: julia
	             function efficientFrontierMVO(assets, target_ret_test)
	
	                 
	                 n = length(target_ret_test)
	                 risk = Array(Float64,n)
	                 index = Array(Float64,n)
	
	                 for i in 1:n
	                     # Get the target return we want to test.
	                     target_ret = target_ret_test[i]
	
	                     # Setup and Optimize the SimpleMVO with the new Target Return.
	                     mvo = SimpleMVO(assets, target_ret; short_sale=false)
	                     result = optimize(mvo)
	
	                     # Risk is the Objective Value. Index the Target Return.
	                     risk[i] = result[1]
	                     index[i] = target_ret
	                 end
	
	                 
	                 # Return as a Tuple of the Arrays
	                  return risk, index
	             end
# time: 2017-07-18 17:01:56 UTC
# mode: julia
	             efd = efficientFrontierMVO(assets, target_ret_test)
# time: 2017-07-18 17:02:16 UTC
# mode: julia
	outfile = "output.txt"
# time: 2017-07-18 17:02:16 UTC
# mode: julia
	             f = open(outfile, "w")
# time: 2017-07-18 17:02:16 UTC
# mode: julia
	             println(efd)
# time: 2017-07-18 17:02:19 UTC
# mode: julia
	             close(f)
# time: 2017-07-18 17:35:52 UTC
# mode: julia
	outfile = "output.txt"
# time: 2017-07-18 17:35:52 UTC
# mode: julia
	             f = open(outfile, "w")
# time: 2017-07-18 17:35:52 UTC
# mode: julia
	             println(f, efd)
# time: 2017-07-18 17:35:57 UTC
# mode: julia
	             close(f)
